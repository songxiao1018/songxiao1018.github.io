{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/mobile.styl","path":"css/mobile.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/alipay.jpg","path":"img/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/article-list-background.jpeg","path":"img/article-list-background.jpeg","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/gov.png","path":"img/gov.png","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/school-book.png","path":"img/school-book.png","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/brown-papersq.png","path":"img/brown-papersq.png","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/weixin.jpg","path":"img/weixin.jpg","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/gitalk.js","path":"js/gitalk.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/gitment.js","path":"js/gitment.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/iconfont.js","path":"js/iconfont.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/jquery.pjax.js","path":"js/jquery.pjax.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/titleTip.js","path":"js/titleTip.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.svg","path":"css/fonts/icomoon.svg","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.eot","path":"css/fonts/icomoon.eot","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.ttf","path":"css/fonts/icomoon.ttf","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.woff","path":"css/fonts/icomoon.woff","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.eot","path":"css/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.ttf","path":"css/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.svg","path":"css/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff","path":"css/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff2","path":"css/fonts/iconfont.woff2","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/selection.json","path":"css/fonts/selection.json","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/atom-dark.styl","path":"css/hl_theme/atom-dark.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/atom-light.styl","path":"css/hl_theme/atom-light.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/darcula.styl","path":"css/hl_theme/darcula.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/brown-paper.styl","path":"css/hl_theme/brown-paper.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/github-gist.styl","path":"css/hl_theme/github-gist.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-dark.styl","path":"css/hl_theme/gruvbox-dark.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/github.styl","path":"css/hl_theme/github.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-dark.styl","path":"css/hl_theme/kimbie-dark.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-light.styl","path":"css/hl_theme/gruvbox-light.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/railscasts.styl","path":"css/hl_theme/railscasts.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-light.styl","path":"css/hl_theme/kimbie-light.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/rainbow.styl","path":"css/hl_theme/rainbow.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/school-book.styl","path":"css/hl_theme/school-book.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/sublime.styl","path":"css/hl_theme/sublime.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/sunburst.styl","path":"css/hl_theme/sunburst.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/zenbum.styl","path":"css/hl_theme/zenbum.styl","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/0-colour.md","hash":"d4d8f82cf3500b77032d4b4eb9d2a7211ecfab39","modified":1690121954201},{"_id":"source/_posts/0-files.md","hash":"505ba7a0811df4cdc3db1b7817825a2e6a629337","modified":1690121953187},{"_id":"source/_posts/C-Basic.md","hash":"a1c7e8bb0280ca7b56bde4db50c41260cfac62c8","modified":1690121952639},{"_id":"source/_posts/Screamcut-Snipaste.md","hash":"fca3aedd7e5aa60b54bf072979a7f520c4e429de","modified":1690121952733},{"_id":"source/_posts/2023summer.md","hash":"123bf8ce188c8fbfce352676a4425a6b4220674d","modified":1690121952312},{"_id":"source/_posts/0-hi.md","hash":"2a6b23247ceb51cb88cdba20a3dcc5aed42f36ec","modified":1690121953675},{"_id":"source/_posts/JAVA-HelloWorld.md","hash":"70492855a45fd37cfd0e18e44aa05fb9eb5cd803","modified":1690121952670},{"_id":"source/_posts/arduino-RFID-RC522.md","hash":"5caeea027c2c66d0437c456d26d4b9a057fe4090","modified":1690121953067},{"_id":"source/_posts/arduino-Universal-Remote-Control.md","hash":"c088a72f144f0895e3fc0ad676ffa62b04a53982","modified":1690121950854},{"_id":"source/_posts/blander-quickmap.md","hash":"99b263a5508821425abd21d8f05ed0813533b5d1","modified":1690121953382},{"_id":"source/_posts/arduino-nano-IRctoril.md","hash":"92bf785325db7758793cdf5ad72902639e7b31ee","modified":1690121953304},{"_id":"source/_posts/bluetooth-robbottoukit.md","hash":"9230a8912044dc964879fda4bebc5e323fdb5417","modified":1690121950914},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1690121952918},{"_id":"source/_posts/hexo-document.md","hash":"43d5d15da883d9078820f3ebd85cf172e0a68c10","modified":1690121951095},{"_id":"source/_posts/learn-jiaoanmuban.md","hash":"d0c7cafc1419f4d5a4ed10cdf6f6af5c40cfca79","modified":1690121953992},{"_id":"source/_posts/linux-git.md","hash":"327d38acdb15e4525791512bd7f96b55cb2d3965","modified":1690121952244},{"_id":"source/_posts/linux-mv.md","hash":"cc85098b44fe342bfd1a3659921395a81d731a5c","modified":1690121951700},{"_id":"source/_posts/linux-jincheng.md","hash":"e985380f5720875b36ac6b7a38aad422d2439f4a","modified":1690121952576},{"_id":"source/_posts/linux-kaijiqidong.md","hash":"8a19431d323b91118439505df6056211de9058c3","modified":1690121952478},{"_id":"source/_posts/linux-pi-HC-SR04.md","hash":"f63c866734c3654f1afa606ebe2438eedd5066af","modified":1690121953929},{"_id":"source/_posts/linux-pi-MPU6050.md","hash":"08a1fbfc9ba9c8c9c0aa272e38db87ad4c9539e6","modified":1690121954340},{"_id":"source/_posts/linux-python-yolo5.md","hash":"4cce9226512fea43d6adc18b2cad82dedc131d47","modified":1690121951777},{"_id":"source/_posts/linux-pi-SSD1309.md","hash":"c1fc3e691b685575c32d7dd0fb55b88a04bf1b85","modified":1690121954399},{"_id":"source/_posts/linux-sh.md","hash":"254cdbdbcb29936a93dae9a45f478ec0463e728c","modified":1690121952170},{"_id":"source/_posts/linux-qidong.md","hash":"b9c5c364f2f94d09291a2c77e0f8bcd85f8eb5e2","modified":1690121953676},{"_id":"source/_posts/majiadian.md","hash":"4ba1527e2bd91a0e115eaa27c78f35e74b0d6ae6","modified":1690121953585},{"_id":"source/_posts/linux-zip-tar.md","hash":"1779eab961191292346e7700a16d31032154dbee","modified":1690121951545},{"_id":"source/_posts/micro-bit-eat-ben-xiang-xi.md","hash":"5377e25add29ba6244339072868436f5a2ac2603","modified":1690121951275},{"_id":"source/_posts/mc-server-news.md","hash":"d516e3560800a259ab19b29c8ac78dcdee9154a9","modified":1690121951387},{"_id":"source/_posts/micro-bit-eat-ben.md","hash":"f9657fb7315aecfdd8f4015d30d01532639088af","modified":1690121952781},{"_id":"source/_posts/micro-bit-in-car.md","hash":"111dfea283cccb6b07248c5397875d8c6a50e142","modified":1690121951467},{"_id":"source/_posts/micro-bit-out-car.md","hash":"f5bfb49de6d847f4272463a7f390a83afac45eb0","modified":1690121951897},{"_id":"source/_posts/minecraft-start.md","hash":"738bdd0043fdba9e8f39fdda3ba25ab4d4154229","modified":1690121952090},{"_id":"source/_posts/nextcloud.md","hash":"3b0946c09f9d2ae8e86c46c9e790c2ed395d480c","modified":1690121953529},{"_id":"source/_posts/nginx-ip.md","hash":"17a28fdc8ab1197605582e2cb942f894e7991f34","modified":1690121953130},{"_id":"source/_posts/nginx-new-ssl.md","hash":"4dfabab9a2f8a4e468bed54c33ff8b7829b5289c","modified":1690121952977},{"_id":"source/_posts/ngp.md","hash":"9b0f867e1441acce53e819dd838bb4be218e8bf7","modified":1690121953245},{"_id":"source/_posts/novelai.md","hash":"8953d86f500e138e122367630cfb6621f5c10837","modified":1690121952858},{"_id":"source/_posts/pi-bluetooth.md","hash":"c37538c42929ecab0f7e355106d2c605fad8912a","modified":1690121951037},{"_id":"source/_posts/pi.md","hash":"33c33a69bdd5ebafbb27c4c8b190f40c8c46de32","modified":1690121952445},{"_id":"source/_posts/python-IMAP.md","hash":"997c3327b24312fd951bf68ce6384c44c7ed5854","modified":1690121954086},{"_id":"source/_posts/python-draw-square.md","hash":"93d3a112fa1bd8345a692580ced51eb22cb3cf51","modified":1690121954036},{"_id":"source/_posts/python-install.md","hash":"f3cf3420f4185597632afa1c6786012daa2e8da3","modified":1690121951823},{"_id":"source/_posts/python-opencv-img.md","hash":"ee25a64086543c8d1baf2926f2ecef98e13d55b2","modified":1690121951344},{"_id":"source/_posts/python-read.md","hash":"d56481e227f2aedfd9292759b651d7fbe067cd09","modified":1690121954298},{"_id":"source/_posts/python-str.md","hash":"5669a623f5299d9425534393965f05e7dfb8905f","modified":1690121952345},{"_id":"source/_posts/sh-wenjian.md","hash":"538be74e6d778d7db4d61ad753978bd32590055e","modified":1690121952003},{"_id":"source/_posts/steam-linhangbei-renchexietong.md","hash":"5178c93176e74959de81a8514a6ccee1b6f23f38","modified":1690121953442},{"_id":"source/_posts/steam-lihui-1.md","hash":"ccf123159699d16f7ebf1aaa8a39f09d7f45e974","modified":1690121953766},{"_id":"source/_posts/steam-tuiwen-1.md","hash":"a4b152bf87e69616681b81762460a6d56a5cebfa","modified":1690121950964},{"_id":"source/_posts/vpn-school.md","hash":"f3567dca7dcdc85348a31a50c7ebb6bfc1a6a227","modified":1690121953811},{"_id":"source/_posts/vnc-peizhi.md","hash":"4d01df23408cc5c40ae393d744b3f05acbe02efc","modified":1690121951624},{"_id":"source/_posts/windows-keyboard.md","hash":"ca8b75a74867154251ecc2e830338609b999a974","modified":1690121954143},{"_id":"source/_posts/zhongxuejiaoyujichu.md","hash":"d757e7fa2058eddd983cdade357f1cad10ed698d","modified":1690121951972},{"_id":"source/_posts/zhongxueshenrenzhi.md","hash":"c626060cf8d3434a99426dbfed54f935d4a7726a","modified":1690121953885},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1690354312414},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"1a9b279e6dd29fd19245f913f0c4a316ffaa62db","modified":1690354312334},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"4bf95d52f77edf811f23f6d264a7493311a8d078","modified":1690354312328},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1690354312421},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1690354312427},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1690354312418},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1690354312431},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1690354311194},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1690354312434},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1690354312436},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1690354312439},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1690354312449},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1690354312443},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1690354312454},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1690354312457},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1690354312460},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1690354312446},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1690354312462},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1690354312465},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1690354312467},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1690354312469},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1690354312472},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1690354312474},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1690354312478},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1690354312481},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1690354312483},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1690354312451},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1690354312485},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1690354312488},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1690354312491},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1690354312493},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1690354312497},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1690354312499},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1690354312505},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1690354312502},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1690354312508},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1690354311723},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1690354311817},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1690354311950},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1690354311963},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1690354312003},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1690354312013},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1690354312059},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1690354312271},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"56597e951203dd662a6d2c817c7c4f1c920d4a25","modified":1690354311748},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"377d257d5d16e0158a4405c72401517b074fd7ff","modified":1690354311559},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1690354311634},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1690354311597},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1690354311885},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1690354311852},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f05bced793b0314d4f2ef0c993b3a51d0b7d203a","modified":1690354311924},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":1690354311939},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1690354311901},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1690354311976},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1690354311687},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1690354312032},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1690354311797},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1690354312024},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1690354312051},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1690354312067},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1690354312343},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":1690354312410},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":1690354312352},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1690354311339},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1690354312321},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1690354311777},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1690354311833},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1690354311990},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1690354311868},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1690354312041},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1690354312074},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"2d1f6f79ebf9cb55ebdb3865a2474437eb2b37c6","modified":1690354312366},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1690354312362},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":1690354312381},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1690354312368},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1690354312370},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":1690354312387},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1690354312396},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1690354312399},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1690354312403},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1690354312406},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1690354312376},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1690354312391},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1690354312316},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1690354312298},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1690354312264},{"_id":"public/2023/07/26/hello-world/index.html","hash":"42518a1df0337c38942cf55a8e2fd1dd01bfc65e","modified":1690354616403},{"_id":"public/2023/05/31/linux-python-yolo5/index.html","hash":"79d44b8eee84927f4915c1f57fba07c8020e0c1d","modified":1690354616403},{"_id":"public/2023/05/31/linux-pi-SSD1309/index.html","hash":"aeaea2749d22e91de64d10c3eb8ae946b12ebe39","modified":1690354616403},{"_id":"public/2023/05/23/2023summer/index.html","hash":"3650168171beb66f7cbbd798d631e98f73c6dcab","modified":1690354616403},{"_id":"public/2023/04/02/C-Basic/index.html","hash":"cf428d9dc764118cc97ad627de92fbe89835aa8a","modified":1690354616403},{"_id":"public/2023/03/02/zhongxuejiaoyujichu/index.html","hash":"ef9ae3f738c80c3936c4902ae727ad226d729f35","modified":1690354616403},{"_id":"public/2023/01/26/Screamcut-Snipaste/index.html","hash":"3dbcb7f8a0b3ec322119fba1ceef4d688c384f22","modified":1690354616403},{"_id":"public/2023/01/03/mc-server-news/index.html","hash":"1da7db43320267300effd9edc4cf960cfb79be9e","modified":1690354616403},{"_id":"public/2022/11/26/pi-bluetooth/index.html","hash":"813a82deacb26273a2a1dd9cdb17b84d376932af","modified":1690354616403},{"_id":"public/2022/11/25/python-opencv-img/index.html","hash":"b8e20f4aa87f8447ead32f721dcff911e424ad1e","modified":1690354616403},{"_id":"public/2022/11/24/bluetooth-robbottoukit/index.html","hash":"2ba98c8b825b76cf54632718dd8e0943ab6c461c","modified":1690354616403},{"_id":"public/2022/11/23/pi/index.html","hash":"e1b1aadf65d0e3a9f89d683d0342728b6b3cb65a","modified":1690354616403},{"_id":"public/2022/11/07/steam-lihui-1/index.html","hash":"90f01fbd08a7bdbbbe5e15bbbed11a52c87deb66","modified":1690354616403},{"_id":"public/2022/10/26/learn-jiaoanmuban/index.html","hash":"c6a94579d4c250746dd0785c435d16355a7c822e","modified":1690354616403},{"_id":"public/2022/10/24/0-hi/index.html","hash":"f35e8b5d795b82d0459aeaee10f663ab9a068407","modified":1690354616403},{"_id":"public/2022/10/19/linux-qidong/index.html","hash":"d7a532033009002a97c601ca887e035e77841669","modified":1690354616403},{"_id":"public/2022/10/14/nginx-new-ssl/index.html","hash":"5c4fcda7978cc92266b415471ee1e3d524717a2b","modified":1690354616403},{"_id":"public/2022/09/10/JAVA-HelloWorld/index.html","hash":"f8c2c235d017ede48ead5be60c303239afca27e5","modified":1690354616403},{"_id":"public/1000/12/16/0-files/index.html","hash":"378c5e4a6229dd711d1896d84cacebf09f9c664b","modified":1690354616403},{"_id":"public/archives/page/6/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/archives/1000/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/archives/1000/12/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/archives/2022/page/4/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/archives/2022/07/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/archives/2022/08/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/archives/2022/09/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/archives/2022/10/page/2/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/archives/2022/12/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/archives/2023/page/2/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/archives/2023/01/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/archives/2023/02/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/archives/2023/03/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/archives/2023/04/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/archives/2023/05/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/archives/2023/07/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/categories/社团/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/categories/学习/page/2/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/categories/开发/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/categories/系统/page/2/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/categories/分类/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/categories/Minecraft/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/tags/colour/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/tags/STEAM/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/tags/java/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/tags/arduino/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/tags/CAD/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/tags/Blander/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/tags/hexo/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/tags/learn/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/tags/标签/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/tags/树莓派/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/tags/SSD1309/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/tags/micro-bit/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/tags/mc/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/tags/windows/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/tags/nextcloud/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/tags/nginx/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/tags/Node-js/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/tags/Python/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/tags/Git/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/tags/Novelai/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/tags/python/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/tags/STEAM社/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/tags/领航杯/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/tags/VPN/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/tags/网络/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/tags/VNC/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/tags/GUI/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/tags/学习/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/2023/05/31/linux-pi-HC-SR04/index.html","hash":"448b4abb86c332194a7f7f2d289861d554d5a9a2","modified":1690354616403},{"_id":"public/2023/05/31/linux-pi-MPU6050/index.html","hash":"fbd742b55cdff3b0163cc88ea8ee63fa3e3cf1d8","modified":1690354616403},{"_id":"public/2023/04/09/majiadian/index.html","hash":"ceb1a1b762878b4bc2b7d1b602825b48ca49809e","modified":1690354616403},{"_id":"public/2023/03/12/ngp/index.html","hash":"70a434034dd52a7af71be8fff1c806f122661e1c","modified":1690354616403},{"_id":"public/2023/02/28/zhongxueshenrenzhi/index.html","hash":"97be17048b9f44460419eb25bf78818ad341c197","modified":1690354616403},{"_id":"public/2023/02/14/arduino-nano-IRctoril/index.html","hash":"67d0fe2984b6dfce556840c8c4cdc87377678f2d","modified":1690354616403},{"_id":"public/2023/01/17/blander-quickmap/index.html","hash":"0ba72a69495603ecf1a99d254ff0e22867d11e5a","modified":1690354616403},{"_id":"public/2023/01/10/arduino-Universal-Remote-Control/index.html","hash":"39d0f909c050115755a6e3c4a100adcd63f69dad","modified":1690354616403},{"_id":"public/2023/01/06/arduino-RFID-RC522/index.html","hash":"17373f6c6ac81fe13e68143df8e0662c234afe22","modified":1690354616403},{"_id":"public/2022/12/31/linux-mv/index.html","hash":"9b8425d9bc01202baca6ead42a62d84d883211cb","modified":1690354616403},{"_id":"public/2022/12/31/linux-zip-tar/index.html","hash":"43d647a19208acf7df03ebbb47e1981f27d4ad7a","modified":1690354616403},{"_id":"public/2022/12/21/nginx-ip/index.html","hash":"59c20a5570e71423b0e750c0d3c3c407a44d6414","modified":1690354616403},{"_id":"public/2022/11/07/vpn-school/index.html","hash":"8859308030680b2035497a3be267578e8665f3ee","modified":1690354616403},{"_id":"public/2022/11/06/windows-keyboard/index.html","hash":"d76f9d24a4e0e19dcb7c409958fc7fe9dfb6a214","modified":1690354616403},{"_id":"public/2022/11/01/steam-linhangbei-renchexietong/index.html","hash":"34cd3bd421a76248320be2adc4614e6e538dfbc3","modified":1690354616403},{"_id":"public/2022/11/01/steam-tuiwen-1/index.html","hash":"fbde209ee1114e41ac3d7bb5476ba1787ce34e8e","modified":1690354616403},{"_id":"public/2022/11/01/0-colour/index.html","hash":"a125f5bdefedb44c9d6ccf1994c331cf51c32f72","modified":1690354616403},{"_id":"public/2022/10/24/nextcloud/index.html","hash":"e105a2c2e73719491bf1809a8ac2dd64f98c0737","modified":1690354616403},{"_id":"public/2022/10/19/linux-sh/index.html","hash":"aeb080e211734dd6b021c52bfbf7d24f8f3c6ec0","modified":1690354616403},{"_id":"public/2022/10/19/linux-git/index.html","hash":"84f9bd012b5d51f150edc47953843dba946e577b","modified":1690354616403},{"_id":"public/2022/10/19/linux-jincheng/index.html","hash":"d8482d1ced84a65b9d711c9acf5e6277fa92daef","modified":1690354616403},{"_id":"public/2022/10/19/sh-wenjian/index.html","hash":"81c1fb42b11ab223cf820cda84220c1c844f5756","modified":1690354616403},{"_id":"public/2022/10/19/linux-kaijiqidong/index.html","hash":"a588f4526488ef4ed3280c7fc60c59a3e7c74a72","modified":1690354616403},{"_id":"public/2022/10/18/minecraft-start/index.html","hash":"853ff3e00801c88e9938e62a688f415bd2bc7016","modified":1690354616403},{"_id":"public/2022/10/18/vnc-peizhi/index.html","hash":"9567a36c010ce8cb2184a0986e6d148c903340aa","modified":1690354616403},{"_id":"public/2022/10/14/python-IMAP/index.html","hash":"95e62d8a752f89a6ed50f1543f574fedb09f7e9b","modified":1690354616403},{"_id":"public/2022/10/14/python-str/index.html","hash":"037d0c3d16c7aba92fbcaa70bbc2a8a8618da615","modified":1690354616403},{"_id":"public/2022/10/14/python-read/index.html","hash":"4ab28d1d71d7671d8a80f811fefea6f6dbfd5a16","modified":1690354616403},{"_id":"public/2022/10/09/novelai/index.html","hash":"a1514b8628bf89c57c83e045a5f91c8cddc24d7a","modified":1690354616403},{"_id":"public/2022/08/19/hexo-document/index.html","hash":"282c8a0c2237c0bda65c2803ccc1d450f4168366","modified":1690354616403},{"_id":"public/2022/08/18/python-install/index.html","hash":"c81a26a5b21e7ba19b3a93d8a72b23be2e576190","modified":1690354616403},{"_id":"public/2022/07/30/python-draw-square/index.html","hash":"96d47cf7ca2ea0350b22f920657bb1ce6abe4469","modified":1690354616403},{"_id":"public/2022/07/29/micro-bit-eat-ben-xiang-xi/index.html","hash":"5bbcfa8b377b4c64f24d81c9a932a37c7fed4f71","modified":1690354616403},{"_id":"public/2022/07/29/micro-bit-eat-ben/index.html","hash":"80b523dfd98f35c6d9d39be411d3bd7bbe6b42b4","modified":1690354616403},{"_id":"public/2022/07/28/micro-bit-in-car/index.html","hash":"c8845d777d81f8a54e6f803acbf0edcf25d58ab9","modified":1690354616403},{"_id":"public/2022/07/27/micro-bit-out-car/index.html","hash":"a3834e721d182cac9253989b60e064d33781286c","modified":1690354616403},{"_id":"public/archives/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/archives/page/2/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/archives/page/3/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/archives/page/5/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/archives/page/4/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/archives/2022/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/archives/2022/page/2/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/archives/2022/page/3/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/archives/2022/10/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/archives/2022/11/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/archives/2023/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/categories/学习/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/categories/系统/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/page/2/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/page/3/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/page/4/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/page/5/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/page/6/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/tags/linux/index.html","hash":"1ca83e13a1417b1f6f48b565b04c924dae08cb30","modified":1690354616403},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1690354392416},{"_id":"public/css/style.css","hash":"c7adbb2af0e65ecd85f8c06851f34d377d4b834c","modified":1690354616403},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1690354392416},{"_id":"public/js/script.js","hash":"61e8ba1228d8441144fa7a655aa02ec546bd1f02","modified":1690354616403},{"_id":"public/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1690354392416},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1690354392416},{"_id":"themes/3-hexo/.DS_Store","hash":"0770f9d42bfdd8d420de48fed463015e001cf579","modified":1690354528589},{"_id":"themes/3-hexo/.gitignore","hash":"46eca80fe689a00cbe4d015c094702af54119021","modified":1690354528593},{"_id":"themes/3-hexo/LICENSE","hash":"b04140c5f682db2b300428f97bb164fd7f5f18bd","modified":1690354528593},{"_id":"themes/3-hexo/_config.yml","hash":"fae7a164ad8704778eeaa3eceac83ccbc7a41289","modified":1690354528595},{"_id":"themes/3-hexo/languages/en.yml","hash":"616e02c035c86033ab4a97c5ae9e0a9e5f0b8ea3","modified":1690354528596},{"_id":"themes/3-hexo/README.md","hash":"19b8cfe6690c28427492f342e74dda5ed49a1664","modified":1690354528594},{"_id":"themes/3-hexo/languages/zh-CN.yml","hash":"83633d45420c96dfac41333aeac3f3616dca5286","modified":1690354528597},{"_id":"themes/3-hexo/layout/indexs.md","hash":"8fab57dfc5c733b599d57dea6934a91e0fde0974","modified":1690354528617},{"_id":"themes/3-hexo/layout/index.ejs","hash":"1c185288c2925a652d577965626718e12df07f65","modified":1690354528616},{"_id":"themes/3-hexo/layout/post.ejs","hash":"a0eaba41e7ec9db5843af482470a45531049b457","modified":1690354528617},{"_id":"themes/3-hexo/source/.DS_Store","hash":"fdcc907c46e093a14b153c5dc8c038461997ed3c","modified":1690354528618},{"_id":"themes/3-hexo/.github/ISSUE_TEMPLATE/bug_report.md","hash":"3df61acb19a16f12d8ec60cc5e353147a0a56d39","modified":1690354528591},{"_id":"themes/3-hexo/layout/_partial/article.ejs","hash":"9e5afcc26f47f93c165072b0a2b5cbf72efb7ef9","modified":1690354528598},{"_id":"themes/3-hexo/layout/_partial/article_copyright.ejs","hash":"9e1cdec49d5b9b44399348d96ecd7331f3ee7d85","modified":1690354528599},{"_id":"themes/3-hexo/layout/_partial/comment.ejs","hash":"d18f94e04ef0cf7abb432a8e707ccb3abc7fe435","modified":1690354528600},{"_id":"themes/3-hexo/layout/_partial/copyright.ejs","hash":"4c09f47e899fe36bfe36d92b12996219c2b5f622","modified":1690354528604},{"_id":"themes/3-hexo/layout/_partial/footer.ejs","hash":"9087af9647a87c3fa9ef87632de5427ba4abe9c4","modified":1690354528607},{"_id":"themes/3-hexo/layout/_partial/dashang.ejs","hash":"b2a01cc1f0326965f0a186ce3c9b3c991fd4e2c9","modified":1690354528606},{"_id":"themes/3-hexo/layout/_partial/friends.ejs","hash":"e6dd90be668195016d6e1c51a6baefb50676e6ab","modified":1690354528608},{"_id":"themes/3-hexo/layout/_partial/header.ejs","hash":"233c7238136b9cc2c30fd4e66b113d8fd1c1726b","modified":1690354528610},{"_id":"themes/3-hexo/layout/_partial/mathjax.ejs","hash":"e2be0e37f3d48e63e65a47d819bfb800b9aa3784","modified":1690354528611},{"_id":"themes/3-hexo/layout/_partial/full-toc.ejs","hash":"60a085fab3165ea1fc6370abac0bd6ab1b2f2510","modified":1690354528609},{"_id":"themes/3-hexo/layout/_partial/meta.ejs","hash":"ab6329ddd908b0567c18f39ac6a8553c6fec67c5","modified":1690354528612},{"_id":"themes/3-hexo/layout/_partial/nav-left.ejs","hash":"2fbca44ae051bf231c346c66350070c13371fb27","modified":1690354528612},{"_id":"themes/3-hexo/layout/_partial/nav-right.ejs","hash":"0c693379995b09007727c2889c1a64e3bf98749e","modified":1690354528613},{"_id":"themes/3-hexo/layout/_partial/tag.ejs","hash":"8704e6bd833d270cc6a494d4e7cf1dfeddedba40","modified":1690354528614},{"_id":"themes/3-hexo/layout/_partial/toc-ref.ejs","hash":"33f7a4bfca1bb9835ec8f0d1e73188d1f56cc8b9","modified":1690354528614},{"_id":"themes/3-hexo/source/css/gitalk.css","hash":"3dc58e9a3fd63a3144d5fe850eb55e3dc885c9fb","modified":1690354528638},{"_id":"themes/3-hexo/source/css/style.styl","hash":"29fa7f6619519c2dcfec4efac4314c5af659a92a","modified":1690354528651},{"_id":"themes/3-hexo/source/css/mobile.styl","hash":"1c2f8b7d7cf46f219adb3a628bdf380f29ff4a6b","modified":1690354528649},{"_id":"themes/3-hexo/source/img/alipay.jpg","hash":"e457d1d3dfefbbd824d154cf756a2c6d10b812a2","modified":1690354528652},{"_id":"themes/3-hexo/source/img/avatar.jpg","hash":"a42360089bfa892d803cf5747eab359d90f337f1","modified":1690354528654},{"_id":"themes/3-hexo/source/img/article-list-background.jpeg","hash":"4fdf8b3e53dd02d6ee6360aebfadb0cba1fb5633","modified":1690354528654},{"_id":"themes/3-hexo/source/img/gov.png","hash":"f31c9f47faedf7f33b9580d6284ab891fb697560","modified":1690354528655},{"_id":"themes/3-hexo/source/img/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1690354528656},{"_id":"themes/3-hexo/source/img/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1690354528655},{"_id":"themes/3-hexo/source/js/iconfont.js","hash":"3a0869ca1b09af07d82987e343a3bc4cb9558ecb","modified":1690354528670},{"_id":"themes/3-hexo/source/js/jquery.pjax.js","hash":"8c2a4f10a4da3d9615a3a81542494c6d21479b3d","modified":1690354528673},{"_id":"themes/3-hexo/source/js/script.js","hash":"9bf5f74ecd252545a64b63281322bce9611c2fcd","modified":1690354528676},{"_id":"themes/3-hexo/source/js/search.js","hash":"788c610149a5f9361295f9f0207c8523f37ddb8b","modified":1690354528676},{"_id":"themes/3-hexo/source/js/titleTip.js","hash":"7299ac046ddd6e6a4267d435f7b4c8198baaaccc","modified":1690354528677},{"_id":"themes/3-hexo/layout/_partial/comments/disqus.ejs","hash":"32ce7b48d366b9c888ff2ceb911a3cd82f864537","modified":1690354528601},{"_id":"themes/3-hexo/layout/_partial/comments/gitalk.ejs","hash":"01567e010cf4f2dd141fe2019490d3f0d5aa2529","modified":1690354528602},{"_id":"themes/3-hexo/layout/_partial/comments/click2show.ejs","hash":"05b09c45b379ffeb4f48c1604044d88829f90799","modified":1690354528601},{"_id":"themes/3-hexo/layout/_partial/comments/livere.ejs","hash":"2d115e79cadedc2d5d8f4b5618559640d986e01f","modified":1690354528603},{"_id":"themes/3-hexo/layout/_partial/comments/gitment.ejs","hash":"eaf2b6f297282606b630ad55fb9e38af7e2829dc","modified":1690354528603},{"_id":"themes/3-hexo/layout/_partial/comments/utteranc.ejs","hash":"8f2d4f42fbad351677c82e72420224587a5bd666","modified":1690354528604},{"_id":"themes/3-hexo/source/css/_partial/fade.styl","hash":"02c7510a26f306e240f23ddbf772a69be2c890dd","modified":1690354528621},{"_id":"themes/3-hexo/source/css/_partial/comment.styl","hash":"d5fa333970a2eac66937d42eeb16fdb362e121ed","modified":1690354528619},{"_id":"themes/3-hexo/source/css/_partial/dashang.styl","hash":"f0eac1dc1f5dbed1769d032bb5fd5f002faaee26","modified":1690354528621},{"_id":"themes/3-hexo/source/css/_partial/full-toc.styl","hash":"9a732af065d0a80c9e420934be0f3582bf0129dc","modified":1690354528623},{"_id":"themes/3-hexo/source/css/_partial/nav-left.styl","hash":"4304a111489d22a97389e0403c51bb4de73f6609","modified":1690354528624},{"_id":"themes/3-hexo/source/css/_partial/nav-right.styl","hash":"b57fbac9d87f93ef88f97f86387ce9f2efa918d0","modified":1690354528625},{"_id":"themes/3-hexo/source/css/_partial/font.styl","hash":"3db01e603985e6dbcacb6b0f13dbd804f5849e3c","modified":1690354528621},{"_id":"themes/3-hexo/source/css/_partial/nprogress.styl","hash":"2620a02169a6aeb75137fd368eac2c36423d8498","modified":1690354528625},{"_id":"themes/3-hexo/source/css/_partial/num-load.styl","hash":"f7ef35459ece22e1da950b86126be1c2bfe97fcf","modified":1690354528626},{"_id":"themes/3-hexo/source/css/_partial/post.styl","hash":"f1251e2a3b5334af3a22b51fc0293c2456568b50","modified":1690354528626},{"_id":"themes/3-hexo/source/css/fonts/icomoon.svg","hash":"b5e7562c8494b0ddb3a70ecc5545ef7340d8e971","modified":1690354528628},{"_id":"themes/3-hexo/source/css/fonts/icomoon.eot","hash":"b6195bedc1cb2f9cfcb26cc27021f2e94be2ab0a","modified":1690354528628},{"_id":"themes/3-hexo/source/css/fonts/icomoon.ttf","hash":"eb976d8b8559fcddfc2658a03a4350cb566fc06b","modified":1690354528629},{"_id":"themes/3-hexo/source/css/fonts/icomoon.woff","hash":"3985d29416bb9b19f50a2f20f2bbbce47f10af8d","modified":1690354528629},{"_id":"themes/3-hexo/source/css/fonts/iconfont.eot","hash":"b14b8624988ff069aff3145f88c0d7ac49052bd3","modified":1690354528630},{"_id":"themes/3-hexo/source/css/fonts/iconfont.ttf","hash":"140829ecf12d30c6e18d8dc6dc0c188a66addd25","modified":1690354528633},{"_id":"themes/3-hexo/source/css/fonts/iconfont.svg","hash":"3630aabf2f9c0417f483ebd03d9e429dbc2594e0","modified":1690354528632},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff","hash":"0d2d4559f1ac4fa801eb8cc099fa5bf9dcf955ef","modified":1690354528634},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff2","hash":"b0317a0b2ebb1181a8bf5a97d03556dd54538645","modified":1690354528634},{"_id":"themes/3-hexo/source/css/fonts/selection.json","hash":"b6456a4eabcffd95e822d1d7adce96da524d481a","modified":1690354528637},{"_id":"themes/3-hexo/source/css/hl_theme/atom-dark.styl","hash":"f3eb4e5feda9cbd6242ccf44ca064e2979b5d719","modified":1690354528639},{"_id":"themes/3-hexo/source/css/hl_theme/atom-light.styl","hash":"553987211d3323a7dfc0b08786b183a3435978c9","modified":1690354528639},{"_id":"themes/3-hexo/source/css/hl_theme/darcula.styl","hash":"2bfc14f27ccca108b4b3755782de8366e8bd001e","modified":1690354528640},{"_id":"themes/3-hexo/source/css/hl_theme/brown-paper.styl","hash":"03af387edcc1cf8c18d12e9c440fd51b6cf425b6","modified":1690354528640},{"_id":"themes/3-hexo/source/css/hl_theme/github-gist.styl","hash":"5e05b19832c1099bd9d284bc3ed00dc8a3d7ee23","modified":1690354528640},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-dark.styl","hash":"315ad610d303caba9eac80a7d51002193a15478a","modified":1690354528643},{"_id":"themes/3-hexo/source/css/hl_theme/github.styl","hash":"53276ff1f224f691dfe811e82c0af7f4476abf5d","modified":1690354528643},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-dark.styl","hash":"e9c190f9ffc37a13cac430512e4e0c760205be4a","modified":1690354528644},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-light.styl","hash":"1bece084b1dbbbd4af064f05feffd8c332b96a48","modified":1690354528643},{"_id":"themes/3-hexo/source/css/hl_theme/railscasts.styl","hash":"a6e8cfd2202afd7893f5268f3437421e35066e7b","modified":1690354528645},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-light.styl","hash":"0c3ccd0d64e7504c7061d246dc32737f502f64e4","modified":1690354528645},{"_id":"themes/3-hexo/source/css/hl_theme/rainbow.styl","hash":"e5c37646a9d9c1094f9aab7a7c65a4b242e8db00","modified":1690354528645},{"_id":"themes/3-hexo/source/css/hl_theme/school-book.styl","hash":"51659351b391a2be5c68728bb51b7ad467c5e0db","modified":1690354528647},{"_id":"themes/3-hexo/source/css/hl_theme/sublime.styl","hash":"501d75ef0f4385bea24d9b9b4cc434ba68d4be27","modified":1690354528647},{"_id":"themes/3-hexo/source/css/hl_theme/sunburst.styl","hash":"2aa9817e68fb2ed216781ea04b733039ebe18214","modified":1690354528648},{"_id":"themes/3-hexo/source/css/hl_theme/zenbum.styl","hash":"92941a6ae73b74f44ad7c559c5548c44073c644a","modified":1690354528649},{"_id":"themes/3-hexo/source/img/weixin.jpg","hash":"8dafb22561698d0758fba9ea2a45abf6ad3512a2","modified":1690354528659},{"_id":"themes/3-hexo/source/js/gitment.js","hash":"67984b83cd46ff4300d4fd959bf6c17dd66b4136","modified":1690354528670},{"_id":"themes/3-hexo/source/js/gitalk.js","hash":"3e2e0cf9caa6b8d07b9c5e0733a1ccb3e244259f","modified":1690354528667},{"_id":"public/img/article-list-background.jpeg","hash":"4fdf8b3e53dd02d6ee6360aebfadb0cba1fb5633","modified":1690354616403},{"_id":"public/img/alipay.jpg","hash":"e457d1d3dfefbbd824d154cf756a2c6d10b812a2","modified":1690354616403},{"_id":"public/img/gov.png","hash":"f31c9f47faedf7f33b9580d6284ab891fb697560","modified":1690354616403},{"_id":"public/img/avatar.jpg","hash":"a42360089bfa892d803cf5747eab359d90f337f1","modified":1690354616403},{"_id":"public/img/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1690354616403},{"_id":"public/img/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1690354616403},{"_id":"public/css/fonts/icomoon.eot","hash":"b6195bedc1cb2f9cfcb26cc27021f2e94be2ab0a","modified":1690354616403},{"_id":"public/css/fonts/icomoon.svg","hash":"b5e7562c8494b0ddb3a70ecc5545ef7340d8e971","modified":1690354616403},{"_id":"public/css/fonts/icomoon.ttf","hash":"eb976d8b8559fcddfc2658a03a4350cb566fc06b","modified":1690354616403},{"_id":"public/css/fonts/icomoon.woff","hash":"3985d29416bb9b19f50a2f20f2bbbce47f10af8d","modified":1690354616403},{"_id":"public/css/fonts/iconfont.eot","hash":"b14b8624988ff069aff3145f88c0d7ac49052bd3","modified":1690354616403},{"_id":"public/css/fonts/iconfont.ttf","hash":"140829ecf12d30c6e18d8dc6dc0c188a66addd25","modified":1690354616403},{"_id":"public/css/fonts/iconfont.svg","hash":"3630aabf2f9c0417f483ebd03d9e429dbc2594e0","modified":1690354616403},{"_id":"public/css/fonts/iconfont.woff","hash":"0d2d4559f1ac4fa801eb8cc099fa5bf9dcf955ef","modified":1690354616403},{"_id":"public/css/fonts/iconfont.woff2","hash":"b0317a0b2ebb1181a8bf5a97d03556dd54538645","modified":1690354616403},{"_id":"public/img/weixin.jpg","hash":"8dafb22561698d0758fba9ea2a45abf6ad3512a2","modified":1690354616403},{"_id":"public/css/mobile.css","hash":"5998f6fc27998596beb1e40e4bc3c43be2ed764c","modified":1690354616403},{"_id":"public/js/titleTip.js","hash":"81dca549063e29ba3a4a278f0f4388eba8a2167b","modified":1690354616403},{"_id":"public/js/search.js","hash":"c80c9a231ee040c7adc07a477793873fb85ce8bc","modified":1690354616403},{"_id":"public/css/hl_theme/atom-dark.css","hash":"88d11052a24e8100af6248eb4dbe1ce7b0e96408","modified":1690354616403},{"_id":"public/css/hl_theme/atom-light.css","hash":"d31edb9816dae6b01410028bceb91757a962f780","modified":1690354616403},{"_id":"public/css/hl_theme/darcula.css","hash":"4341074bae4bc9f0b86e32b623e27babc0159b6e","modified":1690354616403},{"_id":"public/css/hl_theme/brown-paper.css","hash":"500c8e750373f6656ff49a7857c871ceedcf8777","modified":1690354616403},{"_id":"public/css/hl_theme/github-gist.css","hash":"7a41c1c479d09df875f99f1f6d94aac42e9e2ad0","modified":1690354616403},{"_id":"public/css/hl_theme/gruvbox-dark.css","hash":"8c440d9b4ee19ac03eaee3c6af78ba52e5ba5535","modified":1690354616403},{"_id":"public/css/hl_theme/github.css","hash":"e05a0806a508a26b9f3f3794b6b588ec6504ad3f","modified":1690354616403},{"_id":"public/css/hl_theme/kimbie-dark.css","hash":"728527fcc308da454722c119b89e6da3025bd1e3","modified":1690354616403},{"_id":"public/css/hl_theme/gruvbox-light.css","hash":"30514aaa242a34647aa666cfca4fc74c595ea8f2","modified":1690354616403},{"_id":"public/css/hl_theme/railscasts.css","hash":"511f2fd2a84d426e5da5cb17880cc08f73beb002","modified":1690354616403},{"_id":"public/css/hl_theme/kimbie-light.css","hash":"0c61926c989163faefb031d27bce3e287d6e10f2","modified":1690354616403},{"_id":"public/css/hl_theme/school-book.css","hash":"ffbbcd13a74ac2404262c50b7a43053dfd0096ff","modified":1690354616403},{"_id":"public/css/hl_theme/rainbow.css","hash":"7ff4251938076ddb7e4e49413db82653e5b61321","modified":1690354616403},{"_id":"public/css/hl_theme/sublime.css","hash":"f65c5b116d9213afb9c324384a2f3bc86cb71121","modified":1690354616403},{"_id":"public/css/hl_theme/sunburst.css","hash":"8a135abac1512cf430d1d1ad2304b79afa1a4d6e","modified":1690354616403},{"_id":"public/css/hl_theme/zenbum.css","hash":"0a78f74a93568e20b32ca7427c719e9bae9a0b55","modified":1690354616403},{"_id":"public/css/gitalk.css","hash":"58177ce227c50ee359fbf99a4fdd26058887afc5","modified":1690354616403},{"_id":"public/js/gitment.js","hash":"59a1e03f2b0ce61dd9bd405d3c52d3e07cc10dec","modified":1690354616403},{"_id":"public/js/jquery.pjax.js","hash":"191c49fdb40dff115a49cfd2b30dffb888d86550","modified":1690354616403},{"_id":"public/js/iconfont.js","hash":"3a0869ca1b09af07d82987e343a3bc4cb9558ecb","modified":1690354616403},{"_id":"public/css/fonts/selection.json","hash":"047b615ea32dc48dae5b964061427d41feaaafdf","modified":1690354616403},{"_id":"public/js/gitalk.js","hash":"26ba4841dcb4b178f730f53a8d1f4a7c89442b4f","modified":1690354616403}],"Category":[{"name":"社团","_id":"clkjdd1ar000698ajao6pgs9i"},{"name":"学习","_id":"clkjdd1ay000c98ajciuhfrlw"},{"name":"开发","_id":"clkjdd1b5000i98aj71e3gc5p"},{"name":"系统","_id":"clkjdd1bj001298ajd7kl9tyq"},{"name":"分类","_id":"clkjdd1br001f98aj14ase5jz"},{"name":"Minecraft","_id":"clkjdd1c8002698aj5s08f3qj"}],"Data":[],"Page":[],"Post":[{"title":"colour","date":"2022-11-01T09:47:18.000Z","_content":"\n\n<font color=#000000>#000000</font>\n<font color=#000033>#000033</font>\n<font color=#000066>#000066</font>\n<font color=#000099>#000099</font>\n<font color=#0000cc>#0000CC</font>\n<font color=#0000ff>#0000FF</font>\n\n\n<font color=#003300>#003300</font>\n<font color=#003333>#003333</font>\n<font color=#003366>#003366</font>\n<font color=#003399>#003399</font>\n<font color=#0033cc>#0033CC</font>\n<font color=#0033ff>#0033FF</font>\n\n\n<font color=#006600>#006600</font>\n<font color=#006633>#006633</font>\n<font color=#006666>#006666</font>\n<font color=#006699>#006699</font>\n<font color=#0066cc>#0066CC</font>\n<font color=#0066ff>#0066FF</font>\n\n\n<font color=#009900>#009900</font>\n<font color=#009933>#009933</font>\n<font color=#009966>#009966</font>\n<font color=#009999>#009999</font>\n<font color=#0099cc>#0099CC</font>\n<font color=#0099ff>#0099FF</font>\n\n\n<font color=#00cc00>#00CC00</font>\n<font color=#00cc33>#00CC33</font>\n<font color=#00cc66>#00CC66</font>\n<font color=#00cc99>#00CC99</font>\n<font color=#00cccc>#00CCCC</font>\n<font color=#00ccff>#00CCFF</font>\n\n\n<font color=#00ff00>#00FF00</font>\n<font color=#00ff33>#00FF33</font>\n<font color=#00ff66>#00FF66</font>\n<font color=#00ff99>#00FF99</font>\n<font color=#00ffcc>#00FFCC</font>\n<font color=#00ffff>#00FFFF</font>\n\n\n<font color=#330000>#330000</font>\n<font color=#330033>#330033</font>\n<font color=#330066>#330066</font>\n<font color=#330099>#330099</font>\n<font color=#3300cc>#3300CC</font>\n<font color=#3300ff>#3300FF</font>\n\n\n<font color=#333300>#333300</font>\n<font color=#333333>#333333</font>\n<font color=#333366>#333366</font>\n<font color=#333399>#333399</font>\n<font color=#3333cc>#3333CC</font>\n<font color=#3333ff>#3333FF</font>\n\n\n<font color=#336600>#336600</font>\n<font color=#336633>#336633</font>\n<font color=#336666>#336666</font>\n<font color=#336699>#336699</font>\n<font color=#3366cc>#3366CC</font>\n<font color=#3366ff>#3366FF</font>\n\n\n<font color=#339900>#339900</font>\n<font color=#339933>#339933</font>\n<font color=#339966>#339966</font>\n<font color=#339999>#339999</font>\n<font color=#3399cc>#3399CC</font>\n<font color=#3399ff>#3399FF</font>\n\n\n<font color=#33cc00>#33CC00</font>\n<font color=#33cc33>#33CC33</font>\n<font color=#33cc66>#33CC66</font>\n<font color=#33cc99>#33CC99</font>\n<font color=#33cccc>#33CCCC</font>\n<font color=#33ccff>#33CCFF</font>\n\n\n<font color=#33ff00>#33FF00</font>\n<font color=#33ff33>#33FF33</font>\n<font color=#33ff66>#33FF66</font>\n<font color=#33ff99>#33FF99</font>\n<font color=#33ffcc>#33FFCC</font>\n<font color=#33ffff>#33FFFF</font>\n\n\n<font color=#660000>#660000</font>\n<font color=#660033>#660033</font>\n<font color=#660066>#660066</font>\n<font color=#660099>#660099</font>\n<font color=#6600cc>#6600CC</font>\n<font color=#6600ff>#6600FF</font>\n\n\n<font color=#663300>#663300</font>\n<font color=#663333>#663333</font>\n<font color=#663366>#663366</font>\n<font color=#663399>#663399</font>\n<font color=#6633cc>#6633CC</font>\n<font color=#6633ff>#6633FF</font>\n\n\n<font color=#666600>#666600</font>\n<font color=#666633>#666633</font>\n<font color=#666666>#666666</font>\n<font color=#666699>#666699</font>\n<font color=#6666cc>#6666CC</font>\n<font color=#6666ff>#6666FF</font>\n\n\n<font color=#669900>#669900</font>\n<font color=#669933>#669933</font>\n<font color=#669966>#669966</font>\n<font color=#669999>#669999</font>\n<font color=#6699cc>#6699CC</font>\n<font color=#6699ff>#6699FF</font>\n\n\n<font color=#66cc00>#66CC00</font>\n<font color=#66cc33>#66CC33</font>\n<font color=#66cc66>#66CC66</font>\n<font color=#66cc99>#66CC99</font>\n<font color=#66cccc>#66CCCC</font>\n<font color=#66ccff>#66CCFF</font>\n\n\n<font color=#66ff00>#66FF00</font>\n<font color=#66ff33>#66FF33</font>\n<font color=#66ff66>#66FF66</font>\n<font color=#66ff99>#66FF99</font>\n<font color=#66ffcc>#66FFCC</font>\n<font color=#66ffff>#66FFFF</font>\n\n\n<font color=#990000>#990000</font>\n<font color=#990033>#990033</font>\n<font color=#990066>#990066</font>\n<font color=#990099>#990099</font>\n<font color=#9900cc>#9900CC</font>\n<font color=#9900ff>#9900FF</font>\n\n\n<font color=#993300>#993300</font>\n<font color=#993333>#993333</font>\n<font color=#993366>#993366</font>\n<font color=#993399>#993399</font>\n<font color=#9933cc>#9933CC</font>\n<font color=#9933ff>#9933FF</font>\n\n\n<font color=#996600>#996600</font>\n<font color=#996633>#996633</font>\n<font color=#996666>#996666</font>\n<font color=#996699>#996699</font>\n<font color=#9966cc>#9966CC</font>\n<font color=#9966ff>#9966FF</font>\n\n\n<font color=#999900>#999900</font>\n<font color=#999933>#999933</font>\n<font color=#999966>#999966</font>\n<font color=#999999>#999999</font>\n<font color=#9999cc>#9999CC</font>\n<font color=#9999ff>#9999FF</font>\n\n\n<font color=#99cc00>#99CC00</font>\n<font color=#99cc33>#99CC33</font>\n<font color=#99cc66>#99CC66</font>\n<font color=#99cc99>#99CC99</font>\n<font color=#99cccc>#99CCCC</font>\n<font color=#99ccff>#99CCFF</font>\n\n\n<font color=#99ff00>#99FF00</font>\n<font color=#99ff33>#99FF33</font>\n<font color=#99ff66>#99FF66</font>\n<font color=#99ff99>#99FF99</font>\n<font color=#99ffcc>#99FFCC</font>\n<font color=#99ffff>#99FFFF</font>\n\n\n<font color=#cc0000>#CC0000</font>\n<font color=#cc0033>#CC0033</font>\n<font color=#cc0066>#CC0066</font>\n<font color=#cc0099>#CC0099</font>\n<font color=#cc00cc>#CC00CC</font>\n<font color=#cc00ff>#CC00FF</font>\n\n\n<font color=#cc3300>#CC3300</font>\n<font color=#cc3333>#CC3333</font>\n<font color=#cc3366>#CC3366</font>\n<font color=#cc3399>#CC3399</font>\n<font color=#cc33cc>#CC33CC</font>\n<font color=#cc33ff>#CC33FF</font>\n\n\n<font color=#cc6600>#CC6600</font>\n<font color=#cc6633>#CC6633</font>\n<font color=#cc6666>#CC6666</font>\n<font color=#cc6699>#CC6699</font>\n<font color=#cc66cc>#CC66CC</font>\n<font color=#cc66ff>#CC66FF</font>\n\n\n<font color=#cc9900>#CC9900</font>\n<font color=#cc9933>#CC9933</font>\n<font color=#cc9966>#CC9966</font>\n<font color=#cc9999>#CC9999</font>\n<font color=#cc99cc>#CC99CC</font>\n<font color=#cc99ff>#CC99FF</font>\n\n\n<font color=#cccc00>#CCCC00</font>\n<font color=#cccc33>#CCCC33</font>\n<font color=#cccc66>#CCCC66</font>\n<font color=#cccc99>#CCCC99</font>\n<font color=#cccccc>#CCCCCC</font>\n<font color=#ccccff>#CCCCFF</font>\n\n\n<font color=#ccff00>#CCFF00</font>\n<font color=#ccff33>#CCFF33</font>\n<font color=#ccff66>#CCFF66</font>\n<font color=#ccff99>#CCFF99</font>\n<font color=#ccffcc>#CCFFCC</font>\n<font color=#ccffff>#CCFFFF</font>\n\n\n<font color=#ff0000>#FF0000</font>\n<font color=#ff0033>#FF0033</font>\n<font color=#ff0066>#FF0066</font>\n<font color=#ff0099>#FF0099</font>\n<font color=#ff00cc>#FF00CC</font>\n<font color=#ff00ff>#FF00FF</font>\n\n\n<font color=#ff3300>#FF3300</font>\n<font color=#ff3333>#FF3333</font>\n<font color=#ff3366>#FF3366</font>\n<font color=#ff3399>#FF3399</font>\n<font color=#ff33cc>#FF33CC</font>\n<font color=#ff33ff>#FF33FF</font>\n\n\n<font color=#ff6600>#FF6600</font>\n<font color=#ff6633>#FF6633</font>\n<font color=#ff6666>#FF6666</font>\n<font color=#ff6699>#FF6699</font>\n<font color=#ff66cc>#FF66CC</font>\n<font color=#ff66ff>#FF66FF</font>\n\n\n<font color=#ff9900>#FF9900</font>\n<font color=#ff9933>#FF9933</font>\n<font color=#ff9966>#FF9966</font>\n<font color=#ff9999>#FF9999</font>\n<font color=#ff99cc>#FF99CC</font>\n<font color=#ff99ff>#FF99FF</font>\n\n\n<font color=#ffcc00>#FFCC00</font>\n<font color=#ffcc33>#FFCC33</font>\n<font color=#ffcc66>#FFCC66</font>\n<font color=#ffcc99>#FFCC99</font>\n<font color=#ffcccc>#FFCCCC</font>\n<font color=#ffccff>#FFCCFF</font>\n\n\n<font color=#ffff00>#FFFF00</font>\n<font color=#ffff33>#FFFF33</font>\n<font color=#ffff66>#FFFF66</font>\n<font color=#ffff99>#FFFF99</font>\n<font color=#ffffcc>#FFFFCC</font>\n<font color=#ffffff>#FFFFFF</font>","source":"_posts/0-colour.md","raw":"---\ntitle: colour\ndate: 2022-11-01 17:47:18\ntags: colour\ncategories: \n---\n\n\n<font color=#000000>#000000</font>\n<font color=#000033>#000033</font>\n<font color=#000066>#000066</font>\n<font color=#000099>#000099</font>\n<font color=#0000cc>#0000CC</font>\n<font color=#0000ff>#0000FF</font>\n\n\n<font color=#003300>#003300</font>\n<font color=#003333>#003333</font>\n<font color=#003366>#003366</font>\n<font color=#003399>#003399</font>\n<font color=#0033cc>#0033CC</font>\n<font color=#0033ff>#0033FF</font>\n\n\n<font color=#006600>#006600</font>\n<font color=#006633>#006633</font>\n<font color=#006666>#006666</font>\n<font color=#006699>#006699</font>\n<font color=#0066cc>#0066CC</font>\n<font color=#0066ff>#0066FF</font>\n\n\n<font color=#009900>#009900</font>\n<font color=#009933>#009933</font>\n<font color=#009966>#009966</font>\n<font color=#009999>#009999</font>\n<font color=#0099cc>#0099CC</font>\n<font color=#0099ff>#0099FF</font>\n\n\n<font color=#00cc00>#00CC00</font>\n<font color=#00cc33>#00CC33</font>\n<font color=#00cc66>#00CC66</font>\n<font color=#00cc99>#00CC99</font>\n<font color=#00cccc>#00CCCC</font>\n<font color=#00ccff>#00CCFF</font>\n\n\n<font color=#00ff00>#00FF00</font>\n<font color=#00ff33>#00FF33</font>\n<font color=#00ff66>#00FF66</font>\n<font color=#00ff99>#00FF99</font>\n<font color=#00ffcc>#00FFCC</font>\n<font color=#00ffff>#00FFFF</font>\n\n\n<font color=#330000>#330000</font>\n<font color=#330033>#330033</font>\n<font color=#330066>#330066</font>\n<font color=#330099>#330099</font>\n<font color=#3300cc>#3300CC</font>\n<font color=#3300ff>#3300FF</font>\n\n\n<font color=#333300>#333300</font>\n<font color=#333333>#333333</font>\n<font color=#333366>#333366</font>\n<font color=#333399>#333399</font>\n<font color=#3333cc>#3333CC</font>\n<font color=#3333ff>#3333FF</font>\n\n\n<font color=#336600>#336600</font>\n<font color=#336633>#336633</font>\n<font color=#336666>#336666</font>\n<font color=#336699>#336699</font>\n<font color=#3366cc>#3366CC</font>\n<font color=#3366ff>#3366FF</font>\n\n\n<font color=#339900>#339900</font>\n<font color=#339933>#339933</font>\n<font color=#339966>#339966</font>\n<font color=#339999>#339999</font>\n<font color=#3399cc>#3399CC</font>\n<font color=#3399ff>#3399FF</font>\n\n\n<font color=#33cc00>#33CC00</font>\n<font color=#33cc33>#33CC33</font>\n<font color=#33cc66>#33CC66</font>\n<font color=#33cc99>#33CC99</font>\n<font color=#33cccc>#33CCCC</font>\n<font color=#33ccff>#33CCFF</font>\n\n\n<font color=#33ff00>#33FF00</font>\n<font color=#33ff33>#33FF33</font>\n<font color=#33ff66>#33FF66</font>\n<font color=#33ff99>#33FF99</font>\n<font color=#33ffcc>#33FFCC</font>\n<font color=#33ffff>#33FFFF</font>\n\n\n<font color=#660000>#660000</font>\n<font color=#660033>#660033</font>\n<font color=#660066>#660066</font>\n<font color=#660099>#660099</font>\n<font color=#6600cc>#6600CC</font>\n<font color=#6600ff>#6600FF</font>\n\n\n<font color=#663300>#663300</font>\n<font color=#663333>#663333</font>\n<font color=#663366>#663366</font>\n<font color=#663399>#663399</font>\n<font color=#6633cc>#6633CC</font>\n<font color=#6633ff>#6633FF</font>\n\n\n<font color=#666600>#666600</font>\n<font color=#666633>#666633</font>\n<font color=#666666>#666666</font>\n<font color=#666699>#666699</font>\n<font color=#6666cc>#6666CC</font>\n<font color=#6666ff>#6666FF</font>\n\n\n<font color=#669900>#669900</font>\n<font color=#669933>#669933</font>\n<font color=#669966>#669966</font>\n<font color=#669999>#669999</font>\n<font color=#6699cc>#6699CC</font>\n<font color=#6699ff>#6699FF</font>\n\n\n<font color=#66cc00>#66CC00</font>\n<font color=#66cc33>#66CC33</font>\n<font color=#66cc66>#66CC66</font>\n<font color=#66cc99>#66CC99</font>\n<font color=#66cccc>#66CCCC</font>\n<font color=#66ccff>#66CCFF</font>\n\n\n<font color=#66ff00>#66FF00</font>\n<font color=#66ff33>#66FF33</font>\n<font color=#66ff66>#66FF66</font>\n<font color=#66ff99>#66FF99</font>\n<font color=#66ffcc>#66FFCC</font>\n<font color=#66ffff>#66FFFF</font>\n\n\n<font color=#990000>#990000</font>\n<font color=#990033>#990033</font>\n<font color=#990066>#990066</font>\n<font color=#990099>#990099</font>\n<font color=#9900cc>#9900CC</font>\n<font color=#9900ff>#9900FF</font>\n\n\n<font color=#993300>#993300</font>\n<font color=#993333>#993333</font>\n<font color=#993366>#993366</font>\n<font color=#993399>#993399</font>\n<font color=#9933cc>#9933CC</font>\n<font color=#9933ff>#9933FF</font>\n\n\n<font color=#996600>#996600</font>\n<font color=#996633>#996633</font>\n<font color=#996666>#996666</font>\n<font color=#996699>#996699</font>\n<font color=#9966cc>#9966CC</font>\n<font color=#9966ff>#9966FF</font>\n\n\n<font color=#999900>#999900</font>\n<font color=#999933>#999933</font>\n<font color=#999966>#999966</font>\n<font color=#999999>#999999</font>\n<font color=#9999cc>#9999CC</font>\n<font color=#9999ff>#9999FF</font>\n\n\n<font color=#99cc00>#99CC00</font>\n<font color=#99cc33>#99CC33</font>\n<font color=#99cc66>#99CC66</font>\n<font color=#99cc99>#99CC99</font>\n<font color=#99cccc>#99CCCC</font>\n<font color=#99ccff>#99CCFF</font>\n\n\n<font color=#99ff00>#99FF00</font>\n<font color=#99ff33>#99FF33</font>\n<font color=#99ff66>#99FF66</font>\n<font color=#99ff99>#99FF99</font>\n<font color=#99ffcc>#99FFCC</font>\n<font color=#99ffff>#99FFFF</font>\n\n\n<font color=#cc0000>#CC0000</font>\n<font color=#cc0033>#CC0033</font>\n<font color=#cc0066>#CC0066</font>\n<font color=#cc0099>#CC0099</font>\n<font color=#cc00cc>#CC00CC</font>\n<font color=#cc00ff>#CC00FF</font>\n\n\n<font color=#cc3300>#CC3300</font>\n<font color=#cc3333>#CC3333</font>\n<font color=#cc3366>#CC3366</font>\n<font color=#cc3399>#CC3399</font>\n<font color=#cc33cc>#CC33CC</font>\n<font color=#cc33ff>#CC33FF</font>\n\n\n<font color=#cc6600>#CC6600</font>\n<font color=#cc6633>#CC6633</font>\n<font color=#cc6666>#CC6666</font>\n<font color=#cc6699>#CC6699</font>\n<font color=#cc66cc>#CC66CC</font>\n<font color=#cc66ff>#CC66FF</font>\n\n\n<font color=#cc9900>#CC9900</font>\n<font color=#cc9933>#CC9933</font>\n<font color=#cc9966>#CC9966</font>\n<font color=#cc9999>#CC9999</font>\n<font color=#cc99cc>#CC99CC</font>\n<font color=#cc99ff>#CC99FF</font>\n\n\n<font color=#cccc00>#CCCC00</font>\n<font color=#cccc33>#CCCC33</font>\n<font color=#cccc66>#CCCC66</font>\n<font color=#cccc99>#CCCC99</font>\n<font color=#cccccc>#CCCCCC</font>\n<font color=#ccccff>#CCCCFF</font>\n\n\n<font color=#ccff00>#CCFF00</font>\n<font color=#ccff33>#CCFF33</font>\n<font color=#ccff66>#CCFF66</font>\n<font color=#ccff99>#CCFF99</font>\n<font color=#ccffcc>#CCFFCC</font>\n<font color=#ccffff>#CCFFFF</font>\n\n\n<font color=#ff0000>#FF0000</font>\n<font color=#ff0033>#FF0033</font>\n<font color=#ff0066>#FF0066</font>\n<font color=#ff0099>#FF0099</font>\n<font color=#ff00cc>#FF00CC</font>\n<font color=#ff00ff>#FF00FF</font>\n\n\n<font color=#ff3300>#FF3300</font>\n<font color=#ff3333>#FF3333</font>\n<font color=#ff3366>#FF3366</font>\n<font color=#ff3399>#FF3399</font>\n<font color=#ff33cc>#FF33CC</font>\n<font color=#ff33ff>#FF33FF</font>\n\n\n<font color=#ff6600>#FF6600</font>\n<font color=#ff6633>#FF6633</font>\n<font color=#ff6666>#FF6666</font>\n<font color=#ff6699>#FF6699</font>\n<font color=#ff66cc>#FF66CC</font>\n<font color=#ff66ff>#FF66FF</font>\n\n\n<font color=#ff9900>#FF9900</font>\n<font color=#ff9933>#FF9933</font>\n<font color=#ff9966>#FF9966</font>\n<font color=#ff9999>#FF9999</font>\n<font color=#ff99cc>#FF99CC</font>\n<font color=#ff99ff>#FF99FF</font>\n\n\n<font color=#ffcc00>#FFCC00</font>\n<font color=#ffcc33>#FFCC33</font>\n<font color=#ffcc66>#FFCC66</font>\n<font color=#ffcc99>#FFCC99</font>\n<font color=#ffcccc>#FFCCCC</font>\n<font color=#ffccff>#FFCCFF</font>\n\n\n<font color=#ffff00>#FFFF00</font>\n<font color=#ffff33>#FFFF33</font>\n<font color=#ffff66>#FFFF66</font>\n<font color=#ffff99>#FFFF99</font>\n<font color=#ffffcc>#FFFFCC</font>\n<font color=#ffffff>#FFFFFF</font>","slug":"0-colour","published":1,"updated":"2023-07-23T14:19:14.201Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkjdd19y000098aj0sm073ww","content":"<p><font color=#000000>#000000</font><br><font color=#000033>#000033</font><br><font color=#000066>#000066</font><br><font color=#000099>#000099</font><br><font color=#0000cc>#0000CC</font><br><font color=#0000ff>#0000FF</font></p>\n<p><font color=#003300>#003300</font><br><font color=#003333>#003333</font><br><font color=#003366>#003366</font><br><font color=#003399>#003399</font><br><font color=#0033cc>#0033CC</font><br><font color=#0033ff>#0033FF</font></p>\n<p><font color=#006600>#006600</font><br><font color=#006633>#006633</font><br><font color=#006666>#006666</font><br><font color=#006699>#006699</font><br><font color=#0066cc>#0066CC</font><br><font color=#0066ff>#0066FF</font></p>\n<p><font color=#009900>#009900</font><br><font color=#009933>#009933</font><br><font color=#009966>#009966</font><br><font color=#009999>#009999</font><br><font color=#0099cc>#0099CC</font><br><font color=#0099ff>#0099FF</font></p>\n<p><font color=#00cc00>#00CC00</font><br><font color=#00cc33>#00CC33</font><br><font color=#00cc66>#00CC66</font><br><font color=#00cc99>#00CC99</font><br><font color=#00cccc>#00CCCC</font><br><font color=#00ccff>#00CCFF</font></p>\n<p><font color=#00ff00>#00FF00</font><br><font color=#00ff33>#00FF33</font><br><font color=#00ff66>#00FF66</font><br><font color=#00ff99>#00FF99</font><br><font color=#00ffcc>#00FFCC</font><br><font color=#00ffff>#00FFFF</font></p>\n<p><font color=#330000>#330000</font><br><font color=#330033>#330033</font><br><font color=#330066>#330066</font><br><font color=#330099>#330099</font><br><font color=#3300cc>#3300CC</font><br><font color=#3300ff>#3300FF</font></p>\n<p><font color=#333300>#333300</font><br><font color=#333333>#333333</font><br><font color=#333366>#333366</font><br><font color=#333399>#333399</font><br><font color=#3333cc>#3333CC</font><br><font color=#3333ff>#3333FF</font></p>\n<p><font color=#336600>#336600</font><br><font color=#336633>#336633</font><br><font color=#336666>#336666</font><br><font color=#336699>#336699</font><br><font color=#3366cc>#3366CC</font><br><font color=#3366ff>#3366FF</font></p>\n<p><font color=#339900>#339900</font><br><font color=#339933>#339933</font><br><font color=#339966>#339966</font><br><font color=#339999>#339999</font><br><font color=#3399cc>#3399CC</font><br><font color=#3399ff>#3399FF</font></p>\n<p><font color=#33cc00>#33CC00</font><br><font color=#33cc33>#33CC33</font><br><font color=#33cc66>#33CC66</font><br><font color=#33cc99>#33CC99</font><br><font color=#33cccc>#33CCCC</font><br><font color=#33ccff>#33CCFF</font></p>\n<p><font color=#33ff00>#33FF00</font><br><font color=#33ff33>#33FF33</font><br><font color=#33ff66>#33FF66</font><br><font color=#33ff99>#33FF99</font><br><font color=#33ffcc>#33FFCC</font><br><font color=#33ffff>#33FFFF</font></p>\n<p><font color=#660000>#660000</font><br><font color=#660033>#660033</font><br><font color=#660066>#660066</font><br><font color=#660099>#660099</font><br><font color=#6600cc>#6600CC</font><br><font color=#6600ff>#6600FF</font></p>\n<p><font color=#663300>#663300</font><br><font color=#663333>#663333</font><br><font color=#663366>#663366</font><br><font color=#663399>#663399</font><br><font color=#6633cc>#6633CC</font><br><font color=#6633ff>#6633FF</font></p>\n<p><font color=#666600>#666600</font><br><font color=#666633>#666633</font><br><font color=#666666>#666666</font><br><font color=#666699>#666699</font><br><font color=#6666cc>#6666CC</font><br><font color=#6666ff>#6666FF</font></p>\n<p><font color=#669900>#669900</font><br><font color=#669933>#669933</font><br><font color=#669966>#669966</font><br><font color=#669999>#669999</font><br><font color=#6699cc>#6699CC</font><br><font color=#6699ff>#6699FF</font></p>\n<p><font color=#66cc00>#66CC00</font><br><font color=#66cc33>#66CC33</font><br><font color=#66cc66>#66CC66</font><br><font color=#66cc99>#66CC99</font><br><font color=#66cccc>#66CCCC</font><br><font color=#66ccff>#66CCFF</font></p>\n<p><font color=#66ff00>#66FF00</font><br><font color=#66ff33>#66FF33</font><br><font color=#66ff66>#66FF66</font><br><font color=#66ff99>#66FF99</font><br><font color=#66ffcc>#66FFCC</font><br><font color=#66ffff>#66FFFF</font></p>\n<p><font color=#990000>#990000</font><br><font color=#990033>#990033</font><br><font color=#990066>#990066</font><br><font color=#990099>#990099</font><br><font color=#9900cc>#9900CC</font><br><font color=#9900ff>#9900FF</font></p>\n<p><font color=#993300>#993300</font><br><font color=#993333>#993333</font><br><font color=#993366>#993366</font><br><font color=#993399>#993399</font><br><font color=#9933cc>#9933CC</font><br><font color=#9933ff>#9933FF</font></p>\n<p><font color=#996600>#996600</font><br><font color=#996633>#996633</font><br><font color=#996666>#996666</font><br><font color=#996699>#996699</font><br><font color=#9966cc>#9966CC</font><br><font color=#9966ff>#9966FF</font></p>\n<p><font color=#999900>#999900</font><br><font color=#999933>#999933</font><br><font color=#999966>#999966</font><br><font color=#999999>#999999</font><br><font color=#9999cc>#9999CC</font><br><font color=#9999ff>#9999FF</font></p>\n<p><font color=#99cc00>#99CC00</font><br><font color=#99cc33>#99CC33</font><br><font color=#99cc66>#99CC66</font><br><font color=#99cc99>#99CC99</font><br><font color=#99cccc>#99CCCC</font><br><font color=#99ccff>#99CCFF</font></p>\n<p><font color=#99ff00>#99FF00</font><br><font color=#99ff33>#99FF33</font><br><font color=#99ff66>#99FF66</font><br><font color=#99ff99>#99FF99</font><br><font color=#99ffcc>#99FFCC</font><br><font color=#99ffff>#99FFFF</font></p>\n<p><font color=#cc0000>#CC0000</font><br><font color=#cc0033>#CC0033</font><br><font color=#cc0066>#CC0066</font><br><font color=#cc0099>#CC0099</font><br><font color=#cc00cc>#CC00CC</font><br><font color=#cc00ff>#CC00FF</font></p>\n<p><font color=#cc3300>#CC3300</font><br><font color=#cc3333>#CC3333</font><br><font color=#cc3366>#CC3366</font><br><font color=#cc3399>#CC3399</font><br><font color=#cc33cc>#CC33CC</font><br><font color=#cc33ff>#CC33FF</font></p>\n<p><font color=#cc6600>#CC6600</font><br><font color=#cc6633>#CC6633</font><br><font color=#cc6666>#CC6666</font><br><font color=#cc6699>#CC6699</font><br><font color=#cc66cc>#CC66CC</font><br><font color=#cc66ff>#CC66FF</font></p>\n<p><font color=#cc9900>#CC9900</font><br><font color=#cc9933>#CC9933</font><br><font color=#cc9966>#CC9966</font><br><font color=#cc9999>#CC9999</font><br><font color=#cc99cc>#CC99CC</font><br><font color=#cc99ff>#CC99FF</font></p>\n<p><font color=#cccc00>#CCCC00</font><br><font color=#cccc33>#CCCC33</font><br><font color=#cccc66>#CCCC66</font><br><font color=#cccc99>#CCCC99</font><br><font color=#cccccc>#CCCCCC</font><br><font color=#ccccff>#CCCCFF</font></p>\n<p><font color=#ccff00>#CCFF00</font><br><font color=#ccff33>#CCFF33</font><br><font color=#ccff66>#CCFF66</font><br><font color=#ccff99>#CCFF99</font><br><font color=#ccffcc>#CCFFCC</font><br><font color=#ccffff>#CCFFFF</font></p>\n<p><font color=#ff0000>#FF0000</font><br><font color=#ff0033>#FF0033</font><br><font color=#ff0066>#FF0066</font><br><font color=#ff0099>#FF0099</font><br><font color=#ff00cc>#FF00CC</font><br><font color=#ff00ff>#FF00FF</font></p>\n<p><font color=#ff3300>#FF3300</font><br><font color=#ff3333>#FF3333</font><br><font color=#ff3366>#FF3366</font><br><font color=#ff3399>#FF3399</font><br><font color=#ff33cc>#FF33CC</font><br><font color=#ff33ff>#FF33FF</font></p>\n<p><font color=#ff6600>#FF6600</font><br><font color=#ff6633>#FF6633</font><br><font color=#ff6666>#FF6666</font><br><font color=#ff6699>#FF6699</font><br><font color=#ff66cc>#FF66CC</font><br><font color=#ff66ff>#FF66FF</font></p>\n<p><font color=#ff9900>#FF9900</font><br><font color=#ff9933>#FF9933</font><br><font color=#ff9966>#FF9966</font><br><font color=#ff9999>#FF9999</font><br><font color=#ff99cc>#FF99CC</font><br><font color=#ff99ff>#FF99FF</font></p>\n<p><font color=#ffcc00>#FFCC00</font><br><font color=#ffcc33>#FFCC33</font><br><font color=#ffcc66>#FFCC66</font><br><font color=#ffcc99>#FFCC99</font><br><font color=#ffcccc>#FFCCCC</font><br><font color=#ffccff>#FFCCFF</font></p>\n<p><font color=#ffff00>#FFFF00</font><br><font color=#ffff33>#FFFF33</font><br><font color=#ffff66>#FFFF66</font><br><font color=#ffff99>#FFFF99</font><br><font color=#ffffcc>#FFFFCC</font><br><font color=#ffffff>#FFFFFF</font></p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=#000000>#000000</font><br><font color=#000033>#000033</font><br><font color=#000066>#000066</font><br><font color=#000099>#000099</font><br><font color=#0000cc>#0000CC</font><br><font color=#0000ff>#0000FF</font></p>\n<p><font color=#003300>#003300</font><br><font color=#003333>#003333</font><br><font color=#003366>#003366</font><br><font color=#003399>#003399</font><br><font color=#0033cc>#0033CC</font><br><font color=#0033ff>#0033FF</font></p>\n<p><font color=#006600>#006600</font><br><font color=#006633>#006633</font><br><font color=#006666>#006666</font><br><font color=#006699>#006699</font><br><font color=#0066cc>#0066CC</font><br><font color=#0066ff>#0066FF</font></p>\n<p><font color=#009900>#009900</font><br><font color=#009933>#009933</font><br><font color=#009966>#009966</font><br><font color=#009999>#009999</font><br><font color=#0099cc>#0099CC</font><br><font color=#0099ff>#0099FF</font></p>\n<p><font color=#00cc00>#00CC00</font><br><font color=#00cc33>#00CC33</font><br><font color=#00cc66>#00CC66</font><br><font color=#00cc99>#00CC99</font><br><font color=#00cccc>#00CCCC</font><br><font color=#00ccff>#00CCFF</font></p>\n<p><font color=#00ff00>#00FF00</font><br><font color=#00ff33>#00FF33</font><br><font color=#00ff66>#00FF66</font><br><font color=#00ff99>#00FF99</font><br><font color=#00ffcc>#00FFCC</font><br><font color=#00ffff>#00FFFF</font></p>\n<p><font color=#330000>#330000</font><br><font color=#330033>#330033</font><br><font color=#330066>#330066</font><br><font color=#330099>#330099</font><br><font color=#3300cc>#3300CC</font><br><font color=#3300ff>#3300FF</font></p>\n<p><font color=#333300>#333300</font><br><font color=#333333>#333333</font><br><font color=#333366>#333366</font><br><font color=#333399>#333399</font><br><font color=#3333cc>#3333CC</font><br><font color=#3333ff>#3333FF</font></p>\n<p><font color=#336600>#336600</font><br><font color=#336633>#336633</font><br><font color=#336666>#336666</font><br><font color=#336699>#336699</font><br><font color=#3366cc>#3366CC</font><br><font color=#3366ff>#3366FF</font></p>\n<p><font color=#339900>#339900</font><br><font color=#339933>#339933</font><br><font color=#339966>#339966</font><br><font color=#339999>#339999</font><br><font color=#3399cc>#3399CC</font><br><font color=#3399ff>#3399FF</font></p>\n<p><font color=#33cc00>#33CC00</font><br><font color=#33cc33>#33CC33</font><br><font color=#33cc66>#33CC66</font><br><font color=#33cc99>#33CC99</font><br><font color=#33cccc>#33CCCC</font><br><font color=#33ccff>#33CCFF</font></p>\n<p><font color=#33ff00>#33FF00</font><br><font color=#33ff33>#33FF33</font><br><font color=#33ff66>#33FF66</font><br><font color=#33ff99>#33FF99</font><br><font color=#33ffcc>#33FFCC</font><br><font color=#33ffff>#33FFFF</font></p>\n<p><font color=#660000>#660000</font><br><font color=#660033>#660033</font><br><font color=#660066>#660066</font><br><font color=#660099>#660099</font><br><font color=#6600cc>#6600CC</font><br><font color=#6600ff>#6600FF</font></p>\n<p><font color=#663300>#663300</font><br><font color=#663333>#663333</font><br><font color=#663366>#663366</font><br><font color=#663399>#663399</font><br><font color=#6633cc>#6633CC</font><br><font color=#6633ff>#6633FF</font></p>\n<p><font color=#666600>#666600</font><br><font color=#666633>#666633</font><br><font color=#666666>#666666</font><br><font color=#666699>#666699</font><br><font color=#6666cc>#6666CC</font><br><font color=#6666ff>#6666FF</font></p>\n<p><font color=#669900>#669900</font><br><font color=#669933>#669933</font><br><font color=#669966>#669966</font><br><font color=#669999>#669999</font><br><font color=#6699cc>#6699CC</font><br><font color=#6699ff>#6699FF</font></p>\n<p><font color=#66cc00>#66CC00</font><br><font color=#66cc33>#66CC33</font><br><font color=#66cc66>#66CC66</font><br><font color=#66cc99>#66CC99</font><br><font color=#66cccc>#66CCCC</font><br><font color=#66ccff>#66CCFF</font></p>\n<p><font color=#66ff00>#66FF00</font><br><font color=#66ff33>#66FF33</font><br><font color=#66ff66>#66FF66</font><br><font color=#66ff99>#66FF99</font><br><font color=#66ffcc>#66FFCC</font><br><font color=#66ffff>#66FFFF</font></p>\n<p><font color=#990000>#990000</font><br><font color=#990033>#990033</font><br><font color=#990066>#990066</font><br><font color=#990099>#990099</font><br><font color=#9900cc>#9900CC</font><br><font color=#9900ff>#9900FF</font></p>\n<p><font color=#993300>#993300</font><br><font color=#993333>#993333</font><br><font color=#993366>#993366</font><br><font color=#993399>#993399</font><br><font color=#9933cc>#9933CC</font><br><font color=#9933ff>#9933FF</font></p>\n<p><font color=#996600>#996600</font><br><font color=#996633>#996633</font><br><font color=#996666>#996666</font><br><font color=#996699>#996699</font><br><font color=#9966cc>#9966CC</font><br><font color=#9966ff>#9966FF</font></p>\n<p><font color=#999900>#999900</font><br><font color=#999933>#999933</font><br><font color=#999966>#999966</font><br><font color=#999999>#999999</font><br><font color=#9999cc>#9999CC</font><br><font color=#9999ff>#9999FF</font></p>\n<p><font color=#99cc00>#99CC00</font><br><font color=#99cc33>#99CC33</font><br><font color=#99cc66>#99CC66</font><br><font color=#99cc99>#99CC99</font><br><font color=#99cccc>#99CCCC</font><br><font color=#99ccff>#99CCFF</font></p>\n<p><font color=#99ff00>#99FF00</font><br><font color=#99ff33>#99FF33</font><br><font color=#99ff66>#99FF66</font><br><font color=#99ff99>#99FF99</font><br><font color=#99ffcc>#99FFCC</font><br><font color=#99ffff>#99FFFF</font></p>\n<p><font color=#cc0000>#CC0000</font><br><font color=#cc0033>#CC0033</font><br><font color=#cc0066>#CC0066</font><br><font color=#cc0099>#CC0099</font><br><font color=#cc00cc>#CC00CC</font><br><font color=#cc00ff>#CC00FF</font></p>\n<p><font color=#cc3300>#CC3300</font><br><font color=#cc3333>#CC3333</font><br><font color=#cc3366>#CC3366</font><br><font color=#cc3399>#CC3399</font><br><font color=#cc33cc>#CC33CC</font><br><font color=#cc33ff>#CC33FF</font></p>\n<p><font color=#cc6600>#CC6600</font><br><font color=#cc6633>#CC6633</font><br><font color=#cc6666>#CC6666</font><br><font color=#cc6699>#CC6699</font><br><font color=#cc66cc>#CC66CC</font><br><font color=#cc66ff>#CC66FF</font></p>\n<p><font color=#cc9900>#CC9900</font><br><font color=#cc9933>#CC9933</font><br><font color=#cc9966>#CC9966</font><br><font color=#cc9999>#CC9999</font><br><font color=#cc99cc>#CC99CC</font><br><font color=#cc99ff>#CC99FF</font></p>\n<p><font color=#cccc00>#CCCC00</font><br><font color=#cccc33>#CCCC33</font><br><font color=#cccc66>#CCCC66</font><br><font color=#cccc99>#CCCC99</font><br><font color=#cccccc>#CCCCCC</font><br><font color=#ccccff>#CCCCFF</font></p>\n<p><font color=#ccff00>#CCFF00</font><br><font color=#ccff33>#CCFF33</font><br><font color=#ccff66>#CCFF66</font><br><font color=#ccff99>#CCFF99</font><br><font color=#ccffcc>#CCFFCC</font><br><font color=#ccffff>#CCFFFF</font></p>\n<p><font color=#ff0000>#FF0000</font><br><font color=#ff0033>#FF0033</font><br><font color=#ff0066>#FF0066</font><br><font color=#ff0099>#FF0099</font><br><font color=#ff00cc>#FF00CC</font><br><font color=#ff00ff>#FF00FF</font></p>\n<p><font color=#ff3300>#FF3300</font><br><font color=#ff3333>#FF3333</font><br><font color=#ff3366>#FF3366</font><br><font color=#ff3399>#FF3399</font><br><font color=#ff33cc>#FF33CC</font><br><font color=#ff33ff>#FF33FF</font></p>\n<p><font color=#ff6600>#FF6600</font><br><font color=#ff6633>#FF6633</font><br><font color=#ff6666>#FF6666</font><br><font color=#ff6699>#FF6699</font><br><font color=#ff66cc>#FF66CC</font><br><font color=#ff66ff>#FF66FF</font></p>\n<p><font color=#ff9900>#FF9900</font><br><font color=#ff9933>#FF9933</font><br><font color=#ff9966>#FF9966</font><br><font color=#ff9999>#FF9999</font><br><font color=#ff99cc>#FF99CC</font><br><font color=#ff99ff>#FF99FF</font></p>\n<p><font color=#ffcc00>#FFCC00</font><br><font color=#ffcc33>#FFCC33</font><br><font color=#ffcc66>#FFCC66</font><br><font color=#ffcc99>#FFCC99</font><br><font color=#ffcccc>#FFCCCC</font><br><font color=#ffccff>#FFCCFF</font></p>\n<p><font color=#ffff00>#FFFF00</font><br><font color=#ffff33>#FFFF33</font><br><font color=#ffff66>#FFFF66</font><br><font color=#ffff99>#FFFF99</font><br><font color=#ffffcc>#FFFFCC</font><br><font color=#ffffff>#FFFFFF</font></p>\n"},{"title":"files","date":"1000-12-16T00:44:02.000Z","_content":"\nALL-blogs 8000\nLiQing 8100\nfiles 8001","source":"_posts/0-files.md","raw":"---\ntitle: files\ndate: 1000-12-16 08:49:02\ncategories:\ntags:\n---\n\nALL-blogs 8000\nLiQing 8100\nfiles 8001","slug":"0-files","published":1,"updated":"2023-07-23T14:19:13.187Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkjdd1ab000198ajdi26dhad","content":"<p>ALL-blogs 8000<br>LiQing 8100<br>files 8001</p>\n","site":{"data":{}},"excerpt":"","more":"<p>ALL-blogs 8000<br>LiQing 8100<br>files 8001</p>\n"},{"title":"你好！","mp3":"http://domain.com/awesome.mp3","cover":"http://domain.com/awesome.jpg","date":"2022-10-24T06:36:41.000Z","_content":"![12](https://pcsdata.baidu.com/thumbnail/483248448v227de29eb01af11fdffd46?fid=1101681636621-16051585-804180860705024&rt=pr&sign=FDTAER-yUdy3dSFZ0SVxtzShv1zcMqd-KEo5Ny0m3tVp5YZDRpf7yHWRCFk%3D&expires=2h&chkv=0&chkbd=0&chkpc=&dp-logid=8753300591265344544&dp-callid=0&time=1669276800&bus_no=26&size=c1600_u1600&quality=100&vuk=-&ft=video)\n\n![13](https://cdn.flowus.cn/oss/0a3c92e3-8dbf-44c7-9b76-9de069baca29/1671641288062956.jpeg?time=1671669900&token=54acd9abe3dc475c9ee6d6c49efe01cb)\n\n![14](https://gitee.com/shy2289895723/blog-img/raw/master/%E5%8D%9A%E5%AE%A2%E5%85%B6%E4%BB%96/qi_ta.1.jpg)\n\n![15](http://nextcloud.xiaoxiaosky.top/core/preview?fileId=8&x=1920&y=1080&a=true)\n","source":"_posts/0-hi.md","raw":"---\ntitle: 你好！\nmp3: http://domain.com/awesome.mp3\ncover: http://domain.com/awesome.jpg\ndate: 2022-10-24 14:36:41\ncategories:\n# top: 100\ntags:\n---\n![12](https://pcsdata.baidu.com/thumbnail/483248448v227de29eb01af11fdffd46?fid=1101681636621-16051585-804180860705024&rt=pr&sign=FDTAER-yUdy3dSFZ0SVxtzShv1zcMqd-KEo5Ny0m3tVp5YZDRpf7yHWRCFk%3D&expires=2h&chkv=0&chkbd=0&chkpc=&dp-logid=8753300591265344544&dp-callid=0&time=1669276800&bus_no=26&size=c1600_u1600&quality=100&vuk=-&ft=video)\n\n![13](https://cdn.flowus.cn/oss/0a3c92e3-8dbf-44c7-9b76-9de069baca29/1671641288062956.jpeg?time=1671669900&token=54acd9abe3dc475c9ee6d6c49efe01cb)\n\n![14](https://gitee.com/shy2289895723/blog-img/raw/master/%E5%8D%9A%E5%AE%A2%E5%85%B6%E4%BB%96/qi_ta.1.jpg)\n\n![15](http://nextcloud.xiaoxiaosky.top/core/preview?fileId=8&x=1920&y=1080&a=true)\n","slug":"0-hi","published":1,"updated":"2023-07-23T14:19:13.675Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkjdd1ak000398aj6khodtnq","content":"<p><img src=\"https://pcsdata.baidu.com/thumbnail/483248448v227de29eb01af11fdffd46?fid=1101681636621-16051585-804180860705024&rt=pr&sign=FDTAER-yUdy3dSFZ0SVxtzShv1zcMqd-KEo5Ny0m3tVp5YZDRpf7yHWRCFk=&expires=2h&chkv=0&chkbd=0&chkpc=&dp-logid=8753300591265344544&dp-callid=0&time=1669276800&bus_no=26&size=c1600_u1600&quality=100&vuk=-&ft=video\" alt=\"12\"></p>\n<p><img src=\"https://cdn.flowus.cn/oss/0a3c92e3-8dbf-44c7-9b76-9de069baca29/1671641288062956.jpeg?time=1671669900&token=54acd9abe3dc475c9ee6d6c49efe01cb\" alt=\"13\"></p>\n<p><img src=\"https://gitee.com/shy2289895723/blog-img/raw/master/%E5%8D%9A%E5%AE%A2%E5%85%B6%E4%BB%96/qi_ta.1.jpg\" alt=\"14\"></p>\n<p><img src=\"http://nextcloud.xiaoxiaosky.top/core/preview?fileId=8&x=1920&y=1080&a=true\" alt=\"15\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://pcsdata.baidu.com/thumbnail/483248448v227de29eb01af11fdffd46?fid=1101681636621-16051585-804180860705024&rt=pr&sign=FDTAER-yUdy3dSFZ0SVxtzShv1zcMqd-KEo5Ny0m3tVp5YZDRpf7yHWRCFk=&expires=2h&chkv=0&chkbd=0&chkpc=&dp-logid=8753300591265344544&dp-callid=0&time=1669276800&bus_no=26&size=c1600_u1600&quality=100&vuk=-&ft=video\" alt=\"12\"></p>\n<p><img src=\"https://cdn.flowus.cn/oss/0a3c92e3-8dbf-44c7-9b76-9de069baca29/1671641288062956.jpeg?time=1671669900&token=54acd9abe3dc475c9ee6d6c49efe01cb\" alt=\"13\"></p>\n<p><img src=\"https://gitee.com/shy2289895723/blog-img/raw/master/%E5%8D%9A%E5%AE%A2%E5%85%B6%E4%BB%96/qi_ta.1.jpg\" alt=\"14\"></p>\n<p><img src=\"http://nextcloud.xiaoxiaosky.top/core/preview?fileId=8&x=1920&y=1080&a=true\" alt=\"15\"></p>\n"},{"title":"暑期社会实践 活动安排（草案一）","date":"2023-05-23T09:47:18.000Z","_content":"\n# 创意科技营：从运动到设计，全方位体验智能世界！\n\n### Day 1：体育和数学   \n\n\n\n### Day 2：机器人日     \n\n\n\n### Day 3：3D打印日     \n\n\n\n### Day 4：木工日       \n\n\n\n### Day 5：项目整合日   \n\n\n\n","source":"_posts/2023summer.md","raw":"---\ntitle: 暑期社会实践 活动安排（草案一）\ndate: 2023-5-23 17:47:18\ntags: STEAM\ncategories: 社团\n---\n\n# 创意科技营：从运动到设计，全方位体验智能世界！\n\n### Day 1：体育和数学   \n\n\n\n### Day 2：机器人日     \n\n\n\n### Day 3：3D打印日     \n\n\n\n### Day 4：木工日       \n\n\n\n### Day 5：项目整合日   \n\n\n\n","slug":"2023summer","published":1,"updated":"2023-07-23T14:19:12.312Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkjdd1am000498ajdpq69rec","content":"<h1 id=\"创意科技营：从运动到设计，全方位体验智能世界！\"><a href=\"#创意科技营：从运动到设计，全方位体验智能世界！\" class=\"headerlink\" title=\"创意科技营：从运动到设计，全方位体验智能世界！\"></a>创意科技营：从运动到设计，全方位体验智能世界！</h1><h3 id=\"Day-1：体育和数学\"><a href=\"#Day-1：体育和数学\" class=\"headerlink\" title=\"Day 1：体育和数学\"></a>Day 1：体育和数学</h3><h3 id=\"Day-2：机器人日\"><a href=\"#Day-2：机器人日\" class=\"headerlink\" title=\"Day 2：机器人日\"></a>Day 2：机器人日</h3><h3 id=\"Day-3：3D打印日\"><a href=\"#Day-3：3D打印日\" class=\"headerlink\" title=\"Day 3：3D打印日\"></a>Day 3：3D打印日</h3><h3 id=\"Day-4：木工日\"><a href=\"#Day-4：木工日\" class=\"headerlink\" title=\"Day 4：木工日\"></a>Day 4：木工日</h3><h3 id=\"Day-5：项目整合日\"><a href=\"#Day-5：项目整合日\" class=\"headerlink\" title=\"Day 5：项目整合日\"></a>Day 5：项目整合日</h3>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"创意科技营：从运动到设计，全方位体验智能世界！\"><a href=\"#创意科技营：从运动到设计，全方位体验智能世界！\" class=\"headerlink\" title=\"创意科技营：从运动到设计，全方位体验智能世界！\"></a>创意科技营：从运动到设计，全方位体验智能世界！</h1><h3 id=\"Day-1：体育和数学\"><a href=\"#Day-1：体育和数学\" class=\"headerlink\" title=\"Day 1：体育和数学\"></a>Day 1：体育和数学</h3><h3 id=\"Day-2：机器人日\"><a href=\"#Day-2：机器人日\" class=\"headerlink\" title=\"Day 2：机器人日\"></a>Day 2：机器人日</h3><h3 id=\"Day-3：3D打印日\"><a href=\"#Day-3：3D打印日\" class=\"headerlink\" title=\"Day 3：3D打印日\"></a>Day 3：3D打印日</h3><h3 id=\"Day-4：木工日\"><a href=\"#Day-4：木工日\" class=\"headerlink\" title=\"Day 4：木工日\"></a>Day 4：木工日</h3><h3 id=\"Day-5：项目整合日\"><a href=\"#Day-5：项目整合日\" class=\"headerlink\" title=\"Day 5：项目整合日\"></a>Day 5：项目整合日</h3>"},{"title":"C++_Basic","date":"2023-04-02T06:33:35.000Z","_content":"\n# C/C++基本语法模板\n\n## printf\n\n\n```C\n#include <stdio.h>\n\nint main(){\n\tprintf(\"Hello World!\");\n\t\n\treturn 0;\n}\n```\n\n## scanf\n\n```C\n#include <stdio.h>\n\nint main(){\n\tint i;\n\tscanf(\"%d\",&i);\n\n\treturn 0;\n}\n```\n\n","source":"_posts/C-Basic.md","raw":"---\ntitle: C++_Basic\ndate: 2023-04-02 14:33:35\ncategories:\ntags:\n---\n\n# C/C++基本语法模板\n\n## printf\n\n\n```C\n#include <stdio.h>\n\nint main(){\n\tprintf(\"Hello World!\");\n\t\n\treturn 0;\n}\n```\n\n## scanf\n\n```C\n#include <stdio.h>\n\nint main(){\n\tint i;\n\tscanf(\"%d\",&i);\n\n\treturn 0;\n}\n```\n\n","slug":"C-Basic","published":1,"updated":"2023-07-23T14:19:12.639Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkjdd1ap000598aj45hr1obd","content":"<h1 id=\"C-C-基本语法模板\"><a href=\"#C-C-基本语法模板\" class=\"headerlink\" title=\"C&#x2F;C++基本语法模板\"></a>C&#x2F;C++基本语法模板</h1><h2 id=\"printf\"><a href=\"#printf\" class=\"headerlink\" title=\"printf\"></a>printf</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Hello World!&quot;</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"scanf\"><a href=\"#scanf\" class=\"headerlink\" title=\"scanf\"></a>scanf</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> i;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;i);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"C-C-基本语法模板\"><a href=\"#C-C-基本语法模板\" class=\"headerlink\" title=\"C&#x2F;C++基本语法模板\"></a>C&#x2F;C++基本语法模板</h1><h2 id=\"printf\"><a href=\"#printf\" class=\"headerlink\" title=\"printf\"></a>printf</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Hello World!&quot;</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"scanf\"><a href=\"#scanf\" class=\"headerlink\" title=\"scanf\"></a>scanf</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> i;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;i);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"JAVA学习笔记-初识程序“HelloWorld”","date":"2022-09-10T02:56:11.000Z","_content":"\n# JAVA-HelloWorld\n\n## Show main code \n\n```java\n\npublic class HelloWorld{\n        public static void main (String[] args){\n                System.out.println(\"Hello\");\n        }\n}\n\n```\n\n## line by line explan\n\n- set `class` `HelloWorld`\n- set `main` way \n\n## start the projiec\n\n```\ncd ./HelloWorld.java\n```\n\n```\njavac HelloWorld.java\n\n\njava HelloWorld\n\n```\n\n\n\n\n\n\n\n","source":"_posts/JAVA-HelloWorld.md","raw":"---\ntitle: JAVA学习笔记-初识程序“HelloWorld”\ntags:\n  - java\ndate: 2022-09-10 10:56:11\ncategories: 学习\n---\n\n# JAVA-HelloWorld\n\n## Show main code \n\n```java\n\npublic class HelloWorld{\n        public static void main (String[] args){\n                System.out.println(\"Hello\");\n        }\n}\n\n```\n\n## line by line explan\n\n- set `class` `HelloWorld`\n- set `main` way \n\n## start the projiec\n\n```\ncd ./HelloWorld.java\n```\n\n```\njavac HelloWorld.java\n\n\njava HelloWorld\n\n```\n\n\n\n\n\n\n\n","slug":"JAVA-HelloWorld","published":1,"updated":"2023-07-23T14:19:12.670Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkjdd1at000998aj0dv1412d","content":"<h1 id=\"JAVA-HelloWorld\"><a href=\"#JAVA-HelloWorld\" class=\"headerlink\" title=\"JAVA-HelloWorld\"></a>JAVA-HelloWorld</h1><h2 id=\"Show-main-code\"><a href=\"#Show-main-code\" class=\"headerlink\" title=\"Show main code\"></a>Show main code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloWorld</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span> <span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"line-by-line-explan\"><a href=\"#line-by-line-explan\" class=\"headerlink\" title=\"line by line explan\"></a>line by line explan</h2><ul>\n<li>set <code>class</code> <code>HelloWorld</code></li>\n<li>set <code>main</code> way</li>\n</ul>\n<h2 id=\"start-the-projiec\"><a href=\"#start-the-projiec\" class=\"headerlink\" title=\"start the projiec\"></a>start the projiec</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ./HelloWorld.java</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac HelloWorld.java</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">java HelloWorld</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JAVA-HelloWorld\"><a href=\"#JAVA-HelloWorld\" class=\"headerlink\" title=\"JAVA-HelloWorld\"></a>JAVA-HelloWorld</h1><h2 id=\"Show-main-code\"><a href=\"#Show-main-code\" class=\"headerlink\" title=\"Show main code\"></a>Show main code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloWorld</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span> <span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"line-by-line-explan\"><a href=\"#line-by-line-explan\" class=\"headerlink\" title=\"line by line explan\"></a>line by line explan</h2><ul>\n<li>set <code>class</code> <code>HelloWorld</code></li>\n<li>set <code>main</code> way</li>\n</ul>\n<h2 id=\"start-the-projiec\"><a href=\"#start-the-projiec\" class=\"headerlink\" title=\"start the projiec\"></a>start the projiec</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ./HelloWorld.java</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac HelloWorld.java</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">java HelloWorld</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n"},{"title":"Screamcut-Snipaste","date":"2023-01-26T05:05:46.000Z","_content":"\n## 免费截屏软件`Snipaste`\n\n首选项汇总：\n\n|           操作 | 快捷键   | 备注 |\n| -------------- | -------- | ---- |\n|           截屏 | F1       |      |\n|     截屏并复制 | Ctrl+F1  |      |\n|     自定义截屏 | Shift+F1 |      |\n|           贴图 | F3       |      |\n| 切换另一组贴图 | Ctrl+F3  |      |\n|   鼠标穿透开关 | Ctrl+F3  |      |\n| 显示和隐藏贴图 | Shift+F3 |      |\n","source":"_posts/Screamcut-Snipaste.md","raw":"---\ntitle: Screamcut-Snipaste\ndate: 2023-01-26 13:05:46\ncategories:\ntags:\n---\n\n## 免费截屏软件`Snipaste`\n\n首选项汇总：\n\n|           操作 | 快捷键   | 备注 |\n| -------------- | -------- | ---- |\n|           截屏 | F1       |      |\n|     截屏并复制 | Ctrl+F1  |      |\n|     自定义截屏 | Shift+F1 |      |\n|           贴图 | F3       |      |\n| 切换另一组贴图 | Ctrl+F3  |      |\n|   鼠标穿透开关 | Ctrl+F3  |      |\n| 显示和隐藏贴图 | Shift+F3 |      |\n","slug":"Screamcut-Snipaste","published":1,"updated":"2023-07-23T14:19:12.733Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkjdd1aw000a98ajbiiy6xks","content":"<h2 id=\"免费截屏软件Snipaste\"><a href=\"#免费截屏软件Snipaste\" class=\"headerlink\" title=\"免费截屏软件Snipaste\"></a>免费截屏软件<code>Snipaste</code></h2><p>首选项汇总：</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>快捷键</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>截屏</td>\n<td>F1</td>\n<td></td>\n</tr>\n<tr>\n<td>截屏并复制</td>\n<td>Ctrl+F1</td>\n<td></td>\n</tr>\n<tr>\n<td>自定义截屏</td>\n<td>Shift+F1</td>\n<td></td>\n</tr>\n<tr>\n<td>贴图</td>\n<td>F3</td>\n<td></td>\n</tr>\n<tr>\n<td>切换另一组贴图</td>\n<td>Ctrl+F3</td>\n<td></td>\n</tr>\n<tr>\n<td>鼠标穿透开关</td>\n<td>Ctrl+F3</td>\n<td></td>\n</tr>\n<tr>\n<td>显示和隐藏贴图</td>\n<td>Shift+F3</td>\n<td></td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"免费截屏软件Snipaste\"><a href=\"#免费截屏软件Snipaste\" class=\"headerlink\" title=\"免费截屏软件Snipaste\"></a>免费截屏软件<code>Snipaste</code></h2><p>首选项汇总：</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>快捷键</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>截屏</td>\n<td>F1</td>\n<td></td>\n</tr>\n<tr>\n<td>截屏并复制</td>\n<td>Ctrl+F1</td>\n<td></td>\n</tr>\n<tr>\n<td>自定义截屏</td>\n<td>Shift+F1</td>\n<td></td>\n</tr>\n<tr>\n<td>贴图</td>\n<td>F3</td>\n<td></td>\n</tr>\n<tr>\n<td>切换另一组贴图</td>\n<td>Ctrl+F3</td>\n<td></td>\n</tr>\n<tr>\n<td>鼠标穿透开关</td>\n<td>Ctrl+F3</td>\n<td></td>\n</tr>\n<tr>\n<td>显示和隐藏贴图</td>\n<td>Shift+F3</td>\n<td></td>\n</tr>\n</tbody></table>\n"},{"title":"arduino与RFID-RC522模块实现IC卡读取与写入（待整理）","date":"2023-01-06T01:20:51.000Z","_content":"https://blog.csdn.net/weixin_43031092/article/details/108651982\n\n简介\n单片机：Arduino Uno\n额外库：MFRC522（可直接在库管理器下载）\n\nS50 IC卡 采用NXP MF1 IC S50制作的非接触智能卡，通常简称S50卡或Mifare 1K，符合ISO14443A标准；存储容量：8Kbit，16个分区，每分区两组密码。\n\n枯叶笑与东方大叔的IC卡小结\n分类 IC - ID\n市场上常用的卡片就两种，IC卡和ID卡，这两者的区别就是IC卡有存储芯片（如M1,UID,CUID,FUID,UFUID），而 ID卡只是一个卡号（ 全称为身份识别卡，是一种不可写入的感应卡，含固定的编号.卡号在封卡前写入后不可再更改）。CPU卡因为价格太高，没有推广起来\n\nIC卡的芯片，目前市场上常用的有两种，一种是价格较高的飞利浦原装芯片，一种是上海复旦芯片；原装飞利浦芯片IC卡，市场拿货价不超过3元，例如公交卡，国产芯片IC卡，价格几毛钱，常用于电梯、停车场、食堂就餐、水卡\n\nIC卡和ID卡都可以用于一卡通系统，各有优缺点：\n\nID卡，因为只是ID号，没有内置存储芯片，因此，当ID卡用于一卡通系统时，必须要电脑开着，因为，你消费扣款或充值，都是从电脑数据库里加加减减，这类似于磁条性质的银行卡，卡片本身没有钱，你取钱存钱，其实都是在银行数据库里加减\n\n优点：因为是从电脑数据库里直接加减，因此，充值或取款，卡片无需到场，刷卡数据实时传输到电脑\n缺点：电脑坏了或通讯有问题，整套系统都瘫痪（脱机消费模式也行，这里不具体讲）\nIC卡，常用的公交卡、地铁卡都是IC卡，内置芯片，0-15 共16个扇区，可以写入数据\n\n优点：因为钱是直接存储在卡里面，因此，消费时，无需联网，跟电脑无关，直接从卡里面扣钱\n缺点：充值时，卡片必须到场 （省事的方法，补贴机之类），刷卡数据暂时储存在刷卡机里，待电脑开机后，采集消费数据到电脑\nIC细分类\nM1 卡\n普通IC卡，0扇区不可以修改，其他扇区可反复擦写，我们使用的电梯卡、门禁卡等智能卡发卡商所使用的都是 M1 卡，可以理解为物业发的原卡。\n\nUID 卡\n普通复制卡，可以重复擦写所有扇区，主要应用在IC卡复制上，遇到带有防火墙的读卡器就会失效。\n\nCUID 卡\n可擦写防屏蔽卡，可以重复擦写所有扇区，UID卡复制无效的情况下使用，可以绕过防火墙。\n（防屏蔽就是防止某些设备里面有检测机制能够检查出卡片是否为复制卡，cuid卡比较常用，需要注意第二次使用需要格式化，还有说明一下 0扇区就是机器与卡片的桥梁用来存放对应信息。）\n\nFUID 卡\n不可擦写防屏蔽卡，此卡的特点0扇区只能写入一次，写入一次变成 M1 卡，CUID 复制没用的情况下使用，可以绕过防火墙。\n\nUFUID 卡\n高级复制卡，我们就理解为是 UID 和 FUID 的合成卡，需要封卡操作，不封卡就是 UID 卡，封卡后就变为 M1 卡。\n\n工具\nACR122\n使用最多的读卡器，很流行，大抵是因为网络上流传了非常强大的GUI改卡读卡复制卡软件吧。\n\nProxmark3\n国外的开源硬件，由FPGA驱动。性能十分强大，集嗅探、读取、克隆于一体，IC卡和ID卡通杀。\n\nPN532\n由NXP出品，是一款高度集成的载波的13.56MHz传输模块，基于80C51内核有40KROM、1KRAM。某宝价格为几十元，非常便宜。只能用来读取IC卡，不能读取ID卡和CPU卡。\n\n入门\n引脚接线\n常用接线也在示例程序中写明，这里我使用的是Arduino Uno，所以接线参考前两列即可。\n\n * Typical pin layout used:\n * -----------------------------------------------------------------------------------------\n *             MFRC522      Arduino       Arduino   Arduino    Arduino          Arduino\n *             Reader/PCD   Uno/101       Mega      Nano v3    Leonardo/Micro   Pro Micro\n * Signal      Pin          Pin           Pin       Pin        Pin              Pin\n * -----------------------------------------------------------------------------------------\n * RST/Reset   RST          9             5         D9         RESET/ICSP-5     RST\n * SPI SS      SDA(SS)      10            53        D10        10               10\n * SPI MOSI    MOSI         11 / ICSP-4   51        D11        ICSP-4           16\n * SPI MISO    MISO         12 / ICSP-1   50        D12        ICSP-1           14\n * SPI SCK     SCK          13 / ICSP-3   52        D13        ICSP-3           15\n */\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n即（左侧为RFID-RC522引脚，右侧为Uno引脚）\nRST <----------> 9\nSDA(SS) <----------> 10\nMOSI <----------> 11\nMISO <----------> 12\nSCK <----------> 13\n3.3V <----------> 3.3V\nGND <----------> GND\n\n\n读取 UNID <-> 卡号 <-> ID号\n这里使用的是MFRC522库中的示例-ReadUNID，读取卡号。\n据说每一张卡的ID都不一样-,-读取卡号就能判断身份，不过最好是先尝试写入数据（尝试修改卡号），能修改的卡说明是复制卡，这就需要认真对待这样卡的安全性了。\n\nSketch\n\n#include <SPI.h>\n#include <MFRC522.h>\n\n#define SS_PIN 10\n#define RST_PIN 9\n \nMFRC522 rfid(SS_PIN, RST_PIN); // Instance of the class\n\nMFRC522::MIFARE_Key key; \n\n// Init array that will store new NUID \nbyte nuidPICC[4];\n\nvoid setup() { \n  Serial.begin(9600);\n  SPI.begin(); // Init SPI bus\n  Serial.println(F(\"Start--------------------\"));\n  rfid.PCD_Init(); // Init MFRC522 \n\n  for (byte i = 0; i < 6; i++) {\n    key.keyByte[i] = 0xFF;\n  }\n\n  Serial.println(F(\"This code scan the MIFARE Classsic NUID.\"));\n  Serial.print(F(\"Using the following key:\"));\n  printHex(key.keyByte, MFRC522::MF_KEY_SIZE);\n}\n \nvoid loop() {\n\n  // Reset the loop if no new card present on the sensor/reader. This saves the entire process when idle.\n  if ( ! rfid.PICC_IsNewCardPresent())\n    return;\n\n  // Verify if the NUID has been readed\n  if ( ! rfid.PICC_ReadCardSerial())\n    return;\n\n  Serial.print(F(\"PICC type: \"));\n  MFRC522::PICC_Type piccType = rfid.PICC_GetType(rfid.uid.sak);\n  Serial.println(rfid.PICC_GetTypeName(piccType));\n\n  // Check is the PICC of Classic MIFARE type\n  if (piccType != MFRC522::PICC_TYPE_MIFARE_MINI &&  \n    piccType != MFRC522::PICC_TYPE_MIFARE_1K &&\n    piccType != MFRC522::PICC_TYPE_MIFARE_4K) {\n    Serial.println(F(\"Your tag is not of type MIFARE Classic.\"));\n    return;\n  }\n\n  if (rfid.uid.uidByte[0] != nuidPICC[0] || \n    rfid.uid.uidByte[1] != nuidPICC[1] || \n    rfid.uid.uidByte[2] != nuidPICC[2] || \n    rfid.uid.uidByte[3] != nuidPICC[3] ) {\n    Serial.println(F(\"A new card has been detected.\"));\n\n    // Store NUID into nuidPICC array\n    for (byte i = 0; i < 4; i++) {\n      nuidPICC[i] = rfid.uid.uidByte[i];\n    }\n   \n    Serial.println(F(\"The NUID tag is:\"));\n    Serial.print(F(\"In hex: \"));\n    printHex(rfid.uid.uidByte, rfid.uid.size);\n    Serial.println();\n    Serial.print(F(\"In dec: \"));\n    printDec(rfid.uid.uidByte, rfid.uid.size);\n    Serial.println();\n  }\n  else Serial.println(F(\"Card read previously.\"));\n\n  // Halt PICC\n  rfid.PICC_HaltA();\n\n  // Stop encryption on PCD\n  rfid.PCD_StopCrypto1();\n}\n\n\n/**\n * Helper routine to dump a byte array as hex values to Serial. \n */\nvoid printHex(byte *buffer, byte bufferSize) {\n  for (byte i = 0; i < bufferSize; i++) {\n    Serial.print(buffer[i] < 0x10 ? \" 0\" : \" \");\n    Serial.print(buffer[i], HEX);\n  }\n}\n\n/**\n * Helper routine to dump a byte array as dec values to Serial.\n */\nvoid printDec(byte *buffer, byte bufferSize) {\n  for (byte i = 0; i < bufferSize; i++) {\n    Serial.print(buffer[i] < 0x10 ? \" 0\" : \" \");\n    Serial.print(buffer[i], DEC);\n  }\n}\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n结果\n打开Arduino的串口监视器，下载好程序，把IC卡刷到RFID-RC522模块上有标记线圈的位置，就能在串口监视器中看到其编号（饭卡、银行卡刷不出来。。。。。）\n\n\n写入&&读取个人信息：名+姓氏\n接线请往上爬，一模一样。\n\nSketch-写入\nrfid_write_personal_data.ino\n\n#include <SPI.h>\n#include <MFRC522.h>\n\n#define RST_PIN         9           // Configurable, see typical pin layout above\n#define SS_PIN          10          // Configurable, see typical pin layout above\n\nMFRC522 mfrc522(SS_PIN, RST_PIN);   // Create MFRC522 instance\n\nvoid setup() {\n  Serial.begin(9600);        // Initialize serial communications with the PC\n  SPI.begin();               // Init SPI bus\n  mfrc522.PCD_Init();        // Init MFRC522 card\n  Serial.println(F(\"Write personal data on a MIFARE PICC \"));\n}\n\nvoid loop() {\n\n  // Prepare key - all keys are set to FFFFFFFFFFFFh at chip delivery from the factory.\n  MFRC522::MIFARE_Key key;\n  for (byte i = 0; i < 6; i++) key.keyByte[i] = 0xFF;\n\n  // Reset the loop if no new card present on the sensor/reader. This saves the entire process when idle.\n  if ( ! mfrc522.PICC_IsNewCardPresent()) {\n    return;\n  }\n\n  // Select one of the cards\n  if ( ! mfrc522.PICC_ReadCardSerial()) {\n    return;\n  }\n\n  Serial.print(F(\"Card UID:\"));    //Dump UID\n  for (byte i = 0; i < mfrc522.uid.size; i++) {\n    Serial.print(mfrc522.uid.uidByte[i] < 0x10 ? \" 0\" : \" \");\n    Serial.print(mfrc522.uid.uidByte[i], HEX);\n  }\n  Serial.print(F(\" PICC type: \"));   // Dump PICC type\n  MFRC522::PICC_Type piccType = mfrc522.PICC_GetType(mfrc522.uid.sak);\n  Serial.println(mfrc522.PICC_GetTypeName(piccType));\n\n  byte buffer[34];\n  byte block;\n  MFRC522::StatusCode status;\n  byte len;\n\n  Serial.setTimeout(20000L) ;     // wait until 20 seconds for input from serial\n  // Ask personal data: Family name\n  Serial.println(F(\"Type Family name, ending with #\"));\n  len = Serial.readBytesUntil('#', (char *) buffer, 30) ; // read family name from serial\n  for (byte i = len; i < 30; i++) buffer[i] = ' ';     // pad with spaces\n\n  block = 1;\n  //Serial.println(F(\"Authenticating using key A...\"));\n  status = mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, block, &key, &(mfrc522.uid));\n  if (status != MFRC522::STATUS_OK) {\n    Serial.print(F(\"PCD_Authenticate() failed: \"));\n    Serial.println(mfrc522.GetStatusCodeName(status));\n    return;\n  }\n  else Serial.println(F(\"PCD_Authenticate() success: \"));\n\n  // Write block\n  status = mfrc522.MIFARE_Write(block, buffer, 16);\n  if (status != MFRC522::STATUS_OK) {\n    Serial.print(F(\"MIFARE_Write() failed: \"));\n    Serial.println(mfrc522.GetStatusCodeName(status));\n    return;\n  }\n  else Serial.println(F(\"MIFARE_Write() success: \"));\n\n  block = 2;\n  //Serial.println(F(\"Authenticating using key A...\"));\n  status = mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, block, &key, &(mfrc522.uid));\n  if (status != MFRC522::STATUS_OK) {\n    Serial.print(F(\"PCD_Authenticate() failed: \"));\n    Serial.println(mfrc522.GetStatusCodeName(status));\n    return;\n  }\n\n  // Write block\n  status = mfrc522.MIFARE_Write(block, &buffer[16], 16);\n  if (status != MFRC522::STATUS_OK) {\n    Serial.print(F(\"MIFARE_Write() failed: \"));\n    Serial.println(mfrc522.GetStatusCodeName(status));\n    return;\n  }\n  else Serial.println(F(\"MIFARE_Write() success: \"));\n\n  // Ask personal data: First name\n  Serial.println(F(\"Type First name, ending with #\"));\n  len = Serial.readBytesUntil('#', (char *) buffer, 20) ; // read first name from serial\n  for (byte i = len; i < 20; i++) buffer[i] = ' ';     // pad with spaces\n\n  block = 4;\n  //Serial.println(F(\"Authenticating using key A...\"));\n  status = mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, block, &key, &(mfrc522.uid));\n  if (status != MFRC522::STATUS_OK) {\n    Serial.print(F(\"PCD_Authenticate() failed: \"));\n    Serial.println(mfrc522.GetStatusCodeName(status));\n    return;\n  }\n\n  // Write block\n  status = mfrc522.MIFARE_Write(block, buffer, 16);\n  if (status != MFRC522::STATUS_OK) {\n    Serial.print(F(\"MIFARE_Write() failed: \"));\n    Serial.println(mfrc522.GetStatusCodeName(status));\n    return;\n  }\n  else Serial.println(F(\"MIFARE_Write() success: \"));\n\n  block = 5;\n  //Serial.println(F(\"Authenticating using key A...\"));\n  status = mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, block, &key, &(mfrc522.uid));\n  if (status != MFRC522::STATUS_OK) {\n    Serial.print(F(\"PCD_Authenticate() failed: \"));\n    Serial.println(mfrc522.GetStatusCodeName(status));\n    return;\n  }\n\n  // Write block\n  status = mfrc522.MIFARE_Write(block, &buffer[16], 16);\n  if (status != MFRC522::STATUS_OK) {\n    Serial.print(F(\"MIFARE_Write() failed: \"));\n    Serial.println(mfrc522.GetStatusCodeName(status));\n    return;\n  }\n  else Serial.println(F(\"MIFARE_Write() success: \"));\n\n\n  Serial.println(\" \");\n  mfrc522.PICC_HaltA(); // Halt PICC\n  mfrc522.PCD_StopCrypto1();  // Stop encryption on PCD\n\n}\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\nResult\n\n例如我第一次输入 Smith#\n第二次输入 Rick#\n\nSketch-读取\n#include <SPI.h>\n#include <MFRC522.h>\n\n#define RST_PIN         9           // Configurable, see typical pin layout above\n#define SS_PIN          10          // Configurable, see typical pin layout above\n\nMFRC522 mfrc522(SS_PIN, RST_PIN);   // Create MFRC522 instance\n\n//*****************************************************************************************//\nvoid setup() {\n  Serial.begin(9600);                                           // Initialize serial communications with the PC\n  SPI.begin();                                                  // Init SPI bus\n  mfrc522.PCD_Init();                                              // Init MFRC522 card\n  Serial.println(F(\"Read personal data on a MIFARE PICC:\"));    //shows in serial that it is ready to read\n}\n\n//*****************************************************************************************//\nvoid loop() {\n\n  // Prepare key - all keys are set to FFFFFFFFFFFFh at chip delivery from the factory.\n  MFRC522::MIFARE_Key key;\n  for (byte i = 0; i < 6; i++) key.keyByte[i] = 0xFF;\n\n  //some variables we need\n  byte block;\n  byte len;\n  MFRC522::StatusCode status;\n\n  //-------------------------------------------\n\n  // Reset the loop if no new card present on the sensor/reader. This saves the entire process when idle.\n  if ( ! mfrc522.PICC_IsNewCardPresent()) {\n    return;\n  }\n\n  // Select one of the cards\n  if ( ! mfrc522.PICC_ReadCardSerial()) {\n    return;\n  }\n\n  Serial.println(F(\"**Card Detected:**\"));\n\n  //-------------------------------------------\n\n  mfrc522.PICC_DumpDetailsToSerial(&(mfrc522.uid)); //dump some details about the card\n\n  //mfrc522.PICC_DumpToSerial(&(mfrc522.uid));      //uncomment this to see all blocks in hex\n\n  //-------------------------------------------\n\n  Serial.print(F(\"Name: \"));\n\n  byte buffer1[18];\n\n  block = 4;\n  len = 18;\n\n  //------------------------------------------- GET FIRST NAME\n  status = mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, 4, &key, &(mfrc522.uid)); //line 834 of MFRC522.cpp file\n  if (status != MFRC522::STATUS_OK) {\n    Serial.print(F(\"Authentication failed: \"));\n    Serial.println(mfrc522.GetStatusCodeName(status));\n    return;\n  }\n\n  status = mfrc522.MIFARE_Read(block, buffer1, &len);\n  if (status != MFRC522::STATUS_OK) {\n    Serial.print(F(\"Reading failed: \"));\n    Serial.println(mfrc522.GetStatusCodeName(status));\n    return;\n  }\n\n  //PRINT FIRST NAME\n  for (uint8_t i = 0; i < 16; i++)\n  {\n    if (buffer1[i] != 32)\n    {\n      Serial.write(buffer1[i]);\n    }\n  }\n  Serial.print(\" \");\n\n  //---------------------------------------- GET LAST NAME\n\n  byte buffer2[18];\n  block = 1;\n\n  status = mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, 1, &key, &(mfrc522.uid)); //line 834\n  if (status != MFRC522::STATUS_OK) {\n    Serial.print(F(\"Authentication failed: \"));\n    Serial.println(mfrc522.GetStatusCodeName(status));\n    return;\n  }\n\n  status = mfrc522.MIFARE_Read(block, buffer2, &len);\n  if (status != MFRC522::STATUS_OK) {\n    Serial.print(F(\"Reading failed: \"));\n    Serial.println(mfrc522.GetStatusCodeName(status));\n    return;\n  }\n\n  //PRINT LAST NAME\n  for (uint8_t i = 0; i < 16; i++) {\n    Serial.write(buffer2[i] );\n  }\n\n\n  //----------------------------------------\n\n  Serial.println(F(\"\\n**End Reading**\\n\"));\n\n  delay(1000); //change value if you want to read cards faster\n\n  mfrc522.PICC_HaltA();\n  mfrc522.PCD_StopCrypto1();\n}\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\nResult\n\n正如上面所输入的一样-.-\n\n读取扇区数据\n以S50为例，读取其中16个扇区的全部数据,烧录程序后刷一下就能在串口监视器看到所有扇区对应的数据了\n\nSketch\nDumpinfo.info\n\n#include <SPI.h>\n#include <MFRC522.h>\n\n#define RST_PIN         9          // Configurable, see typical pin layout above\n#define SS_PIN          10         // Configurable, see typical pin layout above\n\nMFRC522 mfrc522(SS_PIN, RST_PIN);  // Create MFRC522 instance\n\nvoid setup() {\n\tSerial.begin(9600);\t\t// Initialize serial communications with the PC\n\twhile (!Serial);\t\t// Do nothing if no serial port is opened (added for Arduinos based on ATMEGA32U4)\n\tSPI.begin();\t\t\t// Init SPI bus\n\tmfrc522.PCD_Init();\t\t// Init MFRC522\n\tdelay(4);\t\t\t\t// Optional delay. Some board do need more time after init to be ready, see Readme\n\tmfrc522.PCD_DumpVersionToSerial();\t// Show details of PCD - MFRC522 Card Reader details\n\tSerial.println(F(\"Scan PICC to see UID, SAK, type, and data blocks...\"));\n}\n\nvoid loop() {\n\t// Reset the loop if no new card present on the sensor/reader. This saves the entire process when idle.\n\tif ( ! mfrc522.PICC_IsNewCardPresent()) {\n\t\treturn;\n\t}\n\n\t// Select one of the cards\n\tif ( ! mfrc522.PICC_ReadCardSerial()) {\n\t\treturn;\n\t}\n\n\t// Dump debug info about the card; PICC_HaltA() is automatically called\n\tmfrc522.PICC_DumpToSerial(&(mfrc522.uid));\n}\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\nResult\n\n\nReferences\nArduino教程 RFID-RC522读IC卡门禁原理\nIntroduction to NFC\n产品资料 提取码: qi6v\nM1 : S50和S70\nIC卡小结\n————————————————\n版权声明：本文为CSDN博主「Kearney form An idea」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/weixin_43031092/article/details/108651982\n\n\n\nhttps://blog.csdn.net/leytton/article/details/73480974\n\n\n【文章特色：1、提出IC卡破解原理和简单有效的防御方法2、网上其他文章对于硬件如何接线说得模糊不清】\n1、序言\n先说下简单门禁系统的原理：\n\n(1)IC卡激活：门禁卡管理员将卡片放到读卡器、这时软件读取到IC卡的UID序列号信息(相当于身份证号码)，将这个UID录入数据库激活IC卡。\n\n(2)刷卡：刷卡时读卡器读取到UID，查询数据库，如果数据库中存在这个UID则表示有效用户,继而控制继电器断电，此时电磁锁开门。\n\n\n不亦买的RC522模块采用SPI通信、据说也有串口通信的不过成本较高。大家可以看看这个模块的主要配件：卡和读卡器。\n\n2、加载RC522库文件\n Arduino本身有个操作RC5200的库，如下图所示，打开Arduino开发工具中管理库\n\n\n\n搜索\"RC522\"，选择\"MFRC522\"安装即可\n\n点击\"More info\"可以跳转到github地址https://github.com/miguelbalboa/rfid ，下文会有提及。\n\n\n安装完毕后，可以看到关于MFRC522的库示例，有读取UID、获取区块信息、修改UID、卡片信息复制等\n\n注：一般而言IC卡是不能修改0扇区0区块的UID和厂商信息数据，这些是生产时就确定下来的的(关于IC卡的存储结构有空再发文介绍，小伙伴们可以去网上查阅这方面资料也挺多的)，能够全扇区修改的俗称UID卡才支持修改UID，一些不负责的门禁系统厂家仅根据UID来判断用户身份是不可靠的，一个简单的方法是在读之前先写UID操作，如果可写那么这张卡就是UID卡即复制卡，判断无效，系统也可记录是哪张IC卡被复制了用于追溯非法行为，仅供交流与学习，请勿用于非法用途哦\n\n\n\n3、模块引脚接线\n此处是网络上大部分相关文章没有提及的，只告诉了如何接线，却不告诉我们为什么这样接，甚至连Arduino版本都不说清楚。\n\n我们打开ReadNUID的示例里面有各种版本Arduino与RC522的引脚连接图，我们按照这个接线即可。在上文提及的github项目主页也有介绍。\n\nRC522一共8个引脚，如图所示：\n\n\n3.3V供电、GND接地不用多说，IRQ是中断才用到的此处没有用到可以不接，其余5个引脚接法如下表所示：\n\n /* Typical pin layout used:\n * -----------------------------------------------------------------------------------------\n *             MFRC522      Arduino       Arduino   Arduino    Arduino          Arduino\n *             Reader/PCD   Uno/101       Mega      Nano v3    Leonardo/Micro   Pro Micro\n * Signal      Pin          Pin           Pin       Pin        Pin              Pin\n * -----------------------------------------------------------------------------------------\n * RST/Reset   RST          9             5         D9         RESET/ICSP-5     RST\n * SPI SS      SDA(SS)      10            53        D10        10               10\n * SPI MOSI    MOSI         11 / ICSP-4   51        D11        ICSP-4           16\n * SPI MISO    MISO         12 / ICSP-1   50        D12        ICSP-1           14\n * SPI SCK     SCK          13 / ICSP-3   52        D13        ICSP-3           15\n */\n\n4、程序代码\n此处测试的Arduino型号是Arduino Nano V3.0，其他型号请结合上表修改引脚号。\n\n示例代码读取UID，并将其分别以十进制和十六进制输出到串口，简化版如下：\n\n#include <SPI.h>\n#include <MFRC522.h>\n \n#define SS_PIN 10\n#define RST_PIN 9\n \nMFRC522 rfid(SS_PIN, RST_PIN); //实例化类\n \n// 初始化数组用于存储读取到的NUID \nbyte nuidPICC[4];\n \nvoid setup() { \n  Serial.begin(9600);\n  SPI.begin(); // 初始化SPI总线\n  rfid.PCD_Init(); // 初始化 MFRC522 \n}\n \nvoid loop() {\n \n  // 找卡\n  if ( ! rfid.PICC_IsNewCardPresent())\n    return;\n \n  // 验证NUID是否可读\n  if ( ! rfid.PICC_ReadCardSerial())\n    return;\n \n  MFRC522::PICC_Type piccType = rfid.PICC_GetType(rfid.uid.sak);\n \n  // 检查是否MIFARE卡类型\n  if (piccType != MFRC522::PICC_TYPE_MIFARE_MINI &&  \n    piccType != MFRC522::PICC_TYPE_MIFARE_1K &&\n    piccType != MFRC522::PICC_TYPE_MIFARE_4K) {\n    Serial.println(\"不支持读取此卡类型\");\n    return;\n  }\n  \n  // 将NUID保存到nuidPICC数组\n  for (byte i = 0; i < 4; i++) {\n    nuidPICC[i] = rfid.uid.uidByte[i];\n  }   \n  Serial.print(\"十六进制UID：\");\n  printHex(rfid.uid.uidByte, rfid.uid.size);\n  Serial.println();\n  \n  Serial.print(\"十进制UID：\");\n  printDec(rfid.uid.uidByte, rfid.uid.size);\n  Serial.println();\n  \n  // 使放置在读卡区的IC卡进入休眠状态，不再重复读卡\n  rfid.PICC_HaltA();\n \n  // 停止读卡模块编码\n  rfid.PCD_StopCrypto1();\n}\n \nvoid printHex(byte *buffer, byte bufferSize) {\n  for (byte i = 0; i < bufferSize; i++) {\n    Serial.print(buffer[i] < 0x10 ? \" 0\" : \"\");\n    Serial.print(buffer[i], HEX);\n  }\n}\n \nvoid printDec(byte *buffer, byte bufferSize) {\n  for (byte i = 0; i < bufferSize; i++) {\n    Serial.print(buffer[i] < 0x10 ? \" 0\" : \"\");\n    Serial.print(buffer[i], DEC);\n  }\n}\n\n5、运行结果\n依次将卡A、卡B、卡A放到RC522读卡区，串口打印信息如下\n\n\n感谢梦鸽推上首页分享给更多的人看到^_^\n【转载请注明出处: http://blog.csdn.net/leytton/article/details/73480974】\n PS：如果本文对您有帮助，请点个赞让我知道哦~\n————————————————\n版权声明：本文为CSDN博主「李乾文」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/leytton/article/details/73480974","source":"_posts/arduino-RFID-RC522.md","raw":"---\ntitle: arduino与RFID-RC522模块实现IC卡读取与写入（待整理）\ndate: 2023-01-06 09:20:51\ncategories:\ntags:\n---\nhttps://blog.csdn.net/weixin_43031092/article/details/108651982\n\n简介\n单片机：Arduino Uno\n额外库：MFRC522（可直接在库管理器下载）\n\nS50 IC卡 采用NXP MF1 IC S50制作的非接触智能卡，通常简称S50卡或Mifare 1K，符合ISO14443A标准；存储容量：8Kbit，16个分区，每分区两组密码。\n\n枯叶笑与东方大叔的IC卡小结\n分类 IC - ID\n市场上常用的卡片就两种，IC卡和ID卡，这两者的区别就是IC卡有存储芯片（如M1,UID,CUID,FUID,UFUID），而 ID卡只是一个卡号（ 全称为身份识别卡，是一种不可写入的感应卡，含固定的编号.卡号在封卡前写入后不可再更改）。CPU卡因为价格太高，没有推广起来\n\nIC卡的芯片，目前市场上常用的有两种，一种是价格较高的飞利浦原装芯片，一种是上海复旦芯片；原装飞利浦芯片IC卡，市场拿货价不超过3元，例如公交卡，国产芯片IC卡，价格几毛钱，常用于电梯、停车场、食堂就餐、水卡\n\nIC卡和ID卡都可以用于一卡通系统，各有优缺点：\n\nID卡，因为只是ID号，没有内置存储芯片，因此，当ID卡用于一卡通系统时，必须要电脑开着，因为，你消费扣款或充值，都是从电脑数据库里加加减减，这类似于磁条性质的银行卡，卡片本身没有钱，你取钱存钱，其实都是在银行数据库里加减\n\n优点：因为是从电脑数据库里直接加减，因此，充值或取款，卡片无需到场，刷卡数据实时传输到电脑\n缺点：电脑坏了或通讯有问题，整套系统都瘫痪（脱机消费模式也行，这里不具体讲）\nIC卡，常用的公交卡、地铁卡都是IC卡，内置芯片，0-15 共16个扇区，可以写入数据\n\n优点：因为钱是直接存储在卡里面，因此，消费时，无需联网，跟电脑无关，直接从卡里面扣钱\n缺点：充值时，卡片必须到场 （省事的方法，补贴机之类），刷卡数据暂时储存在刷卡机里，待电脑开机后，采集消费数据到电脑\nIC细分类\nM1 卡\n普通IC卡，0扇区不可以修改，其他扇区可反复擦写，我们使用的电梯卡、门禁卡等智能卡发卡商所使用的都是 M1 卡，可以理解为物业发的原卡。\n\nUID 卡\n普通复制卡，可以重复擦写所有扇区，主要应用在IC卡复制上，遇到带有防火墙的读卡器就会失效。\n\nCUID 卡\n可擦写防屏蔽卡，可以重复擦写所有扇区，UID卡复制无效的情况下使用，可以绕过防火墙。\n（防屏蔽就是防止某些设备里面有检测机制能够检查出卡片是否为复制卡，cuid卡比较常用，需要注意第二次使用需要格式化，还有说明一下 0扇区就是机器与卡片的桥梁用来存放对应信息。）\n\nFUID 卡\n不可擦写防屏蔽卡，此卡的特点0扇区只能写入一次，写入一次变成 M1 卡，CUID 复制没用的情况下使用，可以绕过防火墙。\n\nUFUID 卡\n高级复制卡，我们就理解为是 UID 和 FUID 的合成卡，需要封卡操作，不封卡就是 UID 卡，封卡后就变为 M1 卡。\n\n工具\nACR122\n使用最多的读卡器，很流行，大抵是因为网络上流传了非常强大的GUI改卡读卡复制卡软件吧。\n\nProxmark3\n国外的开源硬件，由FPGA驱动。性能十分强大，集嗅探、读取、克隆于一体，IC卡和ID卡通杀。\n\nPN532\n由NXP出品，是一款高度集成的载波的13.56MHz传输模块，基于80C51内核有40KROM、1KRAM。某宝价格为几十元，非常便宜。只能用来读取IC卡，不能读取ID卡和CPU卡。\n\n入门\n引脚接线\n常用接线也在示例程序中写明，这里我使用的是Arduino Uno，所以接线参考前两列即可。\n\n * Typical pin layout used:\n * -----------------------------------------------------------------------------------------\n *             MFRC522      Arduino       Arduino   Arduino    Arduino          Arduino\n *             Reader/PCD   Uno/101       Mega      Nano v3    Leonardo/Micro   Pro Micro\n * Signal      Pin          Pin           Pin       Pin        Pin              Pin\n * -----------------------------------------------------------------------------------------\n * RST/Reset   RST          9             5         D9         RESET/ICSP-5     RST\n * SPI SS      SDA(SS)      10            53        D10        10               10\n * SPI MOSI    MOSI         11 / ICSP-4   51        D11        ICSP-4           16\n * SPI MISO    MISO         12 / ICSP-1   50        D12        ICSP-1           14\n * SPI SCK     SCK          13 / ICSP-3   52        D13        ICSP-3           15\n */\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n即（左侧为RFID-RC522引脚，右侧为Uno引脚）\nRST <----------> 9\nSDA(SS) <----------> 10\nMOSI <----------> 11\nMISO <----------> 12\nSCK <----------> 13\n3.3V <----------> 3.3V\nGND <----------> GND\n\n\n读取 UNID <-> 卡号 <-> ID号\n这里使用的是MFRC522库中的示例-ReadUNID，读取卡号。\n据说每一张卡的ID都不一样-,-读取卡号就能判断身份，不过最好是先尝试写入数据（尝试修改卡号），能修改的卡说明是复制卡，这就需要认真对待这样卡的安全性了。\n\nSketch\n\n#include <SPI.h>\n#include <MFRC522.h>\n\n#define SS_PIN 10\n#define RST_PIN 9\n \nMFRC522 rfid(SS_PIN, RST_PIN); // Instance of the class\n\nMFRC522::MIFARE_Key key; \n\n// Init array that will store new NUID \nbyte nuidPICC[4];\n\nvoid setup() { \n  Serial.begin(9600);\n  SPI.begin(); // Init SPI bus\n  Serial.println(F(\"Start--------------------\"));\n  rfid.PCD_Init(); // Init MFRC522 \n\n  for (byte i = 0; i < 6; i++) {\n    key.keyByte[i] = 0xFF;\n  }\n\n  Serial.println(F(\"This code scan the MIFARE Classsic NUID.\"));\n  Serial.print(F(\"Using the following key:\"));\n  printHex(key.keyByte, MFRC522::MF_KEY_SIZE);\n}\n \nvoid loop() {\n\n  // Reset the loop if no new card present on the sensor/reader. This saves the entire process when idle.\n  if ( ! rfid.PICC_IsNewCardPresent())\n    return;\n\n  // Verify if the NUID has been readed\n  if ( ! rfid.PICC_ReadCardSerial())\n    return;\n\n  Serial.print(F(\"PICC type: \"));\n  MFRC522::PICC_Type piccType = rfid.PICC_GetType(rfid.uid.sak);\n  Serial.println(rfid.PICC_GetTypeName(piccType));\n\n  // Check is the PICC of Classic MIFARE type\n  if (piccType != MFRC522::PICC_TYPE_MIFARE_MINI &&  \n    piccType != MFRC522::PICC_TYPE_MIFARE_1K &&\n    piccType != MFRC522::PICC_TYPE_MIFARE_4K) {\n    Serial.println(F(\"Your tag is not of type MIFARE Classic.\"));\n    return;\n  }\n\n  if (rfid.uid.uidByte[0] != nuidPICC[0] || \n    rfid.uid.uidByte[1] != nuidPICC[1] || \n    rfid.uid.uidByte[2] != nuidPICC[2] || \n    rfid.uid.uidByte[3] != nuidPICC[3] ) {\n    Serial.println(F(\"A new card has been detected.\"));\n\n    // Store NUID into nuidPICC array\n    for (byte i = 0; i < 4; i++) {\n      nuidPICC[i] = rfid.uid.uidByte[i];\n    }\n   \n    Serial.println(F(\"The NUID tag is:\"));\n    Serial.print(F(\"In hex: \"));\n    printHex(rfid.uid.uidByte, rfid.uid.size);\n    Serial.println();\n    Serial.print(F(\"In dec: \"));\n    printDec(rfid.uid.uidByte, rfid.uid.size);\n    Serial.println();\n  }\n  else Serial.println(F(\"Card read previously.\"));\n\n  // Halt PICC\n  rfid.PICC_HaltA();\n\n  // Stop encryption on PCD\n  rfid.PCD_StopCrypto1();\n}\n\n\n/**\n * Helper routine to dump a byte array as hex values to Serial. \n */\nvoid printHex(byte *buffer, byte bufferSize) {\n  for (byte i = 0; i < bufferSize; i++) {\n    Serial.print(buffer[i] < 0x10 ? \" 0\" : \" \");\n    Serial.print(buffer[i], HEX);\n  }\n}\n\n/**\n * Helper routine to dump a byte array as dec values to Serial.\n */\nvoid printDec(byte *buffer, byte bufferSize) {\n  for (byte i = 0; i < bufferSize; i++) {\n    Serial.print(buffer[i] < 0x10 ? \" 0\" : \" \");\n    Serial.print(buffer[i], DEC);\n  }\n}\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n结果\n打开Arduino的串口监视器，下载好程序，把IC卡刷到RFID-RC522模块上有标记线圈的位置，就能在串口监视器中看到其编号（饭卡、银行卡刷不出来。。。。。）\n\n\n写入&&读取个人信息：名+姓氏\n接线请往上爬，一模一样。\n\nSketch-写入\nrfid_write_personal_data.ino\n\n#include <SPI.h>\n#include <MFRC522.h>\n\n#define RST_PIN         9           // Configurable, see typical pin layout above\n#define SS_PIN          10          // Configurable, see typical pin layout above\n\nMFRC522 mfrc522(SS_PIN, RST_PIN);   // Create MFRC522 instance\n\nvoid setup() {\n  Serial.begin(9600);        // Initialize serial communications with the PC\n  SPI.begin();               // Init SPI bus\n  mfrc522.PCD_Init();        // Init MFRC522 card\n  Serial.println(F(\"Write personal data on a MIFARE PICC \"));\n}\n\nvoid loop() {\n\n  // Prepare key - all keys are set to FFFFFFFFFFFFh at chip delivery from the factory.\n  MFRC522::MIFARE_Key key;\n  for (byte i = 0; i < 6; i++) key.keyByte[i] = 0xFF;\n\n  // Reset the loop if no new card present on the sensor/reader. This saves the entire process when idle.\n  if ( ! mfrc522.PICC_IsNewCardPresent()) {\n    return;\n  }\n\n  // Select one of the cards\n  if ( ! mfrc522.PICC_ReadCardSerial()) {\n    return;\n  }\n\n  Serial.print(F(\"Card UID:\"));    //Dump UID\n  for (byte i = 0; i < mfrc522.uid.size; i++) {\n    Serial.print(mfrc522.uid.uidByte[i] < 0x10 ? \" 0\" : \" \");\n    Serial.print(mfrc522.uid.uidByte[i], HEX);\n  }\n  Serial.print(F(\" PICC type: \"));   // Dump PICC type\n  MFRC522::PICC_Type piccType = mfrc522.PICC_GetType(mfrc522.uid.sak);\n  Serial.println(mfrc522.PICC_GetTypeName(piccType));\n\n  byte buffer[34];\n  byte block;\n  MFRC522::StatusCode status;\n  byte len;\n\n  Serial.setTimeout(20000L) ;     // wait until 20 seconds for input from serial\n  // Ask personal data: Family name\n  Serial.println(F(\"Type Family name, ending with #\"));\n  len = Serial.readBytesUntil('#', (char *) buffer, 30) ; // read family name from serial\n  for (byte i = len; i < 30; i++) buffer[i] = ' ';     // pad with spaces\n\n  block = 1;\n  //Serial.println(F(\"Authenticating using key A...\"));\n  status = mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, block, &key, &(mfrc522.uid));\n  if (status != MFRC522::STATUS_OK) {\n    Serial.print(F(\"PCD_Authenticate() failed: \"));\n    Serial.println(mfrc522.GetStatusCodeName(status));\n    return;\n  }\n  else Serial.println(F(\"PCD_Authenticate() success: \"));\n\n  // Write block\n  status = mfrc522.MIFARE_Write(block, buffer, 16);\n  if (status != MFRC522::STATUS_OK) {\n    Serial.print(F(\"MIFARE_Write() failed: \"));\n    Serial.println(mfrc522.GetStatusCodeName(status));\n    return;\n  }\n  else Serial.println(F(\"MIFARE_Write() success: \"));\n\n  block = 2;\n  //Serial.println(F(\"Authenticating using key A...\"));\n  status = mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, block, &key, &(mfrc522.uid));\n  if (status != MFRC522::STATUS_OK) {\n    Serial.print(F(\"PCD_Authenticate() failed: \"));\n    Serial.println(mfrc522.GetStatusCodeName(status));\n    return;\n  }\n\n  // Write block\n  status = mfrc522.MIFARE_Write(block, &buffer[16], 16);\n  if (status != MFRC522::STATUS_OK) {\n    Serial.print(F(\"MIFARE_Write() failed: \"));\n    Serial.println(mfrc522.GetStatusCodeName(status));\n    return;\n  }\n  else Serial.println(F(\"MIFARE_Write() success: \"));\n\n  // Ask personal data: First name\n  Serial.println(F(\"Type First name, ending with #\"));\n  len = Serial.readBytesUntil('#', (char *) buffer, 20) ; // read first name from serial\n  for (byte i = len; i < 20; i++) buffer[i] = ' ';     // pad with spaces\n\n  block = 4;\n  //Serial.println(F(\"Authenticating using key A...\"));\n  status = mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, block, &key, &(mfrc522.uid));\n  if (status != MFRC522::STATUS_OK) {\n    Serial.print(F(\"PCD_Authenticate() failed: \"));\n    Serial.println(mfrc522.GetStatusCodeName(status));\n    return;\n  }\n\n  // Write block\n  status = mfrc522.MIFARE_Write(block, buffer, 16);\n  if (status != MFRC522::STATUS_OK) {\n    Serial.print(F(\"MIFARE_Write() failed: \"));\n    Serial.println(mfrc522.GetStatusCodeName(status));\n    return;\n  }\n  else Serial.println(F(\"MIFARE_Write() success: \"));\n\n  block = 5;\n  //Serial.println(F(\"Authenticating using key A...\"));\n  status = mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, block, &key, &(mfrc522.uid));\n  if (status != MFRC522::STATUS_OK) {\n    Serial.print(F(\"PCD_Authenticate() failed: \"));\n    Serial.println(mfrc522.GetStatusCodeName(status));\n    return;\n  }\n\n  // Write block\n  status = mfrc522.MIFARE_Write(block, &buffer[16], 16);\n  if (status != MFRC522::STATUS_OK) {\n    Serial.print(F(\"MIFARE_Write() failed: \"));\n    Serial.println(mfrc522.GetStatusCodeName(status));\n    return;\n  }\n  else Serial.println(F(\"MIFARE_Write() success: \"));\n\n\n  Serial.println(\" \");\n  mfrc522.PICC_HaltA(); // Halt PICC\n  mfrc522.PCD_StopCrypto1();  // Stop encryption on PCD\n\n}\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\nResult\n\n例如我第一次输入 Smith#\n第二次输入 Rick#\n\nSketch-读取\n#include <SPI.h>\n#include <MFRC522.h>\n\n#define RST_PIN         9           // Configurable, see typical pin layout above\n#define SS_PIN          10          // Configurable, see typical pin layout above\n\nMFRC522 mfrc522(SS_PIN, RST_PIN);   // Create MFRC522 instance\n\n//*****************************************************************************************//\nvoid setup() {\n  Serial.begin(9600);                                           // Initialize serial communications with the PC\n  SPI.begin();                                                  // Init SPI bus\n  mfrc522.PCD_Init();                                              // Init MFRC522 card\n  Serial.println(F(\"Read personal data on a MIFARE PICC:\"));    //shows in serial that it is ready to read\n}\n\n//*****************************************************************************************//\nvoid loop() {\n\n  // Prepare key - all keys are set to FFFFFFFFFFFFh at chip delivery from the factory.\n  MFRC522::MIFARE_Key key;\n  for (byte i = 0; i < 6; i++) key.keyByte[i] = 0xFF;\n\n  //some variables we need\n  byte block;\n  byte len;\n  MFRC522::StatusCode status;\n\n  //-------------------------------------------\n\n  // Reset the loop if no new card present on the sensor/reader. This saves the entire process when idle.\n  if ( ! mfrc522.PICC_IsNewCardPresent()) {\n    return;\n  }\n\n  // Select one of the cards\n  if ( ! mfrc522.PICC_ReadCardSerial()) {\n    return;\n  }\n\n  Serial.println(F(\"**Card Detected:**\"));\n\n  //-------------------------------------------\n\n  mfrc522.PICC_DumpDetailsToSerial(&(mfrc522.uid)); //dump some details about the card\n\n  //mfrc522.PICC_DumpToSerial(&(mfrc522.uid));      //uncomment this to see all blocks in hex\n\n  //-------------------------------------------\n\n  Serial.print(F(\"Name: \"));\n\n  byte buffer1[18];\n\n  block = 4;\n  len = 18;\n\n  //------------------------------------------- GET FIRST NAME\n  status = mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, 4, &key, &(mfrc522.uid)); //line 834 of MFRC522.cpp file\n  if (status != MFRC522::STATUS_OK) {\n    Serial.print(F(\"Authentication failed: \"));\n    Serial.println(mfrc522.GetStatusCodeName(status));\n    return;\n  }\n\n  status = mfrc522.MIFARE_Read(block, buffer1, &len);\n  if (status != MFRC522::STATUS_OK) {\n    Serial.print(F(\"Reading failed: \"));\n    Serial.println(mfrc522.GetStatusCodeName(status));\n    return;\n  }\n\n  //PRINT FIRST NAME\n  for (uint8_t i = 0; i < 16; i++)\n  {\n    if (buffer1[i] != 32)\n    {\n      Serial.write(buffer1[i]);\n    }\n  }\n  Serial.print(\" \");\n\n  //---------------------------------------- GET LAST NAME\n\n  byte buffer2[18];\n  block = 1;\n\n  status = mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, 1, &key, &(mfrc522.uid)); //line 834\n  if (status != MFRC522::STATUS_OK) {\n    Serial.print(F(\"Authentication failed: \"));\n    Serial.println(mfrc522.GetStatusCodeName(status));\n    return;\n  }\n\n  status = mfrc522.MIFARE_Read(block, buffer2, &len);\n  if (status != MFRC522::STATUS_OK) {\n    Serial.print(F(\"Reading failed: \"));\n    Serial.println(mfrc522.GetStatusCodeName(status));\n    return;\n  }\n\n  //PRINT LAST NAME\n  for (uint8_t i = 0; i < 16; i++) {\n    Serial.write(buffer2[i] );\n  }\n\n\n  //----------------------------------------\n\n  Serial.println(F(\"\\n**End Reading**\\n\"));\n\n  delay(1000); //change value if you want to read cards faster\n\n  mfrc522.PICC_HaltA();\n  mfrc522.PCD_StopCrypto1();\n}\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\nResult\n\n正如上面所输入的一样-.-\n\n读取扇区数据\n以S50为例，读取其中16个扇区的全部数据,烧录程序后刷一下就能在串口监视器看到所有扇区对应的数据了\n\nSketch\nDumpinfo.info\n\n#include <SPI.h>\n#include <MFRC522.h>\n\n#define RST_PIN         9          // Configurable, see typical pin layout above\n#define SS_PIN          10         // Configurable, see typical pin layout above\n\nMFRC522 mfrc522(SS_PIN, RST_PIN);  // Create MFRC522 instance\n\nvoid setup() {\n\tSerial.begin(9600);\t\t// Initialize serial communications with the PC\n\twhile (!Serial);\t\t// Do nothing if no serial port is opened (added for Arduinos based on ATMEGA32U4)\n\tSPI.begin();\t\t\t// Init SPI bus\n\tmfrc522.PCD_Init();\t\t// Init MFRC522\n\tdelay(4);\t\t\t\t// Optional delay. Some board do need more time after init to be ready, see Readme\n\tmfrc522.PCD_DumpVersionToSerial();\t// Show details of PCD - MFRC522 Card Reader details\n\tSerial.println(F(\"Scan PICC to see UID, SAK, type, and data blocks...\"));\n}\n\nvoid loop() {\n\t// Reset the loop if no new card present on the sensor/reader. This saves the entire process when idle.\n\tif ( ! mfrc522.PICC_IsNewCardPresent()) {\n\t\treturn;\n\t}\n\n\t// Select one of the cards\n\tif ( ! mfrc522.PICC_ReadCardSerial()) {\n\t\treturn;\n\t}\n\n\t// Dump debug info about the card; PICC_HaltA() is automatically called\n\tmfrc522.PICC_DumpToSerial(&(mfrc522.uid));\n}\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\nResult\n\n\nReferences\nArduino教程 RFID-RC522读IC卡门禁原理\nIntroduction to NFC\n产品资料 提取码: qi6v\nM1 : S50和S70\nIC卡小结\n————————————————\n版权声明：本文为CSDN博主「Kearney form An idea」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/weixin_43031092/article/details/108651982\n\n\n\nhttps://blog.csdn.net/leytton/article/details/73480974\n\n\n【文章特色：1、提出IC卡破解原理和简单有效的防御方法2、网上其他文章对于硬件如何接线说得模糊不清】\n1、序言\n先说下简单门禁系统的原理：\n\n(1)IC卡激活：门禁卡管理员将卡片放到读卡器、这时软件读取到IC卡的UID序列号信息(相当于身份证号码)，将这个UID录入数据库激活IC卡。\n\n(2)刷卡：刷卡时读卡器读取到UID，查询数据库，如果数据库中存在这个UID则表示有效用户,继而控制继电器断电，此时电磁锁开门。\n\n\n不亦买的RC522模块采用SPI通信、据说也有串口通信的不过成本较高。大家可以看看这个模块的主要配件：卡和读卡器。\n\n2、加载RC522库文件\n Arduino本身有个操作RC5200的库，如下图所示，打开Arduino开发工具中管理库\n\n\n\n搜索\"RC522\"，选择\"MFRC522\"安装即可\n\n点击\"More info\"可以跳转到github地址https://github.com/miguelbalboa/rfid ，下文会有提及。\n\n\n安装完毕后，可以看到关于MFRC522的库示例，有读取UID、获取区块信息、修改UID、卡片信息复制等\n\n注：一般而言IC卡是不能修改0扇区0区块的UID和厂商信息数据，这些是生产时就确定下来的的(关于IC卡的存储结构有空再发文介绍，小伙伴们可以去网上查阅这方面资料也挺多的)，能够全扇区修改的俗称UID卡才支持修改UID，一些不负责的门禁系统厂家仅根据UID来判断用户身份是不可靠的，一个简单的方法是在读之前先写UID操作，如果可写那么这张卡就是UID卡即复制卡，判断无效，系统也可记录是哪张IC卡被复制了用于追溯非法行为，仅供交流与学习，请勿用于非法用途哦\n\n\n\n3、模块引脚接线\n此处是网络上大部分相关文章没有提及的，只告诉了如何接线，却不告诉我们为什么这样接，甚至连Arduino版本都不说清楚。\n\n我们打开ReadNUID的示例里面有各种版本Arduino与RC522的引脚连接图，我们按照这个接线即可。在上文提及的github项目主页也有介绍。\n\nRC522一共8个引脚，如图所示：\n\n\n3.3V供电、GND接地不用多说，IRQ是中断才用到的此处没有用到可以不接，其余5个引脚接法如下表所示：\n\n /* Typical pin layout used:\n * -----------------------------------------------------------------------------------------\n *             MFRC522      Arduino       Arduino   Arduino    Arduino          Arduino\n *             Reader/PCD   Uno/101       Mega      Nano v3    Leonardo/Micro   Pro Micro\n * Signal      Pin          Pin           Pin       Pin        Pin              Pin\n * -----------------------------------------------------------------------------------------\n * RST/Reset   RST          9             5         D9         RESET/ICSP-5     RST\n * SPI SS      SDA(SS)      10            53        D10        10               10\n * SPI MOSI    MOSI         11 / ICSP-4   51        D11        ICSP-4           16\n * SPI MISO    MISO         12 / ICSP-1   50        D12        ICSP-1           14\n * SPI SCK     SCK          13 / ICSP-3   52        D13        ICSP-3           15\n */\n\n4、程序代码\n此处测试的Arduino型号是Arduino Nano V3.0，其他型号请结合上表修改引脚号。\n\n示例代码读取UID，并将其分别以十进制和十六进制输出到串口，简化版如下：\n\n#include <SPI.h>\n#include <MFRC522.h>\n \n#define SS_PIN 10\n#define RST_PIN 9\n \nMFRC522 rfid(SS_PIN, RST_PIN); //实例化类\n \n// 初始化数组用于存储读取到的NUID \nbyte nuidPICC[4];\n \nvoid setup() { \n  Serial.begin(9600);\n  SPI.begin(); // 初始化SPI总线\n  rfid.PCD_Init(); // 初始化 MFRC522 \n}\n \nvoid loop() {\n \n  // 找卡\n  if ( ! rfid.PICC_IsNewCardPresent())\n    return;\n \n  // 验证NUID是否可读\n  if ( ! rfid.PICC_ReadCardSerial())\n    return;\n \n  MFRC522::PICC_Type piccType = rfid.PICC_GetType(rfid.uid.sak);\n \n  // 检查是否MIFARE卡类型\n  if (piccType != MFRC522::PICC_TYPE_MIFARE_MINI &&  \n    piccType != MFRC522::PICC_TYPE_MIFARE_1K &&\n    piccType != MFRC522::PICC_TYPE_MIFARE_4K) {\n    Serial.println(\"不支持读取此卡类型\");\n    return;\n  }\n  \n  // 将NUID保存到nuidPICC数组\n  for (byte i = 0; i < 4; i++) {\n    nuidPICC[i] = rfid.uid.uidByte[i];\n  }   \n  Serial.print(\"十六进制UID：\");\n  printHex(rfid.uid.uidByte, rfid.uid.size);\n  Serial.println();\n  \n  Serial.print(\"十进制UID：\");\n  printDec(rfid.uid.uidByte, rfid.uid.size);\n  Serial.println();\n  \n  // 使放置在读卡区的IC卡进入休眠状态，不再重复读卡\n  rfid.PICC_HaltA();\n \n  // 停止读卡模块编码\n  rfid.PCD_StopCrypto1();\n}\n \nvoid printHex(byte *buffer, byte bufferSize) {\n  for (byte i = 0; i < bufferSize; i++) {\n    Serial.print(buffer[i] < 0x10 ? \" 0\" : \"\");\n    Serial.print(buffer[i], HEX);\n  }\n}\n \nvoid printDec(byte *buffer, byte bufferSize) {\n  for (byte i = 0; i < bufferSize; i++) {\n    Serial.print(buffer[i] < 0x10 ? \" 0\" : \"\");\n    Serial.print(buffer[i], DEC);\n  }\n}\n\n5、运行结果\n依次将卡A、卡B、卡A放到RC522读卡区，串口打印信息如下\n\n\n感谢梦鸽推上首页分享给更多的人看到^_^\n【转载请注明出处: http://blog.csdn.net/leytton/article/details/73480974】\n PS：如果本文对您有帮助，请点个赞让我知道哦~\n————————————————\n版权声明：本文为CSDN博主「李乾文」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/leytton/article/details/73480974","slug":"arduino-RFID-RC522","published":1,"updated":"2023-07-23T14:19:13.067Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkjdd1ax000b98aj4dpih4in","content":"<p><a href=\"https://blog.csdn.net/weixin_43031092/article/details/108651982\">https://blog.csdn.net/weixin_43031092/article/details/108651982</a></p>\n<p>简介<br>单片机：Arduino Uno<br>额外库：MFRC522（可直接在库管理器下载）</p>\n<p>S50 IC卡 采用NXP MF1 IC S50制作的非接触智能卡，通常简称S50卡或Mifare 1K，符合ISO14443A标准；存储容量：8Kbit，16个分区，每分区两组密码。</p>\n<p>枯叶笑与东方大叔的IC卡小结<br>分类 IC - ID<br>市场上常用的卡片就两种，IC卡和ID卡，这两者的区别就是IC卡有存储芯片（如M1,UID,CUID,FUID,UFUID），而 ID卡只是一个卡号（ 全称为身份识别卡，是一种不可写入的感应卡，含固定的编号.卡号在封卡前写入后不可再更改）。CPU卡因为价格太高，没有推广起来</p>\n<p>IC卡的芯片，目前市场上常用的有两种，一种是价格较高的飞利浦原装芯片，一种是上海复旦芯片；原装飞利浦芯片IC卡，市场拿货价不超过3元，例如公交卡，国产芯片IC卡，价格几毛钱，常用于电梯、停车场、食堂就餐、水卡</p>\n<p>IC卡和ID卡都可以用于一卡通系统，各有优缺点：</p>\n<p>ID卡，因为只是ID号，没有内置存储芯片，因此，当ID卡用于一卡通系统时，必须要电脑开着，因为，你消费扣款或充值，都是从电脑数据库里加加减减，这类似于磁条性质的银行卡，卡片本身没有钱，你取钱存钱，其实都是在银行数据库里加减</p>\n<p>优点：因为是从电脑数据库里直接加减，因此，充值或取款，卡片无需到场，刷卡数据实时传输到电脑<br>缺点：电脑坏了或通讯有问题，整套系统都瘫痪（脱机消费模式也行，这里不具体讲）<br>IC卡，常用的公交卡、地铁卡都是IC卡，内置芯片，0-15 共16个扇区，可以写入数据</p>\n<p>优点：因为钱是直接存储在卡里面，因此，消费时，无需联网，跟电脑无关，直接从卡里面扣钱<br>缺点：充值时，卡片必须到场 （省事的方法，补贴机之类），刷卡数据暂时储存在刷卡机里，待电脑开机后，采集消费数据到电脑<br>IC细分类<br>M1 卡<br>普通IC卡，0扇区不可以修改，其他扇区可反复擦写，我们使用的电梯卡、门禁卡等智能卡发卡商所使用的都是 M1 卡，可以理解为物业发的原卡。</p>\n<p>UID 卡<br>普通复制卡，可以重复擦写所有扇区，主要应用在IC卡复制上，遇到带有防火墙的读卡器就会失效。</p>\n<p>CUID 卡<br>可擦写防屏蔽卡，可以重复擦写所有扇区，UID卡复制无效的情况下使用，可以绕过防火墙。<br>（防屏蔽就是防止某些设备里面有检测机制能够检查出卡片是否为复制卡，cuid卡比较常用，需要注意第二次使用需要格式化，还有说明一下 0扇区就是机器与卡片的桥梁用来存放对应信息。）</p>\n<p>FUID 卡<br>不可擦写防屏蔽卡，此卡的特点0扇区只能写入一次，写入一次变成 M1 卡，CUID 复制没用的情况下使用，可以绕过防火墙。</p>\n<p>UFUID 卡<br>高级复制卡，我们就理解为是 UID 和 FUID 的合成卡，需要封卡操作，不封卡就是 UID 卡，封卡后就变为 M1 卡。</p>\n<p>工具<br>ACR122<br>使用最多的读卡器，很流行，大抵是因为网络上流传了非常强大的GUI改卡读卡复制卡软件吧。</p>\n<p>Proxmark3<br>国外的开源硬件，由FPGA驱动。性能十分强大，集嗅探、读取、克隆于一体，IC卡和ID卡通杀。</p>\n<p>PN532<br>由NXP出品，是一款高度集成的载波的13.56MHz传输模块，基于80C51内核有40KROM、1KRAM。某宝价格为几十元，非常便宜。只能用来读取IC卡，不能读取ID卡和CPU卡。</p>\n<p>入门<br>引脚接线<br>常用接线也在示例程序中写明，这里我使用的是Arduino Uno，所以接线参考前两列即可。</p>\n<ul>\n<li>Typical pin layout used:</li>\n<li><hr>\n</li>\n<li><pre><code>        MFRC522      Arduino       Arduino   Arduino    Arduino          Arduino\n</code></pre>\n</li>\n<li><pre><code>        Reader/PCD   Uno/101       Mega      Nano v3    Leonardo/Micro   Pro Micro\n</code></pre>\n</li>\n<li>Signal      Pin          Pin           Pin       Pin        Pin              Pin</li>\n<li><hr>\n</li>\n<li>RST&#x2F;Reset   RST          9             5         D9         RESET&#x2F;ICSP-5     RST</li>\n<li>SPI SS      SDA(SS)      10            53        D10        10               10</li>\n<li>SPI MOSI    MOSI         11 &#x2F; ICSP-4   51        D11        ICSP-4           16</li>\n<li>SPI MISO    MISO         12 &#x2F; ICSP-1   50        D12        ICSP-1           14</li>\n<li>SPI SCK     SCK          13 &#x2F; ICSP-3   52        D13        ICSP-3           15<br> *&#x2F;<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>即（左侧为RFID-RC522引脚，右侧为Uno引脚）<br>RST &lt;———-&gt; 9<br>SDA(SS) &lt;———-&gt; 10<br>MOSI &lt;———-&gt; 11<br>MISO &lt;———-&gt; 12<br>SCK &lt;———-&gt; 13<br>3.3V &lt;———-&gt; 3.3V<br>GND &lt;———-&gt; GND</li>\n</ul>\n<p>读取 UNID &lt;-&gt; 卡号 &lt;-&gt; ID号<br>这里使用的是MFRC522库中的示例-ReadUNID，读取卡号。<br>据说每一张卡的ID都不一样-,-读取卡号就能判断身份，不过最好是先尝试写入数据（尝试修改卡号），能修改的卡说明是复制卡，这就需要认真对待这样卡的安全性了。</p>\n<p>Sketch</p>\n<p>#include &lt;SPI.h&gt;<br>#include &lt;MFRC522.h&gt;</p>\n<p>#define SS_PIN 10<br>#define RST_PIN 9</p>\n<p>MFRC522 rfid(SS_PIN, RST_PIN); &#x2F;&#x2F; Instance of the class</p>\n<p>MFRC522::MIFARE_Key key; </p>\n<p>&#x2F;&#x2F; Init array that will store new NUID<br>byte nuidPICC[4];</p>\n<p>void setup() {<br>  Serial.begin(9600);<br>  SPI.begin(); &#x2F;&#x2F; Init SPI bus<br>  Serial.println(F(“Start——————–”));<br>  rfid.PCD_Init(); &#x2F;&#x2F; Init MFRC522 </p>\n<p>  for (byte i &#x3D; 0; i &lt; 6; i++) {<br>    key.keyByte[i] &#x3D; 0xFF;<br>  }</p>\n<p>  Serial.println(F(“This code scan the MIFARE Classsic NUID.”));<br>  Serial.print(F(“Using the following key:”));<br>  printHex(key.keyByte, MFRC522::MF_KEY_SIZE);<br>}</p>\n<p>void loop() {</p>\n<p>  &#x2F;&#x2F; Reset the loop if no new card present on the sensor&#x2F;reader. This saves the entire process when idle.<br>  if ( ! rfid.PICC_IsNewCardPresent())<br>    return;</p>\n<p>  &#x2F;&#x2F; Verify if the NUID has been readed<br>  if ( ! rfid.PICC_ReadCardSerial())<br>    return;</p>\n<p>  Serial.print(F(“PICC type: “));<br>  MFRC522::PICC_Type piccType &#x3D; rfid.PICC_GetType(rfid.uid.sak);<br>  Serial.println(rfid.PICC_GetTypeName(piccType));</p>\n<p>  &#x2F;&#x2F; Check is the PICC of Classic MIFARE type<br>  if (piccType !&#x3D; MFRC522::PICC_TYPE_MIFARE_MINI &amp;&amp;<br>    piccType !&#x3D; MFRC522::PICC_TYPE_MIFARE_1K &amp;&amp;<br>    piccType !&#x3D; MFRC522::PICC_TYPE_MIFARE_4K) {<br>    Serial.println(F(“Your tag is not of type MIFARE Classic.”));<br>    return;<br>  }</p>\n<p>  if (rfid.uid.uidByte[0] !&#x3D; nuidPICC[0] ||<br>    rfid.uid.uidByte[1] !&#x3D; nuidPICC[1] ||<br>    rfid.uid.uidByte[2] !&#x3D; nuidPICC[2] ||<br>    rfid.uid.uidByte[3] !&#x3D; nuidPICC[3] ) {<br>    Serial.println(F(“A new card has been detected.”));</p>\n<pre><code>// Store NUID into nuidPICC array\nfor (byte i = 0; i &lt; 4; i++) &#123;\n  nuidPICC[i] = rfid.uid.uidByte[i];\n&#125;\n\nSerial.println(F(&quot;The NUID tag is:&quot;));\nSerial.print(F(&quot;In hex: &quot;));\nprintHex(rfid.uid.uidByte, rfid.uid.size);\nSerial.println();\nSerial.print(F(&quot;In dec: &quot;));\nprintDec(rfid.uid.uidByte, rfid.uid.size);\nSerial.println();\n</code></pre>\n<p>  }<br>  else Serial.println(F(“Card read previously.”));</p>\n<p>  &#x2F;&#x2F; Halt PICC<br>  rfid.PICC_HaltA();</p>\n<p>  &#x2F;&#x2F; Stop encryption on PCD<br>  rfid.PCD_StopCrypto1();<br>}</p>\n<p>&#x2F;**</p>\n<ul>\n<li>Helper routine to dump a byte array as hex values to Serial.<br> *&#x2F;<br>void printHex(byte *buffer, byte bufferSize) {<br>  for (byte i &#x3D; 0; i &lt; bufferSize; i++) {<br> Serial.print(buffer[i] &lt; 0x10 ? “ 0” : “ “);<br> Serial.print(buffer[i], HEX);<br>  }<br>}</li>\n</ul>\n<p>&#x2F;**</p>\n<ul>\n<li>Helper routine to dump a byte array as dec values to Serial.<br> *&#x2F;<br>void printDec(byte *buffer, byte bufferSize) {<br>  for (byte i &#x3D; 0; i &lt; bufferSize; i++) {<br> Serial.print(buffer[i] &lt; 0x10 ? “ 0” : “ “);<br> Serial.print(buffer[i], DEC);<br>  }<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>97<br>98<br>99<br>结果<br>打开Arduino的串口监视器，下载好程序，把IC卡刷到RFID-RC522模块上有标记线圈的位置，就能在串口监视器中看到其编号（饭卡、银行卡刷不出来。。。。。）</li>\n</ul>\n<p>写入&amp;&amp;读取个人信息：名+姓氏<br>接线请往上爬，一模一样。</p>\n<p>Sketch-写入<br>rfid_write_personal_data.ino</p>\n<p>#include &lt;SPI.h&gt;<br>#include &lt;MFRC522.h&gt;</p>\n<p>#define RST_PIN         9           &#x2F;&#x2F; Configurable, see typical pin layout above<br>#define SS_PIN          10          &#x2F;&#x2F; Configurable, see typical pin layout above</p>\n<p>MFRC522 mfrc522(SS_PIN, RST_PIN);   &#x2F;&#x2F; Create MFRC522 instance</p>\n<p>void setup() {<br>  Serial.begin(9600);        &#x2F;&#x2F; Initialize serial communications with the PC<br>  SPI.begin();               &#x2F;&#x2F; Init SPI bus<br>  mfrc522.PCD_Init();        &#x2F;&#x2F; Init MFRC522 card<br>  Serial.println(F(“Write personal data on a MIFARE PICC “));<br>}</p>\n<p>void loop() {</p>\n<p>  &#x2F;&#x2F; Prepare key - all keys are set to FFFFFFFFFFFFh at chip delivery from the factory.<br>  MFRC522::MIFARE_Key key;<br>  for (byte i &#x3D; 0; i &lt; 6; i++) key.keyByte[i] &#x3D; 0xFF;</p>\n<p>  &#x2F;&#x2F; Reset the loop if no new card present on the sensor&#x2F;reader. This saves the entire process when idle.<br>  if ( ! mfrc522.PICC_IsNewCardPresent()) {<br>    return;<br>  }</p>\n<p>  &#x2F;&#x2F; Select one of the cards<br>  if ( ! mfrc522.PICC_ReadCardSerial()) {<br>    return;<br>  }</p>\n<p>  Serial.print(F(“Card UID:”));    &#x2F;&#x2F;Dump UID<br>  for (byte i &#x3D; 0; i &lt; mfrc522.uid.size; i++) {<br>    Serial.print(mfrc522.uid.uidByte[i] &lt; 0x10 ? “ 0” : “ “);<br>    Serial.print(mfrc522.uid.uidByte[i], HEX);<br>  }<br>  Serial.print(F(“ PICC type: “));   &#x2F;&#x2F; Dump PICC type<br>  MFRC522::PICC_Type piccType &#x3D; mfrc522.PICC_GetType(mfrc522.uid.sak);<br>  Serial.println(mfrc522.PICC_GetTypeName(piccType));</p>\n<p>  byte buffer[34];<br>  byte block;<br>  MFRC522::StatusCode status;<br>  byte len;</p>\n<p>  Serial.setTimeout(20000L) ;     &#x2F;&#x2F; wait until 20 seconds for input from serial<br>  &#x2F;&#x2F; Ask personal data: Family name<br>  Serial.println(F(“Type Family name, ending with #”));<br>  len &#x3D; Serial.readBytesUntil(‘#’, (char *) buffer, 30) ; &#x2F;&#x2F; read family name from serial<br>  for (byte i &#x3D; len; i &lt; 30; i++) buffer[i] &#x3D; ‘ ‘;     &#x2F;&#x2F; pad with spaces</p>\n<p>  block &#x3D; 1;<br>  &#x2F;&#x2F;Serial.println(F(“Authenticating using key A…”));<br>  status &#x3D; mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, block, &amp;key, &amp;(mfrc522.uid));<br>  if (status !&#x3D; MFRC522::STATUS_OK) {<br>    Serial.print(F(“PCD_Authenticate() failed: “));<br>    Serial.println(mfrc522.GetStatusCodeName(status));<br>    return;<br>  }<br>  else Serial.println(F(“PCD_Authenticate() success: “));</p>\n<p>  &#x2F;&#x2F; Write block<br>  status &#x3D; mfrc522.MIFARE_Write(block, buffer, 16);<br>  if (status !&#x3D; MFRC522::STATUS_OK) {<br>    Serial.print(F(“MIFARE_Write() failed: “));<br>    Serial.println(mfrc522.GetStatusCodeName(status));<br>    return;<br>  }<br>  else Serial.println(F(“MIFARE_Write() success: “));</p>\n<p>  block &#x3D; 2;<br>  &#x2F;&#x2F;Serial.println(F(“Authenticating using key A…”));<br>  status &#x3D; mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, block, &amp;key, &amp;(mfrc522.uid));<br>  if (status !&#x3D; MFRC522::STATUS_OK) {<br>    Serial.print(F(“PCD_Authenticate() failed: “));<br>    Serial.println(mfrc522.GetStatusCodeName(status));<br>    return;<br>  }</p>\n<p>  &#x2F;&#x2F; Write block<br>  status &#x3D; mfrc522.MIFARE_Write(block, &amp;buffer[16], 16);<br>  if (status !&#x3D; MFRC522::STATUS_OK) {<br>    Serial.print(F(“MIFARE_Write() failed: “));<br>    Serial.println(mfrc522.GetStatusCodeName(status));<br>    return;<br>  }<br>  else Serial.println(F(“MIFARE_Write() success: “));</p>\n<p>  &#x2F;&#x2F; Ask personal data: First name<br>  Serial.println(F(“Type First name, ending with #”));<br>  len &#x3D; Serial.readBytesUntil(‘#’, (char *) buffer, 20) ; &#x2F;&#x2F; read first name from serial<br>  for (byte i &#x3D; len; i &lt; 20; i++) buffer[i] &#x3D; ‘ ‘;     &#x2F;&#x2F; pad with spaces</p>\n<p>  block &#x3D; 4;<br>  &#x2F;&#x2F;Serial.println(F(“Authenticating using key A…”));<br>  status &#x3D; mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, block, &amp;key, &amp;(mfrc522.uid));<br>  if (status !&#x3D; MFRC522::STATUS_OK) {<br>    Serial.print(F(“PCD_Authenticate() failed: “));<br>    Serial.println(mfrc522.GetStatusCodeName(status));<br>    return;<br>  }</p>\n<p>  &#x2F;&#x2F; Write block<br>  status &#x3D; mfrc522.MIFARE_Write(block, buffer, 16);<br>  if (status !&#x3D; MFRC522::STATUS_OK) {<br>    Serial.print(F(“MIFARE_Write() failed: “));<br>    Serial.println(mfrc522.GetStatusCodeName(status));<br>    return;<br>  }<br>  else Serial.println(F(“MIFARE_Write() success: “));</p>\n<p>  block &#x3D; 5;<br>  &#x2F;&#x2F;Serial.println(F(“Authenticating using key A…”));<br>  status &#x3D; mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, block, &amp;key, &amp;(mfrc522.uid));<br>  if (status !&#x3D; MFRC522::STATUS_OK) {<br>    Serial.print(F(“PCD_Authenticate() failed: “));<br>    Serial.println(mfrc522.GetStatusCodeName(status));<br>    return;<br>  }</p>\n<p>  &#x2F;&#x2F; Write block<br>  status &#x3D; mfrc522.MIFARE_Write(block, &amp;buffer[16], 16);<br>  if (status !&#x3D; MFRC522::STATUS_OK) {<br>    Serial.print(F(“MIFARE_Write() failed: “));<br>    Serial.println(mfrc522.GetStatusCodeName(status));<br>    return;<br>  }<br>  else Serial.println(F(“MIFARE_Write() success: “));</p>\n<p>  Serial.println(“ “);<br>  mfrc522.PICC_HaltA(); &#x2F;&#x2F; Halt PICC<br>  mfrc522.PCD_StopCrypto1();  &#x2F;&#x2F; Stop encryption on PCD</p>\n<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>97<br>98<br>99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br>126<br>127<br>128<br>129<br>130<br>131<br>132<br>133<br>134<br>135<br>Result</p>\n<p>例如我第一次输入 Smith#<br>第二次输入 Rick#</p>\n<p>Sketch-读取<br>#include &lt;SPI.h&gt;<br>#include &lt;MFRC522.h&gt;</p>\n<p>#define RST_PIN         9           &#x2F;&#x2F; Configurable, see typical pin layout above<br>#define SS_PIN          10          &#x2F;&#x2F; Configurable, see typical pin layout above</p>\n<p>MFRC522 mfrc522(SS_PIN, RST_PIN);   &#x2F;&#x2F; Create MFRC522 instance</p>\n<p>&#x2F;&#x2F;*****************************************************************************************&#x2F;&#x2F;<br>void setup() {<br>  Serial.begin(9600);                                           &#x2F;&#x2F; Initialize serial communications with the PC<br>  SPI.begin();                                                  &#x2F;&#x2F; Init SPI bus<br>  mfrc522.PCD_Init();                                              &#x2F;&#x2F; Init MFRC522 card<br>  Serial.println(F(“Read personal data on a MIFARE PICC:”));    &#x2F;&#x2F;shows in serial that it is ready to read<br>}</p>\n<p>&#x2F;&#x2F;*****************************************************************************************&#x2F;&#x2F;<br>void loop() {</p>\n<p>  &#x2F;&#x2F; Prepare key - all keys are set to FFFFFFFFFFFFh at chip delivery from the factory.<br>  MFRC522::MIFARE_Key key;<br>  for (byte i &#x3D; 0; i &lt; 6; i++) key.keyByte[i] &#x3D; 0xFF;</p>\n<p>  &#x2F;&#x2F;some variables we need<br>  byte block;<br>  byte len;<br>  MFRC522::StatusCode status;</p>\n<p>  &#x2F;&#x2F;——————————————-</p>\n<p>  &#x2F;&#x2F; Reset the loop if no new card present on the sensor&#x2F;reader. This saves the entire process when idle.<br>  if ( ! mfrc522.PICC_IsNewCardPresent()) {<br>    return;<br>  }</p>\n<p>  &#x2F;&#x2F; Select one of the cards<br>  if ( ! mfrc522.PICC_ReadCardSerial()) {<br>    return;<br>  }</p>\n<p>  Serial.println(F(“<strong>Card Detected:</strong>“));</p>\n<p>  &#x2F;&#x2F;——————————————-</p>\n<p>  mfrc522.PICC_DumpDetailsToSerial(&amp;(mfrc522.uid)); &#x2F;&#x2F;dump some details about the card</p>\n<p>  &#x2F;&#x2F;mfrc522.PICC_DumpToSerial(&amp;(mfrc522.uid));      &#x2F;&#x2F;uncomment this to see all blocks in hex</p>\n<p>  &#x2F;&#x2F;——————————————-</p>\n<p>  Serial.print(F(“Name: “));</p>\n<p>  byte buffer1[18];</p>\n<p>  block &#x3D; 4;<br>  len &#x3D; 18;</p>\n<p>  &#x2F;&#x2F;——————————————- GET FIRST NAME<br>  status &#x3D; mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, 4, &amp;key, &amp;(mfrc522.uid)); &#x2F;&#x2F;line 834 of MFRC522.cpp file<br>  if (status !&#x3D; MFRC522::STATUS_OK) {<br>    Serial.print(F(“Authentication failed: “));<br>    Serial.println(mfrc522.GetStatusCodeName(status));<br>    return;<br>  }</p>\n<p>  status &#x3D; mfrc522.MIFARE_Read(block, buffer1, &amp;len);<br>  if (status !&#x3D; MFRC522::STATUS_OK) {<br>    Serial.print(F(“Reading failed: “));<br>    Serial.println(mfrc522.GetStatusCodeName(status));<br>    return;<br>  }</p>\n<p>  &#x2F;&#x2F;PRINT FIRST NAME<br>  for (uint8_t i &#x3D; 0; i &lt; 16; i++)<br>  {<br>    if (buffer1[i] !&#x3D; 32)<br>    {<br>      Serial.write(buffer1[i]);<br>    }<br>  }<br>  Serial.print(“ “);</p>\n<p>  &#x2F;&#x2F;—————————————- GET LAST NAME</p>\n<p>  byte buffer2[18];<br>  block &#x3D; 1;</p>\n<p>  status &#x3D; mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, 1, &amp;key, &amp;(mfrc522.uid)); &#x2F;&#x2F;line 834<br>  if (status !&#x3D; MFRC522::STATUS_OK) {<br>    Serial.print(F(“Authentication failed: “));<br>    Serial.println(mfrc522.GetStatusCodeName(status));<br>    return;<br>  }</p>\n<p>  status &#x3D; mfrc522.MIFARE_Read(block, buffer2, &amp;len);<br>  if (status !&#x3D; MFRC522::STATUS_OK) {<br>    Serial.print(F(“Reading failed: “));<br>    Serial.println(mfrc522.GetStatusCodeName(status));<br>    return;<br>  }</p>\n<p>  &#x2F;&#x2F;PRINT LAST NAME<br>  for (uint8_t i &#x3D; 0; i &lt; 16; i++) {<br>    Serial.write(buffer2[i] );<br>  }</p>\n<p>  &#x2F;&#x2F;—————————————-</p>\n<p>  Serial.println(F(“\\n<strong>End Reading</strong>\\n”));</p>\n<p>  delay(1000); &#x2F;&#x2F;change value if you want to read cards faster</p>\n<p>  mfrc522.PICC_HaltA();<br>  mfrc522.PCD_StopCrypto1();<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>97<br>98<br>99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>Result</p>\n<p>正如上面所输入的一样-.-</p>\n<p>读取扇区数据<br>以S50为例，读取其中16个扇区的全部数据,烧录程序后刷一下就能在串口监视器看到所有扇区对应的数据了</p>\n<p>Sketch<br>Dumpinfo.info</p>\n<p>#include &lt;SPI.h&gt;<br>#include &lt;MFRC522.h&gt;</p>\n<p>#define RST_PIN         9          &#x2F;&#x2F; Configurable, see typical pin layout above<br>#define SS_PIN          10         &#x2F;&#x2F; Configurable, see typical pin layout above</p>\n<p>MFRC522 mfrc522(SS_PIN, RST_PIN);  &#x2F;&#x2F; Create MFRC522 instance</p>\n<p>void setup() {<br>    Serial.begin(9600);\t\t&#x2F;&#x2F; Initialize serial communications with the PC<br>    while (!Serial);\t\t&#x2F;&#x2F; Do nothing if no serial port is opened (added for Arduinos based on ATMEGA32U4)<br>    SPI.begin();\t\t\t&#x2F;&#x2F; Init SPI bus<br>    mfrc522.PCD_Init();\t\t&#x2F;&#x2F; Init MFRC522<br>    delay(4);\t\t\t\t&#x2F;&#x2F; Optional delay. Some board do need more time after init to be ready, see Readme<br>    mfrc522.PCD_DumpVersionToSerial();\t&#x2F;&#x2F; Show details of PCD - MFRC522 Card Reader details<br>    Serial.println(F(“Scan PICC to see UID, SAK, type, and data blocks…”));<br>}</p>\n<p>void loop() {<br>    &#x2F;&#x2F; Reset the loop if no new card present on the sensor&#x2F;reader. This saves the entire process when idle.<br>    if ( ! mfrc522.PICC_IsNewCardPresent()) {<br>        return;<br>    }</p>\n<pre><code>// Select one of the cards\nif ( ! mfrc522.PICC_ReadCardSerial()) &#123;\n    return;\n&#125;\n\n// Dump debug info about the card; PICC_HaltA() is automatically called\nmfrc522.PICC_DumpToSerial(&amp;(mfrc522.uid));\n</code></pre>\n<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>Result</p>\n<p>References<br>Arduino教程 RFID-RC522读IC卡门禁原理<br>Introduction to NFC<br>产品资料 提取码: qi6v<br>M1 : S50和S70<br>IC卡小结<br>————————————————<br>版权声明：本文为CSDN博主「Kearney form An idea」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href=\"https://blog.csdn.net/weixin_43031092/article/details/108651982\">https://blog.csdn.net/weixin_43031092/article/details/108651982</a></p>\n<p><a href=\"https://blog.csdn.net/leytton/article/details/73480974\">https://blog.csdn.net/leytton/article/details/73480974</a></p>\n<p>【文章特色：1、提出IC卡破解原理和简单有效的防御方法2、网上其他文章对于硬件如何接线说得模糊不清】<br>1、序言<br>先说下简单门禁系统的原理：</p>\n<p>(1)IC卡激活：门禁卡管理员将卡片放到读卡器、这时软件读取到IC卡的UID序列号信息(相当于身份证号码)，将这个UID录入数据库激活IC卡。</p>\n<p>(2)刷卡：刷卡时读卡器读取到UID，查询数据库，如果数据库中存在这个UID则表示有效用户,继而控制继电器断电，此时电磁锁开门。</p>\n<p>不亦买的RC522模块采用SPI通信、据说也有串口通信的不过成本较高。大家可以看看这个模块的主要配件：卡和读卡器。</p>\n<p>2、加载RC522库文件<br> Arduino本身有个操作RC5200的库，如下图所示，打开Arduino开发工具中管理库</p>\n<p>搜索”RC522”，选择”MFRC522”安装即可</p>\n<p>点击”More info”可以跳转到github地址<a href=\"https://github.com/miguelbalboa/rfid\">https://github.com/miguelbalboa/rfid</a> ，下文会有提及。</p>\n<p>安装完毕后，可以看到关于MFRC522的库示例，有读取UID、获取区块信息、修改UID、卡片信息复制等</p>\n<p>注：一般而言IC卡是不能修改0扇区0区块的UID和厂商信息数据，这些是生产时就确定下来的的(关于IC卡的存储结构有空再发文介绍，小伙伴们可以去网上查阅这方面资料也挺多的)，能够全扇区修改的俗称UID卡才支持修改UID，一些不负责的门禁系统厂家仅根据UID来判断用户身份是不可靠的，一个简单的方法是在读之前先写UID操作，如果可写那么这张卡就是UID卡即复制卡，判断无效，系统也可记录是哪张IC卡被复制了用于追溯非法行为，仅供交流与学习，请勿用于非法用途哦</p>\n<p>3、模块引脚接线<br>此处是网络上大部分相关文章没有提及的，只告诉了如何接线，却不告诉我们为什么这样接，甚至连Arduino版本都不说清楚。</p>\n<p>我们打开ReadNUID的示例里面有各种版本Arduino与RC522的引脚连接图，我们按照这个接线即可。在上文提及的github项目主页也有介绍。</p>\n<p>RC522一共8个引脚，如图所示：</p>\n<p>3.3V供电、GND接地不用多说，IRQ是中断才用到的此处没有用到可以不接，其余5个引脚接法如下表所示：</p>\n<p> &#x2F;* Typical pin layout used:</p>\n<ul>\n<li><hr>\n</li>\n<li><pre><code>        MFRC522      Arduino       Arduino   Arduino    Arduino          Arduino\n</code></pre>\n</li>\n<li><pre><code>        Reader/PCD   Uno/101       Mega      Nano v3    Leonardo/Micro   Pro Micro\n</code></pre>\n</li>\n<li>Signal      Pin          Pin           Pin       Pin        Pin              Pin</li>\n<li><hr>\n</li>\n<li>RST&#x2F;Reset   RST          9             5         D9         RESET&#x2F;ICSP-5     RST</li>\n<li>SPI SS      SDA(SS)      10            53        D10        10               10</li>\n<li>SPI MOSI    MOSI         11 &#x2F; ICSP-4   51        D11        ICSP-4           16</li>\n<li>SPI MISO    MISO         12 &#x2F; ICSP-1   50        D12        ICSP-1           14</li>\n<li>SPI SCK     SCK          13 &#x2F; ICSP-3   52        D13        ICSP-3           15<br> *&#x2F;</li>\n</ul>\n<p>4、程序代码<br>此处测试的Arduino型号是Arduino Nano V3.0，其他型号请结合上表修改引脚号。</p>\n<p>示例代码读取UID，并将其分别以十进制和十六进制输出到串口，简化版如下：</p>\n<p>#include &lt;SPI.h&gt;<br>#include &lt;MFRC522.h&gt;</p>\n<p>#define SS_PIN 10<br>#define RST_PIN 9</p>\n<p>MFRC522 rfid(SS_PIN, RST_PIN); &#x2F;&#x2F;实例化类</p>\n<p>&#x2F;&#x2F; 初始化数组用于存储读取到的NUID<br>byte nuidPICC[4];</p>\n<p>void setup() {<br>  Serial.begin(9600);<br>  SPI.begin(); &#x2F;&#x2F; 初始化SPI总线<br>  rfid.PCD_Init(); &#x2F;&#x2F; 初始化 MFRC522<br>}</p>\n<p>void loop() {</p>\n<p>  &#x2F;&#x2F; 找卡<br>  if ( ! rfid.PICC_IsNewCardPresent())<br>    return;</p>\n<p>  &#x2F;&#x2F; 验证NUID是否可读<br>  if ( ! rfid.PICC_ReadCardSerial())<br>    return;</p>\n<p>  MFRC522::PICC_Type piccType &#x3D; rfid.PICC_GetType(rfid.uid.sak);</p>\n<p>  &#x2F;&#x2F; 检查是否MIFARE卡类型<br>  if (piccType !&#x3D; MFRC522::PICC_TYPE_MIFARE_MINI &amp;&amp;<br>    piccType !&#x3D; MFRC522::PICC_TYPE_MIFARE_1K &amp;&amp;<br>    piccType !&#x3D; MFRC522::PICC_TYPE_MIFARE_4K) {<br>    Serial.println(“不支持读取此卡类型”);<br>    return;<br>  }</p>\n<p>  &#x2F;&#x2F; 将NUID保存到nuidPICC数组<br>  for (byte i &#x3D; 0; i &lt; 4; i++) {<br>    nuidPICC[i] &#x3D; rfid.uid.uidByte[i];<br>  }<br>  Serial.print(“十六进制UID：”);<br>  printHex(rfid.uid.uidByte, rfid.uid.size);<br>  Serial.println();</p>\n<p>  Serial.print(“十进制UID：”);<br>  printDec(rfid.uid.uidByte, rfid.uid.size);<br>  Serial.println();</p>\n<p>  &#x2F;&#x2F; 使放置在读卡区的IC卡进入休眠状态，不再重复读卡<br>  rfid.PICC_HaltA();</p>\n<p>  &#x2F;&#x2F; 停止读卡模块编码<br>  rfid.PCD_StopCrypto1();<br>}</p>\n<p>void printHex(byte *buffer, byte bufferSize) {<br>  for (byte i &#x3D; 0; i &lt; bufferSize; i++) {<br>    Serial.print(buffer[i] &lt; 0x10 ? “ 0” : “”);<br>    Serial.print(buffer[i], HEX);<br>  }<br>}</p>\n<p>void printDec(byte *buffer, byte bufferSize) {<br>  for (byte i &#x3D; 0; i &lt; bufferSize; i++) {<br>    Serial.print(buffer[i] &lt; 0x10 ? “ 0” : “”);<br>    Serial.print(buffer[i], DEC);<br>  }<br>}</p>\n<p>5、运行结果<br>依次将卡A、卡B、卡A放到RC522读卡区，串口打印信息如下</p>\n<p>感谢梦鸽推上首页分享给更多的人看到^_^<br>【转载请注明出处: <a href=\"http://blog.csdn.net/leytton/article/details/73480974%E3%80%91\">http://blog.csdn.net/leytton/article/details/73480974】</a><br> PS：如果本文对您有帮助，请点个赞让我知道哦~<br>————————————————<br>版权声明：本文为CSDN博主「李乾文」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href=\"https://blog.csdn.net/leytton/article/details/73480974\">https://blog.csdn.net/leytton/article/details/73480974</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://blog.csdn.net/weixin_43031092/article/details/108651982\">https://blog.csdn.net/weixin_43031092/article/details/108651982</a></p>\n<p>简介<br>单片机：Arduino Uno<br>额外库：MFRC522（可直接在库管理器下载）</p>\n<p>S50 IC卡 采用NXP MF1 IC S50制作的非接触智能卡，通常简称S50卡或Mifare 1K，符合ISO14443A标准；存储容量：8Kbit，16个分区，每分区两组密码。</p>\n<p>枯叶笑与东方大叔的IC卡小结<br>分类 IC - ID<br>市场上常用的卡片就两种，IC卡和ID卡，这两者的区别就是IC卡有存储芯片（如M1,UID,CUID,FUID,UFUID），而 ID卡只是一个卡号（ 全称为身份识别卡，是一种不可写入的感应卡，含固定的编号.卡号在封卡前写入后不可再更改）。CPU卡因为价格太高，没有推广起来</p>\n<p>IC卡的芯片，目前市场上常用的有两种，一种是价格较高的飞利浦原装芯片，一种是上海复旦芯片；原装飞利浦芯片IC卡，市场拿货价不超过3元，例如公交卡，国产芯片IC卡，价格几毛钱，常用于电梯、停车场、食堂就餐、水卡</p>\n<p>IC卡和ID卡都可以用于一卡通系统，各有优缺点：</p>\n<p>ID卡，因为只是ID号，没有内置存储芯片，因此，当ID卡用于一卡通系统时，必须要电脑开着，因为，你消费扣款或充值，都是从电脑数据库里加加减减，这类似于磁条性质的银行卡，卡片本身没有钱，你取钱存钱，其实都是在银行数据库里加减</p>\n<p>优点：因为是从电脑数据库里直接加减，因此，充值或取款，卡片无需到场，刷卡数据实时传输到电脑<br>缺点：电脑坏了或通讯有问题，整套系统都瘫痪（脱机消费模式也行，这里不具体讲）<br>IC卡，常用的公交卡、地铁卡都是IC卡，内置芯片，0-15 共16个扇区，可以写入数据</p>\n<p>优点：因为钱是直接存储在卡里面，因此，消费时，无需联网，跟电脑无关，直接从卡里面扣钱<br>缺点：充值时，卡片必须到场 （省事的方法，补贴机之类），刷卡数据暂时储存在刷卡机里，待电脑开机后，采集消费数据到电脑<br>IC细分类<br>M1 卡<br>普通IC卡，0扇区不可以修改，其他扇区可反复擦写，我们使用的电梯卡、门禁卡等智能卡发卡商所使用的都是 M1 卡，可以理解为物业发的原卡。</p>\n<p>UID 卡<br>普通复制卡，可以重复擦写所有扇区，主要应用在IC卡复制上，遇到带有防火墙的读卡器就会失效。</p>\n<p>CUID 卡<br>可擦写防屏蔽卡，可以重复擦写所有扇区，UID卡复制无效的情况下使用，可以绕过防火墙。<br>（防屏蔽就是防止某些设备里面有检测机制能够检查出卡片是否为复制卡，cuid卡比较常用，需要注意第二次使用需要格式化，还有说明一下 0扇区就是机器与卡片的桥梁用来存放对应信息。）</p>\n<p>FUID 卡<br>不可擦写防屏蔽卡，此卡的特点0扇区只能写入一次，写入一次变成 M1 卡，CUID 复制没用的情况下使用，可以绕过防火墙。</p>\n<p>UFUID 卡<br>高级复制卡，我们就理解为是 UID 和 FUID 的合成卡，需要封卡操作，不封卡就是 UID 卡，封卡后就变为 M1 卡。</p>\n<p>工具<br>ACR122<br>使用最多的读卡器，很流行，大抵是因为网络上流传了非常强大的GUI改卡读卡复制卡软件吧。</p>\n<p>Proxmark3<br>国外的开源硬件，由FPGA驱动。性能十分强大，集嗅探、读取、克隆于一体，IC卡和ID卡通杀。</p>\n<p>PN532<br>由NXP出品，是一款高度集成的载波的13.56MHz传输模块，基于80C51内核有40KROM、1KRAM。某宝价格为几十元，非常便宜。只能用来读取IC卡，不能读取ID卡和CPU卡。</p>\n<p>入门<br>引脚接线<br>常用接线也在示例程序中写明，这里我使用的是Arduino Uno，所以接线参考前两列即可。</p>\n<ul>\n<li>Typical pin layout used:</li>\n<li><hr>\n</li>\n<li><pre><code>        MFRC522      Arduino       Arduino   Arduino    Arduino          Arduino\n</code></pre>\n</li>\n<li><pre><code>        Reader/PCD   Uno/101       Mega      Nano v3    Leonardo/Micro   Pro Micro\n</code></pre>\n</li>\n<li>Signal      Pin          Pin           Pin       Pin        Pin              Pin</li>\n<li><hr>\n</li>\n<li>RST&#x2F;Reset   RST          9             5         D9         RESET&#x2F;ICSP-5     RST</li>\n<li>SPI SS      SDA(SS)      10            53        D10        10               10</li>\n<li>SPI MOSI    MOSI         11 &#x2F; ICSP-4   51        D11        ICSP-4           16</li>\n<li>SPI MISO    MISO         12 &#x2F; ICSP-1   50        D12        ICSP-1           14</li>\n<li>SPI SCK     SCK          13 &#x2F; ICSP-3   52        D13        ICSP-3           15<br> *&#x2F;<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>即（左侧为RFID-RC522引脚，右侧为Uno引脚）<br>RST &lt;———-&gt; 9<br>SDA(SS) &lt;———-&gt; 10<br>MOSI &lt;———-&gt; 11<br>MISO &lt;———-&gt; 12<br>SCK &lt;———-&gt; 13<br>3.3V &lt;———-&gt; 3.3V<br>GND &lt;———-&gt; GND</li>\n</ul>\n<p>读取 UNID &lt;-&gt; 卡号 &lt;-&gt; ID号<br>这里使用的是MFRC522库中的示例-ReadUNID，读取卡号。<br>据说每一张卡的ID都不一样-,-读取卡号就能判断身份，不过最好是先尝试写入数据（尝试修改卡号），能修改的卡说明是复制卡，这就需要认真对待这样卡的安全性了。</p>\n<p>Sketch</p>\n<p>#include &lt;SPI.h&gt;<br>#include &lt;MFRC522.h&gt;</p>\n<p>#define SS_PIN 10<br>#define RST_PIN 9</p>\n<p>MFRC522 rfid(SS_PIN, RST_PIN); &#x2F;&#x2F; Instance of the class</p>\n<p>MFRC522::MIFARE_Key key; </p>\n<p>&#x2F;&#x2F; Init array that will store new NUID<br>byte nuidPICC[4];</p>\n<p>void setup() {<br>  Serial.begin(9600);<br>  SPI.begin(); &#x2F;&#x2F; Init SPI bus<br>  Serial.println(F(“Start——————–”));<br>  rfid.PCD_Init(); &#x2F;&#x2F; Init MFRC522 </p>\n<p>  for (byte i &#x3D; 0; i &lt; 6; i++) {<br>    key.keyByte[i] &#x3D; 0xFF;<br>  }</p>\n<p>  Serial.println(F(“This code scan the MIFARE Classsic NUID.”));<br>  Serial.print(F(“Using the following key:”));<br>  printHex(key.keyByte, MFRC522::MF_KEY_SIZE);<br>}</p>\n<p>void loop() {</p>\n<p>  &#x2F;&#x2F; Reset the loop if no new card present on the sensor&#x2F;reader. This saves the entire process when idle.<br>  if ( ! rfid.PICC_IsNewCardPresent())<br>    return;</p>\n<p>  &#x2F;&#x2F; Verify if the NUID has been readed<br>  if ( ! rfid.PICC_ReadCardSerial())<br>    return;</p>\n<p>  Serial.print(F(“PICC type: “));<br>  MFRC522::PICC_Type piccType &#x3D; rfid.PICC_GetType(rfid.uid.sak);<br>  Serial.println(rfid.PICC_GetTypeName(piccType));</p>\n<p>  &#x2F;&#x2F; Check is the PICC of Classic MIFARE type<br>  if (piccType !&#x3D; MFRC522::PICC_TYPE_MIFARE_MINI &amp;&amp;<br>    piccType !&#x3D; MFRC522::PICC_TYPE_MIFARE_1K &amp;&amp;<br>    piccType !&#x3D; MFRC522::PICC_TYPE_MIFARE_4K) {<br>    Serial.println(F(“Your tag is not of type MIFARE Classic.”));<br>    return;<br>  }</p>\n<p>  if (rfid.uid.uidByte[0] !&#x3D; nuidPICC[0] ||<br>    rfid.uid.uidByte[1] !&#x3D; nuidPICC[1] ||<br>    rfid.uid.uidByte[2] !&#x3D; nuidPICC[2] ||<br>    rfid.uid.uidByte[3] !&#x3D; nuidPICC[3] ) {<br>    Serial.println(F(“A new card has been detected.”));</p>\n<pre><code>// Store NUID into nuidPICC array\nfor (byte i = 0; i &lt; 4; i++) &#123;\n  nuidPICC[i] = rfid.uid.uidByte[i];\n&#125;\n\nSerial.println(F(&quot;The NUID tag is:&quot;));\nSerial.print(F(&quot;In hex: &quot;));\nprintHex(rfid.uid.uidByte, rfid.uid.size);\nSerial.println();\nSerial.print(F(&quot;In dec: &quot;));\nprintDec(rfid.uid.uidByte, rfid.uid.size);\nSerial.println();\n</code></pre>\n<p>  }<br>  else Serial.println(F(“Card read previously.”));</p>\n<p>  &#x2F;&#x2F; Halt PICC<br>  rfid.PICC_HaltA();</p>\n<p>  &#x2F;&#x2F; Stop encryption on PCD<br>  rfid.PCD_StopCrypto1();<br>}</p>\n<p>&#x2F;**</p>\n<ul>\n<li>Helper routine to dump a byte array as hex values to Serial.<br> *&#x2F;<br>void printHex(byte *buffer, byte bufferSize) {<br>  for (byte i &#x3D; 0; i &lt; bufferSize; i++) {<br> Serial.print(buffer[i] &lt; 0x10 ? “ 0” : “ “);<br> Serial.print(buffer[i], HEX);<br>  }<br>}</li>\n</ul>\n<p>&#x2F;**</p>\n<ul>\n<li>Helper routine to dump a byte array as dec values to Serial.<br> *&#x2F;<br>void printDec(byte *buffer, byte bufferSize) {<br>  for (byte i &#x3D; 0; i &lt; bufferSize; i++) {<br> Serial.print(buffer[i] &lt; 0x10 ? “ 0” : “ “);<br> Serial.print(buffer[i], DEC);<br>  }<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>97<br>98<br>99<br>结果<br>打开Arduino的串口监视器，下载好程序，把IC卡刷到RFID-RC522模块上有标记线圈的位置，就能在串口监视器中看到其编号（饭卡、银行卡刷不出来。。。。。）</li>\n</ul>\n<p>写入&amp;&amp;读取个人信息：名+姓氏<br>接线请往上爬，一模一样。</p>\n<p>Sketch-写入<br>rfid_write_personal_data.ino</p>\n<p>#include &lt;SPI.h&gt;<br>#include &lt;MFRC522.h&gt;</p>\n<p>#define RST_PIN         9           &#x2F;&#x2F; Configurable, see typical pin layout above<br>#define SS_PIN          10          &#x2F;&#x2F; Configurable, see typical pin layout above</p>\n<p>MFRC522 mfrc522(SS_PIN, RST_PIN);   &#x2F;&#x2F; Create MFRC522 instance</p>\n<p>void setup() {<br>  Serial.begin(9600);        &#x2F;&#x2F; Initialize serial communications with the PC<br>  SPI.begin();               &#x2F;&#x2F; Init SPI bus<br>  mfrc522.PCD_Init();        &#x2F;&#x2F; Init MFRC522 card<br>  Serial.println(F(“Write personal data on a MIFARE PICC “));<br>}</p>\n<p>void loop() {</p>\n<p>  &#x2F;&#x2F; Prepare key - all keys are set to FFFFFFFFFFFFh at chip delivery from the factory.<br>  MFRC522::MIFARE_Key key;<br>  for (byte i &#x3D; 0; i &lt; 6; i++) key.keyByte[i] &#x3D; 0xFF;</p>\n<p>  &#x2F;&#x2F; Reset the loop if no new card present on the sensor&#x2F;reader. This saves the entire process when idle.<br>  if ( ! mfrc522.PICC_IsNewCardPresent()) {<br>    return;<br>  }</p>\n<p>  &#x2F;&#x2F; Select one of the cards<br>  if ( ! mfrc522.PICC_ReadCardSerial()) {<br>    return;<br>  }</p>\n<p>  Serial.print(F(“Card UID:”));    &#x2F;&#x2F;Dump UID<br>  for (byte i &#x3D; 0; i &lt; mfrc522.uid.size; i++) {<br>    Serial.print(mfrc522.uid.uidByte[i] &lt; 0x10 ? “ 0” : “ “);<br>    Serial.print(mfrc522.uid.uidByte[i], HEX);<br>  }<br>  Serial.print(F(“ PICC type: “));   &#x2F;&#x2F; Dump PICC type<br>  MFRC522::PICC_Type piccType &#x3D; mfrc522.PICC_GetType(mfrc522.uid.sak);<br>  Serial.println(mfrc522.PICC_GetTypeName(piccType));</p>\n<p>  byte buffer[34];<br>  byte block;<br>  MFRC522::StatusCode status;<br>  byte len;</p>\n<p>  Serial.setTimeout(20000L) ;     &#x2F;&#x2F; wait until 20 seconds for input from serial<br>  &#x2F;&#x2F; Ask personal data: Family name<br>  Serial.println(F(“Type Family name, ending with #”));<br>  len &#x3D; Serial.readBytesUntil(‘#’, (char *) buffer, 30) ; &#x2F;&#x2F; read family name from serial<br>  for (byte i &#x3D; len; i &lt; 30; i++) buffer[i] &#x3D; ‘ ‘;     &#x2F;&#x2F; pad with spaces</p>\n<p>  block &#x3D; 1;<br>  &#x2F;&#x2F;Serial.println(F(“Authenticating using key A…”));<br>  status &#x3D; mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, block, &amp;key, &amp;(mfrc522.uid));<br>  if (status !&#x3D; MFRC522::STATUS_OK) {<br>    Serial.print(F(“PCD_Authenticate() failed: “));<br>    Serial.println(mfrc522.GetStatusCodeName(status));<br>    return;<br>  }<br>  else Serial.println(F(“PCD_Authenticate() success: “));</p>\n<p>  &#x2F;&#x2F; Write block<br>  status &#x3D; mfrc522.MIFARE_Write(block, buffer, 16);<br>  if (status !&#x3D; MFRC522::STATUS_OK) {<br>    Serial.print(F(“MIFARE_Write() failed: “));<br>    Serial.println(mfrc522.GetStatusCodeName(status));<br>    return;<br>  }<br>  else Serial.println(F(“MIFARE_Write() success: “));</p>\n<p>  block &#x3D; 2;<br>  &#x2F;&#x2F;Serial.println(F(“Authenticating using key A…”));<br>  status &#x3D; mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, block, &amp;key, &amp;(mfrc522.uid));<br>  if (status !&#x3D; MFRC522::STATUS_OK) {<br>    Serial.print(F(“PCD_Authenticate() failed: “));<br>    Serial.println(mfrc522.GetStatusCodeName(status));<br>    return;<br>  }</p>\n<p>  &#x2F;&#x2F; Write block<br>  status &#x3D; mfrc522.MIFARE_Write(block, &amp;buffer[16], 16);<br>  if (status !&#x3D; MFRC522::STATUS_OK) {<br>    Serial.print(F(“MIFARE_Write() failed: “));<br>    Serial.println(mfrc522.GetStatusCodeName(status));<br>    return;<br>  }<br>  else Serial.println(F(“MIFARE_Write() success: “));</p>\n<p>  &#x2F;&#x2F; Ask personal data: First name<br>  Serial.println(F(“Type First name, ending with #”));<br>  len &#x3D; Serial.readBytesUntil(‘#’, (char *) buffer, 20) ; &#x2F;&#x2F; read first name from serial<br>  for (byte i &#x3D; len; i &lt; 20; i++) buffer[i] &#x3D; ‘ ‘;     &#x2F;&#x2F; pad with spaces</p>\n<p>  block &#x3D; 4;<br>  &#x2F;&#x2F;Serial.println(F(“Authenticating using key A…”));<br>  status &#x3D; mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, block, &amp;key, &amp;(mfrc522.uid));<br>  if (status !&#x3D; MFRC522::STATUS_OK) {<br>    Serial.print(F(“PCD_Authenticate() failed: “));<br>    Serial.println(mfrc522.GetStatusCodeName(status));<br>    return;<br>  }</p>\n<p>  &#x2F;&#x2F; Write block<br>  status &#x3D; mfrc522.MIFARE_Write(block, buffer, 16);<br>  if (status !&#x3D; MFRC522::STATUS_OK) {<br>    Serial.print(F(“MIFARE_Write() failed: “));<br>    Serial.println(mfrc522.GetStatusCodeName(status));<br>    return;<br>  }<br>  else Serial.println(F(“MIFARE_Write() success: “));</p>\n<p>  block &#x3D; 5;<br>  &#x2F;&#x2F;Serial.println(F(“Authenticating using key A…”));<br>  status &#x3D; mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, block, &amp;key, &amp;(mfrc522.uid));<br>  if (status !&#x3D; MFRC522::STATUS_OK) {<br>    Serial.print(F(“PCD_Authenticate() failed: “));<br>    Serial.println(mfrc522.GetStatusCodeName(status));<br>    return;<br>  }</p>\n<p>  &#x2F;&#x2F; Write block<br>  status &#x3D; mfrc522.MIFARE_Write(block, &amp;buffer[16], 16);<br>  if (status !&#x3D; MFRC522::STATUS_OK) {<br>    Serial.print(F(“MIFARE_Write() failed: “));<br>    Serial.println(mfrc522.GetStatusCodeName(status));<br>    return;<br>  }<br>  else Serial.println(F(“MIFARE_Write() success: “));</p>\n<p>  Serial.println(“ “);<br>  mfrc522.PICC_HaltA(); &#x2F;&#x2F; Halt PICC<br>  mfrc522.PCD_StopCrypto1();  &#x2F;&#x2F; Stop encryption on PCD</p>\n<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>97<br>98<br>99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br>126<br>127<br>128<br>129<br>130<br>131<br>132<br>133<br>134<br>135<br>Result</p>\n<p>例如我第一次输入 Smith#<br>第二次输入 Rick#</p>\n<p>Sketch-读取<br>#include &lt;SPI.h&gt;<br>#include &lt;MFRC522.h&gt;</p>\n<p>#define RST_PIN         9           &#x2F;&#x2F; Configurable, see typical pin layout above<br>#define SS_PIN          10          &#x2F;&#x2F; Configurable, see typical pin layout above</p>\n<p>MFRC522 mfrc522(SS_PIN, RST_PIN);   &#x2F;&#x2F; Create MFRC522 instance</p>\n<p>&#x2F;&#x2F;*****************************************************************************************&#x2F;&#x2F;<br>void setup() {<br>  Serial.begin(9600);                                           &#x2F;&#x2F; Initialize serial communications with the PC<br>  SPI.begin();                                                  &#x2F;&#x2F; Init SPI bus<br>  mfrc522.PCD_Init();                                              &#x2F;&#x2F; Init MFRC522 card<br>  Serial.println(F(“Read personal data on a MIFARE PICC:”));    &#x2F;&#x2F;shows in serial that it is ready to read<br>}</p>\n<p>&#x2F;&#x2F;*****************************************************************************************&#x2F;&#x2F;<br>void loop() {</p>\n<p>  &#x2F;&#x2F; Prepare key - all keys are set to FFFFFFFFFFFFh at chip delivery from the factory.<br>  MFRC522::MIFARE_Key key;<br>  for (byte i &#x3D; 0; i &lt; 6; i++) key.keyByte[i] &#x3D; 0xFF;</p>\n<p>  &#x2F;&#x2F;some variables we need<br>  byte block;<br>  byte len;<br>  MFRC522::StatusCode status;</p>\n<p>  &#x2F;&#x2F;——————————————-</p>\n<p>  &#x2F;&#x2F; Reset the loop if no new card present on the sensor&#x2F;reader. This saves the entire process when idle.<br>  if ( ! mfrc522.PICC_IsNewCardPresent()) {<br>    return;<br>  }</p>\n<p>  &#x2F;&#x2F; Select one of the cards<br>  if ( ! mfrc522.PICC_ReadCardSerial()) {<br>    return;<br>  }</p>\n<p>  Serial.println(F(“<strong>Card Detected:</strong>“));</p>\n<p>  &#x2F;&#x2F;——————————————-</p>\n<p>  mfrc522.PICC_DumpDetailsToSerial(&amp;(mfrc522.uid)); &#x2F;&#x2F;dump some details about the card</p>\n<p>  &#x2F;&#x2F;mfrc522.PICC_DumpToSerial(&amp;(mfrc522.uid));      &#x2F;&#x2F;uncomment this to see all blocks in hex</p>\n<p>  &#x2F;&#x2F;——————————————-</p>\n<p>  Serial.print(F(“Name: “));</p>\n<p>  byte buffer1[18];</p>\n<p>  block &#x3D; 4;<br>  len &#x3D; 18;</p>\n<p>  &#x2F;&#x2F;——————————————- GET FIRST NAME<br>  status &#x3D; mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, 4, &amp;key, &amp;(mfrc522.uid)); &#x2F;&#x2F;line 834 of MFRC522.cpp file<br>  if (status !&#x3D; MFRC522::STATUS_OK) {<br>    Serial.print(F(“Authentication failed: “));<br>    Serial.println(mfrc522.GetStatusCodeName(status));<br>    return;<br>  }</p>\n<p>  status &#x3D; mfrc522.MIFARE_Read(block, buffer1, &amp;len);<br>  if (status !&#x3D; MFRC522::STATUS_OK) {<br>    Serial.print(F(“Reading failed: “));<br>    Serial.println(mfrc522.GetStatusCodeName(status));<br>    return;<br>  }</p>\n<p>  &#x2F;&#x2F;PRINT FIRST NAME<br>  for (uint8_t i &#x3D; 0; i &lt; 16; i++)<br>  {<br>    if (buffer1[i] !&#x3D; 32)<br>    {<br>      Serial.write(buffer1[i]);<br>    }<br>  }<br>  Serial.print(“ “);</p>\n<p>  &#x2F;&#x2F;—————————————- GET LAST NAME</p>\n<p>  byte buffer2[18];<br>  block &#x3D; 1;</p>\n<p>  status &#x3D; mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, 1, &amp;key, &amp;(mfrc522.uid)); &#x2F;&#x2F;line 834<br>  if (status !&#x3D; MFRC522::STATUS_OK) {<br>    Serial.print(F(“Authentication failed: “));<br>    Serial.println(mfrc522.GetStatusCodeName(status));<br>    return;<br>  }</p>\n<p>  status &#x3D; mfrc522.MIFARE_Read(block, buffer2, &amp;len);<br>  if (status !&#x3D; MFRC522::STATUS_OK) {<br>    Serial.print(F(“Reading failed: “));<br>    Serial.println(mfrc522.GetStatusCodeName(status));<br>    return;<br>  }</p>\n<p>  &#x2F;&#x2F;PRINT LAST NAME<br>  for (uint8_t i &#x3D; 0; i &lt; 16; i++) {<br>    Serial.write(buffer2[i] );<br>  }</p>\n<p>  &#x2F;&#x2F;—————————————-</p>\n<p>  Serial.println(F(“\\n<strong>End Reading</strong>\\n”));</p>\n<p>  delay(1000); &#x2F;&#x2F;change value if you want to read cards faster</p>\n<p>  mfrc522.PICC_HaltA();<br>  mfrc522.PCD_StopCrypto1();<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>97<br>98<br>99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>Result</p>\n<p>正如上面所输入的一样-.-</p>\n<p>读取扇区数据<br>以S50为例，读取其中16个扇区的全部数据,烧录程序后刷一下就能在串口监视器看到所有扇区对应的数据了</p>\n<p>Sketch<br>Dumpinfo.info</p>\n<p>#include &lt;SPI.h&gt;<br>#include &lt;MFRC522.h&gt;</p>\n<p>#define RST_PIN         9          &#x2F;&#x2F; Configurable, see typical pin layout above<br>#define SS_PIN          10         &#x2F;&#x2F; Configurable, see typical pin layout above</p>\n<p>MFRC522 mfrc522(SS_PIN, RST_PIN);  &#x2F;&#x2F; Create MFRC522 instance</p>\n<p>void setup() {<br>    Serial.begin(9600);\t\t&#x2F;&#x2F; Initialize serial communications with the PC<br>    while (!Serial);\t\t&#x2F;&#x2F; Do nothing if no serial port is opened (added for Arduinos based on ATMEGA32U4)<br>    SPI.begin();\t\t\t&#x2F;&#x2F; Init SPI bus<br>    mfrc522.PCD_Init();\t\t&#x2F;&#x2F; Init MFRC522<br>    delay(4);\t\t\t\t&#x2F;&#x2F; Optional delay. Some board do need more time after init to be ready, see Readme<br>    mfrc522.PCD_DumpVersionToSerial();\t&#x2F;&#x2F; Show details of PCD - MFRC522 Card Reader details<br>    Serial.println(F(“Scan PICC to see UID, SAK, type, and data blocks…”));<br>}</p>\n<p>void loop() {<br>    &#x2F;&#x2F; Reset the loop if no new card present on the sensor&#x2F;reader. This saves the entire process when idle.<br>    if ( ! mfrc522.PICC_IsNewCardPresent()) {<br>        return;<br>    }</p>\n<pre><code>// Select one of the cards\nif ( ! mfrc522.PICC_ReadCardSerial()) &#123;\n    return;\n&#125;\n\n// Dump debug info about the card; PICC_HaltA() is automatically called\nmfrc522.PICC_DumpToSerial(&amp;(mfrc522.uid));\n</code></pre>\n<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>Result</p>\n<p>References<br>Arduino教程 RFID-RC522读IC卡门禁原理<br>Introduction to NFC<br>产品资料 提取码: qi6v<br>M1 : S50和S70<br>IC卡小结<br>————————————————<br>版权声明：本文为CSDN博主「Kearney form An idea」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href=\"https://blog.csdn.net/weixin_43031092/article/details/108651982\">https://blog.csdn.net/weixin_43031092/article/details/108651982</a></p>\n<p><a href=\"https://blog.csdn.net/leytton/article/details/73480974\">https://blog.csdn.net/leytton/article/details/73480974</a></p>\n<p>【文章特色：1、提出IC卡破解原理和简单有效的防御方法2、网上其他文章对于硬件如何接线说得模糊不清】<br>1、序言<br>先说下简单门禁系统的原理：</p>\n<p>(1)IC卡激活：门禁卡管理员将卡片放到读卡器、这时软件读取到IC卡的UID序列号信息(相当于身份证号码)，将这个UID录入数据库激活IC卡。</p>\n<p>(2)刷卡：刷卡时读卡器读取到UID，查询数据库，如果数据库中存在这个UID则表示有效用户,继而控制继电器断电，此时电磁锁开门。</p>\n<p>不亦买的RC522模块采用SPI通信、据说也有串口通信的不过成本较高。大家可以看看这个模块的主要配件：卡和读卡器。</p>\n<p>2、加载RC522库文件<br> Arduino本身有个操作RC5200的库，如下图所示，打开Arduino开发工具中管理库</p>\n<p>搜索”RC522”，选择”MFRC522”安装即可</p>\n<p>点击”More info”可以跳转到github地址<a href=\"https://github.com/miguelbalboa/rfid\">https://github.com/miguelbalboa/rfid</a> ，下文会有提及。</p>\n<p>安装完毕后，可以看到关于MFRC522的库示例，有读取UID、获取区块信息、修改UID、卡片信息复制等</p>\n<p>注：一般而言IC卡是不能修改0扇区0区块的UID和厂商信息数据，这些是生产时就确定下来的的(关于IC卡的存储结构有空再发文介绍，小伙伴们可以去网上查阅这方面资料也挺多的)，能够全扇区修改的俗称UID卡才支持修改UID，一些不负责的门禁系统厂家仅根据UID来判断用户身份是不可靠的，一个简单的方法是在读之前先写UID操作，如果可写那么这张卡就是UID卡即复制卡，判断无效，系统也可记录是哪张IC卡被复制了用于追溯非法行为，仅供交流与学习，请勿用于非法用途哦</p>\n<p>3、模块引脚接线<br>此处是网络上大部分相关文章没有提及的，只告诉了如何接线，却不告诉我们为什么这样接，甚至连Arduino版本都不说清楚。</p>\n<p>我们打开ReadNUID的示例里面有各种版本Arduino与RC522的引脚连接图，我们按照这个接线即可。在上文提及的github项目主页也有介绍。</p>\n<p>RC522一共8个引脚，如图所示：</p>\n<p>3.3V供电、GND接地不用多说，IRQ是中断才用到的此处没有用到可以不接，其余5个引脚接法如下表所示：</p>\n<p> &#x2F;* Typical pin layout used:</p>\n<ul>\n<li><hr>\n</li>\n<li><pre><code>        MFRC522      Arduino       Arduino   Arduino    Arduino          Arduino\n</code></pre>\n</li>\n<li><pre><code>        Reader/PCD   Uno/101       Mega      Nano v3    Leonardo/Micro   Pro Micro\n</code></pre>\n</li>\n<li>Signal      Pin          Pin           Pin       Pin        Pin              Pin</li>\n<li><hr>\n</li>\n<li>RST&#x2F;Reset   RST          9             5         D9         RESET&#x2F;ICSP-5     RST</li>\n<li>SPI SS      SDA(SS)      10            53        D10        10               10</li>\n<li>SPI MOSI    MOSI         11 &#x2F; ICSP-4   51        D11        ICSP-4           16</li>\n<li>SPI MISO    MISO         12 &#x2F; ICSP-1   50        D12        ICSP-1           14</li>\n<li>SPI SCK     SCK          13 &#x2F; ICSP-3   52        D13        ICSP-3           15<br> *&#x2F;</li>\n</ul>\n<p>4、程序代码<br>此处测试的Arduino型号是Arduino Nano V3.0，其他型号请结合上表修改引脚号。</p>\n<p>示例代码读取UID，并将其分别以十进制和十六进制输出到串口，简化版如下：</p>\n<p>#include &lt;SPI.h&gt;<br>#include &lt;MFRC522.h&gt;</p>\n<p>#define SS_PIN 10<br>#define RST_PIN 9</p>\n<p>MFRC522 rfid(SS_PIN, RST_PIN); &#x2F;&#x2F;实例化类</p>\n<p>&#x2F;&#x2F; 初始化数组用于存储读取到的NUID<br>byte nuidPICC[4];</p>\n<p>void setup() {<br>  Serial.begin(9600);<br>  SPI.begin(); &#x2F;&#x2F; 初始化SPI总线<br>  rfid.PCD_Init(); &#x2F;&#x2F; 初始化 MFRC522<br>}</p>\n<p>void loop() {</p>\n<p>  &#x2F;&#x2F; 找卡<br>  if ( ! rfid.PICC_IsNewCardPresent())<br>    return;</p>\n<p>  &#x2F;&#x2F; 验证NUID是否可读<br>  if ( ! rfid.PICC_ReadCardSerial())<br>    return;</p>\n<p>  MFRC522::PICC_Type piccType &#x3D; rfid.PICC_GetType(rfid.uid.sak);</p>\n<p>  &#x2F;&#x2F; 检查是否MIFARE卡类型<br>  if (piccType !&#x3D; MFRC522::PICC_TYPE_MIFARE_MINI &amp;&amp;<br>    piccType !&#x3D; MFRC522::PICC_TYPE_MIFARE_1K &amp;&amp;<br>    piccType !&#x3D; MFRC522::PICC_TYPE_MIFARE_4K) {<br>    Serial.println(“不支持读取此卡类型”);<br>    return;<br>  }</p>\n<p>  &#x2F;&#x2F; 将NUID保存到nuidPICC数组<br>  for (byte i &#x3D; 0; i &lt; 4; i++) {<br>    nuidPICC[i] &#x3D; rfid.uid.uidByte[i];<br>  }<br>  Serial.print(“十六进制UID：”);<br>  printHex(rfid.uid.uidByte, rfid.uid.size);<br>  Serial.println();</p>\n<p>  Serial.print(“十进制UID：”);<br>  printDec(rfid.uid.uidByte, rfid.uid.size);<br>  Serial.println();</p>\n<p>  &#x2F;&#x2F; 使放置在读卡区的IC卡进入休眠状态，不再重复读卡<br>  rfid.PICC_HaltA();</p>\n<p>  &#x2F;&#x2F; 停止读卡模块编码<br>  rfid.PCD_StopCrypto1();<br>}</p>\n<p>void printHex(byte *buffer, byte bufferSize) {<br>  for (byte i &#x3D; 0; i &lt; bufferSize; i++) {<br>    Serial.print(buffer[i] &lt; 0x10 ? “ 0” : “”);<br>    Serial.print(buffer[i], HEX);<br>  }<br>}</p>\n<p>void printDec(byte *buffer, byte bufferSize) {<br>  for (byte i &#x3D; 0; i &lt; bufferSize; i++) {<br>    Serial.print(buffer[i] &lt; 0x10 ? “ 0” : “”);<br>    Serial.print(buffer[i], DEC);<br>  }<br>}</p>\n<p>5、运行结果<br>依次将卡A、卡B、卡A放到RC522读卡区，串口打印信息如下</p>\n<p>感谢梦鸽推上首页分享给更多的人看到^_^<br>【转载请注明出处: <a href=\"http://blog.csdn.net/leytton/article/details/73480974%E3%80%91\">http://blog.csdn.net/leytton/article/details/73480974】</a><br> PS：如果本文对您有帮助，请点个赞让我知道哦~<br>————————————————<br>版权声明：本文为CSDN博主「李乾文」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href=\"https://blog.csdn.net/leytton/article/details/73480974\">https://blog.csdn.net/leytton/article/details/73480974</a></p>\n"},{"title":"万能遥控器","date":"2023-01-10T12:23:59.000Z","_content":"\n# [Universal-Remote-Control](https://github.com/songxiao1018/Universal-Remote-Control)\n\n本项目基于Arduino nano开发。采用KiCAD编辑器进行编辑。\n\n项目地址：\n\nGitHub: [github.com/songxiao1018/Universal-Remote-Control](https://github.com/songxiao1018/Universal-Remote-Control)\n本站：[files.xiaoxiaosky.top/project/Universal-Remote-Control](http://files.xiaoxiaosky.top/project/Universal-Remote-Control/)\n\n## 文件目录\n\n| 编号 | 文件夹名        | 功能                     | 备注 |\n| :--: | :------------: | :----------------------: | :--: |\n| 1 | arduino-nano-data | Arduino nano 数据参考文件 |     |\n| 2 | keyboard-nano     | KiCad 工程文件 |                |\n| 3 | keyboard-code     | Arduino nano 软件程序部分 |  |\n\n## 项目背景\n\n本人在一次与家中长辈的聊天过程中偶然听到他们对于电视机遥控器的不满，他们对电视机遥控器有如下几个需求：\n\n1. 遥控器操作简单，易于记忆。\n2. 网络电视调台操作方便。\n3. 遥控器按键已于操作，降低防误操作的发生。\n\n本人在观察电视遥控器后也发现了这个问题的存在。因此，本人便想到了通过Arduino nano来实现一个通用遥控器，通过减少遥控器中的部分按键，集成化按键顺序等方法来解决遥控器操作不方便的问题。\n\n## 项目目标\n\n**基本**\n\n- [x] 1. 实现遥控器基本功能。\n- [x] 2. 方便老人使用。\n\n**扩展**\n\n- [ ] 3. 充放电自由，无需频繁更换换电池。\n- [ ] 4. 小巧轻便，美丽外观。\n\n## 项目进度\n\n2023.01.10  V1.0a敲定成型，发往工厂制作样板\n\n2022.12.28  项目开始\n\n## 联系方式\n\n- QQ：  2289895723\n- Email：skyxiaoxiao@yeah.net\n- Github：github.com/songxiao1018\n- Blog：www.xiaoxiaosky.top\n","source":"_posts/arduino-Universal-Remote-Control.md","raw":"---\ntitle: 万能遥控器\ndate: 2023-01-10 20:23:59\ncategories: 开发\ntags: \n  - arduino\n  - CAD\n---\n\n# [Universal-Remote-Control](https://github.com/songxiao1018/Universal-Remote-Control)\n\n本项目基于Arduino nano开发。采用KiCAD编辑器进行编辑。\n\n项目地址：\n\nGitHub: [github.com/songxiao1018/Universal-Remote-Control](https://github.com/songxiao1018/Universal-Remote-Control)\n本站：[files.xiaoxiaosky.top/project/Universal-Remote-Control](http://files.xiaoxiaosky.top/project/Universal-Remote-Control/)\n\n## 文件目录\n\n| 编号 | 文件夹名        | 功能                     | 备注 |\n| :--: | :------------: | :----------------------: | :--: |\n| 1 | arduino-nano-data | Arduino nano 数据参考文件 |     |\n| 2 | keyboard-nano     | KiCad 工程文件 |                |\n| 3 | keyboard-code     | Arduino nano 软件程序部分 |  |\n\n## 项目背景\n\n本人在一次与家中长辈的聊天过程中偶然听到他们对于电视机遥控器的不满，他们对电视机遥控器有如下几个需求：\n\n1. 遥控器操作简单，易于记忆。\n2. 网络电视调台操作方便。\n3. 遥控器按键已于操作，降低防误操作的发生。\n\n本人在观察电视遥控器后也发现了这个问题的存在。因此，本人便想到了通过Arduino nano来实现一个通用遥控器，通过减少遥控器中的部分按键，集成化按键顺序等方法来解决遥控器操作不方便的问题。\n\n## 项目目标\n\n**基本**\n\n- [x] 1. 实现遥控器基本功能。\n- [x] 2. 方便老人使用。\n\n**扩展**\n\n- [ ] 3. 充放电自由，无需频繁更换换电池。\n- [ ] 4. 小巧轻便，美丽外观。\n\n## 项目进度\n\n2023.01.10  V1.0a敲定成型，发往工厂制作样板\n\n2022.12.28  项目开始\n\n## 联系方式\n\n- QQ：  2289895723\n- Email：skyxiaoxiao@yeah.net\n- Github：github.com/songxiao1018\n- Blog：www.xiaoxiaosky.top\n","slug":"arduino-Universal-Remote-Control","published":1,"updated":"2023-07-23T14:19:10.854Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkjdd1b0000f98aj72j5bpa5","content":"<h1 id=\"Universal-Remote-Control\"><a href=\"#Universal-Remote-Control\" class=\"headerlink\" title=\"Universal-Remote-Control\"></a><a href=\"https://github.com/songxiao1018/Universal-Remote-Control\">Universal-Remote-Control</a></h1><p>本项目基于Arduino nano开发。采用KiCAD编辑器进行编辑。</p>\n<p>项目地址：</p>\n<p>GitHub: <a href=\"https://github.com/songxiao1018/Universal-Remote-Control\">github.com&#x2F;songxiao1018&#x2F;Universal-Remote-Control</a><br>本站：<a href=\"http://files.xiaoxiaosky.top/project/Universal-Remote-Control/\">files.xiaoxiaosky.top&#x2F;project&#x2F;Universal-Remote-Control</a></p>\n<h2 id=\"文件目录\"><a href=\"#文件目录\" class=\"headerlink\" title=\"文件目录\"></a>文件目录</h2><table>\n<thead>\n<tr>\n<th align=\"center\">编号</th>\n<th align=\"center\">文件夹名</th>\n<th align=\"center\">功能</th>\n<th align=\"center\">备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1</td>\n<td align=\"center\">arduino-nano-data</td>\n<td align=\"center\">Arduino nano 数据参考文件</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"center\">keyboard-nano</td>\n<td align=\"center\">KiCad 工程文件</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">3</td>\n<td align=\"center\">keyboard-code</td>\n<td align=\"center\">Arduino nano 软件程序部分</td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<h2 id=\"项目背景\"><a href=\"#项目背景\" class=\"headerlink\" title=\"项目背景\"></a>项目背景</h2><p>本人在一次与家中长辈的聊天过程中偶然听到他们对于电视机遥控器的不满，他们对电视机遥控器有如下几个需求：</p>\n<ol>\n<li>遥控器操作简单，易于记忆。</li>\n<li>网络电视调台操作方便。</li>\n<li>遥控器按键已于操作，降低防误操作的发生。</li>\n</ol>\n<p>本人在观察电视遥控器后也发现了这个问题的存在。因此，本人便想到了通过Arduino nano来实现一个通用遥控器，通过减少遥控器中的部分按键，集成化按键顺序等方法来解决遥控器操作不方便的问题。</p>\n<h2 id=\"项目目标\"><a href=\"#项目目标\" class=\"headerlink\" title=\"项目目标\"></a>项目目标</h2><p><strong>基本</strong></p>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <ol>\n<li>实现遥控器基本功能。</li>\n</ol>\n</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <ol start=\"2\">\n<li>方便老人使用。</li>\n</ol>\n</li>\n</ul>\n<p><strong>扩展</strong></p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <ol start=\"3\">\n<li>充放电自由，无需频繁更换换电池。</li>\n</ol>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> <ol start=\"4\">\n<li>小巧轻便，美丽外观。</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"项目进度\"><a href=\"#项目进度\" class=\"headerlink\" title=\"项目进度\"></a>项目进度</h2><p>2023.01.10  V1.0a敲定成型，发往工厂制作样板</p>\n<p>2022.12.28  项目开始</p>\n<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h2><ul>\n<li>QQ：  2289895723</li>\n<li>Email：<a href=\"mailto:&#115;&#107;&#121;&#120;&#105;&#97;&#111;&#x78;&#x69;&#97;&#111;&#x40;&#x79;&#x65;&#97;&#104;&#x2e;&#110;&#101;&#116;\">&#115;&#107;&#121;&#120;&#105;&#97;&#111;&#x78;&#x69;&#97;&#111;&#x40;&#x79;&#x65;&#97;&#104;&#x2e;&#110;&#101;&#116;</a></li>\n<li>Github：github.com&#x2F;songxiao1018</li>\n<li>Blog：<a href=\"http://www.xiaoxiaosky.top/\">www.xiaoxiaosky.top</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Universal-Remote-Control\"><a href=\"#Universal-Remote-Control\" class=\"headerlink\" title=\"Universal-Remote-Control\"></a><a href=\"https://github.com/songxiao1018/Universal-Remote-Control\">Universal-Remote-Control</a></h1><p>本项目基于Arduino nano开发。采用KiCAD编辑器进行编辑。</p>\n<p>项目地址：</p>\n<p>GitHub: <a href=\"https://github.com/songxiao1018/Universal-Remote-Control\">github.com&#x2F;songxiao1018&#x2F;Universal-Remote-Control</a><br>本站：<a href=\"http://files.xiaoxiaosky.top/project/Universal-Remote-Control/\">files.xiaoxiaosky.top&#x2F;project&#x2F;Universal-Remote-Control</a></p>\n<h2 id=\"文件目录\"><a href=\"#文件目录\" class=\"headerlink\" title=\"文件目录\"></a>文件目录</h2><table>\n<thead>\n<tr>\n<th align=\"center\">编号</th>\n<th align=\"center\">文件夹名</th>\n<th align=\"center\">功能</th>\n<th align=\"center\">备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1</td>\n<td align=\"center\">arduino-nano-data</td>\n<td align=\"center\">Arduino nano 数据参考文件</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"center\">keyboard-nano</td>\n<td align=\"center\">KiCad 工程文件</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">3</td>\n<td align=\"center\">keyboard-code</td>\n<td align=\"center\">Arduino nano 软件程序部分</td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<h2 id=\"项目背景\"><a href=\"#项目背景\" class=\"headerlink\" title=\"项目背景\"></a>项目背景</h2><p>本人在一次与家中长辈的聊天过程中偶然听到他们对于电视机遥控器的不满，他们对电视机遥控器有如下几个需求：</p>\n<ol>\n<li>遥控器操作简单，易于记忆。</li>\n<li>网络电视调台操作方便。</li>\n<li>遥控器按键已于操作，降低防误操作的发生。</li>\n</ol>\n<p>本人在观察电视遥控器后也发现了这个问题的存在。因此，本人便想到了通过Arduino nano来实现一个通用遥控器，通过减少遥控器中的部分按键，集成化按键顺序等方法来解决遥控器操作不方便的问题。</p>\n<h2 id=\"项目目标\"><a href=\"#项目目标\" class=\"headerlink\" title=\"项目目标\"></a>项目目标</h2><p><strong>基本</strong></p>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <ol>\n<li>实现遥控器基本功能。</li>\n</ol>\n</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <ol start=\"2\">\n<li>方便老人使用。</li>\n</ol>\n</li>\n</ul>\n<p><strong>扩展</strong></p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <ol start=\"3\">\n<li>充放电自由，无需频繁更换换电池。</li>\n</ol>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> <ol start=\"4\">\n<li>小巧轻便，美丽外观。</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"项目进度\"><a href=\"#项目进度\" class=\"headerlink\" title=\"项目进度\"></a>项目进度</h2><p>2023.01.10  V1.0a敲定成型，发往工厂制作样板</p>\n<p>2022.12.28  项目开始</p>\n<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h2><ul>\n<li>QQ：  2289895723</li>\n<li>Email：<a href=\"mailto:&#115;&#107;&#121;&#120;&#105;&#97;&#111;&#x78;&#x69;&#97;&#111;&#x40;&#x79;&#x65;&#97;&#104;&#x2e;&#110;&#101;&#116;\">&#115;&#107;&#121;&#120;&#105;&#97;&#111;&#x78;&#x69;&#97;&#111;&#x40;&#x79;&#x65;&#97;&#104;&#x2e;&#110;&#101;&#116;</a></li>\n<li>Github：github.com&#x2F;songxiao1018</li>\n<li>Blog：<a href=\"http://www.xiaoxiaosky.top/\">www.xiaoxiaosky.top</a></li>\n</ul>\n"},{"title":"Blander快捷键整理","date":"2023-01-17T13:17:43.000Z","_content":"\n## 物体模式\n\n| 效果           | 快捷键             | 备注 |\n| -------------- | ------------------ | ---- |\n| 旋转视角       | 鼠标中键           |      |\n| 全选物体       | A                  |      |\n| 删除物体       | X                  |      |\n| 创建物体       | Shift + A          |      |\n| 复制物体       | Shift + D          |      |\n| 重置3D游标     | Shift + C          |      |\n| 移动物体       | G                  | 接着按`X` `Y` `Z`表示沿对应坐标轴移动，<br>再接着按`数字`表示移动对应距离 |\n| 旋转           | R                  | 同上 |\n| 缩放           | S                  | 同上 |\n\n## 编辑模式 （按`TAB`进入）\n\n| 效果           | 快捷键             | 备注 |\n| -------------- | ------------------ | ---- |\n| 点模式         | 主键盘1            |      |\n| 线模式         | 主键盘2            |      |\n| 面模式         | 主键盘3            |      |\n| 挤出工具       | E                  | 加`X` `Y` `Z` 沿对应轴挤出，<br> 加`S` 以缩放的方式挤出 |\n| 内插面         | I                  |      |\n| 倒角工具       | CTRL+B             | 滚轮添加倒角边数 |\n| 环切工具       | CTRL+R             |      |\n| 透视工具       | ALT+Z              |      |\n| 视图切换       | 小键盘             | 1 - 主视图<br> 3 - 左视图 <br>7 - 俯视图 <br>ctrl+137 - 切换对面方向 |\n| 法相缩放       | CTRL+S             | |\n| 选择循环边     | ALT+左键           | |\n| 按边插入面     | F                  | |\n\n## 视角移动\n\n| 效果           | 快捷键             | 备注 |\n| -------------- | ------------------ | ---- |\n| 画面旋转       | 中键               | 以中心点为轴 |\n| 画面移动       | Shift+中键         | 移动中心点 |\n| 缩放视图       | 滚轮               | |\n| 设定3D游标     | Shift+右键         | 重置Shift+C |\n\n\n\n","source":"_posts/blander-quickmap.md","raw":"---\ntitle: Blander快捷键整理\ndate: 2023-01-17 21:17:43\ncategories: 学习\ntags: Blander \n---\n\n## 物体模式\n\n| 效果           | 快捷键             | 备注 |\n| -------------- | ------------------ | ---- |\n| 旋转视角       | 鼠标中键           |      |\n| 全选物体       | A                  |      |\n| 删除物体       | X                  |      |\n| 创建物体       | Shift + A          |      |\n| 复制物体       | Shift + D          |      |\n| 重置3D游标     | Shift + C          |      |\n| 移动物体       | G                  | 接着按`X` `Y` `Z`表示沿对应坐标轴移动，<br>再接着按`数字`表示移动对应距离 |\n| 旋转           | R                  | 同上 |\n| 缩放           | S                  | 同上 |\n\n## 编辑模式 （按`TAB`进入）\n\n| 效果           | 快捷键             | 备注 |\n| -------------- | ------------------ | ---- |\n| 点模式         | 主键盘1            |      |\n| 线模式         | 主键盘2            |      |\n| 面模式         | 主键盘3            |      |\n| 挤出工具       | E                  | 加`X` `Y` `Z` 沿对应轴挤出，<br> 加`S` 以缩放的方式挤出 |\n| 内插面         | I                  |      |\n| 倒角工具       | CTRL+B             | 滚轮添加倒角边数 |\n| 环切工具       | CTRL+R             |      |\n| 透视工具       | ALT+Z              |      |\n| 视图切换       | 小键盘             | 1 - 主视图<br> 3 - 左视图 <br>7 - 俯视图 <br>ctrl+137 - 切换对面方向 |\n| 法相缩放       | CTRL+S             | |\n| 选择循环边     | ALT+左键           | |\n| 按边插入面     | F                  | |\n\n## 视角移动\n\n| 效果           | 快捷键             | 备注 |\n| -------------- | ------------------ | ---- |\n| 画面旋转       | 中键               | 以中心点为轴 |\n| 画面移动       | Shift+中键         | 移动中心点 |\n| 缩放视图       | 滚轮               | |\n| 设定3D游标     | Shift+右键         | 重置Shift+C |\n\n\n\n","slug":"blander-quickmap","published":1,"updated":"2023-07-23T14:19:13.382Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkjdd1b3000g98aj01b45ud0","content":"<h2 id=\"物体模式\"><a href=\"#物体模式\" class=\"headerlink\" title=\"物体模式\"></a>物体模式</h2><table>\n<thead>\n<tr>\n<th>效果</th>\n<th>快捷键</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>旋转视角</td>\n<td>鼠标中键</td>\n<td></td>\n</tr>\n<tr>\n<td>全选物体</td>\n<td>A</td>\n<td></td>\n</tr>\n<tr>\n<td>删除物体</td>\n<td>X</td>\n<td></td>\n</tr>\n<tr>\n<td>创建物体</td>\n<td>Shift + A</td>\n<td></td>\n</tr>\n<tr>\n<td>复制物体</td>\n<td>Shift + D</td>\n<td></td>\n</tr>\n<tr>\n<td>重置3D游标</td>\n<td>Shift + C</td>\n<td></td>\n</tr>\n<tr>\n<td>移动物体</td>\n<td>G</td>\n<td>接着按<code>X</code> <code>Y</code> <code>Z</code>表示沿对应坐标轴移动，<br>再接着按<code>数字</code>表示移动对应距离</td>\n</tr>\n<tr>\n<td>旋转</td>\n<td>R</td>\n<td>同上</td>\n</tr>\n<tr>\n<td>缩放</td>\n<td>S</td>\n<td>同上</td>\n</tr>\n</tbody></table>\n<h2 id=\"编辑模式-（按TAB进入）\"><a href=\"#编辑模式-（按TAB进入）\" class=\"headerlink\" title=\"编辑模式 （按TAB进入）\"></a>编辑模式 （按<code>TAB</code>进入）</h2><table>\n<thead>\n<tr>\n<th>效果</th>\n<th>快捷键</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>点模式</td>\n<td>主键盘1</td>\n<td></td>\n</tr>\n<tr>\n<td>线模式</td>\n<td>主键盘2</td>\n<td></td>\n</tr>\n<tr>\n<td>面模式</td>\n<td>主键盘3</td>\n<td></td>\n</tr>\n<tr>\n<td>挤出工具</td>\n<td>E</td>\n<td>加<code>X</code> <code>Y</code> <code>Z</code> 沿对应轴挤出，<br> 加<code>S</code> 以缩放的方式挤出</td>\n</tr>\n<tr>\n<td>内插面</td>\n<td>I</td>\n<td></td>\n</tr>\n<tr>\n<td>倒角工具</td>\n<td>CTRL+B</td>\n<td>滚轮添加倒角边数</td>\n</tr>\n<tr>\n<td>环切工具</td>\n<td>CTRL+R</td>\n<td></td>\n</tr>\n<tr>\n<td>透视工具</td>\n<td>ALT+Z</td>\n<td></td>\n</tr>\n<tr>\n<td>视图切换</td>\n<td>小键盘</td>\n<td>1 - 主视图<br> 3 - 左视图 <br>7 - 俯视图 <br>ctrl+137 - 切换对面方向</td>\n</tr>\n<tr>\n<td>法相缩放</td>\n<td>CTRL+S</td>\n<td></td>\n</tr>\n<tr>\n<td>选择循环边</td>\n<td>ALT+左键</td>\n<td></td>\n</tr>\n<tr>\n<td>按边插入面</td>\n<td>F</td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"视角移动\"><a href=\"#视角移动\" class=\"headerlink\" title=\"视角移动\"></a>视角移动</h2><table>\n<thead>\n<tr>\n<th>效果</th>\n<th>快捷键</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>画面旋转</td>\n<td>中键</td>\n<td>以中心点为轴</td>\n</tr>\n<tr>\n<td>画面移动</td>\n<td>Shift+中键</td>\n<td>移动中心点</td>\n</tr>\n<tr>\n<td>缩放视图</td>\n<td>滚轮</td>\n<td></td>\n</tr>\n<tr>\n<td>设定3D游标</td>\n<td>Shift+右键</td>\n<td>重置Shift+C</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"物体模式\"><a href=\"#物体模式\" class=\"headerlink\" title=\"物体模式\"></a>物体模式</h2><table>\n<thead>\n<tr>\n<th>效果</th>\n<th>快捷键</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>旋转视角</td>\n<td>鼠标中键</td>\n<td></td>\n</tr>\n<tr>\n<td>全选物体</td>\n<td>A</td>\n<td></td>\n</tr>\n<tr>\n<td>删除物体</td>\n<td>X</td>\n<td></td>\n</tr>\n<tr>\n<td>创建物体</td>\n<td>Shift + A</td>\n<td></td>\n</tr>\n<tr>\n<td>复制物体</td>\n<td>Shift + D</td>\n<td></td>\n</tr>\n<tr>\n<td>重置3D游标</td>\n<td>Shift + C</td>\n<td></td>\n</tr>\n<tr>\n<td>移动物体</td>\n<td>G</td>\n<td>接着按<code>X</code> <code>Y</code> <code>Z</code>表示沿对应坐标轴移动，<br>再接着按<code>数字</code>表示移动对应距离</td>\n</tr>\n<tr>\n<td>旋转</td>\n<td>R</td>\n<td>同上</td>\n</tr>\n<tr>\n<td>缩放</td>\n<td>S</td>\n<td>同上</td>\n</tr>\n</tbody></table>\n<h2 id=\"编辑模式-（按TAB进入）\"><a href=\"#编辑模式-（按TAB进入）\" class=\"headerlink\" title=\"编辑模式 （按TAB进入）\"></a>编辑模式 （按<code>TAB</code>进入）</h2><table>\n<thead>\n<tr>\n<th>效果</th>\n<th>快捷键</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>点模式</td>\n<td>主键盘1</td>\n<td></td>\n</tr>\n<tr>\n<td>线模式</td>\n<td>主键盘2</td>\n<td></td>\n</tr>\n<tr>\n<td>面模式</td>\n<td>主键盘3</td>\n<td></td>\n</tr>\n<tr>\n<td>挤出工具</td>\n<td>E</td>\n<td>加<code>X</code> <code>Y</code> <code>Z</code> 沿对应轴挤出，<br> 加<code>S</code> 以缩放的方式挤出</td>\n</tr>\n<tr>\n<td>内插面</td>\n<td>I</td>\n<td></td>\n</tr>\n<tr>\n<td>倒角工具</td>\n<td>CTRL+B</td>\n<td>滚轮添加倒角边数</td>\n</tr>\n<tr>\n<td>环切工具</td>\n<td>CTRL+R</td>\n<td></td>\n</tr>\n<tr>\n<td>透视工具</td>\n<td>ALT+Z</td>\n<td></td>\n</tr>\n<tr>\n<td>视图切换</td>\n<td>小键盘</td>\n<td>1 - 主视图<br> 3 - 左视图 <br>7 - 俯视图 <br>ctrl+137 - 切换对面方向</td>\n</tr>\n<tr>\n<td>法相缩放</td>\n<td>CTRL+S</td>\n<td></td>\n</tr>\n<tr>\n<td>选择循环边</td>\n<td>ALT+左键</td>\n<td></td>\n</tr>\n<tr>\n<td>按边插入面</td>\n<td>F</td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"视角移动\"><a href=\"#视角移动\" class=\"headerlink\" title=\"视角移动\"></a>视角移动</h2><table>\n<thead>\n<tr>\n<th>效果</th>\n<th>快捷键</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>画面旋转</td>\n<td>中键</td>\n<td>以中心点为轴</td>\n</tr>\n<tr>\n<td>画面移动</td>\n<td>Shift+中键</td>\n<td>移动中心点</td>\n</tr>\n<tr>\n<td>缩放视图</td>\n<td>滚轮</td>\n<td></td>\n</tr>\n<tr>\n<td>设定3D游标</td>\n<td>Shift+右键</td>\n<td>重置Shift+C</td>\n</tr>\n</tbody></table>\n"},{"title":"基于Arduino的简易万能遥控器","date":"2023-02-13T16:08:04.000Z","_content":"# 基于Arduino的简易万能遥控器\n\n## 1. 介绍\n\n本项目是基于Arduino的万能遥控器，可以通过本遥控器控制电脑、电视、空调、机顶盒等设备。本项目的遥控器是基于Arduino Nano开发的，可以通过USB接口连接电脑，直接下载程序。同时，用户可以自己设定按键，实现自定义遥控器。\n\n### 1.1 产品面向群体\n\n本产品面向的群体是需要使用遥控器控制电脑、电视、空调、机顶盒等设备的用户。同时针对老龄化的用户本项目提出了简化按键数量，放大按键体积的理念，使得老年人也可以轻松使用本遥控器。\n\n### 1.2 产品优势\n\n  * 通过USB接口连接电脑，方便固件下载；\n  * 通过Arduino IED开发，简单易用；\n  * 针对特殊群体设计，简化按键数量，放大按键体积；\n\n## 2. 产品外观\n\n（本产品正处于开发阶段，未进行外壳设计）\n\n![正面]()\n\n![背面]()\n\n## 2. 硬件设计\n\n### 2.1 硬件boom表\n\n| 原件名称 | 原件型号 | 代号 | 数量 | 备注 |\n| --- | --- | --- | --- | --- |\n| Arduino Nano | Arduino Nano | Arduino Nano | 1 |  |\n| 电容 | 100nF | C1 | 2 | 10% 50V |\n| 电容 | 220uF | C2 | 2 | 25V |\n| 电阻 | 220 | R1 | 2 |  0.1% 125mW |\n| AMS1117 | AMS1117-3.3 | AMS1117 | 1 |  |\n| 红外发射二极管 | IRM-3638 | IRM-3638 | 1 |  |\n| 红外接收二极管 | TSOP4838 | TSOP4838 | 1 |  |\n| 按键 | 6x6x4.5mm | K1 | 8 |  |\n| 自恢复保险丝 | 5.5A | F1 | 1 |  |\n\n\n### 2.2 原理图\n\n![Image: image]()\n\n[pdf](files/keyboard-nano/keyboard-nano.pdf)\n\n### 2.3 PCB\n\n![Image: image]()\n\n[pdf](files/keyboard-nano/keyboard-nano-pcb.pdf)\n\n## 3. 软件\n\n### 3.1 红外部分\n\n#### 3.1.1 红外发射与接收原理\n\n红外发射原理是通过红外发射二极管发射红外信号，通过红外接收二极管接收红外信号。红外发射二极管的引脚分别为GND、VCC，其中GND为地，VCC为电源同时为信号输入。红外接收二极管的引脚分别为GND、VCC、OUT，其中GND为地，VCC为电源，OUT为输出。红外发射二极管的VCC引脚连接到Arduino NANO的D3引脚。红外接收二极管的VCC引脚连接到Arduino NANO的VCC引脚，OUT引脚连接到Arduino的D2引脚。\n\n#### 3.1.2 红外发射与接收代码\n\n```c\n#include <IRremote.h>\n\n//红外 接收\nint RECV_PIN = 2;\nIRrecv irrecv(RECV_PIN);\ndecode_results results;\n\n//红外 发射\nIRsend irsend;\n\nvoid setup(void) {\n    //红外 初始化\n    Serial.begin(9600);\n    irrecv.enableIRIn(); // Start the receiver\n}\n\nvoid loop(void) {\n    // 红外 发射\n    irsend.sendNEC(0xFF18E7, 32);\n\n    // 红外 接收\n    if (irrecv.decode(&results)) {\n        Serial.println(results.value, HEX);\n        irrecv.resume(); // Receive the next value\n    }\n}\n```\n\n### 3.2 按键部分\n\n#### 3.2.1 按键原理\n\n按键原理是通过Arduino的数字输入引脚读取按键的状态，当按键按下时，引脚电平为低，当按键松开时，引脚电平为高。Arduino的数字输入引脚分别为D2、D3、D4、D5、D6、D7、D8、D9、D10、D11、D12、D13。本项目按键的引脚分别为D6、D7、D8、D9、D10、D11、D12、D13这8个。\n\n#### 3.2.2 按键代码\n\n```c\n// 按键 初始化\nint button6 = 0;\nint button7 = 0;\nint button8 = 0;\nint button9 = 0;\nint button10 = 0;\nint button11 = 0;\nint button12 = 0;\nint button13 = 0;\n\nvoid setup(void) {\n    // 按键 初始化\n    pinMode(6, INPUT);\n    pinMode(7, INPUT);\n    pinMode(8, INPUT);\n    pinMode(9, INPUT);\n    pinMode(10, INPUT);\n    pinMode(11, INPUT);\n    pinMode(12, INPUT);\n    pinMode(13, OUTPUT);  \n}\n\nvoid loop(void) {\n    // 按键 读取\n    button6  = digitalRead(6);\n    button7  = digitalRead(7);\n    button8  = digitalRead(8);\n    button9  = digitalRead(9);\n    button10 = digitalRead(10);\n    button11 = digitalRead(11);\n    button12 = digitalRead(12);\n  \n    // 数据 发射\n    if (button6  == HIGH) {digitalWrite(13, HIGH);irsend.sendNEC(0xFF18E7, 32);delay(100);}else {digitalWrite(13, LOW);}\n    if (button7  == HIGH) {digitalWrite(13, HIGH);irsend.sendNEC(0xFFA857, 32);delay(100);}else {digitalWrite(13, LOW);}\n    if (button8  == HIGH) {digitalWrite(13, HIGH);irsend.sendNEC(0xFF30CF, 32);delay(100);}else {digitalWrite(13, LOW);}\n    if (button9  == HIGH) {digitalWrite(13, HIGH);irsend.sendNEC(0xFFD02F, 32);delay(100);}else {digitalWrite(13, LOW);}\n    if (button10 == HIGH) {digitalWrite(13, HIGH);irsend.sendNEC(0xFF728D, 32);delay(100);}else {digitalWrite(13, LOW);}\n    if (button11 == HIGH) {digitalWrite(13, HIGH);irsend.sendNEC(0xFF926D, 32);delay(100);}else {digitalWrite(13, LOW);}\n    if (button12 == HIGH) {digitalWrite(13, HIGH);irsend.sendNEC(0xFF02FD, 32);delay(100);}else {digitalWrite(13, LOW);}\n    if (button13 == HIGH) {irsend.sendNEC(0xFF926D, 32);delay(100);}\n}\n```\n\n## 4. 效果\n\n当按下按键时，红外发射二极管发射红外信号。\n当红外接收二极管接收到红外信号，Arduino NANO通过串口打印红外信号的值。\n\n## 5. 参考\n\n## 6. 未来计划\n\n* 加入蓝牙模块，实现蓝牙遥控。\n* 加入WiFi模块，实现WiFi遥控。\n* 加入LED灯珠，实现按键按下时亮灯。\n* 加入OLED屏幕，实现屏幕显示遥控器的按键状态。\n* 加入文件读取与写入，实现遥控器的按键状态保存与实时修改。\n\n## 7. 附录\n\n### 7.1 完整代码\n\n```c\n#include <IRremote.h>\n\n// 按键 初始化\nint button6 = 0;\nint button7 = 0;\nint button8 = 0;\nint button9 = 0;\nint button10 = 0;\nint button11 = 0;\nint button12 = 0;\nint button13 = 0;\n\n//红外 初始化\nint RECV_PIN = 2;\nIRrecv irrecv(RECV_PIN);\ndecode_results results;\n\nIRsend irsend;\n\nvoid setup(void) {\n  // 按键 初始化\n  pinMode(6, INPUT);\n  pinMode(7, INPUT);\n  pinMode(8, INPUT);\n  pinMode(9, INPUT);\n  pinMode(10, INPUT);\n  pinMode(11, INPUT);\n  pinMode(12, INPUT);\n  pinMode(13, OUTPUT);  \n\n  //红外 初始化\n  Serial.begin(9600);\n  irrecv.enableIRIn(); // Start the receiver\n}\n\nvoid loop(void) {\n  button6  = digitalRead(6);\n  button7  = digitalRead(7);\n  button8  = digitalRead(8);\n  button9  = digitalRead(9);\n  button10 = digitalRead(10);\n  button11 = digitalRead(11);\n  button12 = digitalRead(12);\n  \n  if (button6  == HIGH) {digitalWrite(13, HIGH);irsend.sendNEC(0xFF18E7, 32);delay(100);}else {digitalWrite(13, LOW);}\n  if (button7  == HIGH) {digitalWrite(13, HIGH);irsend.sendNEC(0xFFA857, 32);delay(100);}else {digitalWrite(13, LOW);}\n  if (button8  == HIGH) {digitalWrite(13, HIGH);irsend.sendNEC(0xFF30CF, 32);delay(100);}else {digitalWrite(13, LOW);}\n  if (button9  == HIGH) {digitalWrite(13, HIGH);irsend.sendNEC(0xFFD02F, 32);delay(100);}else {digitalWrite(13, LOW);}\n  if (button10 == HIGH) {digitalWrite(13, HIGH);irsend.sendNEC(0xFF728D, 32);delay(100);}else {digitalWrite(13, LOW);}\n  if (button11 == HIGH) {digitalWrite(13, HIGH);irsend.sendNEC(0xFF926D, 32);delay(100);}else {digitalWrite(13, LOW);}\n  if (button12 == HIGH) {digitalWrite(13, HIGH);irsend.sendNEC(0xFF02FD, 32);delay(100);}else {digitalWrite(13, LOW);}\n  // if (button13 == HIGH) {irsend.sendNEC(0xFF926D, 32);delay(100);}\n\n  if (irrecv.decode(&results)) {\n    Serial.println(results.value, HEX);\n    irrecv.resume();\n  }\n}\n```\n\n### 7.2 红外信号的读取\n\n红外信号的值可以通过Arduino的串口打印出来，然后通过修改代码中的红外信号值，实现遥控器的按键状态的修改。\n","source":"_posts/arduino-nano-IRctoril.md","raw":"---\ntitle: 基于Arduino的简易万能遥控器\ndate: 2023-02-14 00:08:04\ncategories: 开发\ntags: \n  - arduino\n  - CAD\n---\n# 基于Arduino的简易万能遥控器\n\n## 1. 介绍\n\n本项目是基于Arduino的万能遥控器，可以通过本遥控器控制电脑、电视、空调、机顶盒等设备。本项目的遥控器是基于Arduino Nano开发的，可以通过USB接口连接电脑，直接下载程序。同时，用户可以自己设定按键，实现自定义遥控器。\n\n### 1.1 产品面向群体\n\n本产品面向的群体是需要使用遥控器控制电脑、电视、空调、机顶盒等设备的用户。同时针对老龄化的用户本项目提出了简化按键数量，放大按键体积的理念，使得老年人也可以轻松使用本遥控器。\n\n### 1.2 产品优势\n\n  * 通过USB接口连接电脑，方便固件下载；\n  * 通过Arduino IED开发，简单易用；\n  * 针对特殊群体设计，简化按键数量，放大按键体积；\n\n## 2. 产品外观\n\n（本产品正处于开发阶段，未进行外壳设计）\n\n![正面]()\n\n![背面]()\n\n## 2. 硬件设计\n\n### 2.1 硬件boom表\n\n| 原件名称 | 原件型号 | 代号 | 数量 | 备注 |\n| --- | --- | --- | --- | --- |\n| Arduino Nano | Arduino Nano | Arduino Nano | 1 |  |\n| 电容 | 100nF | C1 | 2 | 10% 50V |\n| 电容 | 220uF | C2 | 2 | 25V |\n| 电阻 | 220 | R1 | 2 |  0.1% 125mW |\n| AMS1117 | AMS1117-3.3 | AMS1117 | 1 |  |\n| 红外发射二极管 | IRM-3638 | IRM-3638 | 1 |  |\n| 红外接收二极管 | TSOP4838 | TSOP4838 | 1 |  |\n| 按键 | 6x6x4.5mm | K1 | 8 |  |\n| 自恢复保险丝 | 5.5A | F1 | 1 |  |\n\n\n### 2.2 原理图\n\n![Image: image]()\n\n[pdf](files/keyboard-nano/keyboard-nano.pdf)\n\n### 2.3 PCB\n\n![Image: image]()\n\n[pdf](files/keyboard-nano/keyboard-nano-pcb.pdf)\n\n## 3. 软件\n\n### 3.1 红外部分\n\n#### 3.1.1 红外发射与接收原理\n\n红外发射原理是通过红外发射二极管发射红外信号，通过红外接收二极管接收红外信号。红外发射二极管的引脚分别为GND、VCC，其中GND为地，VCC为电源同时为信号输入。红外接收二极管的引脚分别为GND、VCC、OUT，其中GND为地，VCC为电源，OUT为输出。红外发射二极管的VCC引脚连接到Arduino NANO的D3引脚。红外接收二极管的VCC引脚连接到Arduino NANO的VCC引脚，OUT引脚连接到Arduino的D2引脚。\n\n#### 3.1.2 红外发射与接收代码\n\n```c\n#include <IRremote.h>\n\n//红外 接收\nint RECV_PIN = 2;\nIRrecv irrecv(RECV_PIN);\ndecode_results results;\n\n//红外 发射\nIRsend irsend;\n\nvoid setup(void) {\n    //红外 初始化\n    Serial.begin(9600);\n    irrecv.enableIRIn(); // Start the receiver\n}\n\nvoid loop(void) {\n    // 红外 发射\n    irsend.sendNEC(0xFF18E7, 32);\n\n    // 红外 接收\n    if (irrecv.decode(&results)) {\n        Serial.println(results.value, HEX);\n        irrecv.resume(); // Receive the next value\n    }\n}\n```\n\n### 3.2 按键部分\n\n#### 3.2.1 按键原理\n\n按键原理是通过Arduino的数字输入引脚读取按键的状态，当按键按下时，引脚电平为低，当按键松开时，引脚电平为高。Arduino的数字输入引脚分别为D2、D3、D4、D5、D6、D7、D8、D9、D10、D11、D12、D13。本项目按键的引脚分别为D6、D7、D8、D9、D10、D11、D12、D13这8个。\n\n#### 3.2.2 按键代码\n\n```c\n// 按键 初始化\nint button6 = 0;\nint button7 = 0;\nint button8 = 0;\nint button9 = 0;\nint button10 = 0;\nint button11 = 0;\nint button12 = 0;\nint button13 = 0;\n\nvoid setup(void) {\n    // 按键 初始化\n    pinMode(6, INPUT);\n    pinMode(7, INPUT);\n    pinMode(8, INPUT);\n    pinMode(9, INPUT);\n    pinMode(10, INPUT);\n    pinMode(11, INPUT);\n    pinMode(12, INPUT);\n    pinMode(13, OUTPUT);  \n}\n\nvoid loop(void) {\n    // 按键 读取\n    button6  = digitalRead(6);\n    button7  = digitalRead(7);\n    button8  = digitalRead(8);\n    button9  = digitalRead(9);\n    button10 = digitalRead(10);\n    button11 = digitalRead(11);\n    button12 = digitalRead(12);\n  \n    // 数据 发射\n    if (button6  == HIGH) {digitalWrite(13, HIGH);irsend.sendNEC(0xFF18E7, 32);delay(100);}else {digitalWrite(13, LOW);}\n    if (button7  == HIGH) {digitalWrite(13, HIGH);irsend.sendNEC(0xFFA857, 32);delay(100);}else {digitalWrite(13, LOW);}\n    if (button8  == HIGH) {digitalWrite(13, HIGH);irsend.sendNEC(0xFF30CF, 32);delay(100);}else {digitalWrite(13, LOW);}\n    if (button9  == HIGH) {digitalWrite(13, HIGH);irsend.sendNEC(0xFFD02F, 32);delay(100);}else {digitalWrite(13, LOW);}\n    if (button10 == HIGH) {digitalWrite(13, HIGH);irsend.sendNEC(0xFF728D, 32);delay(100);}else {digitalWrite(13, LOW);}\n    if (button11 == HIGH) {digitalWrite(13, HIGH);irsend.sendNEC(0xFF926D, 32);delay(100);}else {digitalWrite(13, LOW);}\n    if (button12 == HIGH) {digitalWrite(13, HIGH);irsend.sendNEC(0xFF02FD, 32);delay(100);}else {digitalWrite(13, LOW);}\n    if (button13 == HIGH) {irsend.sendNEC(0xFF926D, 32);delay(100);}\n}\n```\n\n## 4. 效果\n\n当按下按键时，红外发射二极管发射红外信号。\n当红外接收二极管接收到红外信号，Arduino NANO通过串口打印红外信号的值。\n\n## 5. 参考\n\n## 6. 未来计划\n\n* 加入蓝牙模块，实现蓝牙遥控。\n* 加入WiFi模块，实现WiFi遥控。\n* 加入LED灯珠，实现按键按下时亮灯。\n* 加入OLED屏幕，实现屏幕显示遥控器的按键状态。\n* 加入文件读取与写入，实现遥控器的按键状态保存与实时修改。\n\n## 7. 附录\n\n### 7.1 完整代码\n\n```c\n#include <IRremote.h>\n\n// 按键 初始化\nint button6 = 0;\nint button7 = 0;\nint button8 = 0;\nint button9 = 0;\nint button10 = 0;\nint button11 = 0;\nint button12 = 0;\nint button13 = 0;\n\n//红外 初始化\nint RECV_PIN = 2;\nIRrecv irrecv(RECV_PIN);\ndecode_results results;\n\nIRsend irsend;\n\nvoid setup(void) {\n  // 按键 初始化\n  pinMode(6, INPUT);\n  pinMode(7, INPUT);\n  pinMode(8, INPUT);\n  pinMode(9, INPUT);\n  pinMode(10, INPUT);\n  pinMode(11, INPUT);\n  pinMode(12, INPUT);\n  pinMode(13, OUTPUT);  \n\n  //红外 初始化\n  Serial.begin(9600);\n  irrecv.enableIRIn(); // Start the receiver\n}\n\nvoid loop(void) {\n  button6  = digitalRead(6);\n  button7  = digitalRead(7);\n  button8  = digitalRead(8);\n  button9  = digitalRead(9);\n  button10 = digitalRead(10);\n  button11 = digitalRead(11);\n  button12 = digitalRead(12);\n  \n  if (button6  == HIGH) {digitalWrite(13, HIGH);irsend.sendNEC(0xFF18E7, 32);delay(100);}else {digitalWrite(13, LOW);}\n  if (button7  == HIGH) {digitalWrite(13, HIGH);irsend.sendNEC(0xFFA857, 32);delay(100);}else {digitalWrite(13, LOW);}\n  if (button8  == HIGH) {digitalWrite(13, HIGH);irsend.sendNEC(0xFF30CF, 32);delay(100);}else {digitalWrite(13, LOW);}\n  if (button9  == HIGH) {digitalWrite(13, HIGH);irsend.sendNEC(0xFFD02F, 32);delay(100);}else {digitalWrite(13, LOW);}\n  if (button10 == HIGH) {digitalWrite(13, HIGH);irsend.sendNEC(0xFF728D, 32);delay(100);}else {digitalWrite(13, LOW);}\n  if (button11 == HIGH) {digitalWrite(13, HIGH);irsend.sendNEC(0xFF926D, 32);delay(100);}else {digitalWrite(13, LOW);}\n  if (button12 == HIGH) {digitalWrite(13, HIGH);irsend.sendNEC(0xFF02FD, 32);delay(100);}else {digitalWrite(13, LOW);}\n  // if (button13 == HIGH) {irsend.sendNEC(0xFF926D, 32);delay(100);}\n\n  if (irrecv.decode(&results)) {\n    Serial.println(results.value, HEX);\n    irrecv.resume();\n  }\n}\n```\n\n### 7.2 红外信号的读取\n\n红外信号的值可以通过Arduino的串口打印出来，然后通过修改代码中的红外信号值，实现遥控器的按键状态的修改。\n","slug":"arduino-nano-IRctoril","published":1,"updated":"2023-07-23T14:19:13.304Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkjdd1b5000k98aje7hl98bo","content":"<h1 id=\"基于Arduino的简易万能遥控器\"><a href=\"#基于Arduino的简易万能遥控器\" class=\"headerlink\" title=\"基于Arduino的简易万能遥控器\"></a>基于Arduino的简易万能遥控器</h1><h2 id=\"1-介绍\"><a href=\"#1-介绍\" class=\"headerlink\" title=\"1. 介绍\"></a>1. 介绍</h2><p>本项目是基于Arduino的万能遥控器，可以通过本遥控器控制电脑、电视、空调、机顶盒等设备。本项目的遥控器是基于Arduino Nano开发的，可以通过USB接口连接电脑，直接下载程序。同时，用户可以自己设定按键，实现自定义遥控器。</p>\n<h3 id=\"1-1-产品面向群体\"><a href=\"#1-1-产品面向群体\" class=\"headerlink\" title=\"1.1 产品面向群体\"></a>1.1 产品面向群体</h3><p>本产品面向的群体是需要使用遥控器控制电脑、电视、空调、机顶盒等设备的用户。同时针对老龄化的用户本项目提出了简化按键数量，放大按键体积的理念，使得老年人也可以轻松使用本遥控器。</p>\n<h3 id=\"1-2-产品优势\"><a href=\"#1-2-产品优势\" class=\"headerlink\" title=\"1.2 产品优势\"></a>1.2 产品优势</h3><ul>\n<li>通过USB接口连接电脑，方便固件下载；</li>\n<li>通过Arduino IED开发，简单易用；</li>\n<li>针对特殊群体设计，简化按键数量，放大按键体积；</li>\n</ul>\n<h2 id=\"2-产品外观\"><a href=\"#2-产品外观\" class=\"headerlink\" title=\"2. 产品外观\"></a>2. 产品外观</h2><p>（本产品正处于开发阶段，未进行外壳设计）</p>\n<p><img src=\"/\" alt=\"正面\"></p>\n<p><img src=\"/\" alt=\"背面\"></p>\n<h2 id=\"2-硬件设计\"><a href=\"#2-硬件设计\" class=\"headerlink\" title=\"2. 硬件设计\"></a>2. 硬件设计</h2><h3 id=\"2-1-硬件boom表\"><a href=\"#2-1-硬件boom表\" class=\"headerlink\" title=\"2.1 硬件boom表\"></a>2.1 硬件boom表</h3><table>\n<thead>\n<tr>\n<th>原件名称</th>\n<th>原件型号</th>\n<th>代号</th>\n<th>数量</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Arduino Nano</td>\n<td>Arduino Nano</td>\n<td>Arduino Nano</td>\n<td>1</td>\n<td></td>\n</tr>\n<tr>\n<td>电容</td>\n<td>100nF</td>\n<td>C1</td>\n<td>2</td>\n<td>10% 50V</td>\n</tr>\n<tr>\n<td>电容</td>\n<td>220uF</td>\n<td>C2</td>\n<td>2</td>\n<td>25V</td>\n</tr>\n<tr>\n<td>电阻</td>\n<td>220</td>\n<td>R1</td>\n<td>2</td>\n<td>0.1% 125mW</td>\n</tr>\n<tr>\n<td>AMS1117</td>\n<td>AMS1117-3.3</td>\n<td>AMS1117</td>\n<td>1</td>\n<td></td>\n</tr>\n<tr>\n<td>红外发射二极管</td>\n<td>IRM-3638</td>\n<td>IRM-3638</td>\n<td>1</td>\n<td></td>\n</tr>\n<tr>\n<td>红外接收二极管</td>\n<td>TSOP4838</td>\n<td>TSOP4838</td>\n<td>1</td>\n<td></td>\n</tr>\n<tr>\n<td>按键</td>\n<td>6x6x4.5mm</td>\n<td>K1</td>\n<td>8</td>\n<td></td>\n</tr>\n<tr>\n<td>自恢复保险丝</td>\n<td>5.5A</td>\n<td>F1</td>\n<td>1</td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"2-2-原理图\"><a href=\"#2-2-原理图\" class=\"headerlink\" title=\"2.2 原理图\"></a>2.2 原理图</h3><p><img src=\"/\" alt=\"Image: image\"></p>\n<p><a href=\"files/keyboard-nano/keyboard-nano.pdf\">pdf</a></p>\n<h3 id=\"2-3-PCB\"><a href=\"#2-3-PCB\" class=\"headerlink\" title=\"2.3 PCB\"></a>2.3 PCB</h3><p><img src=\"/\" alt=\"Image: image\"></p>\n<p><a href=\"files/keyboard-nano/keyboard-nano-pcb.pdf\">pdf</a></p>\n<h2 id=\"3-软件\"><a href=\"#3-软件\" class=\"headerlink\" title=\"3. 软件\"></a>3. 软件</h2><h3 id=\"3-1-红外部分\"><a href=\"#3-1-红外部分\" class=\"headerlink\" title=\"3.1 红外部分\"></a>3.1 红外部分</h3><h4 id=\"3-1-1-红外发射与接收原理\"><a href=\"#3-1-1-红外发射与接收原理\" class=\"headerlink\" title=\"3.1.1 红外发射与接收原理\"></a>3.1.1 红外发射与接收原理</h4><p>红外发射原理是通过红外发射二极管发射红外信号，通过红外接收二极管接收红外信号。红外发射二极管的引脚分别为GND、VCC，其中GND为地，VCC为电源同时为信号输入。红外接收二极管的引脚分别为GND、VCC、OUT，其中GND为地，VCC为电源，OUT为输出。红外发射二极管的VCC引脚连接到Arduino NANO的D3引脚。红外接收二极管的VCC引脚连接到Arduino NANO的VCC引脚，OUT引脚连接到Arduino的D2引脚。</p>\n<h4 id=\"3-1-2-红外发射与接收代码\"><a href=\"#3-1-2-红外发射与接收代码\" class=\"headerlink\" title=\"3.1.2 红外发射与接收代码\"></a>3.1.2 红外发射与接收代码</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;IRremote.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//红外 接收</span></span><br><span class=\"line\"><span class=\"type\">int</span> RECV_PIN = <span class=\"number\">2</span>;</span><br><span class=\"line\">IRrecv <span class=\"title function_\">irrecv</span><span class=\"params\">(RECV_PIN)</span>;</span><br><span class=\"line\">decode_results results;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//红外 发射</span></span><br><span class=\"line\">IRsend irsend;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">setup</span><span class=\"params\">(<span class=\"type\">void</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//红外 初始化</span></span><br><span class=\"line\">    Serial.begin(<span class=\"number\">9600</span>);</span><br><span class=\"line\">    irrecv.enableIRIn(); <span class=\"comment\">// Start the receiver</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">loop</span><span class=\"params\">(<span class=\"type\">void</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 红外 发射</span></span><br><span class=\"line\">    irsend.sendNEC(<span class=\"number\">0xFF18E7</span>, <span class=\"number\">32</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 红外 接收</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (irrecv.decode(&amp;results)) &#123;</span><br><span class=\"line\">        Serial.println(results.value, HEX);</span><br><span class=\"line\">        irrecv.resume(); <span class=\"comment\">// Receive the next value</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-按键部分\"><a href=\"#3-2-按键部分\" class=\"headerlink\" title=\"3.2 按键部分\"></a>3.2 按键部分</h3><h4 id=\"3-2-1-按键原理\"><a href=\"#3-2-1-按键原理\" class=\"headerlink\" title=\"3.2.1 按键原理\"></a>3.2.1 按键原理</h4><p>按键原理是通过Arduino的数字输入引脚读取按键的状态，当按键按下时，引脚电平为低，当按键松开时，引脚电平为高。Arduino的数字输入引脚分别为D2、D3、D4、D5、D6、D7、D8、D9、D10、D11、D12、D13。本项目按键的引脚分别为D6、D7、D8、D9、D10、D11、D12、D13这8个。</p>\n<h4 id=\"3-2-2-按键代码\"><a href=\"#3-2-2-按键代码\" class=\"headerlink\" title=\"3.2.2 按键代码\"></a>3.2.2 按键代码</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 按键 初始化</span></span><br><span class=\"line\"><span class=\"type\">int</span> button6 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> button7 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> button8 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> button9 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> button10 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> button11 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> button12 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> button13 = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">setup</span><span class=\"params\">(<span class=\"type\">void</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 按键 初始化</span></span><br><span class=\"line\">    pinMode(<span class=\"number\">6</span>, INPUT);</span><br><span class=\"line\">    pinMode(<span class=\"number\">7</span>, INPUT);</span><br><span class=\"line\">    pinMode(<span class=\"number\">8</span>, INPUT);</span><br><span class=\"line\">    pinMode(<span class=\"number\">9</span>, INPUT);</span><br><span class=\"line\">    pinMode(<span class=\"number\">10</span>, INPUT);</span><br><span class=\"line\">    pinMode(<span class=\"number\">11</span>, INPUT);</span><br><span class=\"line\">    pinMode(<span class=\"number\">12</span>, INPUT);</span><br><span class=\"line\">    pinMode(<span class=\"number\">13</span>, OUTPUT);  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">loop</span><span class=\"params\">(<span class=\"type\">void</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 按键 读取</span></span><br><span class=\"line\">    button6  = digitalRead(<span class=\"number\">6</span>);</span><br><span class=\"line\">    button7  = digitalRead(<span class=\"number\">7</span>);</span><br><span class=\"line\">    button8  = digitalRead(<span class=\"number\">8</span>);</span><br><span class=\"line\">    button9  = digitalRead(<span class=\"number\">9</span>);</span><br><span class=\"line\">    button10 = digitalRead(<span class=\"number\">10</span>);</span><br><span class=\"line\">    button11 = digitalRead(<span class=\"number\">11</span>);</span><br><span class=\"line\">    button12 = digitalRead(<span class=\"number\">12</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">// 数据 发射</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (button6  == HIGH) &#123;digitalWrite(<span class=\"number\">13</span>, HIGH);irsend.sendNEC(<span class=\"number\">0xFF18E7</span>, <span class=\"number\">32</span>);delay(<span class=\"number\">100</span>);&#125;<span class=\"keyword\">else</span> &#123;digitalWrite(<span class=\"number\">13</span>, LOW);&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (button7  == HIGH) &#123;digitalWrite(<span class=\"number\">13</span>, HIGH);irsend.sendNEC(<span class=\"number\">0xFFA857</span>, <span class=\"number\">32</span>);delay(<span class=\"number\">100</span>);&#125;<span class=\"keyword\">else</span> &#123;digitalWrite(<span class=\"number\">13</span>, LOW);&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (button8  == HIGH) &#123;digitalWrite(<span class=\"number\">13</span>, HIGH);irsend.sendNEC(<span class=\"number\">0xFF30CF</span>, <span class=\"number\">32</span>);delay(<span class=\"number\">100</span>);&#125;<span class=\"keyword\">else</span> &#123;digitalWrite(<span class=\"number\">13</span>, LOW);&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (button9  == HIGH) &#123;digitalWrite(<span class=\"number\">13</span>, HIGH);irsend.sendNEC(<span class=\"number\">0xFFD02F</span>, <span class=\"number\">32</span>);delay(<span class=\"number\">100</span>);&#125;<span class=\"keyword\">else</span> &#123;digitalWrite(<span class=\"number\">13</span>, LOW);&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (button10 == HIGH) &#123;digitalWrite(<span class=\"number\">13</span>, HIGH);irsend.sendNEC(<span class=\"number\">0xFF728D</span>, <span class=\"number\">32</span>);delay(<span class=\"number\">100</span>);&#125;<span class=\"keyword\">else</span> &#123;digitalWrite(<span class=\"number\">13</span>, LOW);&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (button11 == HIGH) &#123;digitalWrite(<span class=\"number\">13</span>, HIGH);irsend.sendNEC(<span class=\"number\">0xFF926D</span>, <span class=\"number\">32</span>);delay(<span class=\"number\">100</span>);&#125;<span class=\"keyword\">else</span> &#123;digitalWrite(<span class=\"number\">13</span>, LOW);&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (button12 == HIGH) &#123;digitalWrite(<span class=\"number\">13</span>, HIGH);irsend.sendNEC(<span class=\"number\">0xFF02FD</span>, <span class=\"number\">32</span>);delay(<span class=\"number\">100</span>);&#125;<span class=\"keyword\">else</span> &#123;digitalWrite(<span class=\"number\">13</span>, LOW);&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (button13 == HIGH) &#123;irsend.sendNEC(<span class=\"number\">0xFF926D</span>, <span class=\"number\">32</span>);delay(<span class=\"number\">100</span>);&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-效果\"><a href=\"#4-效果\" class=\"headerlink\" title=\"4. 效果\"></a>4. 效果</h2><p>当按下按键时，红外发射二极管发射红外信号。<br>当红外接收二极管接收到红外信号，Arduino NANO通过串口打印红外信号的值。</p>\n<h2 id=\"5-参考\"><a href=\"#5-参考\" class=\"headerlink\" title=\"5. 参考\"></a>5. 参考</h2><h2 id=\"6-未来计划\"><a href=\"#6-未来计划\" class=\"headerlink\" title=\"6. 未来计划\"></a>6. 未来计划</h2><ul>\n<li>加入蓝牙模块，实现蓝牙遥控。</li>\n<li>加入WiFi模块，实现WiFi遥控。</li>\n<li>加入LED灯珠，实现按键按下时亮灯。</li>\n<li>加入OLED屏幕，实现屏幕显示遥控器的按键状态。</li>\n<li>加入文件读取与写入，实现遥控器的按键状态保存与实时修改。</li>\n</ul>\n<h2 id=\"7-附录\"><a href=\"#7-附录\" class=\"headerlink\" title=\"7. 附录\"></a>7. 附录</h2><h3 id=\"7-1-完整代码\"><a href=\"#7-1-完整代码\" class=\"headerlink\" title=\"7.1 完整代码\"></a>7.1 完整代码</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;IRremote.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 按键 初始化</span></span><br><span class=\"line\"><span class=\"type\">int</span> button6 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> button7 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> button8 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> button9 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> button10 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> button11 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> button12 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> button13 = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//红外 初始化</span></span><br><span class=\"line\"><span class=\"type\">int</span> RECV_PIN = <span class=\"number\">2</span>;</span><br><span class=\"line\">IRrecv <span class=\"title function_\">irrecv</span><span class=\"params\">(RECV_PIN)</span>;</span><br><span class=\"line\">decode_results results;</span><br><span class=\"line\"></span><br><span class=\"line\">IRsend irsend;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">setup</span><span class=\"params\">(<span class=\"type\">void</span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 按键 初始化</span></span><br><span class=\"line\">  pinMode(<span class=\"number\">6</span>, INPUT);</span><br><span class=\"line\">  pinMode(<span class=\"number\">7</span>, INPUT);</span><br><span class=\"line\">  pinMode(<span class=\"number\">8</span>, INPUT);</span><br><span class=\"line\">  pinMode(<span class=\"number\">9</span>, INPUT);</span><br><span class=\"line\">  pinMode(<span class=\"number\">10</span>, INPUT);</span><br><span class=\"line\">  pinMode(<span class=\"number\">11</span>, INPUT);</span><br><span class=\"line\">  pinMode(<span class=\"number\">12</span>, INPUT);</span><br><span class=\"line\">  pinMode(<span class=\"number\">13</span>, OUTPUT);  </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//红外 初始化</span></span><br><span class=\"line\">  Serial.begin(<span class=\"number\">9600</span>);</span><br><span class=\"line\">  irrecv.enableIRIn(); <span class=\"comment\">// Start the receiver</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">loop</span><span class=\"params\">(<span class=\"type\">void</span>)</span> &#123;</span><br><span class=\"line\">  button6  = digitalRead(<span class=\"number\">6</span>);</span><br><span class=\"line\">  button7  = digitalRead(<span class=\"number\">7</span>);</span><br><span class=\"line\">  button8  = digitalRead(<span class=\"number\">8</span>);</span><br><span class=\"line\">  button9  = digitalRead(<span class=\"number\">9</span>);</span><br><span class=\"line\">  button10 = digitalRead(<span class=\"number\">10</span>);</span><br><span class=\"line\">  button11 = digitalRead(<span class=\"number\">11</span>);</span><br><span class=\"line\">  button12 = digitalRead(<span class=\"number\">12</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (button6  == HIGH) &#123;digitalWrite(<span class=\"number\">13</span>, HIGH);irsend.sendNEC(<span class=\"number\">0xFF18E7</span>, <span class=\"number\">32</span>);delay(<span class=\"number\">100</span>);&#125;<span class=\"keyword\">else</span> &#123;digitalWrite(<span class=\"number\">13</span>, LOW);&#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (button7  == HIGH) &#123;digitalWrite(<span class=\"number\">13</span>, HIGH);irsend.sendNEC(<span class=\"number\">0xFFA857</span>, <span class=\"number\">32</span>);delay(<span class=\"number\">100</span>);&#125;<span class=\"keyword\">else</span> &#123;digitalWrite(<span class=\"number\">13</span>, LOW);&#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (button8  == HIGH) &#123;digitalWrite(<span class=\"number\">13</span>, HIGH);irsend.sendNEC(<span class=\"number\">0xFF30CF</span>, <span class=\"number\">32</span>);delay(<span class=\"number\">100</span>);&#125;<span class=\"keyword\">else</span> &#123;digitalWrite(<span class=\"number\">13</span>, LOW);&#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (button9  == HIGH) &#123;digitalWrite(<span class=\"number\">13</span>, HIGH);irsend.sendNEC(<span class=\"number\">0xFFD02F</span>, <span class=\"number\">32</span>);delay(<span class=\"number\">100</span>);&#125;<span class=\"keyword\">else</span> &#123;digitalWrite(<span class=\"number\">13</span>, LOW);&#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (button10 == HIGH) &#123;digitalWrite(<span class=\"number\">13</span>, HIGH);irsend.sendNEC(<span class=\"number\">0xFF728D</span>, <span class=\"number\">32</span>);delay(<span class=\"number\">100</span>);&#125;<span class=\"keyword\">else</span> &#123;digitalWrite(<span class=\"number\">13</span>, LOW);&#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (button11 == HIGH) &#123;digitalWrite(<span class=\"number\">13</span>, HIGH);irsend.sendNEC(<span class=\"number\">0xFF926D</span>, <span class=\"number\">32</span>);delay(<span class=\"number\">100</span>);&#125;<span class=\"keyword\">else</span> &#123;digitalWrite(<span class=\"number\">13</span>, LOW);&#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (button12 == HIGH) &#123;digitalWrite(<span class=\"number\">13</span>, HIGH);irsend.sendNEC(<span class=\"number\">0xFF02FD</span>, <span class=\"number\">32</span>);delay(<span class=\"number\">100</span>);&#125;<span class=\"keyword\">else</span> &#123;digitalWrite(<span class=\"number\">13</span>, LOW);&#125;</span><br><span class=\"line\">  <span class=\"comment\">// if (button13 == HIGH) &#123;irsend.sendNEC(0xFF926D, 32);delay(100);&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (irrecv.decode(&amp;results)) &#123;</span><br><span class=\"line\">    Serial.println(results.value, HEX);</span><br><span class=\"line\">    irrecv.resume();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-2-红外信号的读取\"><a href=\"#7-2-红外信号的读取\" class=\"headerlink\" title=\"7.2 红外信号的读取\"></a>7.2 红外信号的读取</h3><p>红外信号的值可以通过Arduino的串口打印出来，然后通过修改代码中的红外信号值，实现遥控器的按键状态的修改。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"基于Arduino的简易万能遥控器\"><a href=\"#基于Arduino的简易万能遥控器\" class=\"headerlink\" title=\"基于Arduino的简易万能遥控器\"></a>基于Arduino的简易万能遥控器</h1><h2 id=\"1-介绍\"><a href=\"#1-介绍\" class=\"headerlink\" title=\"1. 介绍\"></a>1. 介绍</h2><p>本项目是基于Arduino的万能遥控器，可以通过本遥控器控制电脑、电视、空调、机顶盒等设备。本项目的遥控器是基于Arduino Nano开发的，可以通过USB接口连接电脑，直接下载程序。同时，用户可以自己设定按键，实现自定义遥控器。</p>\n<h3 id=\"1-1-产品面向群体\"><a href=\"#1-1-产品面向群体\" class=\"headerlink\" title=\"1.1 产品面向群体\"></a>1.1 产品面向群体</h3><p>本产品面向的群体是需要使用遥控器控制电脑、电视、空调、机顶盒等设备的用户。同时针对老龄化的用户本项目提出了简化按键数量，放大按键体积的理念，使得老年人也可以轻松使用本遥控器。</p>\n<h3 id=\"1-2-产品优势\"><a href=\"#1-2-产品优势\" class=\"headerlink\" title=\"1.2 产品优势\"></a>1.2 产品优势</h3><ul>\n<li>通过USB接口连接电脑，方便固件下载；</li>\n<li>通过Arduino IED开发，简单易用；</li>\n<li>针对特殊群体设计，简化按键数量，放大按键体积；</li>\n</ul>\n<h2 id=\"2-产品外观\"><a href=\"#2-产品外观\" class=\"headerlink\" title=\"2. 产品外观\"></a>2. 产品外观</h2><p>（本产品正处于开发阶段，未进行外壳设计）</p>\n<p><img src=\"/\" alt=\"正面\"></p>\n<p><img src=\"/\" alt=\"背面\"></p>\n<h2 id=\"2-硬件设计\"><a href=\"#2-硬件设计\" class=\"headerlink\" title=\"2. 硬件设计\"></a>2. 硬件设计</h2><h3 id=\"2-1-硬件boom表\"><a href=\"#2-1-硬件boom表\" class=\"headerlink\" title=\"2.1 硬件boom表\"></a>2.1 硬件boom表</h3><table>\n<thead>\n<tr>\n<th>原件名称</th>\n<th>原件型号</th>\n<th>代号</th>\n<th>数量</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Arduino Nano</td>\n<td>Arduino Nano</td>\n<td>Arduino Nano</td>\n<td>1</td>\n<td></td>\n</tr>\n<tr>\n<td>电容</td>\n<td>100nF</td>\n<td>C1</td>\n<td>2</td>\n<td>10% 50V</td>\n</tr>\n<tr>\n<td>电容</td>\n<td>220uF</td>\n<td>C2</td>\n<td>2</td>\n<td>25V</td>\n</tr>\n<tr>\n<td>电阻</td>\n<td>220</td>\n<td>R1</td>\n<td>2</td>\n<td>0.1% 125mW</td>\n</tr>\n<tr>\n<td>AMS1117</td>\n<td>AMS1117-3.3</td>\n<td>AMS1117</td>\n<td>1</td>\n<td></td>\n</tr>\n<tr>\n<td>红外发射二极管</td>\n<td>IRM-3638</td>\n<td>IRM-3638</td>\n<td>1</td>\n<td></td>\n</tr>\n<tr>\n<td>红外接收二极管</td>\n<td>TSOP4838</td>\n<td>TSOP4838</td>\n<td>1</td>\n<td></td>\n</tr>\n<tr>\n<td>按键</td>\n<td>6x6x4.5mm</td>\n<td>K1</td>\n<td>8</td>\n<td></td>\n</tr>\n<tr>\n<td>自恢复保险丝</td>\n<td>5.5A</td>\n<td>F1</td>\n<td>1</td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"2-2-原理图\"><a href=\"#2-2-原理图\" class=\"headerlink\" title=\"2.2 原理图\"></a>2.2 原理图</h3><p><img src=\"/\" alt=\"Image: image\"></p>\n<p><a href=\"files/keyboard-nano/keyboard-nano.pdf\">pdf</a></p>\n<h3 id=\"2-3-PCB\"><a href=\"#2-3-PCB\" class=\"headerlink\" title=\"2.3 PCB\"></a>2.3 PCB</h3><p><img src=\"/\" alt=\"Image: image\"></p>\n<p><a href=\"files/keyboard-nano/keyboard-nano-pcb.pdf\">pdf</a></p>\n<h2 id=\"3-软件\"><a href=\"#3-软件\" class=\"headerlink\" title=\"3. 软件\"></a>3. 软件</h2><h3 id=\"3-1-红外部分\"><a href=\"#3-1-红外部分\" class=\"headerlink\" title=\"3.1 红外部分\"></a>3.1 红外部分</h3><h4 id=\"3-1-1-红外发射与接收原理\"><a href=\"#3-1-1-红外发射与接收原理\" class=\"headerlink\" title=\"3.1.1 红外发射与接收原理\"></a>3.1.1 红外发射与接收原理</h4><p>红外发射原理是通过红外发射二极管发射红外信号，通过红外接收二极管接收红外信号。红外发射二极管的引脚分别为GND、VCC，其中GND为地，VCC为电源同时为信号输入。红外接收二极管的引脚分别为GND、VCC、OUT，其中GND为地，VCC为电源，OUT为输出。红外发射二极管的VCC引脚连接到Arduino NANO的D3引脚。红外接收二极管的VCC引脚连接到Arduino NANO的VCC引脚，OUT引脚连接到Arduino的D2引脚。</p>\n<h4 id=\"3-1-2-红外发射与接收代码\"><a href=\"#3-1-2-红外发射与接收代码\" class=\"headerlink\" title=\"3.1.2 红外发射与接收代码\"></a>3.1.2 红外发射与接收代码</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;IRremote.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//红外 接收</span></span><br><span class=\"line\"><span class=\"type\">int</span> RECV_PIN = <span class=\"number\">2</span>;</span><br><span class=\"line\">IRrecv <span class=\"title function_\">irrecv</span><span class=\"params\">(RECV_PIN)</span>;</span><br><span class=\"line\">decode_results results;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//红外 发射</span></span><br><span class=\"line\">IRsend irsend;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">setup</span><span class=\"params\">(<span class=\"type\">void</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//红外 初始化</span></span><br><span class=\"line\">    Serial.begin(<span class=\"number\">9600</span>);</span><br><span class=\"line\">    irrecv.enableIRIn(); <span class=\"comment\">// Start the receiver</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">loop</span><span class=\"params\">(<span class=\"type\">void</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 红外 发射</span></span><br><span class=\"line\">    irsend.sendNEC(<span class=\"number\">0xFF18E7</span>, <span class=\"number\">32</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 红外 接收</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (irrecv.decode(&amp;results)) &#123;</span><br><span class=\"line\">        Serial.println(results.value, HEX);</span><br><span class=\"line\">        irrecv.resume(); <span class=\"comment\">// Receive the next value</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-按键部分\"><a href=\"#3-2-按键部分\" class=\"headerlink\" title=\"3.2 按键部分\"></a>3.2 按键部分</h3><h4 id=\"3-2-1-按键原理\"><a href=\"#3-2-1-按键原理\" class=\"headerlink\" title=\"3.2.1 按键原理\"></a>3.2.1 按键原理</h4><p>按键原理是通过Arduino的数字输入引脚读取按键的状态，当按键按下时，引脚电平为低，当按键松开时，引脚电平为高。Arduino的数字输入引脚分别为D2、D3、D4、D5、D6、D7、D8、D9、D10、D11、D12、D13。本项目按键的引脚分别为D6、D7、D8、D9、D10、D11、D12、D13这8个。</p>\n<h4 id=\"3-2-2-按键代码\"><a href=\"#3-2-2-按键代码\" class=\"headerlink\" title=\"3.2.2 按键代码\"></a>3.2.2 按键代码</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 按键 初始化</span></span><br><span class=\"line\"><span class=\"type\">int</span> button6 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> button7 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> button8 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> button9 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> button10 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> button11 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> button12 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> button13 = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">setup</span><span class=\"params\">(<span class=\"type\">void</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 按键 初始化</span></span><br><span class=\"line\">    pinMode(<span class=\"number\">6</span>, INPUT);</span><br><span class=\"line\">    pinMode(<span class=\"number\">7</span>, INPUT);</span><br><span class=\"line\">    pinMode(<span class=\"number\">8</span>, INPUT);</span><br><span class=\"line\">    pinMode(<span class=\"number\">9</span>, INPUT);</span><br><span class=\"line\">    pinMode(<span class=\"number\">10</span>, INPUT);</span><br><span class=\"line\">    pinMode(<span class=\"number\">11</span>, INPUT);</span><br><span class=\"line\">    pinMode(<span class=\"number\">12</span>, INPUT);</span><br><span class=\"line\">    pinMode(<span class=\"number\">13</span>, OUTPUT);  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">loop</span><span class=\"params\">(<span class=\"type\">void</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 按键 读取</span></span><br><span class=\"line\">    button6  = digitalRead(<span class=\"number\">6</span>);</span><br><span class=\"line\">    button7  = digitalRead(<span class=\"number\">7</span>);</span><br><span class=\"line\">    button8  = digitalRead(<span class=\"number\">8</span>);</span><br><span class=\"line\">    button9  = digitalRead(<span class=\"number\">9</span>);</span><br><span class=\"line\">    button10 = digitalRead(<span class=\"number\">10</span>);</span><br><span class=\"line\">    button11 = digitalRead(<span class=\"number\">11</span>);</span><br><span class=\"line\">    button12 = digitalRead(<span class=\"number\">12</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">// 数据 发射</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (button6  == HIGH) &#123;digitalWrite(<span class=\"number\">13</span>, HIGH);irsend.sendNEC(<span class=\"number\">0xFF18E7</span>, <span class=\"number\">32</span>);delay(<span class=\"number\">100</span>);&#125;<span class=\"keyword\">else</span> &#123;digitalWrite(<span class=\"number\">13</span>, LOW);&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (button7  == HIGH) &#123;digitalWrite(<span class=\"number\">13</span>, HIGH);irsend.sendNEC(<span class=\"number\">0xFFA857</span>, <span class=\"number\">32</span>);delay(<span class=\"number\">100</span>);&#125;<span class=\"keyword\">else</span> &#123;digitalWrite(<span class=\"number\">13</span>, LOW);&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (button8  == HIGH) &#123;digitalWrite(<span class=\"number\">13</span>, HIGH);irsend.sendNEC(<span class=\"number\">0xFF30CF</span>, <span class=\"number\">32</span>);delay(<span class=\"number\">100</span>);&#125;<span class=\"keyword\">else</span> &#123;digitalWrite(<span class=\"number\">13</span>, LOW);&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (button9  == HIGH) &#123;digitalWrite(<span class=\"number\">13</span>, HIGH);irsend.sendNEC(<span class=\"number\">0xFFD02F</span>, <span class=\"number\">32</span>);delay(<span class=\"number\">100</span>);&#125;<span class=\"keyword\">else</span> &#123;digitalWrite(<span class=\"number\">13</span>, LOW);&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (button10 == HIGH) &#123;digitalWrite(<span class=\"number\">13</span>, HIGH);irsend.sendNEC(<span class=\"number\">0xFF728D</span>, <span class=\"number\">32</span>);delay(<span class=\"number\">100</span>);&#125;<span class=\"keyword\">else</span> &#123;digitalWrite(<span class=\"number\">13</span>, LOW);&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (button11 == HIGH) &#123;digitalWrite(<span class=\"number\">13</span>, HIGH);irsend.sendNEC(<span class=\"number\">0xFF926D</span>, <span class=\"number\">32</span>);delay(<span class=\"number\">100</span>);&#125;<span class=\"keyword\">else</span> &#123;digitalWrite(<span class=\"number\">13</span>, LOW);&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (button12 == HIGH) &#123;digitalWrite(<span class=\"number\">13</span>, HIGH);irsend.sendNEC(<span class=\"number\">0xFF02FD</span>, <span class=\"number\">32</span>);delay(<span class=\"number\">100</span>);&#125;<span class=\"keyword\">else</span> &#123;digitalWrite(<span class=\"number\">13</span>, LOW);&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (button13 == HIGH) &#123;irsend.sendNEC(<span class=\"number\">0xFF926D</span>, <span class=\"number\">32</span>);delay(<span class=\"number\">100</span>);&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-效果\"><a href=\"#4-效果\" class=\"headerlink\" title=\"4. 效果\"></a>4. 效果</h2><p>当按下按键时，红外发射二极管发射红外信号。<br>当红外接收二极管接收到红外信号，Arduino NANO通过串口打印红外信号的值。</p>\n<h2 id=\"5-参考\"><a href=\"#5-参考\" class=\"headerlink\" title=\"5. 参考\"></a>5. 参考</h2><h2 id=\"6-未来计划\"><a href=\"#6-未来计划\" class=\"headerlink\" title=\"6. 未来计划\"></a>6. 未来计划</h2><ul>\n<li>加入蓝牙模块，实现蓝牙遥控。</li>\n<li>加入WiFi模块，实现WiFi遥控。</li>\n<li>加入LED灯珠，实现按键按下时亮灯。</li>\n<li>加入OLED屏幕，实现屏幕显示遥控器的按键状态。</li>\n<li>加入文件读取与写入，实现遥控器的按键状态保存与实时修改。</li>\n</ul>\n<h2 id=\"7-附录\"><a href=\"#7-附录\" class=\"headerlink\" title=\"7. 附录\"></a>7. 附录</h2><h3 id=\"7-1-完整代码\"><a href=\"#7-1-完整代码\" class=\"headerlink\" title=\"7.1 完整代码\"></a>7.1 完整代码</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;IRremote.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 按键 初始化</span></span><br><span class=\"line\"><span class=\"type\">int</span> button6 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> button7 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> button8 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> button9 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> button10 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> button11 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> button12 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> button13 = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//红外 初始化</span></span><br><span class=\"line\"><span class=\"type\">int</span> RECV_PIN = <span class=\"number\">2</span>;</span><br><span class=\"line\">IRrecv <span class=\"title function_\">irrecv</span><span class=\"params\">(RECV_PIN)</span>;</span><br><span class=\"line\">decode_results results;</span><br><span class=\"line\"></span><br><span class=\"line\">IRsend irsend;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">setup</span><span class=\"params\">(<span class=\"type\">void</span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 按键 初始化</span></span><br><span class=\"line\">  pinMode(<span class=\"number\">6</span>, INPUT);</span><br><span class=\"line\">  pinMode(<span class=\"number\">7</span>, INPUT);</span><br><span class=\"line\">  pinMode(<span class=\"number\">8</span>, INPUT);</span><br><span class=\"line\">  pinMode(<span class=\"number\">9</span>, INPUT);</span><br><span class=\"line\">  pinMode(<span class=\"number\">10</span>, INPUT);</span><br><span class=\"line\">  pinMode(<span class=\"number\">11</span>, INPUT);</span><br><span class=\"line\">  pinMode(<span class=\"number\">12</span>, INPUT);</span><br><span class=\"line\">  pinMode(<span class=\"number\">13</span>, OUTPUT);  </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//红外 初始化</span></span><br><span class=\"line\">  Serial.begin(<span class=\"number\">9600</span>);</span><br><span class=\"line\">  irrecv.enableIRIn(); <span class=\"comment\">// Start the receiver</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">loop</span><span class=\"params\">(<span class=\"type\">void</span>)</span> &#123;</span><br><span class=\"line\">  button6  = digitalRead(<span class=\"number\">6</span>);</span><br><span class=\"line\">  button7  = digitalRead(<span class=\"number\">7</span>);</span><br><span class=\"line\">  button8  = digitalRead(<span class=\"number\">8</span>);</span><br><span class=\"line\">  button9  = digitalRead(<span class=\"number\">9</span>);</span><br><span class=\"line\">  button10 = digitalRead(<span class=\"number\">10</span>);</span><br><span class=\"line\">  button11 = digitalRead(<span class=\"number\">11</span>);</span><br><span class=\"line\">  button12 = digitalRead(<span class=\"number\">12</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (button6  == HIGH) &#123;digitalWrite(<span class=\"number\">13</span>, HIGH);irsend.sendNEC(<span class=\"number\">0xFF18E7</span>, <span class=\"number\">32</span>);delay(<span class=\"number\">100</span>);&#125;<span class=\"keyword\">else</span> &#123;digitalWrite(<span class=\"number\">13</span>, LOW);&#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (button7  == HIGH) &#123;digitalWrite(<span class=\"number\">13</span>, HIGH);irsend.sendNEC(<span class=\"number\">0xFFA857</span>, <span class=\"number\">32</span>);delay(<span class=\"number\">100</span>);&#125;<span class=\"keyword\">else</span> &#123;digitalWrite(<span class=\"number\">13</span>, LOW);&#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (button8  == HIGH) &#123;digitalWrite(<span class=\"number\">13</span>, HIGH);irsend.sendNEC(<span class=\"number\">0xFF30CF</span>, <span class=\"number\">32</span>);delay(<span class=\"number\">100</span>);&#125;<span class=\"keyword\">else</span> &#123;digitalWrite(<span class=\"number\">13</span>, LOW);&#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (button9  == HIGH) &#123;digitalWrite(<span class=\"number\">13</span>, HIGH);irsend.sendNEC(<span class=\"number\">0xFFD02F</span>, <span class=\"number\">32</span>);delay(<span class=\"number\">100</span>);&#125;<span class=\"keyword\">else</span> &#123;digitalWrite(<span class=\"number\">13</span>, LOW);&#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (button10 == HIGH) &#123;digitalWrite(<span class=\"number\">13</span>, HIGH);irsend.sendNEC(<span class=\"number\">0xFF728D</span>, <span class=\"number\">32</span>);delay(<span class=\"number\">100</span>);&#125;<span class=\"keyword\">else</span> &#123;digitalWrite(<span class=\"number\">13</span>, LOW);&#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (button11 == HIGH) &#123;digitalWrite(<span class=\"number\">13</span>, HIGH);irsend.sendNEC(<span class=\"number\">0xFF926D</span>, <span class=\"number\">32</span>);delay(<span class=\"number\">100</span>);&#125;<span class=\"keyword\">else</span> &#123;digitalWrite(<span class=\"number\">13</span>, LOW);&#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (button12 == HIGH) &#123;digitalWrite(<span class=\"number\">13</span>, HIGH);irsend.sendNEC(<span class=\"number\">0xFF02FD</span>, <span class=\"number\">32</span>);delay(<span class=\"number\">100</span>);&#125;<span class=\"keyword\">else</span> &#123;digitalWrite(<span class=\"number\">13</span>, LOW);&#125;</span><br><span class=\"line\">  <span class=\"comment\">// if (button13 == HIGH) &#123;irsend.sendNEC(0xFF926D, 32);delay(100);&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (irrecv.decode(&amp;results)) &#123;</span><br><span class=\"line\">    Serial.println(results.value, HEX);</span><br><span class=\"line\">    irrecv.resume();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-2-红外信号的读取\"><a href=\"#7-2-红外信号的读取\" class=\"headerlink\" title=\"7.2 红外信号的读取\"></a>7.2 红外信号的读取</h3><p>红外信号的值可以通过Arduino的串口打印出来，然后通过修改代码中的红外信号值，实现遥控器的按键状态的修改。</p>\n"},{"title":"bluetooth-robbottoukit","mp3":"http://domain.com/awesome.mp3","cover":"http://domain.com/awesome.jpg","date":"2022-11-24T11:30:36.000Z","_content":"https://blog.csdn.net/qq_33902044/article/details/98465301","source":"_posts/bluetooth-robbottoukit.md","raw":"---\ntitle: bluetooth-robbottoukit\nmp3: http://domain.com/awesome.mp3\ncover: http://domain.com/awesome.jpg\ndate: 2022-11-24 19:30:36\ncategories:\ntags:\n---\nhttps://blog.csdn.net/qq_33902044/article/details/98465301","slug":"bluetooth-robbottoukit","published":1,"updated":"2023-07-23T14:19:10.914Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkjdd1b7000m98aj23kgedbr","content":"<p><a href=\"https://blog.csdn.net/qq_33902044/article/details/98465301\">https://blog.csdn.net/qq_33902044/article/details/98465301</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://blog.csdn.net/qq_33902044/article/details/98465301\">https://blog.csdn.net/qq_33902044/article/details/98465301</a></p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2023-07-26T06:50:55.684Z","updated":"2023-07-23T14:19:12.918Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkjdd1b9000o98aj4ikkbzmu","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"使用hexo搭建博客","date":"2022-08-19T07:23:09.000Z","_content":"\n# Hexo 使用方法\n\n## 学习目标 \n\n### 知识目标： \n\n1. 通过学习，了解博客搭建常用的几种方式以及之间的区别 \n> 1. 第三方平台搭建 \n> 1. 静态网站生成页面，搭配`Github`展示 \n> 1. 管理系统`CMS`搭建 \n> 1. 手写前后端代码 \n2. 熟悉静态页面的生成技术 \n3. 学会最基本的`git`操作 \n \n### 能力目标： \n1. 实现个人博客的搭建 \n2. 能熟练在`Github/Gitee`上部署页面 \n \n---\n\n## 学习流程 \n\n---\n\n### 1. 工具基本介绍 \n\n#### 1. Hexo 介绍 \n\n`Hexo`是一个快速、简单且功能强大的博客框架。你用`Markdown`（或其他标记语言）写帖子，`Hexo` 会在几秒钟内生成带有漂亮主题的静态文件。 \n\n#### 2. Gitee 介绍 \n\n码云`Gitee`是开源中国社区在 2013 年推出的基于`Git`的代码托管服务，专为开发者提供稳定、高效、安全的云端软件开发协作平台，无论是个人、团队、或是企业，都能够用`Gitee`实现代码托管、项目管理、协作开发，更有代码质量分析、项目演示等丰富功能。 \n\n`Gitee`目前已经成为国内最大的代码托管平台，致力于为国内开发者提供优质稳定的托管服务，与 `GitHub`类似区别在于码云国内，`GitHub`国外。 \n\n#### 3. Git 介绍 \n\n`Git`是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。也就是用来管理你的`hexo`博客文章，上传到` GitHub `的工具。`Git `非常强大，我觉得建议每个人都去了解一下。 \n\n#### 4. Node.js 介绍 \n\n`Node.js `是一个能够在服务区端运行` JavaScript `的开放源代码、跨平台`JavaScript `运行环\n境。 \n\n`Hexo `是基于` node.js `编写的，所以需要安装一下` nodeJs `和里面的` npm `工具。 \n\n---\n\n### 2. 整体搭建流程 \n\n---\n\n### 开始搭建 \n 1. 基础准备 \n> 1. Gitee 的注册 \n\n> 2. Git、Node.js 安装 \n\n安装` Hexo `相当简单，只需要先安装下列应用程序即可：\n\n> Node.js (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本) \n\n```\nNode.js 为大多数平台提供了官方的 安装程序。对于中国大陆地区用户，可以前往 淘宝 Node.js 镜像 下载。 \n\n其它的安装方法： \n1. Windows：通过 nvs（推荐）或者 nvm 安装。 \n2. Mac：使用 Homebrew 或 MacPorts 安装。 \n3. Linux（DEB/RPM-based）：从 NodeSource 安装。 \n4. 其它：使用相应的软件包管理器进行安装，可以参考由 Node.js 提供的 指导。 \n\n对于 Mac 和 Linux 同样建议使用 nvs 或者 nvm，以避免可能会出现的权限问题。 \n\nWindows 用户使用 Node.js 官方安装程序时，请确保勾选 Add to PATH 选项（默认已勾选） \nFor Mac / Linux 用户如果在尝试安装 Hexo 的过程中出现 EACCES 权限错误，请遵循 由 npmjs 发布的指导 修复该问题。强烈建议 不要 使用 root、 sudo 等方法覆盖权限 \nLinux 如果您使用 Snap 来安装 Node.js，在 初始化 博客时您可能需要手动在目标文件夹中执行 。 npm install \n```\n\n> Git \n\n```\n1. Windows：下载并安装 git. \n2. Mac：使用 Homebrew, MacPorts 或者下载 安装程序。 \n3. Linux (Ubuntu, Debian)： \nsudo apt-get install git-core \nLinux (Fedora, Red Hat, CentOS)： \nsudo yum install git-core \n\nMac 用户如果在编译时可能会遇到问题，请先到 App Store 安装 Xcode，Xcode 完成后，启动并进入 Preferences -> Download -> Command Line Tools -> Install 安装命令行工具。\n\nWindows 用户对于中国大陆地区用户，可以前往淘宝 Git for Windows 镜像 下载 git 安装包。 查看下 Git、Node.js 版本，确保安装无误 git --version node -v和npm -v\n\n 顺便说一下，windows 在 git 安装完后，就可以直接使用 git bash 来敲命令行了，不用自带的 cmd，cmd 有点难用。 \n```\n\n> 安装 Hexo \n\n```\n进入 Hexo 的官网：Hexo就可以看到对于 Hexo 的详细介绍，直接下滑，然后点击 Get Started，即可进入 Hexo 使用介绍文档，也可以直接访问：https://hexo.io/docs/ 进入。 \n```\n\n---\n\n### 正式开始搭建\n---\n\n所有必备的应用程序安装完成后，即可使用` npm `安装` Hexo`。 \n\n* 首先我们需要新建一个项目目录，以我为例：我会在桌面的` Project `目录下新建一个` HexoBlog `文件夹用于存放改项目相关文件。\n``` \ncd Desktop/Project/ \nmkdir HexoBlog&&cd HexoBlog npm install -g hexo-cli \n```\n\n这个时候如果直接运行下面语句安装 Hexo，你可能会遇到`rollbackFailedOptional`。 \n> 这是因为网络问题（npm 的服务器位于国外下载慢），可以使用 cnpm（淘宝团队做的国内镜像）的获取镜像或者直接修改 npm的资源获取地址为国内的。 \n\n#### 解决方案\n\n* 安装 cnmp \n\n```\nnpm install -g cnpm --registry=https://registry.npm.taobao.org \n```\n\n* 直接修改 npm 资源获取地址（推荐） \n\n```\nnpm config set registry http://registry.npm.taobao.org \n```\n\n可能出现的问题：[npm WARN config global `--global`, `--local` are deprecated. Use `--location=global` instead ](http://www.kuazhi.com/post/305594.html)\n\n* 初始化一个 Hexo Blog \n> 前面已经准备好了所有相关环境，接下来我们就正式来初始化一个`Hexo`博客吧～初始化的命令格式为` hexo init <项目名称>`，这里我们暂且叫做` blog`。\n\n```\nhexo init blog \n```\n\n* 新建完成后，指定文件夹目录下有：\n\n```\n:node_modules: 依赖包 \n:public：存放生成的页面 \n:scaffolds：生成文章的一些模板 \n:source：用来存放你的文章 \n:themes：主题 \n:_config.yml: 博客的配置文件\n```\n\n* 初始化项目后，我们只需在本地执行下面命令即可在本地进行预览 \n\n```\ncd blog \nhexo s \n```\n\n* 首先我们需要进入到新建的项目目录下，然后执行 hexo s 即可启动项目，然后我们访问[127.0.0.1:4000](127.0.0.1:4000)或者[http://localhost:4000/](http://localhost:4000/)即可查看网站啦～ \n\n","source":"_posts/hexo-document.md","raw":"---\ntitle: 使用hexo搭建博客\ndate: 2022-08-19 15:23:09\ntags: hexo\ncategories: 学习\n---\n\n# Hexo 使用方法\n\n## 学习目标 \n\n### 知识目标： \n\n1. 通过学习，了解博客搭建常用的几种方式以及之间的区别 \n> 1. 第三方平台搭建 \n> 1. 静态网站生成页面，搭配`Github`展示 \n> 1. 管理系统`CMS`搭建 \n> 1. 手写前后端代码 \n2. 熟悉静态页面的生成技术 \n3. 学会最基本的`git`操作 \n \n### 能力目标： \n1. 实现个人博客的搭建 \n2. 能熟练在`Github/Gitee`上部署页面 \n \n---\n\n## 学习流程 \n\n---\n\n### 1. 工具基本介绍 \n\n#### 1. Hexo 介绍 \n\n`Hexo`是一个快速、简单且功能强大的博客框架。你用`Markdown`（或其他标记语言）写帖子，`Hexo` 会在几秒钟内生成带有漂亮主题的静态文件。 \n\n#### 2. Gitee 介绍 \n\n码云`Gitee`是开源中国社区在 2013 年推出的基于`Git`的代码托管服务，专为开发者提供稳定、高效、安全的云端软件开发协作平台，无论是个人、团队、或是企业，都能够用`Gitee`实现代码托管、项目管理、协作开发，更有代码质量分析、项目演示等丰富功能。 \n\n`Gitee`目前已经成为国内最大的代码托管平台，致力于为国内开发者提供优质稳定的托管服务，与 `GitHub`类似区别在于码云国内，`GitHub`国外。 \n\n#### 3. Git 介绍 \n\n`Git`是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。也就是用来管理你的`hexo`博客文章，上传到` GitHub `的工具。`Git `非常强大，我觉得建议每个人都去了解一下。 \n\n#### 4. Node.js 介绍 \n\n`Node.js `是一个能够在服务区端运行` JavaScript `的开放源代码、跨平台`JavaScript `运行环\n境。 \n\n`Hexo `是基于` node.js `编写的，所以需要安装一下` nodeJs `和里面的` npm `工具。 \n\n---\n\n### 2. 整体搭建流程 \n\n---\n\n### 开始搭建 \n 1. 基础准备 \n> 1. Gitee 的注册 \n\n> 2. Git、Node.js 安装 \n\n安装` Hexo `相当简单，只需要先安装下列应用程序即可：\n\n> Node.js (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本) \n\n```\nNode.js 为大多数平台提供了官方的 安装程序。对于中国大陆地区用户，可以前往 淘宝 Node.js 镜像 下载。 \n\n其它的安装方法： \n1. Windows：通过 nvs（推荐）或者 nvm 安装。 \n2. Mac：使用 Homebrew 或 MacPorts 安装。 \n3. Linux（DEB/RPM-based）：从 NodeSource 安装。 \n4. 其它：使用相应的软件包管理器进行安装，可以参考由 Node.js 提供的 指导。 \n\n对于 Mac 和 Linux 同样建议使用 nvs 或者 nvm，以避免可能会出现的权限问题。 \n\nWindows 用户使用 Node.js 官方安装程序时，请确保勾选 Add to PATH 选项（默认已勾选） \nFor Mac / Linux 用户如果在尝试安装 Hexo 的过程中出现 EACCES 权限错误，请遵循 由 npmjs 发布的指导 修复该问题。强烈建议 不要 使用 root、 sudo 等方法覆盖权限 \nLinux 如果您使用 Snap 来安装 Node.js，在 初始化 博客时您可能需要手动在目标文件夹中执行 。 npm install \n```\n\n> Git \n\n```\n1. Windows：下载并安装 git. \n2. Mac：使用 Homebrew, MacPorts 或者下载 安装程序。 \n3. Linux (Ubuntu, Debian)： \nsudo apt-get install git-core \nLinux (Fedora, Red Hat, CentOS)： \nsudo yum install git-core \n\nMac 用户如果在编译时可能会遇到问题，请先到 App Store 安装 Xcode，Xcode 完成后，启动并进入 Preferences -> Download -> Command Line Tools -> Install 安装命令行工具。\n\nWindows 用户对于中国大陆地区用户，可以前往淘宝 Git for Windows 镜像 下载 git 安装包。 查看下 Git、Node.js 版本，确保安装无误 git --version node -v和npm -v\n\n 顺便说一下，windows 在 git 安装完后，就可以直接使用 git bash 来敲命令行了，不用自带的 cmd，cmd 有点难用。 \n```\n\n> 安装 Hexo \n\n```\n进入 Hexo 的官网：Hexo就可以看到对于 Hexo 的详细介绍，直接下滑，然后点击 Get Started，即可进入 Hexo 使用介绍文档，也可以直接访问：https://hexo.io/docs/ 进入。 \n```\n\n---\n\n### 正式开始搭建\n---\n\n所有必备的应用程序安装完成后，即可使用` npm `安装` Hexo`。 \n\n* 首先我们需要新建一个项目目录，以我为例：我会在桌面的` Project `目录下新建一个` HexoBlog `文件夹用于存放改项目相关文件。\n``` \ncd Desktop/Project/ \nmkdir HexoBlog&&cd HexoBlog npm install -g hexo-cli \n```\n\n这个时候如果直接运行下面语句安装 Hexo，你可能会遇到`rollbackFailedOptional`。 \n> 这是因为网络问题（npm 的服务器位于国外下载慢），可以使用 cnpm（淘宝团队做的国内镜像）的获取镜像或者直接修改 npm的资源获取地址为国内的。 \n\n#### 解决方案\n\n* 安装 cnmp \n\n```\nnpm install -g cnpm --registry=https://registry.npm.taobao.org \n```\n\n* 直接修改 npm 资源获取地址（推荐） \n\n```\nnpm config set registry http://registry.npm.taobao.org \n```\n\n可能出现的问题：[npm WARN config global `--global`, `--local` are deprecated. Use `--location=global` instead ](http://www.kuazhi.com/post/305594.html)\n\n* 初始化一个 Hexo Blog \n> 前面已经准备好了所有相关环境，接下来我们就正式来初始化一个`Hexo`博客吧～初始化的命令格式为` hexo init <项目名称>`，这里我们暂且叫做` blog`。\n\n```\nhexo init blog \n```\n\n* 新建完成后，指定文件夹目录下有：\n\n```\n:node_modules: 依赖包 \n:public：存放生成的页面 \n:scaffolds：生成文章的一些模板 \n:source：用来存放你的文章 \n:themes：主题 \n:_config.yml: 博客的配置文件\n```\n\n* 初始化项目后，我们只需在本地执行下面命令即可在本地进行预览 \n\n```\ncd blog \nhexo s \n```\n\n* 首先我们需要进入到新建的项目目录下，然后执行 hexo s 即可启动项目，然后我们访问[127.0.0.1:4000](127.0.0.1:4000)或者[http://localhost:4000/](http://localhost:4000/)即可查看网站啦～ \n\n","slug":"hexo-document","published":1,"updated":"2023-07-23T14:19:11.095Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkjdd1bd000s98aj9iiwhmc2","content":"<h1 id=\"Hexo-使用方法\"><a href=\"#Hexo-使用方法\" class=\"headerlink\" title=\"Hexo 使用方法\"></a>Hexo 使用方法</h1><h2 id=\"学习目标\"><a href=\"#学习目标\" class=\"headerlink\" title=\"学习目标\"></a>学习目标</h2><h3 id=\"知识目标：\"><a href=\"#知识目标：\" class=\"headerlink\" title=\"知识目标：\"></a>知识目标：</h3><ol>\n<li>通过学习，了解博客搭建常用的几种方式以及之间的区别 <blockquote>\n<ol>\n<li>第三方平台搭建 </li>\n<li>静态网站生成页面，搭配<code>Github</code>展示 </li>\n<li>管理系统<code>CMS</code>搭建 </li>\n<li>手写前后端代码</li>\n</ol>\n</blockquote>\n</li>\n<li>熟悉静态页面的生成技术 </li>\n<li>学会最基本的<code>git</code>操作</li>\n</ol>\n<h3 id=\"能力目标：\"><a href=\"#能力目标：\" class=\"headerlink\" title=\"能力目标：\"></a>能力目标：</h3><ol>\n<li>实现个人博客的搭建 </li>\n<li>能熟练在<code>Github/Gitee</code>上部署页面</li>\n</ol>\n<hr>\n<h2 id=\"学习流程\"><a href=\"#学习流程\" class=\"headerlink\" title=\"学习流程\"></a>学习流程</h2><hr>\n<h3 id=\"1-工具基本介绍\"><a href=\"#1-工具基本介绍\" class=\"headerlink\" title=\"1. 工具基本介绍\"></a>1. 工具基本介绍</h3><h4 id=\"1-Hexo-介绍\"><a href=\"#1-Hexo-介绍\" class=\"headerlink\" title=\"1. Hexo 介绍\"></a>1. Hexo 介绍</h4><p><code>Hexo</code>是一个快速、简单且功能强大的博客框架。你用<code>Markdown</code>（或其他标记语言）写帖子，<code>Hexo</code> 会在几秒钟内生成带有漂亮主题的静态文件。 </p>\n<h4 id=\"2-Gitee-介绍\"><a href=\"#2-Gitee-介绍\" class=\"headerlink\" title=\"2. Gitee 介绍\"></a>2. Gitee 介绍</h4><p>码云<code>Gitee</code>是开源中国社区在 2013 年推出的基于<code>Git</code>的代码托管服务，专为开发者提供稳定、高效、安全的云端软件开发协作平台，无论是个人、团队、或是企业，都能够用<code>Gitee</code>实现代码托管、项目管理、协作开发，更有代码质量分析、项目演示等丰富功能。 </p>\n<p><code>Gitee</code>目前已经成为国内最大的代码托管平台，致力于为国内开发者提供优质稳定的托管服务，与 <code>GitHub</code>类似区别在于码云国内，<code>GitHub</code>国外。 </p>\n<h4 id=\"3-Git-介绍\"><a href=\"#3-Git-介绍\" class=\"headerlink\" title=\"3. Git 介绍\"></a>3. Git 介绍</h4><p><code>Git</code>是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。也就是用来管理你的<code>hexo</code>博客文章，上传到<code>GitHub</code>的工具。<code>Git </code>非常强大，我觉得建议每个人都去了解一下。 </p>\n<h4 id=\"4-Node-js-介绍\"><a href=\"#4-Node-js-介绍\" class=\"headerlink\" title=\"4. Node.js 介绍\"></a>4. Node.js 介绍</h4><p><code>Node.js </code>是一个能够在服务区端运行<code>JavaScript</code>的开放源代码、跨平台<code>JavaScript </code>运行环<br>境。 </p>\n<p><code>Hexo </code>是基于<code>node.js</code>编写的，所以需要安装一下<code>nodeJs</code>和里面的<code>npm</code>工具。 </p>\n<hr>\n<h3 id=\"2-整体搭建流程\"><a href=\"#2-整体搭建流程\" class=\"headerlink\" title=\"2. 整体搭建流程\"></a>2. 整体搭建流程</h3><hr>\n<h3 id=\"开始搭建\"><a href=\"#开始搭建\" class=\"headerlink\" title=\"开始搭建\"></a>开始搭建</h3><ol>\n<li>基础准备 <blockquote>\n<ol>\n<li>Gitee 的注册</li>\n</ol>\n</blockquote>\n</li>\n</ol>\n<blockquote>\n<ol start=\"2\">\n<li>Git、Node.js 安装</li>\n</ol>\n</blockquote>\n<p>安装<code>Hexo</code>相当简单，只需要先安装下列应用程序即可：</p>\n<blockquote>\n<p>Node.js (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本) </p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Node.js 为大多数平台提供了官方的 安装程序。对于中国大陆地区用户，可以前往 淘宝 Node.js 镜像 下载。 </span><br><span class=\"line\"></span><br><span class=\"line\">其它的安装方法： </span><br><span class=\"line\">1. Windows：通过 nvs（推荐）或者 nvm 安装。 </span><br><span class=\"line\">2. Mac：使用 Homebrew 或 MacPorts 安装。 </span><br><span class=\"line\">3. Linux（DEB/RPM-based）：从 NodeSource 安装。 </span><br><span class=\"line\">4. 其它：使用相应的软件包管理器进行安装，可以参考由 Node.js 提供的 指导。 </span><br><span class=\"line\"></span><br><span class=\"line\">对于 Mac 和 Linux 同样建议使用 nvs 或者 nvm，以避免可能会出现的权限问题。 </span><br><span class=\"line\"></span><br><span class=\"line\">Windows 用户使用 Node.js 官方安装程序时，请确保勾选 Add to PATH 选项（默认已勾选） </span><br><span class=\"line\">For Mac / Linux 用户如果在尝试安装 Hexo 的过程中出现 EACCES 权限错误，请遵循 由 npmjs 发布的指导 修复该问题。强烈建议 不要 使用 root、 sudo 等方法覆盖权限 </span><br><span class=\"line\">Linux 如果您使用 Snap 来安装 Node.js，在 初始化 博客时您可能需要手动在目标文件夹中执行 。 npm install </span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Git </p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. Windows：下载并安装 git. </span><br><span class=\"line\">2. Mac：使用 Homebrew, MacPorts 或者下载 安装程序。 </span><br><span class=\"line\">3. Linux (Ubuntu, Debian)： </span><br><span class=\"line\">sudo apt-get install git-core </span><br><span class=\"line\">Linux (Fedora, Red Hat, CentOS)： </span><br><span class=\"line\">sudo yum install git-core </span><br><span class=\"line\"></span><br><span class=\"line\">Mac 用户如果在编译时可能会遇到问题，请先到 App Store 安装 Xcode，Xcode 完成后，启动并进入 Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install 安装命令行工具。</span><br><span class=\"line\"></span><br><span class=\"line\">Windows 用户对于中国大陆地区用户，可以前往淘宝 Git for Windows 镜像 下载 git 安装包。 查看下 Git、Node.js 版本，确保安装无误 git --version node -v和npm -v</span><br><span class=\"line\"></span><br><span class=\"line\"> 顺便说一下，windows 在 git 安装完后，就可以直接使用 git bash 来敲命令行了，不用自带的 cmd，cmd 有点难用。 </span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>安装 Hexo </p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">进入 Hexo 的官网：Hexo就可以看到对于 Hexo 的详细介绍，直接下滑，然后点击 Get Started，即可进入 Hexo 使用介绍文档，也可以直接访问：https://hexo.io/docs/ 进入。 </span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"正式开始搭建\"><a href=\"#正式开始搭建\" class=\"headerlink\" title=\"正式开始搭建\"></a>正式开始搭建</h3><hr>\n<p>所有必备的应用程序安装完成后，即可使用<code>npm</code>安装<code> Hexo</code>。 </p>\n<ul>\n<li>首先我们需要新建一个项目目录，以我为例：我会在桌面的<code>Project</code>目录下新建一个<code>HexoBlog</code>文件夹用于存放改项目相关文件。<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd Desktop/Project/ </span><br><span class=\"line\">mkdir HexoBlog&amp;&amp;cd HexoBlog npm install -g hexo-cli </span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>这个时候如果直接运行下面语句安装 Hexo，你可能会遇到<code>rollbackFailedOptional</code>。 </p>\n<blockquote>\n<p>这是因为网络问题（npm 的服务器位于国外下载慢），可以使用 cnpm（淘宝团队做的国内镜像）的获取镜像或者直接修改 npm的资源获取地址为国内的。 </p>\n</blockquote>\n<h4 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><ul>\n<li>安装 cnmp</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>直接修改 npm 资源获取地址（推荐）</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set registry http://registry.npm.taobao.org </span><br></pre></td></tr></table></figure>\n\n<p>可能出现的问题：<a href=\"http://www.kuazhi.com/post/305594.html\">npm WARN config global <code>--global</code>, <code>--local</code> are deprecated. Use <code>--location=global</code> instead </a></p>\n<ul>\n<li>初始化一个 Hexo Blog <blockquote>\n<p>前面已经准备好了所有相关环境，接下来我们就正式来初始化一个<code>Hexo</code>博客吧～初始化的命令格式为<code> hexo init &lt;项目名称&gt;</code>，这里我们暂且叫做<code> blog</code>。</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init blog </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>新建完成后，指定文件夹目录下有：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:node_modules: 依赖包 </span><br><span class=\"line\">:public：存放生成的页面 </span><br><span class=\"line\">:scaffolds：生成文章的一些模板 </span><br><span class=\"line\">:source：用来存放你的文章 </span><br><span class=\"line\">:themes：主题 </span><br><span class=\"line\">:_config.yml: 博客的配置文件</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>初始化项目后，我们只需在本地执行下面命令即可在本地进行预览</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd blog </span><br><span class=\"line\">hexo s </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>首先我们需要进入到新建的项目目录下，然后执行 hexo s 即可启动项目，然后我们访问<a href=\"127.0.0.1:4000\">127.0.0.1:4000</a>或者<a href=\"http://localhost:4000/\">http://localhost:4000/</a>即可查看网站啦～</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Hexo-使用方法\"><a href=\"#Hexo-使用方法\" class=\"headerlink\" title=\"Hexo 使用方法\"></a>Hexo 使用方法</h1><h2 id=\"学习目标\"><a href=\"#学习目标\" class=\"headerlink\" title=\"学习目标\"></a>学习目标</h2><h3 id=\"知识目标：\"><a href=\"#知识目标：\" class=\"headerlink\" title=\"知识目标：\"></a>知识目标：</h3><ol>\n<li>通过学习，了解博客搭建常用的几种方式以及之间的区别 <blockquote>\n<ol>\n<li>第三方平台搭建 </li>\n<li>静态网站生成页面，搭配<code>Github</code>展示 </li>\n<li>管理系统<code>CMS</code>搭建 </li>\n<li>手写前后端代码</li>\n</ol>\n</blockquote>\n</li>\n<li>熟悉静态页面的生成技术 </li>\n<li>学会最基本的<code>git</code>操作</li>\n</ol>\n<h3 id=\"能力目标：\"><a href=\"#能力目标：\" class=\"headerlink\" title=\"能力目标：\"></a>能力目标：</h3><ol>\n<li>实现个人博客的搭建 </li>\n<li>能熟练在<code>Github/Gitee</code>上部署页面</li>\n</ol>\n<hr>\n<h2 id=\"学习流程\"><a href=\"#学习流程\" class=\"headerlink\" title=\"学习流程\"></a>学习流程</h2><hr>\n<h3 id=\"1-工具基本介绍\"><a href=\"#1-工具基本介绍\" class=\"headerlink\" title=\"1. 工具基本介绍\"></a>1. 工具基本介绍</h3><h4 id=\"1-Hexo-介绍\"><a href=\"#1-Hexo-介绍\" class=\"headerlink\" title=\"1. Hexo 介绍\"></a>1. Hexo 介绍</h4><p><code>Hexo</code>是一个快速、简单且功能强大的博客框架。你用<code>Markdown</code>（或其他标记语言）写帖子，<code>Hexo</code> 会在几秒钟内生成带有漂亮主题的静态文件。 </p>\n<h4 id=\"2-Gitee-介绍\"><a href=\"#2-Gitee-介绍\" class=\"headerlink\" title=\"2. Gitee 介绍\"></a>2. Gitee 介绍</h4><p>码云<code>Gitee</code>是开源中国社区在 2013 年推出的基于<code>Git</code>的代码托管服务，专为开发者提供稳定、高效、安全的云端软件开发协作平台，无论是个人、团队、或是企业，都能够用<code>Gitee</code>实现代码托管、项目管理、协作开发，更有代码质量分析、项目演示等丰富功能。 </p>\n<p><code>Gitee</code>目前已经成为国内最大的代码托管平台，致力于为国内开发者提供优质稳定的托管服务，与 <code>GitHub</code>类似区别在于码云国内，<code>GitHub</code>国外。 </p>\n<h4 id=\"3-Git-介绍\"><a href=\"#3-Git-介绍\" class=\"headerlink\" title=\"3. Git 介绍\"></a>3. Git 介绍</h4><p><code>Git</code>是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。也就是用来管理你的<code>hexo</code>博客文章，上传到<code>GitHub</code>的工具。<code>Git </code>非常强大，我觉得建议每个人都去了解一下。 </p>\n<h4 id=\"4-Node-js-介绍\"><a href=\"#4-Node-js-介绍\" class=\"headerlink\" title=\"4. Node.js 介绍\"></a>4. Node.js 介绍</h4><p><code>Node.js </code>是一个能够在服务区端运行<code>JavaScript</code>的开放源代码、跨平台<code>JavaScript </code>运行环<br>境。 </p>\n<p><code>Hexo </code>是基于<code>node.js</code>编写的，所以需要安装一下<code>nodeJs</code>和里面的<code>npm</code>工具。 </p>\n<hr>\n<h3 id=\"2-整体搭建流程\"><a href=\"#2-整体搭建流程\" class=\"headerlink\" title=\"2. 整体搭建流程\"></a>2. 整体搭建流程</h3><hr>\n<h3 id=\"开始搭建\"><a href=\"#开始搭建\" class=\"headerlink\" title=\"开始搭建\"></a>开始搭建</h3><ol>\n<li>基础准备 <blockquote>\n<ol>\n<li>Gitee 的注册</li>\n</ol>\n</blockquote>\n</li>\n</ol>\n<blockquote>\n<ol start=\"2\">\n<li>Git、Node.js 安装</li>\n</ol>\n</blockquote>\n<p>安装<code>Hexo</code>相当简单，只需要先安装下列应用程序即可：</p>\n<blockquote>\n<p>Node.js (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本) </p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Node.js 为大多数平台提供了官方的 安装程序。对于中国大陆地区用户，可以前往 淘宝 Node.js 镜像 下载。 </span><br><span class=\"line\"></span><br><span class=\"line\">其它的安装方法： </span><br><span class=\"line\">1. Windows：通过 nvs（推荐）或者 nvm 安装。 </span><br><span class=\"line\">2. Mac：使用 Homebrew 或 MacPorts 安装。 </span><br><span class=\"line\">3. Linux（DEB/RPM-based）：从 NodeSource 安装。 </span><br><span class=\"line\">4. 其它：使用相应的软件包管理器进行安装，可以参考由 Node.js 提供的 指导。 </span><br><span class=\"line\"></span><br><span class=\"line\">对于 Mac 和 Linux 同样建议使用 nvs 或者 nvm，以避免可能会出现的权限问题。 </span><br><span class=\"line\"></span><br><span class=\"line\">Windows 用户使用 Node.js 官方安装程序时，请确保勾选 Add to PATH 选项（默认已勾选） </span><br><span class=\"line\">For Mac / Linux 用户如果在尝试安装 Hexo 的过程中出现 EACCES 权限错误，请遵循 由 npmjs 发布的指导 修复该问题。强烈建议 不要 使用 root、 sudo 等方法覆盖权限 </span><br><span class=\"line\">Linux 如果您使用 Snap 来安装 Node.js，在 初始化 博客时您可能需要手动在目标文件夹中执行 。 npm install </span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Git </p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. Windows：下载并安装 git. </span><br><span class=\"line\">2. Mac：使用 Homebrew, MacPorts 或者下载 安装程序。 </span><br><span class=\"line\">3. Linux (Ubuntu, Debian)： </span><br><span class=\"line\">sudo apt-get install git-core </span><br><span class=\"line\">Linux (Fedora, Red Hat, CentOS)： </span><br><span class=\"line\">sudo yum install git-core </span><br><span class=\"line\"></span><br><span class=\"line\">Mac 用户如果在编译时可能会遇到问题，请先到 App Store 安装 Xcode，Xcode 完成后，启动并进入 Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install 安装命令行工具。</span><br><span class=\"line\"></span><br><span class=\"line\">Windows 用户对于中国大陆地区用户，可以前往淘宝 Git for Windows 镜像 下载 git 安装包。 查看下 Git、Node.js 版本，确保安装无误 git --version node -v和npm -v</span><br><span class=\"line\"></span><br><span class=\"line\"> 顺便说一下，windows 在 git 安装完后，就可以直接使用 git bash 来敲命令行了，不用自带的 cmd，cmd 有点难用。 </span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>安装 Hexo </p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">进入 Hexo 的官网：Hexo就可以看到对于 Hexo 的详细介绍，直接下滑，然后点击 Get Started，即可进入 Hexo 使用介绍文档，也可以直接访问：https://hexo.io/docs/ 进入。 </span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"正式开始搭建\"><a href=\"#正式开始搭建\" class=\"headerlink\" title=\"正式开始搭建\"></a>正式开始搭建</h3><hr>\n<p>所有必备的应用程序安装完成后，即可使用<code>npm</code>安装<code> Hexo</code>。 </p>\n<ul>\n<li>首先我们需要新建一个项目目录，以我为例：我会在桌面的<code>Project</code>目录下新建一个<code>HexoBlog</code>文件夹用于存放改项目相关文件。<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd Desktop/Project/ </span><br><span class=\"line\">mkdir HexoBlog&amp;&amp;cd HexoBlog npm install -g hexo-cli </span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>这个时候如果直接运行下面语句安装 Hexo，你可能会遇到<code>rollbackFailedOptional</code>。 </p>\n<blockquote>\n<p>这是因为网络问题（npm 的服务器位于国外下载慢），可以使用 cnpm（淘宝团队做的国内镜像）的获取镜像或者直接修改 npm的资源获取地址为国内的。 </p>\n</blockquote>\n<h4 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><ul>\n<li>安装 cnmp</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>直接修改 npm 资源获取地址（推荐）</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set registry http://registry.npm.taobao.org </span><br></pre></td></tr></table></figure>\n\n<p>可能出现的问题：<a href=\"http://www.kuazhi.com/post/305594.html\">npm WARN config global <code>--global</code>, <code>--local</code> are deprecated. Use <code>--location=global</code> instead </a></p>\n<ul>\n<li>初始化一个 Hexo Blog <blockquote>\n<p>前面已经准备好了所有相关环境，接下来我们就正式来初始化一个<code>Hexo</code>博客吧～初始化的命令格式为<code> hexo init &lt;项目名称&gt;</code>，这里我们暂且叫做<code> blog</code>。</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init blog </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>新建完成后，指定文件夹目录下有：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:node_modules: 依赖包 </span><br><span class=\"line\">:public：存放生成的页面 </span><br><span class=\"line\">:scaffolds：生成文章的一些模板 </span><br><span class=\"line\">:source：用来存放你的文章 </span><br><span class=\"line\">:themes：主题 </span><br><span class=\"line\">:_config.yml: 博客的配置文件</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>初始化项目后，我们只需在本地执行下面命令即可在本地进行预览</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd blog </span><br><span class=\"line\">hexo s </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>首先我们需要进入到新建的项目目录下，然后执行 hexo s 即可启动项目，然后我们访问<a href=\"127.0.0.1:4000\">127.0.0.1:4000</a>或者<a href=\"http://localhost:4000/\">http://localhost:4000/</a>即可查看网站啦～</li>\n</ul>\n"},{"title":"教案模板","date":"2022-10-26T11:04:11.000Z","_content":"\n暂时没写好。。。\n\n\n\n\n\n\n\n\n\n","source":"_posts/learn-jiaoanmuban.md","raw":"---\ntitle: 教案模板\ndate: 2022-10-26 19:04:11\ntags: learn\ncategories: 学习\n---\n\n暂时没写好。。。\n\n\n\n\n\n\n\n\n\n","slug":"learn-jiaoanmuban","published":1,"updated":"2023-07-23T14:19:13.992Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkjdd1be000t98ajeqle2yfg","content":"<p>暂时没写好。。。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>暂时没写好。。。</p>\n"},{"title":"在linux环境中安装git环境","date":"2022-10-19T11:03:09.000Z","_content":"# Linux下Git和GitHub使用方法总结\n\n## 1. Linux下Git和GitHub环境的搭建\n\n- 第一步： 安装Git，使用命令 “sudo apt-get install git”\n\n- 第二步： 创建GitHub帐号\n\n- 第三步： 生成ssh key，使用命令 “ssh-keygen -t rsa -C \"your_email@youremail.com\"”，your_email是你的email\n\n- 第四步： 回到github，进入Account Settings，左边选择SSH Keys，Add SSH Key,title随便填，粘贴key。\n\n- 第五步： 测试ssh key是否成功，使用命令“ssh -T git@github.com”，如果出现You’ve successfully authenticated, but GitHub does not provide shell access 。这就表示已成功连上github。\n\n第六步： 配置Git的配置文件，username和email\n\ngit config --global user.name \"your name\" //配置用户名\n\ngit config --global user.email \"your email\" //配置email\n\n \n\n2 利用Git从本地上传到GitHub\n\n第一步： 进入要所要上传文件的目录输入命令 “git init”\n\n第二步： 创建一个本地仓库origin，使用命令 “git remote add origin git@github.com:yourName/yourRepo.git”\nyouname是你的GitHub的用户名，yourRepo是你要上传到GitHub的仓库\n\n第三步： 比如你要添加一个文件xxx到本地仓库，使用命令 “git add xxx”，可以使用“git add .”自动判断添加哪些文件\n\n然后把这个添加提交到本地的仓库，使用命令 ”git commit -m ”说明这次的提交“ “\n\n最后把本地仓库origin提交到远程的GitHub仓库，使用命令 ”git push origin master“\n\n \n\n3 从GitHub克隆项目到本地\n\n第一步： 到GitHub的某个仓库，然后复制右边的有个“HTTPS clone url”\n\n第二步： 回到要存放的目录下，使用命令 \"git clone https://github.com/chenguolin/scrapy.git\"，红色的url只是一个例子\n\n第三步： 如果本地的版本不是最新的，可以使用命令 “git fetch origin”，origin是本地仓库\n\n第四步： 把更新的内容合并到本地分支，可以使用命令 “git merge origin/master”\n\n \n\n如果你不想手动去合并，那么你可以使用： git pull <本地仓库> master // 这个命令可以拉去最新版本并自动合并\n\n \n\n4 GitHub的分支管理\n\n创建\n\n1 创建一个本地分支： git branch <新分支名字>\n\n2 将本地分支同步到GitHub上面： git push <本地仓库名> <新分支名>\n\n3 切换到新建立的分支： git checkout <新分支名>\n\n4 为你的分支加入一个新的远程端： git remote add <远程端名字> <地址>\n\n5 查看当前仓库有几个分支: git branch\n\n删除\n\n1 从本地删除一个分支： git branch -d <分支名称>\n\n2 同步到GitHub上面删除这个分支： git push <本地仓库名> :<GitHub端分支>\n\n \n\n5 常见错误\n\n1 如果出现报错为ERROR: Repository not found.fatal: The remote end hung up unexpectedly则代表你的 origin 的url 链接有误，可能是创建错误，也可能是这个 git@github.com:xxx/new-project.git url 指定不正确。重新创建。\n\nGit 的详细介绍：请点这里https://www.linuxidc.com/Linux/2013-10/91054.htm\nGit 的下载地址：请点这里https://www.linuxidc.com/down.aspx?id=1022\n\n推荐阅读：\n\n如何在 GitHub 建立组织 http://www.linuxidc.com/Linux/2013-08/88197.htm\n\nGitHub Linux下使用方法 http://www.linuxidc.com/Linux/2013-06/86417.htm\n\nWindows下Eclipse搭建GitHub开发环境图文教程 http://www.linuxidc.com/Linux/2013-06/85372.htm\n\nR语言 3.0.1 源码已经提交到 GitHub http://www.linuxidc.com/Linux/2013-05/84425.htm\n\nGit权威指南 PDF高清中文版 http://www.linuxidc.com/Linux/2013-10/91053.htm\n\nlinux","source":"_posts/linux-git.md","raw":"---\ntitle: 在linux环境中安装git环境\ndate: 2022-10-19 19:03:09\ntags: linux\ncategories: 系统\n---\n# Linux下Git和GitHub使用方法总结\n\n## 1. Linux下Git和GitHub环境的搭建\n\n- 第一步： 安装Git，使用命令 “sudo apt-get install git”\n\n- 第二步： 创建GitHub帐号\n\n- 第三步： 生成ssh key，使用命令 “ssh-keygen -t rsa -C \"your_email@youremail.com\"”，your_email是你的email\n\n- 第四步： 回到github，进入Account Settings，左边选择SSH Keys，Add SSH Key,title随便填，粘贴key。\n\n- 第五步： 测试ssh key是否成功，使用命令“ssh -T git@github.com”，如果出现You’ve successfully authenticated, but GitHub does not provide shell access 。这就表示已成功连上github。\n\n第六步： 配置Git的配置文件，username和email\n\ngit config --global user.name \"your name\" //配置用户名\n\ngit config --global user.email \"your email\" //配置email\n\n \n\n2 利用Git从本地上传到GitHub\n\n第一步： 进入要所要上传文件的目录输入命令 “git init”\n\n第二步： 创建一个本地仓库origin，使用命令 “git remote add origin git@github.com:yourName/yourRepo.git”\nyouname是你的GitHub的用户名，yourRepo是你要上传到GitHub的仓库\n\n第三步： 比如你要添加一个文件xxx到本地仓库，使用命令 “git add xxx”，可以使用“git add .”自动判断添加哪些文件\n\n然后把这个添加提交到本地的仓库，使用命令 ”git commit -m ”说明这次的提交“ “\n\n最后把本地仓库origin提交到远程的GitHub仓库，使用命令 ”git push origin master“\n\n \n\n3 从GitHub克隆项目到本地\n\n第一步： 到GitHub的某个仓库，然后复制右边的有个“HTTPS clone url”\n\n第二步： 回到要存放的目录下，使用命令 \"git clone https://github.com/chenguolin/scrapy.git\"，红色的url只是一个例子\n\n第三步： 如果本地的版本不是最新的，可以使用命令 “git fetch origin”，origin是本地仓库\n\n第四步： 把更新的内容合并到本地分支，可以使用命令 “git merge origin/master”\n\n \n\n如果你不想手动去合并，那么你可以使用： git pull <本地仓库> master // 这个命令可以拉去最新版本并自动合并\n\n \n\n4 GitHub的分支管理\n\n创建\n\n1 创建一个本地分支： git branch <新分支名字>\n\n2 将本地分支同步到GitHub上面： git push <本地仓库名> <新分支名>\n\n3 切换到新建立的分支： git checkout <新分支名>\n\n4 为你的分支加入一个新的远程端： git remote add <远程端名字> <地址>\n\n5 查看当前仓库有几个分支: git branch\n\n删除\n\n1 从本地删除一个分支： git branch -d <分支名称>\n\n2 同步到GitHub上面删除这个分支： git push <本地仓库名> :<GitHub端分支>\n\n \n\n5 常见错误\n\n1 如果出现报错为ERROR: Repository not found.fatal: The remote end hung up unexpectedly则代表你的 origin 的url 链接有误，可能是创建错误，也可能是这个 git@github.com:xxx/new-project.git url 指定不正确。重新创建。\n\nGit 的详细介绍：请点这里https://www.linuxidc.com/Linux/2013-10/91054.htm\nGit 的下载地址：请点这里https://www.linuxidc.com/down.aspx?id=1022\n\n推荐阅读：\n\n如何在 GitHub 建立组织 http://www.linuxidc.com/Linux/2013-08/88197.htm\n\nGitHub Linux下使用方法 http://www.linuxidc.com/Linux/2013-06/86417.htm\n\nWindows下Eclipse搭建GitHub开发环境图文教程 http://www.linuxidc.com/Linux/2013-06/85372.htm\n\nR语言 3.0.1 源码已经提交到 GitHub http://www.linuxidc.com/Linux/2013-05/84425.htm\n\nGit权威指南 PDF高清中文版 http://www.linuxidc.com/Linux/2013-10/91053.htm\n\nlinux","slug":"linux-git","published":1,"updated":"2023-07-23T14:19:12.244Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkjdd1bg000w98ajcbjz9f3d","content":"<h1 id=\"Linux下Git和GitHub使用方法总结\"><a href=\"#Linux下Git和GitHub使用方法总结\" class=\"headerlink\" title=\"Linux下Git和GitHub使用方法总结\"></a>Linux下Git和GitHub使用方法总结</h1><h2 id=\"1-Linux下Git和GitHub环境的搭建\"><a href=\"#1-Linux下Git和GitHub环境的搭建\" class=\"headerlink\" title=\"1. Linux下Git和GitHub环境的搭建\"></a>1. Linux下Git和GitHub环境的搭建</h2><ul>\n<li><p>第一步： 安装Git，使用命令 “sudo apt-get install git”</p>\n</li>\n<li><p>第二步： 创建GitHub帐号</p>\n</li>\n<li><p>第三步： 生成ssh key，使用命令 “ssh-keygen -t rsa -C “<a href=\"mailto:&#x79;&#111;&#x75;&#114;&#95;&#101;&#x6d;&#97;&#x69;&#108;&#x40;&#121;&#111;&#x75;&#x72;&#x65;&#x6d;&#97;&#105;&#x6c;&#x2e;&#99;&#111;&#x6d;\">&#x79;&#111;&#x75;&#114;&#95;&#101;&#x6d;&#97;&#x69;&#108;&#x40;&#121;&#111;&#x75;&#x72;&#x65;&#x6d;&#97;&#105;&#x6c;&#x2e;&#99;&#111;&#x6d;</a>“”，your_email是你的email</p>\n</li>\n<li><p>第四步： 回到github，进入Account Settings，左边选择SSH Keys，Add SSH Key,title随便填，粘贴key。</p>\n</li>\n<li><p>第五步： 测试ssh key是否成功，使用命令“ssh -T <a href=\"mailto:&#x67;&#105;&#x74;&#x40;&#x67;&#105;&#116;&#x68;&#117;&#98;&#46;&#99;&#111;&#109;\">&#x67;&#105;&#x74;&#x40;&#x67;&#105;&#116;&#x68;&#117;&#98;&#46;&#99;&#111;&#109;</a>”，如果出现You’ve successfully authenticated, but GitHub does not provide shell access 。这就表示已成功连上github。</p>\n</li>\n</ul>\n<p>第六步： 配置Git的配置文件，username和email</p>\n<p>git config –global user.name “your name” &#x2F;&#x2F;配置用户名</p>\n<p>git config –global user.email “your email” &#x2F;&#x2F;配置email</p>\n<p>2 利用Git从本地上传到GitHub</p>\n<p>第一步： 进入要所要上传文件的目录输入命令 “git init”</p>\n<p>第二步： 创建一个本地仓库origin，使用命令 “git remote add origin <a href=\"mailto:&#103;&#105;&#116;&#64;&#x67;&#x69;&#x74;&#104;&#x75;&#98;&#46;&#x63;&#x6f;&#109;\">&#103;&#105;&#116;&#64;&#x67;&#x69;&#x74;&#104;&#x75;&#98;&#46;&#x63;&#x6f;&#109;</a>:yourName&#x2F;yourRepo.git”<br>youname是你的GitHub的用户名，yourRepo是你要上传到GitHub的仓库</p>\n<p>第三步： 比如你要添加一个文件xxx到本地仓库，使用命令 “git add xxx”，可以使用“git add .”自动判断添加哪些文件</p>\n<p>然后把这个添加提交到本地的仓库，使用命令 ”git commit -m ”说明这次的提交“ “</p>\n<p>最后把本地仓库origin提交到远程的GitHub仓库，使用命令 ”git push origin master“</p>\n<p>3 从GitHub克隆项目到本地</p>\n<p>第一步： 到GitHub的某个仓库，然后复制右边的有个“HTTPS clone url”</p>\n<p>第二步： 回到要存放的目录下，使用命令 “git clone <a href=\"https://github.com/chenguolin/scrapy.git%22%EF%BC%8C%E7%BA%A2%E8%89%B2%E7%9A%84url%E5%8F%AA%E6%98%AF%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90\">https://github.com/chenguolin/scrapy.git&quot;，红色的url只是一个例子</a></p>\n<p>第三步： 如果本地的版本不是最新的，可以使用命令 “git fetch origin”，origin是本地仓库</p>\n<p>第四步： 把更新的内容合并到本地分支，可以使用命令 “git merge origin&#x2F;master”</p>\n<p>如果你不想手动去合并，那么你可以使用： git pull &lt;本地仓库&gt; master &#x2F;&#x2F; 这个命令可以拉去最新版本并自动合并</p>\n<p>4 GitHub的分支管理</p>\n<p>创建</p>\n<p>1 创建一个本地分支： git branch &lt;新分支名字&gt;</p>\n<p>2 将本地分支同步到GitHub上面： git push &lt;本地仓库名&gt; &lt;新分支名&gt;</p>\n<p>3 切换到新建立的分支： git checkout &lt;新分支名&gt;</p>\n<p>4 为你的分支加入一个新的远程端： git remote add &lt;远程端名字&gt; &lt;地址&gt;</p>\n<p>5 查看当前仓库有几个分支: git branch</p>\n<p>删除</p>\n<p>1 从本地删除一个分支： git branch -d &lt;分支名称&gt;</p>\n<p>2 同步到GitHub上面删除这个分支： git push &lt;本地仓库名&gt; :&lt;GitHub端分支&gt;</p>\n<p>5 常见错误</p>\n<p>1 如果出现报错为ERROR: Repository not found.fatal: The remote end hung up unexpectedly则代表你的 origin 的url 链接有误，可能是创建错误，也可能是这个 <a href=\"mailto:&#x67;&#105;&#116;&#64;&#103;&#105;&#116;&#104;&#x75;&#x62;&#46;&#99;&#x6f;&#109;\">&#x67;&#105;&#116;&#64;&#103;&#105;&#116;&#104;&#x75;&#x62;&#46;&#99;&#x6f;&#109;</a>:xxx&#x2F;new-project.git url 指定不正确。重新创建。</p>\n<p>Git 的详细介绍：请点这里<a href=\"https://www.linuxidc.com/Linux/2013-10/91054.htm\">https://www.linuxidc.com/Linux/2013-10/91054.htm</a><br>Git 的下载地址：请点这里<a href=\"https://www.linuxidc.com/down.aspx?id=1022\">https://www.linuxidc.com/down.aspx?id=1022</a></p>\n<p>推荐阅读：</p>\n<p>如何在 GitHub 建立组织 <a href=\"http://www.linuxidc.com/Linux/2013-08/88197.htm\">http://www.linuxidc.com/Linux/2013-08/88197.htm</a></p>\n<p>GitHub Linux下使用方法 <a href=\"http://www.linuxidc.com/Linux/2013-06/86417.htm\">http://www.linuxidc.com/Linux/2013-06/86417.htm</a></p>\n<p>Windows下Eclipse搭建GitHub开发环境图文教程 <a href=\"http://www.linuxidc.com/Linux/2013-06/85372.htm\">http://www.linuxidc.com/Linux/2013-06/85372.htm</a></p>\n<p>R语言 3.0.1 源码已经提交到 GitHub <a href=\"http://www.linuxidc.com/Linux/2013-05/84425.htm\">http://www.linuxidc.com/Linux/2013-05/84425.htm</a></p>\n<p>Git权威指南 PDF高清中文版 <a href=\"http://www.linuxidc.com/Linux/2013-10/91053.htm\">http://www.linuxidc.com/Linux/2013-10/91053.htm</a></p>\n<p>linux</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Linux下Git和GitHub使用方法总结\"><a href=\"#Linux下Git和GitHub使用方法总结\" class=\"headerlink\" title=\"Linux下Git和GitHub使用方法总结\"></a>Linux下Git和GitHub使用方法总结</h1><h2 id=\"1-Linux下Git和GitHub环境的搭建\"><a href=\"#1-Linux下Git和GitHub环境的搭建\" class=\"headerlink\" title=\"1. Linux下Git和GitHub环境的搭建\"></a>1. Linux下Git和GitHub环境的搭建</h2><ul>\n<li><p>第一步： 安装Git，使用命令 “sudo apt-get install git”</p>\n</li>\n<li><p>第二步： 创建GitHub帐号</p>\n</li>\n<li><p>第三步： 生成ssh key，使用命令 “ssh-keygen -t rsa -C “<a href=\"mailto:&#x79;&#111;&#x75;&#114;&#95;&#101;&#x6d;&#97;&#x69;&#108;&#x40;&#121;&#111;&#x75;&#x72;&#x65;&#x6d;&#97;&#105;&#x6c;&#x2e;&#99;&#111;&#x6d;\">&#x79;&#111;&#x75;&#114;&#95;&#101;&#x6d;&#97;&#x69;&#108;&#x40;&#121;&#111;&#x75;&#x72;&#x65;&#x6d;&#97;&#105;&#x6c;&#x2e;&#99;&#111;&#x6d;</a>“”，your_email是你的email</p>\n</li>\n<li><p>第四步： 回到github，进入Account Settings，左边选择SSH Keys，Add SSH Key,title随便填，粘贴key。</p>\n</li>\n<li><p>第五步： 测试ssh key是否成功，使用命令“ssh -T <a href=\"mailto:&#x67;&#105;&#x74;&#x40;&#x67;&#105;&#116;&#x68;&#117;&#98;&#46;&#99;&#111;&#109;\">&#x67;&#105;&#x74;&#x40;&#x67;&#105;&#116;&#x68;&#117;&#98;&#46;&#99;&#111;&#109;</a>”，如果出现You’ve successfully authenticated, but GitHub does not provide shell access 。这就表示已成功连上github。</p>\n</li>\n</ul>\n<p>第六步： 配置Git的配置文件，username和email</p>\n<p>git config –global user.name “your name” &#x2F;&#x2F;配置用户名</p>\n<p>git config –global user.email “your email” &#x2F;&#x2F;配置email</p>\n<p>2 利用Git从本地上传到GitHub</p>\n<p>第一步： 进入要所要上传文件的目录输入命令 “git init”</p>\n<p>第二步： 创建一个本地仓库origin，使用命令 “git remote add origin <a href=\"mailto:&#103;&#105;&#116;&#64;&#x67;&#x69;&#x74;&#104;&#x75;&#98;&#46;&#x63;&#x6f;&#109;\">&#103;&#105;&#116;&#64;&#x67;&#x69;&#x74;&#104;&#x75;&#98;&#46;&#x63;&#x6f;&#109;</a>:yourName&#x2F;yourRepo.git”<br>youname是你的GitHub的用户名，yourRepo是你要上传到GitHub的仓库</p>\n<p>第三步： 比如你要添加一个文件xxx到本地仓库，使用命令 “git add xxx”，可以使用“git add .”自动判断添加哪些文件</p>\n<p>然后把这个添加提交到本地的仓库，使用命令 ”git commit -m ”说明这次的提交“ “</p>\n<p>最后把本地仓库origin提交到远程的GitHub仓库，使用命令 ”git push origin master“</p>\n<p>3 从GitHub克隆项目到本地</p>\n<p>第一步： 到GitHub的某个仓库，然后复制右边的有个“HTTPS clone url”</p>\n<p>第二步： 回到要存放的目录下，使用命令 “git clone <a href=\"https://github.com/chenguolin/scrapy.git%22%EF%BC%8C%E7%BA%A2%E8%89%B2%E7%9A%84url%E5%8F%AA%E6%98%AF%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90\">https://github.com/chenguolin/scrapy.git&quot;，红色的url只是一个例子</a></p>\n<p>第三步： 如果本地的版本不是最新的，可以使用命令 “git fetch origin”，origin是本地仓库</p>\n<p>第四步： 把更新的内容合并到本地分支，可以使用命令 “git merge origin&#x2F;master”</p>\n<p>如果你不想手动去合并，那么你可以使用： git pull &lt;本地仓库&gt; master &#x2F;&#x2F; 这个命令可以拉去最新版本并自动合并</p>\n<p>4 GitHub的分支管理</p>\n<p>创建</p>\n<p>1 创建一个本地分支： git branch &lt;新分支名字&gt;</p>\n<p>2 将本地分支同步到GitHub上面： git push &lt;本地仓库名&gt; &lt;新分支名&gt;</p>\n<p>3 切换到新建立的分支： git checkout &lt;新分支名&gt;</p>\n<p>4 为你的分支加入一个新的远程端： git remote add &lt;远程端名字&gt; &lt;地址&gt;</p>\n<p>5 查看当前仓库有几个分支: git branch</p>\n<p>删除</p>\n<p>1 从本地删除一个分支： git branch -d &lt;分支名称&gt;</p>\n<p>2 同步到GitHub上面删除这个分支： git push &lt;本地仓库名&gt; :&lt;GitHub端分支&gt;</p>\n<p>5 常见错误</p>\n<p>1 如果出现报错为ERROR: Repository not found.fatal: The remote end hung up unexpectedly则代表你的 origin 的url 链接有误，可能是创建错误，也可能是这个 <a href=\"mailto:&#x67;&#105;&#116;&#64;&#103;&#105;&#116;&#104;&#x75;&#x62;&#46;&#99;&#x6f;&#109;\">&#x67;&#105;&#116;&#64;&#103;&#105;&#116;&#104;&#x75;&#x62;&#46;&#99;&#x6f;&#109;</a>:xxx&#x2F;new-project.git url 指定不正确。重新创建。</p>\n<p>Git 的详细介绍：请点这里<a href=\"https://www.linuxidc.com/Linux/2013-10/91054.htm\">https://www.linuxidc.com/Linux/2013-10/91054.htm</a><br>Git 的下载地址：请点这里<a href=\"https://www.linuxidc.com/down.aspx?id=1022\">https://www.linuxidc.com/down.aspx?id=1022</a></p>\n<p>推荐阅读：</p>\n<p>如何在 GitHub 建立组织 <a href=\"http://www.linuxidc.com/Linux/2013-08/88197.htm\">http://www.linuxidc.com/Linux/2013-08/88197.htm</a></p>\n<p>GitHub Linux下使用方法 <a href=\"http://www.linuxidc.com/Linux/2013-06/86417.htm\">http://www.linuxidc.com/Linux/2013-06/86417.htm</a></p>\n<p>Windows下Eclipse搭建GitHub开发环境图文教程 <a href=\"http://www.linuxidc.com/Linux/2013-06/85372.htm\">http://www.linuxidc.com/Linux/2013-06/85372.htm</a></p>\n<p>R语言 3.0.1 源码已经提交到 GitHub <a href=\"http://www.linuxidc.com/Linux/2013-05/84425.htm\">http://www.linuxidc.com/Linux/2013-05/84425.htm</a></p>\n<p>Git权威指南 PDF高清中文版 <a href=\"http://www.linuxidc.com/Linux/2013-10/91053.htm\">http://www.linuxidc.com/Linux/2013-10/91053.htm</a></p>\n<p>linux</p>\n"},{"title":"查看linux系统中的进程","date":"2022-10-19T10:47:55.000Z","_content":"LINUX查看进程的4种方法(小结)（抄的）\n发布于2020-10-11 21:10:54阅读 54.1K0\n进程是在 CPU 及内存中运行的程序代码，而每个进程可以创建一个或多个进程（父子进程）。\n\n**查看进程方法：**\n\n第一种：\n\nps aux\n复制\nps命令用于报告当前系统的进程状态。可以搭配kill指令随时中断、删除不必要的程序。ps命令是最基本同时也是非常强大的进程查看命令，使用该命令可以确定有哪些进程正在运行和运行的状态、进程是否结束、进程有没有僵死、哪些进程占用了过多的资源等等，总之大部分信息都是可以通过执行该命令得到的。\n\na：显示当前终端下的所有进程信息，包括其他用户的进程。\n\nu：使用以用户为主的格式输出进程信息。\n\nx：显示当前用户在所有终端下的进程。\n\n示例： \n\n\n**上图中各字段解释：**\n\nUSER：启动该进程的用户账号名称\n PID：该进程的ID号，在当前系统中是唯一的\n %CPU：CPU占用的百分比\n %MEM：内存占用的百分比\n\nVSZ：占用虚拟内存（swap空间）的大小\n RSS：占用常驻内存（物理内存）的大小\n\nTTY：该进程在哪个终端上运行。“？”表未知或不需要终端\n STAT：显示了进程当前的状态，如S（休眠）、R（运行）、Z（僵死）、<（高优先级）、N（低优先级）、s（父进程）、+（前台进程）。对处于僵死状态的进程应予以手动终止。\n\nSTART：启动该进程的时间\n TIME：该进程占用CPU时间\n COMMAND：启动该进程的命令的名称\n\n**总结：ps aux 是以简单列表的形式显示出进程信息。**\n\n第二种：\n\nps -elf\n复制\n-e：显示系统内的所有进程信息。\n\n-l：使用长（long）格式显示进程信息。\n\n-f：使用完整的（full）格式显示进程信息。 \n\n\n上图字段解释：\n 大部分跟第一种一样，PPID为父进程的PID。\n\n第三种：\n\ntop\n复制\n以全屏交互式的界面显示进程排名，及时跟踪包括CPU、内存等系统资源占用情况，默认情况下每三秒刷新一次，其作用基本类似于Windows系统中的任务管理器。\n\n\n上图解释： \n\nTasks（系统任务）信息：total，总进程数；running，正在运行的进程数；sleeping，休眠的进程数；stopped，中止的进程数；zombie，僵死无响应的进程数。\n\nCPU信息：us，用户占用；sy，内核占用；ni，优先级调度占用；id，空闲CPU；wa，I/O等待占用；hi，硬件中断占用；si，软件中断占用；st，虚拟化占用。了解空闲的CPU百分比，主要看%id部分。\n\nMem（内存）信息：total，总内存空间；used，已用内存；free，空闲内存；buffers，缓存区域。\n\nSwap（交换空间）信息：total，总交换空间；used，已用交换空间；free，空闲交换空间；cached，缓存空间。\n\n第四种：\n\npstree -aup\n复制\n以树状图的方式展现进程之间的派生关系，显示效果比较直观。\n -a：显示每个程序的完整指令，包含路径，参数或是常驻服务的标示；\n -c：不使用精简标示法；\n -G：使用VT100终端机的列绘图字符；\n -h：列出树状图时，特别标明现在执行的程序；\n -H<程序识别码>：此参数的效果和指定”-h”参数类似，但特别标明指定的程序；\n -l：采用长列格式显示树状图；\n -n：用程序识别码排序。预设是以程序名称来排序；\n -p：显示程序识别码；\n -u：显示用户名称； \n\n\n到此这篇关于LINUX查看进程的4种方法(小结)的文章就介绍到这了,更多相关LINUX 查看进程内容请搜索ZaLou.Cn以前的文章或继续浏览下面的相关文章希望大家以后多多支持ZaLou.Cn！","source":"_posts/linux-jincheng.md","raw":"---\ntitle: 查看linux系统中的进程\ndate: 2022-10-19 18:47:55\ntags: linux\ncategories: 系统\n---\nLINUX查看进程的4种方法(小结)（抄的）\n发布于2020-10-11 21:10:54阅读 54.1K0\n进程是在 CPU 及内存中运行的程序代码，而每个进程可以创建一个或多个进程（父子进程）。\n\n**查看进程方法：**\n\n第一种：\n\nps aux\n复制\nps命令用于报告当前系统的进程状态。可以搭配kill指令随时中断、删除不必要的程序。ps命令是最基本同时也是非常强大的进程查看命令，使用该命令可以确定有哪些进程正在运行和运行的状态、进程是否结束、进程有没有僵死、哪些进程占用了过多的资源等等，总之大部分信息都是可以通过执行该命令得到的。\n\na：显示当前终端下的所有进程信息，包括其他用户的进程。\n\nu：使用以用户为主的格式输出进程信息。\n\nx：显示当前用户在所有终端下的进程。\n\n示例： \n\n\n**上图中各字段解释：**\n\nUSER：启动该进程的用户账号名称\n PID：该进程的ID号，在当前系统中是唯一的\n %CPU：CPU占用的百分比\n %MEM：内存占用的百分比\n\nVSZ：占用虚拟内存（swap空间）的大小\n RSS：占用常驻内存（物理内存）的大小\n\nTTY：该进程在哪个终端上运行。“？”表未知或不需要终端\n STAT：显示了进程当前的状态，如S（休眠）、R（运行）、Z（僵死）、<（高优先级）、N（低优先级）、s（父进程）、+（前台进程）。对处于僵死状态的进程应予以手动终止。\n\nSTART：启动该进程的时间\n TIME：该进程占用CPU时间\n COMMAND：启动该进程的命令的名称\n\n**总结：ps aux 是以简单列表的形式显示出进程信息。**\n\n第二种：\n\nps -elf\n复制\n-e：显示系统内的所有进程信息。\n\n-l：使用长（long）格式显示进程信息。\n\n-f：使用完整的（full）格式显示进程信息。 \n\n\n上图字段解释：\n 大部分跟第一种一样，PPID为父进程的PID。\n\n第三种：\n\ntop\n复制\n以全屏交互式的界面显示进程排名，及时跟踪包括CPU、内存等系统资源占用情况，默认情况下每三秒刷新一次，其作用基本类似于Windows系统中的任务管理器。\n\n\n上图解释： \n\nTasks（系统任务）信息：total，总进程数；running，正在运行的进程数；sleeping，休眠的进程数；stopped，中止的进程数；zombie，僵死无响应的进程数。\n\nCPU信息：us，用户占用；sy，内核占用；ni，优先级调度占用；id，空闲CPU；wa，I/O等待占用；hi，硬件中断占用；si，软件中断占用；st，虚拟化占用。了解空闲的CPU百分比，主要看%id部分。\n\nMem（内存）信息：total，总内存空间；used，已用内存；free，空闲内存；buffers，缓存区域。\n\nSwap（交换空间）信息：total，总交换空间；used，已用交换空间；free，空闲交换空间；cached，缓存空间。\n\n第四种：\n\npstree -aup\n复制\n以树状图的方式展现进程之间的派生关系，显示效果比较直观。\n -a：显示每个程序的完整指令，包含路径，参数或是常驻服务的标示；\n -c：不使用精简标示法；\n -G：使用VT100终端机的列绘图字符；\n -h：列出树状图时，特别标明现在执行的程序；\n -H<程序识别码>：此参数的效果和指定”-h”参数类似，但特别标明指定的程序；\n -l：采用长列格式显示树状图；\n -n：用程序识别码排序。预设是以程序名称来排序；\n -p：显示程序识别码；\n -u：显示用户名称； \n\n\n到此这篇关于LINUX查看进程的4种方法(小结)的文章就介绍到这了,更多相关LINUX 查看进程内容请搜索ZaLou.Cn以前的文章或继续浏览下面的相关文章希望大家以后多多支持ZaLou.Cn！","slug":"linux-jincheng","published":1,"updated":"2023-07-23T14:19:12.576Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkjdd1bh000y98ajf0a84t2f","content":"<p>LINUX查看进程的4种方法(小结)（抄的）<br>发布于2020-10-11 21:10:54阅读 54.1K0<br>进程是在 CPU 及内存中运行的程序代码，而每个进程可以创建一个或多个进程（父子进程）。</p>\n<p><strong>查看进程方法：</strong></p>\n<p>第一种：</p>\n<p>ps aux<br>复制<br>ps命令用于报告当前系统的进程状态。可以搭配kill指令随时中断、删除不必要的程序。ps命令是最基本同时也是非常强大的进程查看命令，使用该命令可以确定有哪些进程正在运行和运行的状态、进程是否结束、进程有没有僵死、哪些进程占用了过多的资源等等，总之大部分信息都是可以通过执行该命令得到的。</p>\n<p>a：显示当前终端下的所有进程信息，包括其他用户的进程。</p>\n<p>u：使用以用户为主的格式输出进程信息。</p>\n<p>x：显示当前用户在所有终端下的进程。</p>\n<p>示例： </p>\n<p><strong>上图中各字段解释：</strong></p>\n<p>USER：启动该进程的用户账号名称<br> PID：该进程的ID号，在当前系统中是唯一的<br> %CPU：CPU占用的百分比<br> %MEM：内存占用的百分比</p>\n<p>VSZ：占用虚拟内存（swap空间）的大小<br> RSS：占用常驻内存（物理内存）的大小</p>\n<p>TTY：该进程在哪个终端上运行。“？”表未知或不需要终端<br> STAT：显示了进程当前的状态，如S（休眠）、R（运行）、Z（僵死）、&lt;（高优先级）、N（低优先级）、s（父进程）、+（前台进程）。对处于僵死状态的进程应予以手动终止。</p>\n<p>START：启动该进程的时间<br> TIME：该进程占用CPU时间<br> COMMAND：启动该进程的命令的名称</p>\n<p><strong>总结：ps aux 是以简单列表的形式显示出进程信息。</strong></p>\n<p>第二种：</p>\n<p>ps -elf<br>复制<br>-e：显示系统内的所有进程信息。</p>\n<p>-l：使用长（long）格式显示进程信息。</p>\n<p>-f：使用完整的（full）格式显示进程信息。 </p>\n<p>上图字段解释：<br> 大部分跟第一种一样，PPID为父进程的PID。</p>\n<p>第三种：</p>\n<p>top<br>复制<br>以全屏交互式的界面显示进程排名，及时跟踪包括CPU、内存等系统资源占用情况，默认情况下每三秒刷新一次，其作用基本类似于Windows系统中的任务管理器。</p>\n<p>上图解释： </p>\n<p>Tasks（系统任务）信息：total，总进程数；running，正在运行的进程数；sleeping，休眠的进程数；stopped，中止的进程数；zombie，僵死无响应的进程数。</p>\n<p>CPU信息：us，用户占用；sy，内核占用；ni，优先级调度占用；id，空闲CPU；wa，I&#x2F;O等待占用；hi，硬件中断占用；si，软件中断占用；st，虚拟化占用。了解空闲的CPU百分比，主要看%id部分。</p>\n<p>Mem（内存）信息：total，总内存空间；used，已用内存；free，空闲内存；buffers，缓存区域。</p>\n<p>Swap（交换空间）信息：total，总交换空间；used，已用交换空间；free，空闲交换空间；cached，缓存空间。</p>\n<p>第四种：</p>\n<p>pstree -aup<br>复制<br>以树状图的方式展现进程之间的派生关系，显示效果比较直观。<br> -a：显示每个程序的完整指令，包含路径，参数或是常驻服务的标示；<br> -c：不使用精简标示法；<br> -G：使用VT100终端机的列绘图字符；<br> -h：列出树状图时，特别标明现在执行的程序；<br> -H&lt;程序识别码&gt;：此参数的效果和指定”-h”参数类似，但特别标明指定的程序；<br> -l：采用长列格式显示树状图；<br> -n：用程序识别码排序。预设是以程序名称来排序；<br> -p：显示程序识别码；<br> -u：显示用户名称； </p>\n<p>到此这篇关于LINUX查看进程的4种方法(小结)的文章就介绍到这了,更多相关LINUX 查看进程内容请搜索ZaLou.Cn以前的文章或继续浏览下面的相关文章希望大家以后多多支持ZaLou.Cn！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>LINUX查看进程的4种方法(小结)（抄的）<br>发布于2020-10-11 21:10:54阅读 54.1K0<br>进程是在 CPU 及内存中运行的程序代码，而每个进程可以创建一个或多个进程（父子进程）。</p>\n<p><strong>查看进程方法：</strong></p>\n<p>第一种：</p>\n<p>ps aux<br>复制<br>ps命令用于报告当前系统的进程状态。可以搭配kill指令随时中断、删除不必要的程序。ps命令是最基本同时也是非常强大的进程查看命令，使用该命令可以确定有哪些进程正在运行和运行的状态、进程是否结束、进程有没有僵死、哪些进程占用了过多的资源等等，总之大部分信息都是可以通过执行该命令得到的。</p>\n<p>a：显示当前终端下的所有进程信息，包括其他用户的进程。</p>\n<p>u：使用以用户为主的格式输出进程信息。</p>\n<p>x：显示当前用户在所有终端下的进程。</p>\n<p>示例： </p>\n<p><strong>上图中各字段解释：</strong></p>\n<p>USER：启动该进程的用户账号名称<br> PID：该进程的ID号，在当前系统中是唯一的<br> %CPU：CPU占用的百分比<br> %MEM：内存占用的百分比</p>\n<p>VSZ：占用虚拟内存（swap空间）的大小<br> RSS：占用常驻内存（物理内存）的大小</p>\n<p>TTY：该进程在哪个终端上运行。“？”表未知或不需要终端<br> STAT：显示了进程当前的状态，如S（休眠）、R（运行）、Z（僵死）、&lt;（高优先级）、N（低优先级）、s（父进程）、+（前台进程）。对处于僵死状态的进程应予以手动终止。</p>\n<p>START：启动该进程的时间<br> TIME：该进程占用CPU时间<br> COMMAND：启动该进程的命令的名称</p>\n<p><strong>总结：ps aux 是以简单列表的形式显示出进程信息。</strong></p>\n<p>第二种：</p>\n<p>ps -elf<br>复制<br>-e：显示系统内的所有进程信息。</p>\n<p>-l：使用长（long）格式显示进程信息。</p>\n<p>-f：使用完整的（full）格式显示进程信息。 </p>\n<p>上图字段解释：<br> 大部分跟第一种一样，PPID为父进程的PID。</p>\n<p>第三种：</p>\n<p>top<br>复制<br>以全屏交互式的界面显示进程排名，及时跟踪包括CPU、内存等系统资源占用情况，默认情况下每三秒刷新一次，其作用基本类似于Windows系统中的任务管理器。</p>\n<p>上图解释： </p>\n<p>Tasks（系统任务）信息：total，总进程数；running，正在运行的进程数；sleeping，休眠的进程数；stopped，中止的进程数；zombie，僵死无响应的进程数。</p>\n<p>CPU信息：us，用户占用；sy，内核占用；ni，优先级调度占用；id，空闲CPU；wa，I&#x2F;O等待占用；hi，硬件中断占用；si，软件中断占用；st，虚拟化占用。了解空闲的CPU百分比，主要看%id部分。</p>\n<p>Mem（内存）信息：total，总内存空间；used，已用内存；free，空闲内存；buffers，缓存区域。</p>\n<p>Swap（交换空间）信息：total，总交换空间；used，已用交换空间；free，空闲交换空间；cached，缓存空间。</p>\n<p>第四种：</p>\n<p>pstree -aup<br>复制<br>以树状图的方式展现进程之间的派生关系，显示效果比较直观。<br> -a：显示每个程序的完整指令，包含路径，参数或是常驻服务的标示；<br> -c：不使用精简标示法；<br> -G：使用VT100终端机的列绘图字符；<br> -h：列出树状图时，特别标明现在执行的程序；<br> -H&lt;程序识别码&gt;：此参数的效果和指定”-h”参数类似，但特别标明指定的程序；<br> -l：采用长列格式显示树状图；<br> -n：用程序识别码排序。预设是以程序名称来排序；<br> -p：显示程序识别码；<br> -u：显示用户名称； </p>\n<p>到此这篇关于LINUX查看进程的4种方法(小结)的文章就介绍到这了,更多相关LINUX 查看进程内容请搜索ZaLou.Cn以前的文章或继续浏览下面的相关文章希望大家以后多多支持ZaLou.Cn！</p>\n"},{"title":"linux-mv","date":"2022-12-31T03:38:45.000Z","_content":"\n\n\n1、移动文件或者文件夹\n在当前文件夹下打开命令行，输入\n\nmv 文件名 目的路径\n如果需要移动 文件夹\n\nmv 文件夹名 目的路径\n验证已经移动过去\n\ncd 目的路径\nls\n2、移动有序文件\n比如源路径内部有1.png，2.png ... 10000.png，你只想移动前100个图片到目的路径\n\nmv 源路径/{1..100}.png 目的路径             # 移动前100个图片到目的路径\n其中.png是文件共有后缀，当然也可以替换成共有前缀。\n\n比如移动第100，200，300，400，500等9张图片到目的路径：\n\nmv 源路径/00{1..5}00.png 目的路径           # 移动名称为100的整数倍的图片到目的路径\n3、移动间隔文件\n可以在上面{}中间多增加..表示间距\n\n比如移动第1，6，11，16.... 96等20张图片到目的路径：\n\nmv 源路径/00{001..100..5}.png 目的路径             # 间隔5移动图像\n4、移动指定文件\n可以用*（匹配任意），？（匹配单个）等匹配指定文件\n\nmv 源路径/*.jpg 目的路径       # 移动所有jpg后缀文件\nmv 源路径/?.jpg 目的路径       # 移动0.jpg-9.jpg,因为？匹配一个字符\ntip： 1、写文件名时可以先写开头几个字母，然后使用 ctrl+tab或tab（看不同电脑设置）补充完整文件名\n\n         2、如果需要复制，则将 mv 更改为 cp\n\n         3、如需  python复制、移动文件到指定文件夹  戳这里        \n————————————————\n版权声明：本文为CSDN博主「是暮涯啊」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/longshaonihaoa/article/details/80945812\n\n---\n\nhttp://c.biancheng.net/view/749.html\nmv 命令（move 的缩写），既可以在不同的目录之间移动文件或目录，也可以对文件和目录进行重命名。该命令的基本格式如下：\n[root@localhost ~]# mv 【选项】 源文件 目标文件\n\n选项：\n-f：强制覆盖，如果目标文件已经存在，则不询问，直接强制覆盖；\n-i：交互移动，如果目标文件已经存在，则询问用户是否覆盖（默认选项）；\n-n：如果目标文件已经存在，则不会覆盖移动，而且不询问用户；\n-v：显示文件或目录的移动过程；\n-u：若目标文件已经存在，但两者相比，源文件更新，则会对目标文件进行升级；\n\n需要注意的是，同 rm 命令类似，mv 命令也是一个具有破坏性的命令，如果使用不当，很可能给系统带来灾难性的后果。\n\n【例 1】移动文件或目录。\n[root@localhost ~]# mv cangls /tmp\n#移动之后，源文件会被删除，类似剪切\n[root@localhost ~]# mkdir movie\n[root@localhost ~]# mv movie/ /tmp\n#也可以移动目录。和 rm、cp 不同的是，mv 移动目录不需要加入 \"-r\" 选项\n\n如果移动的目标位置已经存在同名的文件，则同样会提示是否覆盖，因为 mv 命令默认执行的也是 \"mv -i\" 的别名，例如：\n[root@localhost ~]# touch cangls\n#重新建立文件\n[root@localhost ~]# mv cangls /tmp\nmv:县否覆盖\"tmp/cangls\"？y\n#由于 /tmp 目录下已经存在 cangls 文件，所以会提示是否覆盖，需要手工输入 y 覆盖移动\n\n\n【例 2】强制移动。\n之前说过，如果目标目录下已经存在同名文件，则会提示是否覆盖，需要手工确认。这时如果移动的同名文件较多，则需要一个一个文件进行确认，很不方便。\n\n如果我们确认需要覆盖已经存在的同名文件，则可以使用 \"-f\" 选项进行强制移动，这就不再需要用户手工确认了。例如：\n[root@localhost ~]# touch cangls\n#重新建立文件\n[root@localhost ~]# mv -f cangls /tmp\n#就算 /tmp/ 目录下已经存在同名的文件，由于\"-f\"选项的作用，所以会强制覆盖\n\n\n【例 3】不覆盖移动。\n既然可以强制覆盖移动，那也有可能需要不覆盖的移动。如果需要移动几百个同名文件，但是不想覆盖，这时就需要 \"-n\" 选项的帮助了。例如：\n[root@localhost ~]# ls /tmp\n/tmp/bols /tmp/cangls\n#在/tmp/目录下已经存在bols、cangls文件了\n[root@localhost ~]# mv -vn bols cangls lmls /tmp/、\n\"lmls\"->\"/tmp/lmls\"\n#再向 /tmp/ 目录中移动同名文件，如果使用了 \"-n\" 选项，则可以看到只移动了 lmls，而同名的 bols 和 cangls 并没有移动（\"-v\" 选项用于显示移动过程）\n\n\n【例 4】改名。\n如果源文件和目标文件在同一目录中，那就是改名。例如：\n[root@localhost ~]# mv bols lmls\n#把 bols 改名为 lmls\n\n目录也可以按照同样的方法改名。\n\n【例 5】显示移动过程。\n如果我们想要知道在移动过程中到底有哪些文件进行了移动，则可以使用 \"-v\" 选项来查看详细的移动信息。例如：\n[root@localhost ~]# touch test1.txt test2.txt test3.txt\n#建立三个测试文件\n[root@localhost ~]# mv -v *.txt /tmp\n\"test1.txt\" -> \"/tmp/test1.txt\"\n\"test2.txt\" -> \"/tmp/test2.txt\"\n\"test3.txt\" -> \"/tmp/test3.txt\"\n#加入\"-v\"选项，可以看到有哪些文件进行了移动\n\n关注公众号「站长严长生」，在手机上阅读所有教程，随时随地都能学习。本公众号由C语言中文网站长亲自运营，长期更新，坚持原创。\n\n\n\n\n\n\n","source":"_posts/linux-mv.md","raw":"---\ntitle: linux-mv\ndate: 2022-12-31 11:38:45\ncategories:\ntags:\n---\n\n\n\n1、移动文件或者文件夹\n在当前文件夹下打开命令行，输入\n\nmv 文件名 目的路径\n如果需要移动 文件夹\n\nmv 文件夹名 目的路径\n验证已经移动过去\n\ncd 目的路径\nls\n2、移动有序文件\n比如源路径内部有1.png，2.png ... 10000.png，你只想移动前100个图片到目的路径\n\nmv 源路径/{1..100}.png 目的路径             # 移动前100个图片到目的路径\n其中.png是文件共有后缀，当然也可以替换成共有前缀。\n\n比如移动第100，200，300，400，500等9张图片到目的路径：\n\nmv 源路径/00{1..5}00.png 目的路径           # 移动名称为100的整数倍的图片到目的路径\n3、移动间隔文件\n可以在上面{}中间多增加..表示间距\n\n比如移动第1，6，11，16.... 96等20张图片到目的路径：\n\nmv 源路径/00{001..100..5}.png 目的路径             # 间隔5移动图像\n4、移动指定文件\n可以用*（匹配任意），？（匹配单个）等匹配指定文件\n\nmv 源路径/*.jpg 目的路径       # 移动所有jpg后缀文件\nmv 源路径/?.jpg 目的路径       # 移动0.jpg-9.jpg,因为？匹配一个字符\ntip： 1、写文件名时可以先写开头几个字母，然后使用 ctrl+tab或tab（看不同电脑设置）补充完整文件名\n\n         2、如果需要复制，则将 mv 更改为 cp\n\n         3、如需  python复制、移动文件到指定文件夹  戳这里        \n————————————————\n版权声明：本文为CSDN博主「是暮涯啊」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/longshaonihaoa/article/details/80945812\n\n---\n\nhttp://c.biancheng.net/view/749.html\nmv 命令（move 的缩写），既可以在不同的目录之间移动文件或目录，也可以对文件和目录进行重命名。该命令的基本格式如下：\n[root@localhost ~]# mv 【选项】 源文件 目标文件\n\n选项：\n-f：强制覆盖，如果目标文件已经存在，则不询问，直接强制覆盖；\n-i：交互移动，如果目标文件已经存在，则询问用户是否覆盖（默认选项）；\n-n：如果目标文件已经存在，则不会覆盖移动，而且不询问用户；\n-v：显示文件或目录的移动过程；\n-u：若目标文件已经存在，但两者相比，源文件更新，则会对目标文件进行升级；\n\n需要注意的是，同 rm 命令类似，mv 命令也是一个具有破坏性的命令，如果使用不当，很可能给系统带来灾难性的后果。\n\n【例 1】移动文件或目录。\n[root@localhost ~]# mv cangls /tmp\n#移动之后，源文件会被删除，类似剪切\n[root@localhost ~]# mkdir movie\n[root@localhost ~]# mv movie/ /tmp\n#也可以移动目录。和 rm、cp 不同的是，mv 移动目录不需要加入 \"-r\" 选项\n\n如果移动的目标位置已经存在同名的文件，则同样会提示是否覆盖，因为 mv 命令默认执行的也是 \"mv -i\" 的别名，例如：\n[root@localhost ~]# touch cangls\n#重新建立文件\n[root@localhost ~]# mv cangls /tmp\nmv:县否覆盖\"tmp/cangls\"？y\n#由于 /tmp 目录下已经存在 cangls 文件，所以会提示是否覆盖，需要手工输入 y 覆盖移动\n\n\n【例 2】强制移动。\n之前说过，如果目标目录下已经存在同名文件，则会提示是否覆盖，需要手工确认。这时如果移动的同名文件较多，则需要一个一个文件进行确认，很不方便。\n\n如果我们确认需要覆盖已经存在的同名文件，则可以使用 \"-f\" 选项进行强制移动，这就不再需要用户手工确认了。例如：\n[root@localhost ~]# touch cangls\n#重新建立文件\n[root@localhost ~]# mv -f cangls /tmp\n#就算 /tmp/ 目录下已经存在同名的文件，由于\"-f\"选项的作用，所以会强制覆盖\n\n\n【例 3】不覆盖移动。\n既然可以强制覆盖移动，那也有可能需要不覆盖的移动。如果需要移动几百个同名文件，但是不想覆盖，这时就需要 \"-n\" 选项的帮助了。例如：\n[root@localhost ~]# ls /tmp\n/tmp/bols /tmp/cangls\n#在/tmp/目录下已经存在bols、cangls文件了\n[root@localhost ~]# mv -vn bols cangls lmls /tmp/、\n\"lmls\"->\"/tmp/lmls\"\n#再向 /tmp/ 目录中移动同名文件，如果使用了 \"-n\" 选项，则可以看到只移动了 lmls，而同名的 bols 和 cangls 并没有移动（\"-v\" 选项用于显示移动过程）\n\n\n【例 4】改名。\n如果源文件和目标文件在同一目录中，那就是改名。例如：\n[root@localhost ~]# mv bols lmls\n#把 bols 改名为 lmls\n\n目录也可以按照同样的方法改名。\n\n【例 5】显示移动过程。\n如果我们想要知道在移动过程中到底有哪些文件进行了移动，则可以使用 \"-v\" 选项来查看详细的移动信息。例如：\n[root@localhost ~]# touch test1.txt test2.txt test3.txt\n#建立三个测试文件\n[root@localhost ~]# mv -v *.txt /tmp\n\"test1.txt\" -> \"/tmp/test1.txt\"\n\"test2.txt\" -> \"/tmp/test2.txt\"\n\"test3.txt\" -> \"/tmp/test3.txt\"\n#加入\"-v\"选项，可以看到有哪些文件进行了移动\n\n关注公众号「站长严长生」，在手机上阅读所有教程，随时随地都能学习。本公众号由C语言中文网站长亲自运营，长期更新，坚持原创。\n\n\n\n\n\n\n","slug":"linux-mv","published":1,"updated":"2023-07-23T14:19:11.700Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkjdd1bk001398aj893o6e9a","content":"<p>1、移动文件或者文件夹<br>在当前文件夹下打开命令行，输入</p>\n<p>mv 文件名 目的路径<br>如果需要移动 文件夹</p>\n<p>mv 文件夹名 目的路径<br>验证已经移动过去</p>\n<p>cd 目的路径<br>ls<br>2、移动有序文件<br>比如源路径内部有1.png，2.png … 10000.png，你只想移动前100个图片到目的路径</p>\n<p>mv 源路径&#x2F;{1..100}.png 目的路径             # 移动前100个图片到目的路径<br>其中.png是文件共有后缀，当然也可以替换成共有前缀。</p>\n<p>比如移动第100，200，300，400，500等9张图片到目的路径：</p>\n<p>mv 源路径&#x2F;00{1..5}00.png 目的路径           # 移动名称为100的整数倍的图片到目的路径<br>3、移动间隔文件<br>可以在上面{}中间多增加..表示间距</p>\n<p>比如移动第1，6，11，16…. 96等20张图片到目的路径：</p>\n<p>mv 源路径&#x2F;00{001..100..5}.png 目的路径             # 间隔5移动图像<br>4、移动指定文件<br>可以用*（匹配任意），？（匹配单个）等匹配指定文件</p>\n<p>mv 源路径&#x2F;*.jpg 目的路径       # 移动所有jpg后缀文件<br>mv 源路径&#x2F;?.jpg 目的路径       # 移动0.jpg-9.jpg,因为？匹配一个字符<br>tip： 1、写文件名时可以先写开头几个字母，然后使用 ctrl+tab或tab（看不同电脑设置）补充完整文件名</p>\n<pre><code>     2、如果需要复制，则将 mv 更改为 cp\n\n     3、如需  python复制、移动文件到指定文件夹  戳这里        \n</code></pre>\n<p>————————————————<br>版权声明：本文为CSDN博主「是暮涯啊」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href=\"https://blog.csdn.net/longshaonihaoa/article/details/80945812\">https://blog.csdn.net/longshaonihaoa/article/details/80945812</a></p>\n<hr>\n<p><a href=\"http://c.biancheng.net/view/749.html\">http://c.biancheng.net/view/749.html</a><br>mv 命令（move 的缩写），既可以在不同的目录之间移动文件或目录，也可以对文件和目录进行重命名。该命令的基本格式如下：<br>[root@localhost ~]# mv 【选项】 源文件 目标文件</p>\n<p>选项：<br>-f：强制覆盖，如果目标文件已经存在，则不询问，直接强制覆盖；<br>-i：交互移动，如果目标文件已经存在，则询问用户是否覆盖（默认选项）；<br>-n：如果目标文件已经存在，则不会覆盖移动，而且不询问用户；<br>-v：显示文件或目录的移动过程；<br>-u：若目标文件已经存在，但两者相比，源文件更新，则会对目标文件进行升级；</p>\n<p>需要注意的是，同 rm 命令类似，mv 命令也是一个具有破坏性的命令，如果使用不当，很可能给系统带来灾难性的后果。</p>\n<p>【例 1】移动文件或目录。<br>[root@localhost ~]# mv cangls &#x2F;tmp<br>#移动之后，源文件会被删除，类似剪切<br>[root@localhost ~]# mkdir movie<br>[root@localhost ~]# mv movie&#x2F; &#x2F;tmp<br>#也可以移动目录。和 rm、cp 不同的是，mv 移动目录不需要加入 “-r” 选项</p>\n<p>如果移动的目标位置已经存在同名的文件，则同样会提示是否覆盖，因为 mv 命令默认执行的也是 “mv -i” 的别名，例如：<br>[root@localhost ~]# touch cangls<br>#重新建立文件<br>[root@localhost ~]# mv cangls &#x2F;tmp<br>mv:县否覆盖”tmp&#x2F;cangls”？y<br>#由于 &#x2F;tmp 目录下已经存在 cangls 文件，所以会提示是否覆盖，需要手工输入 y 覆盖移动</p>\n<p>【例 2】强制移动。<br>之前说过，如果目标目录下已经存在同名文件，则会提示是否覆盖，需要手工确认。这时如果移动的同名文件较多，则需要一个一个文件进行确认，很不方便。</p>\n<p>如果我们确认需要覆盖已经存在的同名文件，则可以使用 “-f” 选项进行强制移动，这就不再需要用户手工确认了。例如：<br>[root@localhost ~]# touch cangls<br>#重新建立文件<br>[root@localhost ~]# mv -f cangls &#x2F;tmp<br>#就算 &#x2F;tmp&#x2F; 目录下已经存在同名的文件，由于”-f”选项的作用，所以会强制覆盖</p>\n<p>【例 3】不覆盖移动。<br>既然可以强制覆盖移动，那也有可能需要不覆盖的移动。如果需要移动几百个同名文件，但是不想覆盖，这时就需要 “-n” 选项的帮助了。例如：<br>[root@localhost ~]# ls &#x2F;tmp<br>&#x2F;tmp&#x2F;bols &#x2F;tmp&#x2F;cangls<br>#在&#x2F;tmp&#x2F;目录下已经存在bols、cangls文件了<br>[root@localhost ~]# mv -vn bols cangls lmls &#x2F;tmp&#x2F;、<br>“lmls”-&gt;”&#x2F;tmp&#x2F;lmls”<br>#再向 &#x2F;tmp&#x2F; 目录中移动同名文件，如果使用了 “-n” 选项，则可以看到只移动了 lmls，而同名的 bols 和 cangls 并没有移动（”-v” 选项用于显示移动过程）</p>\n<p>【例 4】改名。<br>如果源文件和目标文件在同一目录中，那就是改名。例如：<br>[root@localhost ~]# mv bols lmls<br>#把 bols 改名为 lmls</p>\n<p>目录也可以按照同样的方法改名。</p>\n<p>【例 5】显示移动过程。<br>如果我们想要知道在移动过程中到底有哪些文件进行了移动，则可以使用 “-v” 选项来查看详细的移动信息。例如：<br>[root@localhost ~]# touch test1.txt test2.txt test3.txt<br>#建立三个测试文件<br>[root@localhost ~]# mv -v *.txt &#x2F;tmp<br>“test1.txt” -&gt; “&#x2F;tmp&#x2F;test1.txt”<br>“test2.txt” -&gt; “&#x2F;tmp&#x2F;test2.txt”<br>“test3.txt” -&gt; “&#x2F;tmp&#x2F;test3.txt”<br>#加入”-v”选项，可以看到有哪些文件进行了移动</p>\n<p>关注公众号「站长严长生」，在手机上阅读所有教程，随时随地都能学习。本公众号由C语言中文网站长亲自运营，长期更新，坚持原创。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1、移动文件或者文件夹<br>在当前文件夹下打开命令行，输入</p>\n<p>mv 文件名 目的路径<br>如果需要移动 文件夹</p>\n<p>mv 文件夹名 目的路径<br>验证已经移动过去</p>\n<p>cd 目的路径<br>ls<br>2、移动有序文件<br>比如源路径内部有1.png，2.png … 10000.png，你只想移动前100个图片到目的路径</p>\n<p>mv 源路径&#x2F;{1..100}.png 目的路径             # 移动前100个图片到目的路径<br>其中.png是文件共有后缀，当然也可以替换成共有前缀。</p>\n<p>比如移动第100，200，300，400，500等9张图片到目的路径：</p>\n<p>mv 源路径&#x2F;00{1..5}00.png 目的路径           # 移动名称为100的整数倍的图片到目的路径<br>3、移动间隔文件<br>可以在上面{}中间多增加..表示间距</p>\n<p>比如移动第1，6，11，16…. 96等20张图片到目的路径：</p>\n<p>mv 源路径&#x2F;00{001..100..5}.png 目的路径             # 间隔5移动图像<br>4、移动指定文件<br>可以用*（匹配任意），？（匹配单个）等匹配指定文件</p>\n<p>mv 源路径&#x2F;*.jpg 目的路径       # 移动所有jpg后缀文件<br>mv 源路径&#x2F;?.jpg 目的路径       # 移动0.jpg-9.jpg,因为？匹配一个字符<br>tip： 1、写文件名时可以先写开头几个字母，然后使用 ctrl+tab或tab（看不同电脑设置）补充完整文件名</p>\n<pre><code>     2、如果需要复制，则将 mv 更改为 cp\n\n     3、如需  python复制、移动文件到指定文件夹  戳这里        \n</code></pre>\n<p>————————————————<br>版权声明：本文为CSDN博主「是暮涯啊」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href=\"https://blog.csdn.net/longshaonihaoa/article/details/80945812\">https://blog.csdn.net/longshaonihaoa/article/details/80945812</a></p>\n<hr>\n<p><a href=\"http://c.biancheng.net/view/749.html\">http://c.biancheng.net/view/749.html</a><br>mv 命令（move 的缩写），既可以在不同的目录之间移动文件或目录，也可以对文件和目录进行重命名。该命令的基本格式如下：<br>[root@localhost ~]# mv 【选项】 源文件 目标文件</p>\n<p>选项：<br>-f：强制覆盖，如果目标文件已经存在，则不询问，直接强制覆盖；<br>-i：交互移动，如果目标文件已经存在，则询问用户是否覆盖（默认选项）；<br>-n：如果目标文件已经存在，则不会覆盖移动，而且不询问用户；<br>-v：显示文件或目录的移动过程；<br>-u：若目标文件已经存在，但两者相比，源文件更新，则会对目标文件进行升级；</p>\n<p>需要注意的是，同 rm 命令类似，mv 命令也是一个具有破坏性的命令，如果使用不当，很可能给系统带来灾难性的后果。</p>\n<p>【例 1】移动文件或目录。<br>[root@localhost ~]# mv cangls &#x2F;tmp<br>#移动之后，源文件会被删除，类似剪切<br>[root@localhost ~]# mkdir movie<br>[root@localhost ~]# mv movie&#x2F; &#x2F;tmp<br>#也可以移动目录。和 rm、cp 不同的是，mv 移动目录不需要加入 “-r” 选项</p>\n<p>如果移动的目标位置已经存在同名的文件，则同样会提示是否覆盖，因为 mv 命令默认执行的也是 “mv -i” 的别名，例如：<br>[root@localhost ~]# touch cangls<br>#重新建立文件<br>[root@localhost ~]# mv cangls &#x2F;tmp<br>mv:县否覆盖”tmp&#x2F;cangls”？y<br>#由于 &#x2F;tmp 目录下已经存在 cangls 文件，所以会提示是否覆盖，需要手工输入 y 覆盖移动</p>\n<p>【例 2】强制移动。<br>之前说过，如果目标目录下已经存在同名文件，则会提示是否覆盖，需要手工确认。这时如果移动的同名文件较多，则需要一个一个文件进行确认，很不方便。</p>\n<p>如果我们确认需要覆盖已经存在的同名文件，则可以使用 “-f” 选项进行强制移动，这就不再需要用户手工确认了。例如：<br>[root@localhost ~]# touch cangls<br>#重新建立文件<br>[root@localhost ~]# mv -f cangls &#x2F;tmp<br>#就算 &#x2F;tmp&#x2F; 目录下已经存在同名的文件，由于”-f”选项的作用，所以会强制覆盖</p>\n<p>【例 3】不覆盖移动。<br>既然可以强制覆盖移动，那也有可能需要不覆盖的移动。如果需要移动几百个同名文件，但是不想覆盖，这时就需要 “-n” 选项的帮助了。例如：<br>[root@localhost ~]# ls &#x2F;tmp<br>&#x2F;tmp&#x2F;bols &#x2F;tmp&#x2F;cangls<br>#在&#x2F;tmp&#x2F;目录下已经存在bols、cangls文件了<br>[root@localhost ~]# mv -vn bols cangls lmls &#x2F;tmp&#x2F;、<br>“lmls”-&gt;”&#x2F;tmp&#x2F;lmls”<br>#再向 &#x2F;tmp&#x2F; 目录中移动同名文件，如果使用了 “-n” 选项，则可以看到只移动了 lmls，而同名的 bols 和 cangls 并没有移动（”-v” 选项用于显示移动过程）</p>\n<p>【例 4】改名。<br>如果源文件和目标文件在同一目录中，那就是改名。例如：<br>[root@localhost ~]# mv bols lmls<br>#把 bols 改名为 lmls</p>\n<p>目录也可以按照同样的方法改名。</p>\n<p>【例 5】显示移动过程。<br>如果我们想要知道在移动过程中到底有哪些文件进行了移动，则可以使用 “-v” 选项来查看详细的移动信息。例如：<br>[root@localhost ~]# touch test1.txt test2.txt test3.txt<br>#建立三个测试文件<br>[root@localhost ~]# mv -v *.txt &#x2F;tmp<br>“test1.txt” -&gt; “&#x2F;tmp&#x2F;test1.txt”<br>“test2.txt” -&gt; “&#x2F;tmp&#x2F;test2.txt”<br>“test3.txt” -&gt; “&#x2F;tmp&#x2F;test3.txt”<br>#加入”-v”选项，可以看到有哪些文件进行了移动</p>\n<p>关注公众号「站长严长生」，在手机上阅读所有教程，随时随地都能学习。本公众号由C语言中文网站长亲自运营，长期更新，坚持原创。</p>\n"},{"title":"linux设置开机启动（待完善）","date":"2022-10-19T04:29:54.000Z","_content":"话不多说，本文介绍几种方法，希望能够对你的胃口。\n文章目录\n一、编辑/etc/rc.d/rc.local文件\n二、crontab计划任务\n三、使用systemd，自己写个服务就ok了\n四、在/etc/profile.d/下写.sh文件\n五、使用chkconfig管理，编辑/etc/init.d/下文件\n一、编辑/etc/rc.d/rc.local文件\n在linux各项服务启动完毕之后，会运行/etc/rc.d/rc.local这个文件，所以把我们需要运行的脚本放在这里面就行了。\n（ps：/etc/rc.local和/etc/rc.d/rc.local是同一个文件，软链接而已）\n\n# cat /mnt/Autorun_script.sh\ndate > /tmp/bootup.txt\nhostname >> /tmp/bootup.txt\necho `whoami` >> /tmp/bootup.txt\n1\n2\n3\n4\n将/mnt/Autorun_script.sh这个脚本放到/etc/rc.d/rc.local这个文件最后一行\n\n\n最后为了保险起见，别忘了加一个权限\n\nchmod  +x /mnt/Autorun_script.sh\nchmod +x /etc/rc.d/rc.local\n1\n2\n重启效果见下\n\n\n二、crontab计划任务\n可以自己设置时间，下面介绍另一个特殊的任务，叫@reboot，重启之后自动运行脚本。\n\n效果见下\n\n\n三、使用systemd，自己写个服务就ok了\n上面介绍的两种方法，在任何的linux系统上都可以运行。第三种是适用systemd系统的，那么如何判定你的系统是不是systemd系统，运行ps命令\n\nPID为1的进程是systemd就是，反之。\n所以接下来，我们开始写systemd启动服务，并放在/etc/systemd/system/下。\n\n写完之后我们更新一下systemd的配置文件,大功告成。\n\nsystemctl daemon-reload\nsystemctl enable Autorun_script.service\n1\n2\n四、在/etc/profile.d/下写.sh文件\n在/etc/profile.d/下写.sh文件，reboot即可\n/etc/profile会遍历/etc/profile.d/*.sh\n\n\n另外，几个脚本的区别：\n（1） /etc/profile： 此文件为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行. 并从/etc/profile.d目录的配置文件中搜集shell的设置。\n\n（2） /etc/bashrc: 为每一个运行bash shell的用户执行此文件.当bash shell被打开时,该文件被读取（即每次新开一个终端，都会执行bashrc）。\n\n（3） ~/.bash_profile: 每个用户都可使用该文件输入专用于自己使用的shell信息,当用户登录时,该文件仅仅执行一次。默认情况下,设置一些环境变量,执行用户的.bashrc文件。\n\n（4） ~/.bashrc: 该文件包含专用于你的bash shell的bash信息,当登录时以及每次打开新的shell时,该文件被读取。你可以在这里设置你的个性化终端了，就像下面这样\n\n\n（5） ~/.bash_logout: 当每次退出系统(退出bash shell)时,执行该文件. 另外,/etc/profile中设定的变量(全局)的可以作用于任何用户,而~/.bashrc等中设定的变量(局部)只能继承 /etc/profile中的变量,他们是”父子”关系。\n\n（6） ~/.bash_profile: 是交互式、login 方式进入 bash 运行的。~/.bashrc 是交互式 non-login 方式进入 bash 运行的通常二者设置大致相同，所以通常前者会调用后者。\n\n五、使用chkconfig管理，编辑/etc/init.d/下文件\n详细操作方法请看我的另一篇博客[点我看方法](https://blog.csdn.net/qq_44839276/article/details/107624188)\n————————————————\n版权声明：本文为CSDN博主「Hejing_zhang」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/qq_44839276/article/details/107622265","source":"_posts/linux-kaijiqidong.md","raw":"---\ntitle: linux设置开机启动（待完善）\ndate: 2022-10-19 12:29:54\ntags: linux\ncategories: 系统\n---\n话不多说，本文介绍几种方法，希望能够对你的胃口。\n文章目录\n一、编辑/etc/rc.d/rc.local文件\n二、crontab计划任务\n三、使用systemd，自己写个服务就ok了\n四、在/etc/profile.d/下写.sh文件\n五、使用chkconfig管理，编辑/etc/init.d/下文件\n一、编辑/etc/rc.d/rc.local文件\n在linux各项服务启动完毕之后，会运行/etc/rc.d/rc.local这个文件，所以把我们需要运行的脚本放在这里面就行了。\n（ps：/etc/rc.local和/etc/rc.d/rc.local是同一个文件，软链接而已）\n\n# cat /mnt/Autorun_script.sh\ndate > /tmp/bootup.txt\nhostname >> /tmp/bootup.txt\necho `whoami` >> /tmp/bootup.txt\n1\n2\n3\n4\n将/mnt/Autorun_script.sh这个脚本放到/etc/rc.d/rc.local这个文件最后一行\n\n\n最后为了保险起见，别忘了加一个权限\n\nchmod  +x /mnt/Autorun_script.sh\nchmod +x /etc/rc.d/rc.local\n1\n2\n重启效果见下\n\n\n二、crontab计划任务\n可以自己设置时间，下面介绍另一个特殊的任务，叫@reboot，重启之后自动运行脚本。\n\n效果见下\n\n\n三、使用systemd，自己写个服务就ok了\n上面介绍的两种方法，在任何的linux系统上都可以运行。第三种是适用systemd系统的，那么如何判定你的系统是不是systemd系统，运行ps命令\n\nPID为1的进程是systemd就是，反之。\n所以接下来，我们开始写systemd启动服务，并放在/etc/systemd/system/下。\n\n写完之后我们更新一下systemd的配置文件,大功告成。\n\nsystemctl daemon-reload\nsystemctl enable Autorun_script.service\n1\n2\n四、在/etc/profile.d/下写.sh文件\n在/etc/profile.d/下写.sh文件，reboot即可\n/etc/profile会遍历/etc/profile.d/*.sh\n\n\n另外，几个脚本的区别：\n（1） /etc/profile： 此文件为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行. 并从/etc/profile.d目录的配置文件中搜集shell的设置。\n\n（2） /etc/bashrc: 为每一个运行bash shell的用户执行此文件.当bash shell被打开时,该文件被读取（即每次新开一个终端，都会执行bashrc）。\n\n（3） ~/.bash_profile: 每个用户都可使用该文件输入专用于自己使用的shell信息,当用户登录时,该文件仅仅执行一次。默认情况下,设置一些环境变量,执行用户的.bashrc文件。\n\n（4） ~/.bashrc: 该文件包含专用于你的bash shell的bash信息,当登录时以及每次打开新的shell时,该文件被读取。你可以在这里设置你的个性化终端了，就像下面这样\n\n\n（5） ~/.bash_logout: 当每次退出系统(退出bash shell)时,执行该文件. 另外,/etc/profile中设定的变量(全局)的可以作用于任何用户,而~/.bashrc等中设定的变量(局部)只能继承 /etc/profile中的变量,他们是”父子”关系。\n\n（6） ~/.bash_profile: 是交互式、login 方式进入 bash 运行的。~/.bashrc 是交互式 non-login 方式进入 bash 运行的通常二者设置大致相同，所以通常前者会调用后者。\n\n五、使用chkconfig管理，编辑/etc/init.d/下文件\n详细操作方法请看我的另一篇博客[点我看方法](https://blog.csdn.net/qq_44839276/article/details/107624188)\n————————————————\n版权声明：本文为CSDN博主「Hejing_zhang」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/qq_44839276/article/details/107622265","slug":"linux-kaijiqidong","published":1,"updated":"2023-07-23T14:19:12.478Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkjdd1bl001698ajdex1162b","content":"<p>话不多说，本文介绍几种方法，希望能够对你的胃口。<br>文章目录<br>一、编辑&#x2F;etc&#x2F;rc.d&#x2F;rc.local文件<br>二、crontab计划任务<br>三、使用systemd，自己写个服务就ok了<br>四、在&#x2F;etc&#x2F;profile.d&#x2F;下写.sh文件<br>五、使用chkconfig管理，编辑&#x2F;etc&#x2F;init.d&#x2F;下文件<br>一、编辑&#x2F;etc&#x2F;rc.d&#x2F;rc.local文件<br>在linux各项服务启动完毕之后，会运行&#x2F;etc&#x2F;rc.d&#x2F;rc.local这个文件，所以把我们需要运行的脚本放在这里面就行了。<br>（ps：&#x2F;etc&#x2F;rc.local和&#x2F;etc&#x2F;rc.d&#x2F;rc.local是同一个文件，软链接而已）</p>\n<h1 id=\"cat-mnt-Autorun-script-sh\"><a href=\"#cat-mnt-Autorun-script-sh\" class=\"headerlink\" title=\"cat &#x2F;mnt&#x2F;Autorun_script.sh\"></a>cat &#x2F;mnt&#x2F;Autorun_script.sh</h1><p>date &gt; &#x2F;tmp&#x2F;bootup.txt<br>hostname &gt;&gt; &#x2F;tmp&#x2F;bootup.txt<br>echo <code>whoami</code> &gt;&gt; &#x2F;tmp&#x2F;bootup.txt<br>1<br>2<br>3<br>4<br>将&#x2F;mnt&#x2F;Autorun_script.sh这个脚本放到&#x2F;etc&#x2F;rc.d&#x2F;rc.local这个文件最后一行</p>\n<p>最后为了保险起见，别忘了加一个权限</p>\n<p>chmod  +x &#x2F;mnt&#x2F;Autorun_script.sh<br>chmod +x &#x2F;etc&#x2F;rc.d&#x2F;rc.local<br>1<br>2<br>重启效果见下</p>\n<p>二、crontab计划任务<br>可以自己设置时间，下面介绍另一个特殊的任务，叫@reboot，重启之后自动运行脚本。</p>\n<p>效果见下</p>\n<p>三、使用systemd，自己写个服务就ok了<br>上面介绍的两种方法，在任何的linux系统上都可以运行。第三种是适用systemd系统的，那么如何判定你的系统是不是systemd系统，运行ps命令</p>\n<p>PID为1的进程是systemd就是，反之。<br>所以接下来，我们开始写systemd启动服务，并放在&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;下。</p>\n<p>写完之后我们更新一下systemd的配置文件,大功告成。</p>\n<p>systemctl daemon-reload<br>systemctl enable Autorun_script.service<br>1<br>2<br>四、在&#x2F;etc&#x2F;profile.d&#x2F;下写.sh文件<br>在&#x2F;etc&#x2F;profile.d&#x2F;下写.sh文件，reboot即可<br>&#x2F;etc&#x2F;profile会遍历&#x2F;etc&#x2F;profile.d&#x2F;*.sh</p>\n<p>另外，几个脚本的区别：<br>（1） &#x2F;etc&#x2F;profile： 此文件为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行. 并从&#x2F;etc&#x2F;profile.d目录的配置文件中搜集shell的设置。</p>\n<p>（2） &#x2F;etc&#x2F;bashrc: 为每一个运行bash shell的用户执行此文件.当bash shell被打开时,该文件被读取（即每次新开一个终端，都会执行bashrc）。</p>\n<p>（3） ~&#x2F;.bash_profile: 每个用户都可使用该文件输入专用于自己使用的shell信息,当用户登录时,该文件仅仅执行一次。默认情况下,设置一些环境变量,执行用户的.bashrc文件。</p>\n<p>（4） ~&#x2F;.bashrc: 该文件包含专用于你的bash shell的bash信息,当登录时以及每次打开新的shell时,该文件被读取。你可以在这里设置你的个性化终端了，就像下面这样</p>\n<p>（5） <del>&#x2F;.bash_logout: 当每次退出系统(退出bash shell)时,执行该文件. 另外,&#x2F;etc&#x2F;profile中设定的变量(全局)的可以作用于任何用户,而</del>&#x2F;.bashrc等中设定的变量(局部)只能继承 &#x2F;etc&#x2F;profile中的变量,他们是”父子”关系。</p>\n<p>（6） <del>&#x2F;.bash_profile: 是交互式、login 方式进入 bash 运行的。</del>&#x2F;.bashrc 是交互式 non-login 方式进入 bash 运行的通常二者设置大致相同，所以通常前者会调用后者。</p>\n<p>五、使用chkconfig管理，编辑&#x2F;etc&#x2F;init.d&#x2F;下文件<br>详细操作方法请看我的另一篇博客<a href=\"https://blog.csdn.net/qq_44839276/article/details/107624188\">点我看方法</a><br>————————————————<br>版权声明：本文为CSDN博主「Hejing_zhang」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href=\"https://blog.csdn.net/qq_44839276/article/details/107622265\">https://blog.csdn.net/qq_44839276/article/details/107622265</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>话不多说，本文介绍几种方法，希望能够对你的胃口。<br>文章目录<br>一、编辑&#x2F;etc&#x2F;rc.d&#x2F;rc.local文件<br>二、crontab计划任务<br>三、使用systemd，自己写个服务就ok了<br>四、在&#x2F;etc&#x2F;profile.d&#x2F;下写.sh文件<br>五、使用chkconfig管理，编辑&#x2F;etc&#x2F;init.d&#x2F;下文件<br>一、编辑&#x2F;etc&#x2F;rc.d&#x2F;rc.local文件<br>在linux各项服务启动完毕之后，会运行&#x2F;etc&#x2F;rc.d&#x2F;rc.local这个文件，所以把我们需要运行的脚本放在这里面就行了。<br>（ps：&#x2F;etc&#x2F;rc.local和&#x2F;etc&#x2F;rc.d&#x2F;rc.local是同一个文件，软链接而已）</p>\n<h1 id=\"cat-mnt-Autorun-script-sh\"><a href=\"#cat-mnt-Autorun-script-sh\" class=\"headerlink\" title=\"cat &#x2F;mnt&#x2F;Autorun_script.sh\"></a>cat &#x2F;mnt&#x2F;Autorun_script.sh</h1><p>date &gt; &#x2F;tmp&#x2F;bootup.txt<br>hostname &gt;&gt; &#x2F;tmp&#x2F;bootup.txt<br>echo <code>whoami</code> &gt;&gt; &#x2F;tmp&#x2F;bootup.txt<br>1<br>2<br>3<br>4<br>将&#x2F;mnt&#x2F;Autorun_script.sh这个脚本放到&#x2F;etc&#x2F;rc.d&#x2F;rc.local这个文件最后一行</p>\n<p>最后为了保险起见，别忘了加一个权限</p>\n<p>chmod  +x &#x2F;mnt&#x2F;Autorun_script.sh<br>chmod +x &#x2F;etc&#x2F;rc.d&#x2F;rc.local<br>1<br>2<br>重启效果见下</p>\n<p>二、crontab计划任务<br>可以自己设置时间，下面介绍另一个特殊的任务，叫@reboot，重启之后自动运行脚本。</p>\n<p>效果见下</p>\n<p>三、使用systemd，自己写个服务就ok了<br>上面介绍的两种方法，在任何的linux系统上都可以运行。第三种是适用systemd系统的，那么如何判定你的系统是不是systemd系统，运行ps命令</p>\n<p>PID为1的进程是systemd就是，反之。<br>所以接下来，我们开始写systemd启动服务，并放在&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;下。</p>\n<p>写完之后我们更新一下systemd的配置文件,大功告成。</p>\n<p>systemctl daemon-reload<br>systemctl enable Autorun_script.service<br>1<br>2<br>四、在&#x2F;etc&#x2F;profile.d&#x2F;下写.sh文件<br>在&#x2F;etc&#x2F;profile.d&#x2F;下写.sh文件，reboot即可<br>&#x2F;etc&#x2F;profile会遍历&#x2F;etc&#x2F;profile.d&#x2F;*.sh</p>\n<p>另外，几个脚本的区别：<br>（1） &#x2F;etc&#x2F;profile： 此文件为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行. 并从&#x2F;etc&#x2F;profile.d目录的配置文件中搜集shell的设置。</p>\n<p>（2） &#x2F;etc&#x2F;bashrc: 为每一个运行bash shell的用户执行此文件.当bash shell被打开时,该文件被读取（即每次新开一个终端，都会执行bashrc）。</p>\n<p>（3） ~&#x2F;.bash_profile: 每个用户都可使用该文件输入专用于自己使用的shell信息,当用户登录时,该文件仅仅执行一次。默认情况下,设置一些环境变量,执行用户的.bashrc文件。</p>\n<p>（4） ~&#x2F;.bashrc: 该文件包含专用于你的bash shell的bash信息,当登录时以及每次打开新的shell时,该文件被读取。你可以在这里设置你的个性化终端了，就像下面这样</p>\n<p>（5） <del>&#x2F;.bash_logout: 当每次退出系统(退出bash shell)时,执行该文件. 另外,&#x2F;etc&#x2F;profile中设定的变量(全局)的可以作用于任何用户,而</del>&#x2F;.bashrc等中设定的变量(局部)只能继承 &#x2F;etc&#x2F;profile中的变量,他们是”父子”关系。</p>\n<p>（6） <del>&#x2F;.bash_profile: 是交互式、login 方式进入 bash 运行的。</del>&#x2F;.bashrc 是交互式 non-login 方式进入 bash 运行的通常二者设置大致相同，所以通常前者会调用后者。</p>\n<p>五、使用chkconfig管理，编辑&#x2F;etc&#x2F;init.d&#x2F;下文件<br>详细操作方法请看我的另一篇博客<a href=\"https://blog.csdn.net/qq_44839276/article/details/107624188\">点我看方法</a><br>————————————————<br>版权声明：本文为CSDN博主「Hejing_zhang」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href=\"https://blog.csdn.net/qq_44839276/article/details/107622265\">https://blog.csdn.net/qq_44839276/article/details/107622265</a></p>\n"},{"title":"linux-pi-HC-SR04","date":"2023-05-31T03:19:44.000Z","_content":"https://shumeipai.nxez.com/2019/01/02/hc-sr04-ultrasonic-ranging-module-on-raspberry-pi.html\n\n```python\n#导入 GPIO库\nimport RPi.GPIO as GPIO\nimport time\n  \n#设置 GPIO 模式为 BCM\nGPIO.setmode(GPIO.BCM)\n  \n#定义 GPIO 引脚\nGPIO_TRIGGER = 23\nGPIO_ECHO = 24\n  \n#设置 GPIO 的工作方式 (IN / OUT)\nGPIO.setup(GPIO_TRIGGER, GPIO.OUT)\nGPIO.setup(GPIO_ECHO, GPIO.IN)\n  \ndef distance():\n    # 发送高电平信号到 Trig 引脚\n    GPIO.output(GPIO_TRIGGER, True)\n  \n    # 持续 10 us \n    time.sleep(0.00001)\n    GPIO.output(GPIO_TRIGGER, False)\n  \n    start_time = time.time()\n    stop_time = time.time()\n  \n    # 记录发送超声波的时刻1\n    while GPIO.input(GPIO_ECHO) == 0:\n        start_time = time.time()\n  \n    # 记录接收到返回超声波的时刻2\n    while GPIO.input(GPIO_ECHO) == 1:\n        stop_time = time.time()\n  \n    # 计算超声波的往返时间 = 时刻2 - 时刻1\n    time_elapsed = stop_time - start_time\n    # 声波的速度为 343m/s， 转化为 34300cm/s。\n    distance = (time_elapsed * 34300) / 2\n  \n    return distance\n  \nif __name__ == '__main__':\n    try:\n        while True:\n            dist = distance()\n            print(\"Measured Distance = {:.2f} cm\".format(dist))\n            time.sleep(1)\n  \n        # Reset by pressing CTRL + C\n    except KeyboardInterrupt:\n        print(\"Measurement stopped by User\")\n        GPIO.cleanup()\n```","source":"_posts/linux-pi-HC-SR04.md","raw":"---\ntitle: linux-pi-HC-SR04\ncategories: 分类\ntags: 标签\ndate: 2023-05-31 11:19:44\n---\nhttps://shumeipai.nxez.com/2019/01/02/hc-sr04-ultrasonic-ranging-module-on-raspberry-pi.html\n\n```python\n#导入 GPIO库\nimport RPi.GPIO as GPIO\nimport time\n  \n#设置 GPIO 模式为 BCM\nGPIO.setmode(GPIO.BCM)\n  \n#定义 GPIO 引脚\nGPIO_TRIGGER = 23\nGPIO_ECHO = 24\n  \n#设置 GPIO 的工作方式 (IN / OUT)\nGPIO.setup(GPIO_TRIGGER, GPIO.OUT)\nGPIO.setup(GPIO_ECHO, GPIO.IN)\n  \ndef distance():\n    # 发送高电平信号到 Trig 引脚\n    GPIO.output(GPIO_TRIGGER, True)\n  \n    # 持续 10 us \n    time.sleep(0.00001)\n    GPIO.output(GPIO_TRIGGER, False)\n  \n    start_time = time.time()\n    stop_time = time.time()\n  \n    # 记录发送超声波的时刻1\n    while GPIO.input(GPIO_ECHO) == 0:\n        start_time = time.time()\n  \n    # 记录接收到返回超声波的时刻2\n    while GPIO.input(GPIO_ECHO) == 1:\n        stop_time = time.time()\n  \n    # 计算超声波的往返时间 = 时刻2 - 时刻1\n    time_elapsed = stop_time - start_time\n    # 声波的速度为 343m/s， 转化为 34300cm/s。\n    distance = (time_elapsed * 34300) / 2\n  \n    return distance\n  \nif __name__ == '__main__':\n    try:\n        while True:\n            dist = distance()\n            print(\"Measured Distance = {:.2f} cm\".format(dist))\n            time.sleep(1)\n  \n        # Reset by pressing CTRL + C\n    except KeyboardInterrupt:\n        print(\"Measurement stopped by User\")\n        GPIO.cleanup()\n```","slug":"linux-pi-HC-SR04","published":1,"updated":"2023-07-23T14:19:13.929Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkjdd1bn001998aj4nm1e1ap","content":"<p><a href=\"https://shumeipai.nxez.com/2019/01/02/hc-sr04-ultrasonic-ranging-module-on-raspberry-pi.html\">https://shumeipai.nxez.com/2019/01/02/hc-sr04-ultrasonic-ranging-module-on-raspberry-pi.html</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#导入 GPIO库</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> RPi.GPIO <span class=\"keyword\">as</span> GPIO</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#设置 GPIO 模式为 BCM</span></span><br><span class=\"line\">GPIO.setmode(GPIO.BCM)</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#定义 GPIO 引脚</span></span><br><span class=\"line\">GPIO_TRIGGER = <span class=\"number\">23</span></span><br><span class=\"line\">GPIO_ECHO = <span class=\"number\">24</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#设置 GPIO 的工作方式 (IN / OUT)</span></span><br><span class=\"line\">GPIO.setup(GPIO_TRIGGER, GPIO.OUT)</span><br><span class=\"line\">GPIO.setup(GPIO_ECHO, GPIO.IN)</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">distance</span>():</span><br><span class=\"line\">    <span class=\"comment\"># 发送高电平信号到 Trig 引脚</span></span><br><span class=\"line\">    GPIO.output(GPIO_TRIGGER, <span class=\"literal\">True</span>)</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\"># 持续 10 us </span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">0.00001</span>)</span><br><span class=\"line\">    GPIO.output(GPIO_TRIGGER, <span class=\"literal\">False</span>)</span><br><span class=\"line\">  </span><br><span class=\"line\">    start_time = time.time()</span><br><span class=\"line\">    stop_time = time.time()</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\"># 记录发送超声波的时刻1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> GPIO.<span class=\"built_in\">input</span>(GPIO_ECHO) == <span class=\"number\">0</span>:</span><br><span class=\"line\">        start_time = time.time()</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\"># 记录接收到返回超声波的时刻2</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> GPIO.<span class=\"built_in\">input</span>(GPIO_ECHO) == <span class=\"number\">1</span>:</span><br><span class=\"line\">        stop_time = time.time()</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\"># 计算超声波的往返时间 = 时刻2 - 时刻1</span></span><br><span class=\"line\">    time_elapsed = stop_time - start_time</span><br><span class=\"line\">    <span class=\"comment\"># 声波的速度为 343m/s， 转化为 34300cm/s。</span></span><br><span class=\"line\">    distance = (time_elapsed * <span class=\"number\">34300</span>) / <span class=\"number\">2</span></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> distance</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            dist = distance()</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Measured Distance = &#123;:.2f&#125; cm&quot;</span>.<span class=\"built_in\">format</span>(dist))</span><br><span class=\"line\">            time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\"># Reset by pressing CTRL + C</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> KeyboardInterrupt:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Measurement stopped by User&quot;</span>)</span><br><span class=\"line\">        GPIO.cleanup()</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://shumeipai.nxez.com/2019/01/02/hc-sr04-ultrasonic-ranging-module-on-raspberry-pi.html\">https://shumeipai.nxez.com/2019/01/02/hc-sr04-ultrasonic-ranging-module-on-raspberry-pi.html</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#导入 GPIO库</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> RPi.GPIO <span class=\"keyword\">as</span> GPIO</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#设置 GPIO 模式为 BCM</span></span><br><span class=\"line\">GPIO.setmode(GPIO.BCM)</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#定义 GPIO 引脚</span></span><br><span class=\"line\">GPIO_TRIGGER = <span class=\"number\">23</span></span><br><span class=\"line\">GPIO_ECHO = <span class=\"number\">24</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#设置 GPIO 的工作方式 (IN / OUT)</span></span><br><span class=\"line\">GPIO.setup(GPIO_TRIGGER, GPIO.OUT)</span><br><span class=\"line\">GPIO.setup(GPIO_ECHO, GPIO.IN)</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">distance</span>():</span><br><span class=\"line\">    <span class=\"comment\"># 发送高电平信号到 Trig 引脚</span></span><br><span class=\"line\">    GPIO.output(GPIO_TRIGGER, <span class=\"literal\">True</span>)</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\"># 持续 10 us </span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">0.00001</span>)</span><br><span class=\"line\">    GPIO.output(GPIO_TRIGGER, <span class=\"literal\">False</span>)</span><br><span class=\"line\">  </span><br><span class=\"line\">    start_time = time.time()</span><br><span class=\"line\">    stop_time = time.time()</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\"># 记录发送超声波的时刻1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> GPIO.<span class=\"built_in\">input</span>(GPIO_ECHO) == <span class=\"number\">0</span>:</span><br><span class=\"line\">        start_time = time.time()</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\"># 记录接收到返回超声波的时刻2</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> GPIO.<span class=\"built_in\">input</span>(GPIO_ECHO) == <span class=\"number\">1</span>:</span><br><span class=\"line\">        stop_time = time.time()</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\"># 计算超声波的往返时间 = 时刻2 - 时刻1</span></span><br><span class=\"line\">    time_elapsed = stop_time - start_time</span><br><span class=\"line\">    <span class=\"comment\"># 声波的速度为 343m/s， 转化为 34300cm/s。</span></span><br><span class=\"line\">    distance = (time_elapsed * <span class=\"number\">34300</span>) / <span class=\"number\">2</span></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> distance</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            dist = distance()</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Measured Distance = &#123;:.2f&#125; cm&quot;</span>.<span class=\"built_in\">format</span>(dist))</span><br><span class=\"line\">            time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\"># Reset by pressing CTRL + C</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> KeyboardInterrupt:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Measurement stopped by User&quot;</span>)</span><br><span class=\"line\">        GPIO.cleanup()</span><br></pre></td></tr></table></figure>"},{"title":"MPU6050-pi","date":"2023-05-31T02:29:02.000Z","_content":"\nhttps://developer.aliyun.com/article/796110\n\n```python\n#coding:utf-8\n\nimport smbus\nimport math\nimport time\n\n# 电源控制寄存器地址\npower_regist = 0x6b\n\n# I2C模块初始化\nbus = smbus.SMBus(1)\n# 外接I2C设备的地址\naddress = 0x68\n\n# 封装一些读取数据的功能函数\n\n# 读取一个字长度的数据(16位)\ndef readWord(adr):\n    high = bus.read_byte_data(address, adr)\n    low = bus.read_byte_data(address, adr+1)\n    val = (high << 8) + low\n    return val\n\n# 将读取到的数据转换为原码 (有符号数本身是采用补码方式存储的)\ndef readWordReal(adr):\n    val = readWord(adr)\n    x = 0xffff\n    # 首位为1 表示是负数\n    if (val >= 0x8000):\n        # 求原码\n        return -((x - val)+1)\n    else:\n        return val\n\n# 已知加速度求角度值\ndef dist(a, b):\n    return math.sqrt((a*a)+(b*b))\n\ndef getRotationX(x, y, z):\n    radians = math.atan2(y, dist(x,z))\n    return math.degrees(radians)\n\ndef getRotationY(x, y, z):\n    radians = math.atan2(x, dist(y,z))\n    return math.degrees(radians)\n\n# 设置电源模式\nbus.write_byte_data(address, power_regist, 0)\n\n\nwhile True:\n    time.sleep(0.5)\n    print(\"螺旋仪数据-----------\")\n    gyroX = readWordReal(0x43)\n    gyroY = readWordReal(0x45)\n    gyroZ = readWordReal(0x47)\n\n    print(\"X轴陀螺仪原始数据：\", gyroX, \"X轴每秒旋转度数：\", gyroX/131)\n    print(\"Y轴陀螺仪原始数据：\", gyroY, \"Y轴每秒旋转度数：\", gyroY/131)\n    print(\"Z轴陀螺仪原始数据：\", gyroZ, \"Z轴每秒旋转度数：\", gyroZ/131)\n\n    print(\"加速度数据----------\")\n    accelX = readWordReal(0x3b)\n    accelY = readWordReal(0x3d)\n    accelZ = readWordReal(0x3f)\n\n    print(\"X轴加速度原始数据：\", accelX, \"X轴加速度：\", accelX/16384)\n    print(\"Y轴加速度原始数据：\", accelY, \"Y轴加速度：\", accelY/16384)\n    print(\"Z轴加速度原始数据：\", accelZ, \"Z轴加速度：\", accelZ/16384)\n\n    print(\"摄氏温度数据--------\")\n    temp = readWordReal(0x41)\n    print(\"温度原始数据：\", temp, \"摄氏度：\", temp/340 + 36.53)\n\n    print(\"旋转家角度数据-------\")\n    print(\"X轴旋转度数：\", getRotationX(accelX/16384, accelY/16384, accelZ/16384))\n    print(\"Y轴旋转度数：\", getRotationX(accelX/16384, accelY/16384, accelZ/16384))\n```","source":"_posts/linux-pi-MPU6050.md","raw":"---\ntitle: MPU6050-pi\ndate: 2023-05-31 10:29:02\ncategories: 开发\ntags: \n    - linux\n    - 树莓派\n    - SSD1309\n---\n\nhttps://developer.aliyun.com/article/796110\n\n```python\n#coding:utf-8\n\nimport smbus\nimport math\nimport time\n\n# 电源控制寄存器地址\npower_regist = 0x6b\n\n# I2C模块初始化\nbus = smbus.SMBus(1)\n# 外接I2C设备的地址\naddress = 0x68\n\n# 封装一些读取数据的功能函数\n\n# 读取一个字长度的数据(16位)\ndef readWord(adr):\n    high = bus.read_byte_data(address, adr)\n    low = bus.read_byte_data(address, adr+1)\n    val = (high << 8) + low\n    return val\n\n# 将读取到的数据转换为原码 (有符号数本身是采用补码方式存储的)\ndef readWordReal(adr):\n    val = readWord(adr)\n    x = 0xffff\n    # 首位为1 表示是负数\n    if (val >= 0x8000):\n        # 求原码\n        return -((x - val)+1)\n    else:\n        return val\n\n# 已知加速度求角度值\ndef dist(a, b):\n    return math.sqrt((a*a)+(b*b))\n\ndef getRotationX(x, y, z):\n    radians = math.atan2(y, dist(x,z))\n    return math.degrees(radians)\n\ndef getRotationY(x, y, z):\n    radians = math.atan2(x, dist(y,z))\n    return math.degrees(radians)\n\n# 设置电源模式\nbus.write_byte_data(address, power_regist, 0)\n\n\nwhile True:\n    time.sleep(0.5)\n    print(\"螺旋仪数据-----------\")\n    gyroX = readWordReal(0x43)\n    gyroY = readWordReal(0x45)\n    gyroZ = readWordReal(0x47)\n\n    print(\"X轴陀螺仪原始数据：\", gyroX, \"X轴每秒旋转度数：\", gyroX/131)\n    print(\"Y轴陀螺仪原始数据：\", gyroY, \"Y轴每秒旋转度数：\", gyroY/131)\n    print(\"Z轴陀螺仪原始数据：\", gyroZ, \"Z轴每秒旋转度数：\", gyroZ/131)\n\n    print(\"加速度数据----------\")\n    accelX = readWordReal(0x3b)\n    accelY = readWordReal(0x3d)\n    accelZ = readWordReal(0x3f)\n\n    print(\"X轴加速度原始数据：\", accelX, \"X轴加速度：\", accelX/16384)\n    print(\"Y轴加速度原始数据：\", accelY, \"Y轴加速度：\", accelY/16384)\n    print(\"Z轴加速度原始数据：\", accelZ, \"Z轴加速度：\", accelZ/16384)\n\n    print(\"摄氏温度数据--------\")\n    temp = readWordReal(0x41)\n    print(\"温度原始数据：\", temp, \"摄氏度：\", temp/340 + 36.53)\n\n    print(\"旋转家角度数据-------\")\n    print(\"X轴旋转度数：\", getRotationX(accelX/16384, accelY/16384, accelZ/16384))\n    print(\"Y轴旋转度数：\", getRotationX(accelX/16384, accelY/16384, accelZ/16384))\n```","slug":"linux-pi-MPU6050","published":1,"updated":"2023-07-23T14:19:14.340Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkjdd1bp001b98ajghnt1w4j","content":"<p><a href=\"https://developer.aliyun.com/article/796110\">https://developer.aliyun.com/article/796110</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#coding:utf-8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> smbus</span><br><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 电源控制寄存器地址</span></span><br><span class=\"line\">power_regist = <span class=\"number\">0x6b</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># I2C模块初始化</span></span><br><span class=\"line\">bus = smbus.SMBus(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\"># 外接I2C设备的地址</span></span><br><span class=\"line\">address = <span class=\"number\">0x68</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 封装一些读取数据的功能函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取一个字长度的数据(16位)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">readWord</span>(<span class=\"params\">adr</span>):</span><br><span class=\"line\">    high = bus.read_byte_data(address, adr)</span><br><span class=\"line\">    low = bus.read_byte_data(address, adr+<span class=\"number\">1</span>)</span><br><span class=\"line\">    val = (high &lt;&lt; <span class=\"number\">8</span>) + low</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将读取到的数据转换为原码 (有符号数本身是采用补码方式存储的)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">readWordReal</span>(<span class=\"params\">adr</span>):</span><br><span class=\"line\">    val = readWord(adr)</span><br><span class=\"line\">    x = <span class=\"number\">0xffff</span></span><br><span class=\"line\">    <span class=\"comment\"># 首位为1 表示是负数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (val &gt;= <span class=\"number\">0x8000</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 求原码</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> -((x - val)+<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> val</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 已知加速度求角度值</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">dist</span>(<span class=\"params\">a, b</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> math.sqrt((a*a)+(b*b))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">getRotationX</span>(<span class=\"params\">x, y, z</span>):</span><br><span class=\"line\">    radians = math.atan2(y, dist(x,z))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> math.degrees(radians)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">getRotationY</span>(<span class=\"params\">x, y, z</span>):</span><br><span class=\"line\">    radians = math.atan2(x, dist(y,z))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> math.degrees(radians)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置电源模式</span></span><br><span class=\"line\">bus.write_byte_data(address, power_regist, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    time.sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;螺旋仪数据-----------&quot;</span>)</span><br><span class=\"line\">    gyroX = readWordReal(<span class=\"number\">0x43</span>)</span><br><span class=\"line\">    gyroY = readWordReal(<span class=\"number\">0x45</span>)</span><br><span class=\"line\">    gyroZ = readWordReal(<span class=\"number\">0x47</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;X轴陀螺仪原始数据：&quot;</span>, gyroX, <span class=\"string\">&quot;X轴每秒旋转度数：&quot;</span>, gyroX/<span class=\"number\">131</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Y轴陀螺仪原始数据：&quot;</span>, gyroY, <span class=\"string\">&quot;Y轴每秒旋转度数：&quot;</span>, gyroY/<span class=\"number\">131</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Z轴陀螺仪原始数据：&quot;</span>, gyroZ, <span class=\"string\">&quot;Z轴每秒旋转度数：&quot;</span>, gyroZ/<span class=\"number\">131</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;加速度数据----------&quot;</span>)</span><br><span class=\"line\">    accelX = readWordReal(<span class=\"number\">0x3b</span>)</span><br><span class=\"line\">    accelY = readWordReal(<span class=\"number\">0x3d</span>)</span><br><span class=\"line\">    accelZ = readWordReal(<span class=\"number\">0x3f</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;X轴加速度原始数据：&quot;</span>, accelX, <span class=\"string\">&quot;X轴加速度：&quot;</span>, accelX/<span class=\"number\">16384</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Y轴加速度原始数据：&quot;</span>, accelY, <span class=\"string\">&quot;Y轴加速度：&quot;</span>, accelY/<span class=\"number\">16384</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Z轴加速度原始数据：&quot;</span>, accelZ, <span class=\"string\">&quot;Z轴加速度：&quot;</span>, accelZ/<span class=\"number\">16384</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;摄氏温度数据--------&quot;</span>)</span><br><span class=\"line\">    temp = readWordReal(<span class=\"number\">0x41</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;温度原始数据：&quot;</span>, temp, <span class=\"string\">&quot;摄氏度：&quot;</span>, temp/<span class=\"number\">340</span> + <span class=\"number\">36.53</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;旋转家角度数据-------&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;X轴旋转度数：&quot;</span>, getRotationX(accelX/<span class=\"number\">16384</span>, accelY/<span class=\"number\">16384</span>, accelZ/<span class=\"number\">16384</span>))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Y轴旋转度数：&quot;</span>, getRotationX(accelX/<span class=\"number\">16384</span>, accelY/<span class=\"number\">16384</span>, accelZ/<span class=\"number\">16384</span>))</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://developer.aliyun.com/article/796110\">https://developer.aliyun.com/article/796110</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#coding:utf-8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> smbus</span><br><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 电源控制寄存器地址</span></span><br><span class=\"line\">power_regist = <span class=\"number\">0x6b</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># I2C模块初始化</span></span><br><span class=\"line\">bus = smbus.SMBus(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\"># 外接I2C设备的地址</span></span><br><span class=\"line\">address = <span class=\"number\">0x68</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 封装一些读取数据的功能函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取一个字长度的数据(16位)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">readWord</span>(<span class=\"params\">adr</span>):</span><br><span class=\"line\">    high = bus.read_byte_data(address, adr)</span><br><span class=\"line\">    low = bus.read_byte_data(address, adr+<span class=\"number\">1</span>)</span><br><span class=\"line\">    val = (high &lt;&lt; <span class=\"number\">8</span>) + low</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将读取到的数据转换为原码 (有符号数本身是采用补码方式存储的)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">readWordReal</span>(<span class=\"params\">adr</span>):</span><br><span class=\"line\">    val = readWord(adr)</span><br><span class=\"line\">    x = <span class=\"number\">0xffff</span></span><br><span class=\"line\">    <span class=\"comment\"># 首位为1 表示是负数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (val &gt;= <span class=\"number\">0x8000</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 求原码</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> -((x - val)+<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> val</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 已知加速度求角度值</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">dist</span>(<span class=\"params\">a, b</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> math.sqrt((a*a)+(b*b))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">getRotationX</span>(<span class=\"params\">x, y, z</span>):</span><br><span class=\"line\">    radians = math.atan2(y, dist(x,z))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> math.degrees(radians)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">getRotationY</span>(<span class=\"params\">x, y, z</span>):</span><br><span class=\"line\">    radians = math.atan2(x, dist(y,z))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> math.degrees(radians)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置电源模式</span></span><br><span class=\"line\">bus.write_byte_data(address, power_regist, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    time.sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;螺旋仪数据-----------&quot;</span>)</span><br><span class=\"line\">    gyroX = readWordReal(<span class=\"number\">0x43</span>)</span><br><span class=\"line\">    gyroY = readWordReal(<span class=\"number\">0x45</span>)</span><br><span class=\"line\">    gyroZ = readWordReal(<span class=\"number\">0x47</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;X轴陀螺仪原始数据：&quot;</span>, gyroX, <span class=\"string\">&quot;X轴每秒旋转度数：&quot;</span>, gyroX/<span class=\"number\">131</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Y轴陀螺仪原始数据：&quot;</span>, gyroY, <span class=\"string\">&quot;Y轴每秒旋转度数：&quot;</span>, gyroY/<span class=\"number\">131</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Z轴陀螺仪原始数据：&quot;</span>, gyroZ, <span class=\"string\">&quot;Z轴每秒旋转度数：&quot;</span>, gyroZ/<span class=\"number\">131</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;加速度数据----------&quot;</span>)</span><br><span class=\"line\">    accelX = readWordReal(<span class=\"number\">0x3b</span>)</span><br><span class=\"line\">    accelY = readWordReal(<span class=\"number\">0x3d</span>)</span><br><span class=\"line\">    accelZ = readWordReal(<span class=\"number\">0x3f</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;X轴加速度原始数据：&quot;</span>, accelX, <span class=\"string\">&quot;X轴加速度：&quot;</span>, accelX/<span class=\"number\">16384</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Y轴加速度原始数据：&quot;</span>, accelY, <span class=\"string\">&quot;Y轴加速度：&quot;</span>, accelY/<span class=\"number\">16384</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Z轴加速度原始数据：&quot;</span>, accelZ, <span class=\"string\">&quot;Z轴加速度：&quot;</span>, accelZ/<span class=\"number\">16384</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;摄氏温度数据--------&quot;</span>)</span><br><span class=\"line\">    temp = readWordReal(<span class=\"number\">0x41</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;温度原始数据：&quot;</span>, temp, <span class=\"string\">&quot;摄氏度：&quot;</span>, temp/<span class=\"number\">340</span> + <span class=\"number\">36.53</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;旋转家角度数据-------&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;X轴旋转度数：&quot;</span>, getRotationX(accelX/<span class=\"number\">16384</span>, accelY/<span class=\"number\">16384</span>, accelZ/<span class=\"number\">16384</span>))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Y轴旋转度数：&quot;</span>, getRotationX(accelX/<span class=\"number\">16384</span>, accelY/<span class=\"number\">16384</span>, accelZ/<span class=\"number\">16384</span>))</span><br></pre></td></tr></table></figure>"},{"title":"linux-python-yolo5","date":"2023-05-31T02:58:36.000Z","_content":"https://blog.csdn.net/m0_55833308/article/details/122633544","source":"_posts/linux-python-yolo5.md","raw":"---\ntitle: linux-python-yolo5\ncategories: 分类\ntags: 标签\ndate: 2023-05-31 10:58:36\n---\nhttps://blog.csdn.net/m0_55833308/article/details/122633544","slug":"linux-python-yolo5","published":1,"updated":"2023-07-23T14:19:11.777Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkjdd1bq001d98ajdpurdg5g","content":"<p><a href=\"https://blog.csdn.net/m0_55833308/article/details/122633544\">https://blog.csdn.net/m0_55833308/article/details/122633544</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://blog.csdn.net/m0_55833308/article/details/122633544\">https://blog.csdn.net/m0_55833308/article/details/122633544</a></p>\n"},{"title":"linux-pi-SSD1309","date":"2023-05-31T02:38:54.000Z","_content":"https://blog.csdn.net/u011198687/article/details/120347965","source":"_posts/linux-pi-SSD1309.md","raw":"---\ntitle: linux-pi-SSD1309\ndate: 2023-05-31 10:38:54\ncategories: 开发\ntags: \n    - linux\n    - 树莓派\n    - SSD1309\n---\nhttps://blog.csdn.net/u011198687/article/details/120347965","slug":"linux-pi-SSD1309","published":1,"updated":"2023-07-23T14:19:14.399Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkjdd1bs001h98ajeygc787q","content":"<p><a href=\"https://blog.csdn.net/u011198687/article/details/120347965\">https://blog.csdn.net/u011198687/article/details/120347965</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://blog.csdn.net/u011198687/article/details/120347965\">https://blog.csdn.net/u011198687/article/details/120347965</a></p>\n"},{"title":"linux中sh文件使用方法","date":"2022-10-19T11:32:29.000Z","_content":"linux sh命令简述\n1. 可能需要的执行方式\nlinux下执行.sh文件的方法\n2. 开头：#!/bin/sh\n3. 变量\n4. Shell命令和流程控制\nUnix命令\n概念：管道，重定向和backtick（反斜线）\n流程控制\n1. 可能需要的执行方式\nlinux下执行.sh文件的方法\n.sh文件就是文本文件，如果要执行，需要使用chmod a+x xxx.sh来给可执行权限。\n\n2. 开头：#!/bin/sh\nshell程序必须以“#!/bin/sh”开始。shell中#一般表示注释的意思，所以很多时候认为\"#!\"也是注释，但实际上并不是。\n\n\"#!/bin/sh\"是对shell的声明，说明你所用的是哪种类型的shell及其路径所在。\n\n#!/bin/是指此脚本使用.bin/sh来执行。\n\n#!是特殊的表示符，其后面跟的是解释此脚本的shell的路径，如果没有声明，则脚本将在默认的shell中执行，默认shell是由用户所在的系统定义为执行shell脚本，如果脚本被编写为在Kornshell ksh中运行，而默认运行shell脚本的为C shell csh,则脚本在执行过程中很可能失败。所以建议大家就把\"#!/bin/sh\"当成C 语言的main函数一样，写shell必须有，以使shell程序更严密。\n\n3. 变量\n在其他编程语言中必须使用变量。在shell编程中，所有变量都由字符串组成，并且不需要对变量进行声明。要赋值给一个变量，可以这样写：\n\n#!/bin/sh\n #对变量赋值：\n a=”hello world”\n# 现在打印变量a的内容：\n echo “A is:”\n echo $a\n1\n2\n3\n4\n5\n6\n有时候变量名很容易与其他文字混淆，比如：\n\n num=2\n echo “this is the $numnd”\n1\n2\n这并不会打印出”this is the 2nd\"，而仅仅打印\"this is the \"，因为shell会去搜索变量numnd的值，但是这个变量是没有值的。因此，可以使用花括号来告诉shell我们要打印的是num变量：\n\n num=2\n echo “this is the ${num}nd”\n1\n2\n这样才会打印”this is the 2nd\"\n\n4. Shell命令和流程控制\n在shell脚本中可以使用以下命令：\n\nUnix命令\n虽然在shell脚本中可以使用任意的unix命令，但还是有一些相对更常用的命令。这些命令通常是用来进行文件和文字操作的。\n如：\n\n echo \"some text\" #将文字内容打印在屏幕上\n ls #文件列表\n cp sourcefile destfile #文件拷贝\n mv oldname newname #重命名文件或移动文件\n rm file #删除文件\n grep 'pattern' file #在文件内搜索字符串，如：grep 'searchstring' file.txt\n cat file.txt #输出文件内容到标准输出设备（屏幕）上\n read var #显示用户输入，并将输入赋值给变量\n1\n2\n3\n4\n5\n6\n7\n8\n概念：管道，重定向和backtick（反斜线）\n管道 | 将一个命令的输出作为另外一个命令的输入。\ngrep \"hello\" file.txt | wc -l\n1\n上述代码表示为：在 file.txt 中搜索包含有 “hello” 的行并计算其行数。在这里grep命令的输出作为wc命令的输入。\n\n需要注意的是，管道后的命令是子命令，并不会出现在接下来的命令中（有点像C++在{}内和{}外赋值的区别），如以下命令：\n\n#!/bin/sh\necho 1 2 3 | { read a b c ; echo $a $b $c ; } # 打印结果为： 1 2 3\necho $a $b $c # 打印结果为空\n1\n2\n3\n重定向：将命令的结果输出到文件，而不是标准输出（屏幕）。\n>写入文件并覆盖旧文件\n>>追加到文件的尾部，保留旧文件内容。\n\n反短横线 “`”：使用反短横线可以将一个命令的输出作为另一个命令的一个命令行参数。\n\n find . -mtime  -1  -type  f  -print\n1\n上述语句用来查找过去24小时（-mtime -2则表示过去48小时）内修改过的文件。如果想将所有查找到的文件打一个包，则可以使用一下linux脚本：\n\n #!/bin/sh\n # The ticks are backticks (`) not normal quotes (‘):\n tar -zcvf  lastmod.tar.gz `find . -mtime -1 -type f -print`\n1\n2\n3\n流程控制\nif\nif 表达式，如果条件为真则执行 then 后面的部分：\n\n if ….; then\n ….\n elif ….; then\n ….\n else\n ….\n fi #注意是以fi结尾\n1\n2\n3\n4\n5\n6\n7\n大多数情况下，可以使用测试命令来对条件进行测试。比如可以比较字符串、判断文件时都存在以及是否可读等等…\n\nwhile\nwhile 循环的语法结构为：\n\n# expression 1\n# while循环：当expresssion成立的时候，执行cmd\nwhile (expresssion)\ndo\n  cmd\ndone\n\n# expression 2，可以直接使用true\nwhile true（或 ：）\ndo \n\tcmd\ndone  \n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n该命令配合可以配合管道使用，如：\n\n# 寻找 ${path} 路径下唯一首字母为‘E’的子目录，并 cd 到该目录\nfind ${path}/E* -type d | while read corresp_path\ndo\n\tcd ${corresp_path}\ndone\n1\n2\n3\n4\n5\n测试条件\n通常使用“[ ]”来表示测试条件。注意这里的空格很重要，要确保方括号里的空格。\n\n [ -f \"somefile\" ] #判断文件是否存在\n [ -d \"testResults/\" ] #判断目录testResults/是否存在\n [ -x \"/bin/ls\" ] #判断/bin/ls文件是否存在并有可执行权限\n [ -n \"$var\" ] #判断$var变量是否有值\n [ \"$a\" = \"$b\" ] #判断$a和$b是否相等\n1\n2\n3\n4\n5\n快捷操作符\n熟悉C语言可能会喜欢一下表达式：\n\n  [ -f \"/etc/shadow\" ] && echo “This computer uses shadow passwors”\n1\n这里“&&”就是一个快捷操作符，如果左边的表达式为真则执行右边的语句。当然也可以将上述表达式认为是逻辑运算中的与操作。\n\n同样或操作“||”在shell编程中也是可用的：\n\n #!/bin/sh\n mailfolder=/var/spool/mail/james\n [ -r \"$mailfolder\" ]‘ ‘{ echo “Can not read $mailfolder” ; exit 1; } #感觉这里的‘’应该是||\n echo “$mailfolder has mail from:”\n grep “^From ” $mailfolder\n1\n2\n3\n4\n5\n该脚本首先判断mailfolder是否可读。如果可读则打印该文件中的”From” 一行。如果不可读则或操作生效，打印错误信息后脚本退出。这里有个问题，那就是我们必须有两个命令：\n◆打印错误信息\n◆退出程序\n我们使用花括号以匿名函数的形式将两个命令放到一起作为一个命令使用。一般函数将在下文提及。\n不用‘与’和‘或’操作符，我们也可以用if表达式作任何事情，但是使用与或操作符会更便利很多。\n————————————————\n版权声明：本文为CSDN博主「泠山」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/qq_28087491/article/details/107107342\n\n\n---\n\nhttps://www.php.cn/linux-421139.html\n\nlinux怎么执行sh文件\n原创2019-05-29 16:56:5640961\n\n\n本文介绍Linux下面用命令怎么执行.sh文件的方法，有两种方法：\n\n一、直接./加上文件名.sh，如运行hello.sh为./hello.sh【hello.sh必须有x权限】\n\n二、直接sh 加上文件名.sh，如运行hello.sh为sh hello.sh【hello.sh可以没有x权限】\n\n方法一：当前目录执行.sh文件\n\n【步骤一】cd到.sh文件所在目录\n\n比如以hello.sh文件为例，如下图\n\nb025c277daad47225f2a582b20c475c.png\n\n【步骤二】给.sh文件添加x执行权限\n\n比如以hello.sh文件为例，chmod u+x hello.sh，如下图\n\nf871b7b1652765e6991f3d7fc4e8e92.png\n\n【步骤三】./执行.sh文件\n\n比如以hello.sh文件为例，./hello.sh 即可执行hello.sh文件，如下图\n\ndab3467991cdb86c70255f48c1ca03c.png\n\n【步骤四】sh 执行.sh文件\n\n以hello.sh文件为例，sh hello.sh即可执行hello.sh文件，如下图\n\n2ec0b33ee81cc50a16f47be2ae400c3.png\n\n方法二：绝对路径执行.sh文件\n\n下面三种方法都可以，如下图\n\n\n\n\n./home/test/shell/hello.sh\n\n/home/test/shell/hello.sh\n\nsh /home/test/shell/hello.sh\n\n60c14a51c0b1d39dfbfa312bdf8e9ab.png\n\n注意事项：用“./”加文件名.sh执行时，必须给.sh文件加x执行权限。\n\n以上就是linux怎么执行sh文件的详细内容，更多请关注php中文网其它相关文章！\n\n\n\n\n","source":"_posts/linux-sh.md","raw":"---\ntitle: linux中sh文件使用方法\ndate: 2022-10-19 19:32:29\ntags: linux\ncategories: 系统\n---\nlinux sh命令简述\n1. 可能需要的执行方式\nlinux下执行.sh文件的方法\n2. 开头：#!/bin/sh\n3. 变量\n4. Shell命令和流程控制\nUnix命令\n概念：管道，重定向和backtick（反斜线）\n流程控制\n1. 可能需要的执行方式\nlinux下执行.sh文件的方法\n.sh文件就是文本文件，如果要执行，需要使用chmod a+x xxx.sh来给可执行权限。\n\n2. 开头：#!/bin/sh\nshell程序必须以“#!/bin/sh”开始。shell中#一般表示注释的意思，所以很多时候认为\"#!\"也是注释，但实际上并不是。\n\n\"#!/bin/sh\"是对shell的声明，说明你所用的是哪种类型的shell及其路径所在。\n\n#!/bin/是指此脚本使用.bin/sh来执行。\n\n#!是特殊的表示符，其后面跟的是解释此脚本的shell的路径，如果没有声明，则脚本将在默认的shell中执行，默认shell是由用户所在的系统定义为执行shell脚本，如果脚本被编写为在Kornshell ksh中运行，而默认运行shell脚本的为C shell csh,则脚本在执行过程中很可能失败。所以建议大家就把\"#!/bin/sh\"当成C 语言的main函数一样，写shell必须有，以使shell程序更严密。\n\n3. 变量\n在其他编程语言中必须使用变量。在shell编程中，所有变量都由字符串组成，并且不需要对变量进行声明。要赋值给一个变量，可以这样写：\n\n#!/bin/sh\n #对变量赋值：\n a=”hello world”\n# 现在打印变量a的内容：\n echo “A is:”\n echo $a\n1\n2\n3\n4\n5\n6\n有时候变量名很容易与其他文字混淆，比如：\n\n num=2\n echo “this is the $numnd”\n1\n2\n这并不会打印出”this is the 2nd\"，而仅仅打印\"this is the \"，因为shell会去搜索变量numnd的值，但是这个变量是没有值的。因此，可以使用花括号来告诉shell我们要打印的是num变量：\n\n num=2\n echo “this is the ${num}nd”\n1\n2\n这样才会打印”this is the 2nd\"\n\n4. Shell命令和流程控制\n在shell脚本中可以使用以下命令：\n\nUnix命令\n虽然在shell脚本中可以使用任意的unix命令，但还是有一些相对更常用的命令。这些命令通常是用来进行文件和文字操作的。\n如：\n\n echo \"some text\" #将文字内容打印在屏幕上\n ls #文件列表\n cp sourcefile destfile #文件拷贝\n mv oldname newname #重命名文件或移动文件\n rm file #删除文件\n grep 'pattern' file #在文件内搜索字符串，如：grep 'searchstring' file.txt\n cat file.txt #输出文件内容到标准输出设备（屏幕）上\n read var #显示用户输入，并将输入赋值给变量\n1\n2\n3\n4\n5\n6\n7\n8\n概念：管道，重定向和backtick（反斜线）\n管道 | 将一个命令的输出作为另外一个命令的输入。\ngrep \"hello\" file.txt | wc -l\n1\n上述代码表示为：在 file.txt 中搜索包含有 “hello” 的行并计算其行数。在这里grep命令的输出作为wc命令的输入。\n\n需要注意的是，管道后的命令是子命令，并不会出现在接下来的命令中（有点像C++在{}内和{}外赋值的区别），如以下命令：\n\n#!/bin/sh\necho 1 2 3 | { read a b c ; echo $a $b $c ; } # 打印结果为： 1 2 3\necho $a $b $c # 打印结果为空\n1\n2\n3\n重定向：将命令的结果输出到文件，而不是标准输出（屏幕）。\n>写入文件并覆盖旧文件\n>>追加到文件的尾部，保留旧文件内容。\n\n反短横线 “`”：使用反短横线可以将一个命令的输出作为另一个命令的一个命令行参数。\n\n find . -mtime  -1  -type  f  -print\n1\n上述语句用来查找过去24小时（-mtime -2则表示过去48小时）内修改过的文件。如果想将所有查找到的文件打一个包，则可以使用一下linux脚本：\n\n #!/bin/sh\n # The ticks are backticks (`) not normal quotes (‘):\n tar -zcvf  lastmod.tar.gz `find . -mtime -1 -type f -print`\n1\n2\n3\n流程控制\nif\nif 表达式，如果条件为真则执行 then 后面的部分：\n\n if ….; then\n ….\n elif ….; then\n ….\n else\n ….\n fi #注意是以fi结尾\n1\n2\n3\n4\n5\n6\n7\n大多数情况下，可以使用测试命令来对条件进行测试。比如可以比较字符串、判断文件时都存在以及是否可读等等…\n\nwhile\nwhile 循环的语法结构为：\n\n# expression 1\n# while循环：当expresssion成立的时候，执行cmd\nwhile (expresssion)\ndo\n  cmd\ndone\n\n# expression 2，可以直接使用true\nwhile true（或 ：）\ndo \n\tcmd\ndone  \n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n该命令配合可以配合管道使用，如：\n\n# 寻找 ${path} 路径下唯一首字母为‘E’的子目录，并 cd 到该目录\nfind ${path}/E* -type d | while read corresp_path\ndo\n\tcd ${corresp_path}\ndone\n1\n2\n3\n4\n5\n测试条件\n通常使用“[ ]”来表示测试条件。注意这里的空格很重要，要确保方括号里的空格。\n\n [ -f \"somefile\" ] #判断文件是否存在\n [ -d \"testResults/\" ] #判断目录testResults/是否存在\n [ -x \"/bin/ls\" ] #判断/bin/ls文件是否存在并有可执行权限\n [ -n \"$var\" ] #判断$var变量是否有值\n [ \"$a\" = \"$b\" ] #判断$a和$b是否相等\n1\n2\n3\n4\n5\n快捷操作符\n熟悉C语言可能会喜欢一下表达式：\n\n  [ -f \"/etc/shadow\" ] && echo “This computer uses shadow passwors”\n1\n这里“&&”就是一个快捷操作符，如果左边的表达式为真则执行右边的语句。当然也可以将上述表达式认为是逻辑运算中的与操作。\n\n同样或操作“||”在shell编程中也是可用的：\n\n #!/bin/sh\n mailfolder=/var/spool/mail/james\n [ -r \"$mailfolder\" ]‘ ‘{ echo “Can not read $mailfolder” ; exit 1; } #感觉这里的‘’应该是||\n echo “$mailfolder has mail from:”\n grep “^From ” $mailfolder\n1\n2\n3\n4\n5\n该脚本首先判断mailfolder是否可读。如果可读则打印该文件中的”From” 一行。如果不可读则或操作生效，打印错误信息后脚本退出。这里有个问题，那就是我们必须有两个命令：\n◆打印错误信息\n◆退出程序\n我们使用花括号以匿名函数的形式将两个命令放到一起作为一个命令使用。一般函数将在下文提及。\n不用‘与’和‘或’操作符，我们也可以用if表达式作任何事情，但是使用与或操作符会更便利很多。\n————————————————\n版权声明：本文为CSDN博主「泠山」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/qq_28087491/article/details/107107342\n\n\n---\n\nhttps://www.php.cn/linux-421139.html\n\nlinux怎么执行sh文件\n原创2019-05-29 16:56:5640961\n\n\n本文介绍Linux下面用命令怎么执行.sh文件的方法，有两种方法：\n\n一、直接./加上文件名.sh，如运行hello.sh为./hello.sh【hello.sh必须有x权限】\n\n二、直接sh 加上文件名.sh，如运行hello.sh为sh hello.sh【hello.sh可以没有x权限】\n\n方法一：当前目录执行.sh文件\n\n【步骤一】cd到.sh文件所在目录\n\n比如以hello.sh文件为例，如下图\n\nb025c277daad47225f2a582b20c475c.png\n\n【步骤二】给.sh文件添加x执行权限\n\n比如以hello.sh文件为例，chmod u+x hello.sh，如下图\n\nf871b7b1652765e6991f3d7fc4e8e92.png\n\n【步骤三】./执行.sh文件\n\n比如以hello.sh文件为例，./hello.sh 即可执行hello.sh文件，如下图\n\ndab3467991cdb86c70255f48c1ca03c.png\n\n【步骤四】sh 执行.sh文件\n\n以hello.sh文件为例，sh hello.sh即可执行hello.sh文件，如下图\n\n2ec0b33ee81cc50a16f47be2ae400c3.png\n\n方法二：绝对路径执行.sh文件\n\n下面三种方法都可以，如下图\n\n\n\n\n./home/test/shell/hello.sh\n\n/home/test/shell/hello.sh\n\nsh /home/test/shell/hello.sh\n\n60c14a51c0b1d39dfbfa312bdf8e9ab.png\n\n注意事项：用“./”加文件名.sh执行时，必须给.sh文件加x执行权限。\n\n以上就是linux怎么执行sh文件的详细内容，更多请关注php中文网其它相关文章！\n\n\n\n\n","slug":"linux-sh","published":1,"updated":"2023-07-23T14:19:12.170Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkjdd1bt001l98aje67edn7v","content":"<p>linux sh命令简述</p>\n<ol>\n<li><p>可能需要的执行方式<br>linux下执行.sh文件的方法</p>\n</li>\n<li><p>开头：#!&#x2F;bin&#x2F;sh</p>\n</li>\n<li><p>变量</p>\n</li>\n<li><p>Shell命令和流程控制<br>Unix命令<br>概念：管道，重定向和backtick（反斜线）<br>流程控制</p>\n</li>\n<li><p>可能需要的执行方式<br>linux下执行.sh文件的方法<br>.sh文件就是文本文件，如果要执行，需要使用chmod a+x xxx.sh来给可执行权限。</p>\n</li>\n<li><p>开头：#!&#x2F;bin&#x2F;sh<br>shell程序必须以“#!&#x2F;bin&#x2F;sh”开始。shell中#一般表示注释的意思，所以很多时候认为”#!”也是注释，但实际上并不是。</p>\n</li>\n</ol>\n<p>“#!&#x2F;bin&#x2F;sh”是对shell的声明，说明你所用的是哪种类型的shell及其路径所在。</p>\n<p>#!&#x2F;bin&#x2F;是指此脚本使用.bin&#x2F;sh来执行。</p>\n<p>#!是特殊的表示符，其后面跟的是解释此脚本的shell的路径，如果没有声明，则脚本将在默认的shell中执行，默认shell是由用户所在的系统定义为执行shell脚本，如果脚本被编写为在Kornshell ksh中运行，而默认运行shell脚本的为C shell csh,则脚本在执行过程中很可能失败。所以建议大家就把”#!&#x2F;bin&#x2F;sh”当成C 语言的main函数一样，写shell必须有，以使shell程序更严密。</p>\n<ol start=\"3\">\n<li>变量<br>在其他编程语言中必须使用变量。在shell编程中，所有变量都由字符串组成，并且不需要对变量进行声明。要赋值给一个变量，可以这样写：</li>\n</ol>\n<p>#!&#x2F;bin&#x2F;sh<br> #对变量赋值：<br> a&#x3D;”hello world”</p>\n<h1 id=\"现在打印变量a的内容：\"><a href=\"#现在打印变量a的内容：\" class=\"headerlink\" title=\"现在打印变量a的内容：\"></a>现在打印变量a的内容：</h1><p> echo “A is:”<br> echo $a<br>1<br>2<br>3<br>4<br>5<br>6<br>有时候变量名很容易与其他文字混淆，比如：</p>\n<p> num&#x3D;2<br> echo “this is the $numnd”<br>1<br>2<br>这并不会打印出”this is the 2nd”，而仅仅打印”this is the “，因为shell会去搜索变量numnd的值，但是这个变量是没有值的。因此，可以使用花括号来告诉shell我们要打印的是num变量：</p>\n<p> num&#x3D;2<br> echo “this is the ${num}nd”<br>1<br>2<br>这样才会打印”this is the 2nd”</p>\n<ol start=\"4\">\n<li>Shell命令和流程控制<br>在shell脚本中可以使用以下命令：</li>\n</ol>\n<p>Unix命令<br>虽然在shell脚本中可以使用任意的unix命令，但还是有一些相对更常用的命令。这些命令通常是用来进行文件和文字操作的。<br>如：</p>\n<p> echo “some text” #将文字内容打印在屏幕上<br> ls #文件列表<br> cp sourcefile destfile #文件拷贝<br> mv oldname newname #重命名文件或移动文件<br> rm file #删除文件<br> grep ‘pattern’ file #在文件内搜索字符串，如：grep ‘searchstring’ file.txt<br> cat file.txt #输出文件内容到标准输出设备（屏幕）上<br> read var #显示用户输入，并将输入赋值给变量<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>概念：管道，重定向和backtick（反斜线）<br>管道 | 将一个命令的输出作为另外一个命令的输入。<br>grep “hello” file.txt | wc -l<br>1<br>上述代码表示为：在 file.txt 中搜索包含有 “hello” 的行并计算其行数。在这里grep命令的输出作为wc命令的输入。</p>\n<p>需要注意的是，管道后的命令是子命令，并不会出现在接下来的命令中（有点像C++在{}内和{}外赋值的区别），如以下命令：</p>\n<p>#!&#x2F;bin&#x2F;sh<br>echo 1 2 3 | { read a b c ; echo $a $b $c ; } # 打印结果为： 1 2 3<br>echo $a $b $c # 打印结果为空<br>1<br>2<br>3<br>重定向：将命令的结果输出到文件，而不是标准输出（屏幕）。</p>\n<blockquote>\n<p>写入文件并覆盖旧文件</p>\n<blockquote>\n<p>追加到文件的尾部，保留旧文件内容。</p>\n</blockquote>\n</blockquote>\n<p>反短横线 “&#96;”：使用反短横线可以将一个命令的输出作为另一个命令的一个命令行参数。</p>\n<p> find . -mtime  -1  -type  f  -print<br>1<br>上述语句用来查找过去24小时（-mtime -2则表示过去48小时）内修改过的文件。如果想将所有查找到的文件打一个包，则可以使用一下linux脚本：</p>\n<p> #!&#x2F;bin&#x2F;sh</p>\n<h1 id=\"The-ticks-are-backticks-not-normal-quotes-‘\"><a href=\"#The-ticks-are-backticks-not-normal-quotes-‘\" class=\"headerlink\" title=\"The ticks are backticks (&#96;) not normal quotes (‘):\"></a>The ticks are backticks (&#96;) not normal quotes (‘):</h1><p> tar -zcvf  lastmod.tar.gz <code>find . -mtime -1 -type f -print</code><br>1<br>2<br>3<br>流程控制<br>if<br>if 表达式，如果条件为真则执行 then 后面的部分：</p>\n<p> if ….; then<br> ….<br> elif ….; then<br> ….<br> else<br> ….<br> fi #注意是以fi结尾<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>大多数情况下，可以使用测试命令来对条件进行测试。比如可以比较字符串、判断文件时都存在以及是否可读等等…</p>\n<p>while<br>while 循环的语法结构为：</p>\n<h1 id=\"expression-1\"><a href=\"#expression-1\" class=\"headerlink\" title=\"expression 1\"></a>expression 1</h1><h1 id=\"while循环：当expresssion成立的时候，执行cmd\"><a href=\"#while循环：当expresssion成立的时候，执行cmd\" class=\"headerlink\" title=\"while循环：当expresssion成立的时候，执行cmd\"></a>while循环：当expresssion成立的时候，执行cmd</h1><p>while (expresssion)<br>do<br>  cmd<br>done</p>\n<h1 id=\"expression-2，可以直接使用true\"><a href=\"#expression-2，可以直接使用true\" class=\"headerlink\" title=\"expression 2，可以直接使用true\"></a>expression 2，可以直接使用true</h1><p>while true（或 ：）<br>do<br>    cmd<br>done<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>该命令配合可以配合管道使用，如：</p>\n<h1 id=\"寻找-path-路径下唯一首字母为‘E’的子目录，并-cd-到该目录\"><a href=\"#寻找-path-路径下唯一首字母为‘E’的子目录，并-cd-到该目录\" class=\"headerlink\" title=\"寻找 ${path} 路径下唯一首字母为‘E’的子目录，并 cd 到该目录\"></a>寻找 ${path} 路径下唯一首字母为‘E’的子目录，并 cd 到该目录</h1><p>find ${path}&#x2F;E* -type d | while read corresp_path<br>do<br>    cd ${corresp_path}<br>done<br>1<br>2<br>3<br>4<br>5<br>测试条件<br>通常使用“[ ]”来表示测试条件。注意这里的空格很重要，要确保方括号里的空格。</p>\n<p> [ -f “somefile” ] #判断文件是否存在<br> [ -d “testResults&#x2F;“ ] #判断目录testResults&#x2F;是否存在<br> [ -x “&#x2F;bin&#x2F;ls” ] #判断&#x2F;bin&#x2F;ls文件是否存在并有可执行权限<br> [ -n “$var” ] #判断$var变量是否有值<br> [ “$a” &#x3D; “$b” ] #判断$a和$b是否相等<br>1<br>2<br>3<br>4<br>5<br>快捷操作符<br>熟悉C语言可能会喜欢一下表达式：</p>\n<p>  [ -f “&#x2F;etc&#x2F;shadow” ] &amp;&amp; echo “This computer uses shadow passwors”<br>1<br>这里“&amp;&amp;”就是一个快捷操作符，如果左边的表达式为真则执行右边的语句。当然也可以将上述表达式认为是逻辑运算中的与操作。</p>\n<p>同样或操作“||”在shell编程中也是可用的：</p>\n<p> #!&#x2F;bin&#x2F;sh<br> mailfolder&#x3D;&#x2F;var&#x2F;spool&#x2F;mail&#x2F;james<br> [ -r “$mailfolder” ]‘ ‘{ echo “Can not read $mailfolder” ; exit 1; } #感觉这里的‘’应该是||<br> echo “$mailfolder has mail from:”<br> grep “^From ” $mailfolder<br>1<br>2<br>3<br>4<br>5<br>该脚本首先判断mailfolder是否可读。如果可读则打印该文件中的”From” 一行。如果不可读则或操作生效，打印错误信息后脚本退出。这里有个问题，那就是我们必须有两个命令：<br>◆打印错误信息<br>◆退出程序<br>我们使用花括号以匿名函数的形式将两个命令放到一起作为一个命令使用。一般函数将在下文提及。<br>不用‘与’和‘或’操作符，我们也可以用if表达式作任何事情，但是使用与或操作符会更便利很多。<br>————————————————<br>版权声明：本文为CSDN博主「泠山」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href=\"https://blog.csdn.net/qq_28087491/article/details/107107342\">https://blog.csdn.net/qq_28087491/article/details/107107342</a></p>\n<hr>\n<p><a href=\"https://www.php.cn/linux-421139.html\">https://www.php.cn/linux-421139.html</a></p>\n<p>linux怎么执行sh文件<br>原创2019-05-29 16:56:5640961</p>\n<p>本文介绍Linux下面用命令怎么执行.sh文件的方法，有两种方法：</p>\n<p>一、直接.&#x2F;加上文件名.sh，如运行hello.sh为.&#x2F;hello.sh【hello.sh必须有x权限】</p>\n<p>二、直接sh 加上文件名.sh，如运行hello.sh为sh hello.sh【hello.sh可以没有x权限】</p>\n<p>方法一：当前目录执行.sh文件</p>\n<p>【步骤一】cd到.sh文件所在目录</p>\n<p>比如以hello.sh文件为例，如下图</p>\n<p>b025c277daad47225f2a582b20c475c.png</p>\n<p>【步骤二】给.sh文件添加x执行权限</p>\n<p>比如以hello.sh文件为例，chmod u+x hello.sh，如下图</p>\n<p>f871b7b1652765e6991f3d7fc4e8e92.png</p>\n<p>【步骤三】.&#x2F;执行.sh文件</p>\n<p>比如以hello.sh文件为例，.&#x2F;hello.sh 即可执行hello.sh文件，如下图</p>\n<p>dab3467991cdb86c70255f48c1ca03c.png</p>\n<p>【步骤四】sh 执行.sh文件</p>\n<p>以hello.sh文件为例，sh hello.sh即可执行hello.sh文件，如下图</p>\n<p>2ec0b33ee81cc50a16f47be2ae400c3.png</p>\n<p>方法二：绝对路径执行.sh文件</p>\n<p>下面三种方法都可以，如下图</p>\n<p>.&#x2F;home&#x2F;test&#x2F;shell&#x2F;hello.sh</p>\n<p>&#x2F;home&#x2F;test&#x2F;shell&#x2F;hello.sh</p>\n<p>sh &#x2F;home&#x2F;test&#x2F;shell&#x2F;hello.sh</p>\n<p>60c14a51c0b1d39dfbfa312bdf8e9ab.png</p>\n<p>注意事项：用“.&#x2F;”加文件名.sh执行时，必须给.sh文件加x执行权限。</p>\n<p>以上就是linux怎么执行sh文件的详细内容，更多请关注php中文网其它相关文章！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>linux sh命令简述</p>\n<ol>\n<li><p>可能需要的执行方式<br>linux下执行.sh文件的方法</p>\n</li>\n<li><p>开头：#!&#x2F;bin&#x2F;sh</p>\n</li>\n<li><p>变量</p>\n</li>\n<li><p>Shell命令和流程控制<br>Unix命令<br>概念：管道，重定向和backtick（反斜线）<br>流程控制</p>\n</li>\n<li><p>可能需要的执行方式<br>linux下执行.sh文件的方法<br>.sh文件就是文本文件，如果要执行，需要使用chmod a+x xxx.sh来给可执行权限。</p>\n</li>\n<li><p>开头：#!&#x2F;bin&#x2F;sh<br>shell程序必须以“#!&#x2F;bin&#x2F;sh”开始。shell中#一般表示注释的意思，所以很多时候认为”#!”也是注释，但实际上并不是。</p>\n</li>\n</ol>\n<p>“#!&#x2F;bin&#x2F;sh”是对shell的声明，说明你所用的是哪种类型的shell及其路径所在。</p>\n<p>#!&#x2F;bin&#x2F;是指此脚本使用.bin&#x2F;sh来执行。</p>\n<p>#!是特殊的表示符，其后面跟的是解释此脚本的shell的路径，如果没有声明，则脚本将在默认的shell中执行，默认shell是由用户所在的系统定义为执行shell脚本，如果脚本被编写为在Kornshell ksh中运行，而默认运行shell脚本的为C shell csh,则脚本在执行过程中很可能失败。所以建议大家就把”#!&#x2F;bin&#x2F;sh”当成C 语言的main函数一样，写shell必须有，以使shell程序更严密。</p>\n<ol start=\"3\">\n<li>变量<br>在其他编程语言中必须使用变量。在shell编程中，所有变量都由字符串组成，并且不需要对变量进行声明。要赋值给一个变量，可以这样写：</li>\n</ol>\n<p>#!&#x2F;bin&#x2F;sh<br> #对变量赋值：<br> a&#x3D;”hello world”</p>\n<h1 id=\"现在打印变量a的内容：\"><a href=\"#现在打印变量a的内容：\" class=\"headerlink\" title=\"现在打印变量a的内容：\"></a>现在打印变量a的内容：</h1><p> echo “A is:”<br> echo $a<br>1<br>2<br>3<br>4<br>5<br>6<br>有时候变量名很容易与其他文字混淆，比如：</p>\n<p> num&#x3D;2<br> echo “this is the $numnd”<br>1<br>2<br>这并不会打印出”this is the 2nd”，而仅仅打印”this is the “，因为shell会去搜索变量numnd的值，但是这个变量是没有值的。因此，可以使用花括号来告诉shell我们要打印的是num变量：</p>\n<p> num&#x3D;2<br> echo “this is the ${num}nd”<br>1<br>2<br>这样才会打印”this is the 2nd”</p>\n<ol start=\"4\">\n<li>Shell命令和流程控制<br>在shell脚本中可以使用以下命令：</li>\n</ol>\n<p>Unix命令<br>虽然在shell脚本中可以使用任意的unix命令，但还是有一些相对更常用的命令。这些命令通常是用来进行文件和文字操作的。<br>如：</p>\n<p> echo “some text” #将文字内容打印在屏幕上<br> ls #文件列表<br> cp sourcefile destfile #文件拷贝<br> mv oldname newname #重命名文件或移动文件<br> rm file #删除文件<br> grep ‘pattern’ file #在文件内搜索字符串，如：grep ‘searchstring’ file.txt<br> cat file.txt #输出文件内容到标准输出设备（屏幕）上<br> read var #显示用户输入，并将输入赋值给变量<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>概念：管道，重定向和backtick（反斜线）<br>管道 | 将一个命令的输出作为另外一个命令的输入。<br>grep “hello” file.txt | wc -l<br>1<br>上述代码表示为：在 file.txt 中搜索包含有 “hello” 的行并计算其行数。在这里grep命令的输出作为wc命令的输入。</p>\n<p>需要注意的是，管道后的命令是子命令，并不会出现在接下来的命令中（有点像C++在{}内和{}外赋值的区别），如以下命令：</p>\n<p>#!&#x2F;bin&#x2F;sh<br>echo 1 2 3 | { read a b c ; echo $a $b $c ; } # 打印结果为： 1 2 3<br>echo $a $b $c # 打印结果为空<br>1<br>2<br>3<br>重定向：将命令的结果输出到文件，而不是标准输出（屏幕）。</p>\n<blockquote>\n<p>写入文件并覆盖旧文件</p>\n<blockquote>\n<p>追加到文件的尾部，保留旧文件内容。</p>\n</blockquote>\n</blockquote>\n<p>反短横线 “&#96;”：使用反短横线可以将一个命令的输出作为另一个命令的一个命令行参数。</p>\n<p> find . -mtime  -1  -type  f  -print<br>1<br>上述语句用来查找过去24小时（-mtime -2则表示过去48小时）内修改过的文件。如果想将所有查找到的文件打一个包，则可以使用一下linux脚本：</p>\n<p> #!&#x2F;bin&#x2F;sh</p>\n<h1 id=\"The-ticks-are-backticks-not-normal-quotes-‘\"><a href=\"#The-ticks-are-backticks-not-normal-quotes-‘\" class=\"headerlink\" title=\"The ticks are backticks (&#96;) not normal quotes (‘):\"></a>The ticks are backticks (&#96;) not normal quotes (‘):</h1><p> tar -zcvf  lastmod.tar.gz <code>find . -mtime -1 -type f -print</code><br>1<br>2<br>3<br>流程控制<br>if<br>if 表达式，如果条件为真则执行 then 后面的部分：</p>\n<p> if ….; then<br> ….<br> elif ….; then<br> ….<br> else<br> ….<br> fi #注意是以fi结尾<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>大多数情况下，可以使用测试命令来对条件进行测试。比如可以比较字符串、判断文件时都存在以及是否可读等等…</p>\n<p>while<br>while 循环的语法结构为：</p>\n<h1 id=\"expression-1\"><a href=\"#expression-1\" class=\"headerlink\" title=\"expression 1\"></a>expression 1</h1><h1 id=\"while循环：当expresssion成立的时候，执行cmd\"><a href=\"#while循环：当expresssion成立的时候，执行cmd\" class=\"headerlink\" title=\"while循环：当expresssion成立的时候，执行cmd\"></a>while循环：当expresssion成立的时候，执行cmd</h1><p>while (expresssion)<br>do<br>  cmd<br>done</p>\n<h1 id=\"expression-2，可以直接使用true\"><a href=\"#expression-2，可以直接使用true\" class=\"headerlink\" title=\"expression 2，可以直接使用true\"></a>expression 2，可以直接使用true</h1><p>while true（或 ：）<br>do<br>    cmd<br>done<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>该命令配合可以配合管道使用，如：</p>\n<h1 id=\"寻找-path-路径下唯一首字母为‘E’的子目录，并-cd-到该目录\"><a href=\"#寻找-path-路径下唯一首字母为‘E’的子目录，并-cd-到该目录\" class=\"headerlink\" title=\"寻找 ${path} 路径下唯一首字母为‘E’的子目录，并 cd 到该目录\"></a>寻找 ${path} 路径下唯一首字母为‘E’的子目录，并 cd 到该目录</h1><p>find ${path}&#x2F;E* -type d | while read corresp_path<br>do<br>    cd ${corresp_path}<br>done<br>1<br>2<br>3<br>4<br>5<br>测试条件<br>通常使用“[ ]”来表示测试条件。注意这里的空格很重要，要确保方括号里的空格。</p>\n<p> [ -f “somefile” ] #判断文件是否存在<br> [ -d “testResults&#x2F;“ ] #判断目录testResults&#x2F;是否存在<br> [ -x “&#x2F;bin&#x2F;ls” ] #判断&#x2F;bin&#x2F;ls文件是否存在并有可执行权限<br> [ -n “$var” ] #判断$var变量是否有值<br> [ “$a” &#x3D; “$b” ] #判断$a和$b是否相等<br>1<br>2<br>3<br>4<br>5<br>快捷操作符<br>熟悉C语言可能会喜欢一下表达式：</p>\n<p>  [ -f “&#x2F;etc&#x2F;shadow” ] &amp;&amp; echo “This computer uses shadow passwors”<br>1<br>这里“&amp;&amp;”就是一个快捷操作符，如果左边的表达式为真则执行右边的语句。当然也可以将上述表达式认为是逻辑运算中的与操作。</p>\n<p>同样或操作“||”在shell编程中也是可用的：</p>\n<p> #!&#x2F;bin&#x2F;sh<br> mailfolder&#x3D;&#x2F;var&#x2F;spool&#x2F;mail&#x2F;james<br> [ -r “$mailfolder” ]‘ ‘{ echo “Can not read $mailfolder” ; exit 1; } #感觉这里的‘’应该是||<br> echo “$mailfolder has mail from:”<br> grep “^From ” $mailfolder<br>1<br>2<br>3<br>4<br>5<br>该脚本首先判断mailfolder是否可读。如果可读则打印该文件中的”From” 一行。如果不可读则或操作生效，打印错误信息后脚本退出。这里有个问题，那就是我们必须有两个命令：<br>◆打印错误信息<br>◆退出程序<br>我们使用花括号以匿名函数的形式将两个命令放到一起作为一个命令使用。一般函数将在下文提及。<br>不用‘与’和‘或’操作符，我们也可以用if表达式作任何事情，但是使用与或操作符会更便利很多。<br>————————————————<br>版权声明：本文为CSDN博主「泠山」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href=\"https://blog.csdn.net/qq_28087491/article/details/107107342\">https://blog.csdn.net/qq_28087491/article/details/107107342</a></p>\n<hr>\n<p><a href=\"https://www.php.cn/linux-421139.html\">https://www.php.cn/linux-421139.html</a></p>\n<p>linux怎么执行sh文件<br>原创2019-05-29 16:56:5640961</p>\n<p>本文介绍Linux下面用命令怎么执行.sh文件的方法，有两种方法：</p>\n<p>一、直接.&#x2F;加上文件名.sh，如运行hello.sh为.&#x2F;hello.sh【hello.sh必须有x权限】</p>\n<p>二、直接sh 加上文件名.sh，如运行hello.sh为sh hello.sh【hello.sh可以没有x权限】</p>\n<p>方法一：当前目录执行.sh文件</p>\n<p>【步骤一】cd到.sh文件所在目录</p>\n<p>比如以hello.sh文件为例，如下图</p>\n<p>b025c277daad47225f2a582b20c475c.png</p>\n<p>【步骤二】给.sh文件添加x执行权限</p>\n<p>比如以hello.sh文件为例，chmod u+x hello.sh，如下图</p>\n<p>f871b7b1652765e6991f3d7fc4e8e92.png</p>\n<p>【步骤三】.&#x2F;执行.sh文件</p>\n<p>比如以hello.sh文件为例，.&#x2F;hello.sh 即可执行hello.sh文件，如下图</p>\n<p>dab3467991cdb86c70255f48c1ca03c.png</p>\n<p>【步骤四】sh 执行.sh文件</p>\n<p>以hello.sh文件为例，sh hello.sh即可执行hello.sh文件，如下图</p>\n<p>2ec0b33ee81cc50a16f47be2ae400c3.png</p>\n<p>方法二：绝对路径执行.sh文件</p>\n<p>下面三种方法都可以，如下图</p>\n<p>.&#x2F;home&#x2F;test&#x2F;shell&#x2F;hello.sh</p>\n<p>&#x2F;home&#x2F;test&#x2F;shell&#x2F;hello.sh</p>\n<p>sh &#x2F;home&#x2F;test&#x2F;shell&#x2F;hello.sh</p>\n<p>60c14a51c0b1d39dfbfa312bdf8e9ab.png</p>\n<p>注意事项：用“.&#x2F;”加文件名.sh执行时，必须给.sh文件加x执行权限。</p>\n<p>以上就是linux怎么执行sh文件的详细内容，更多请关注php中文网其它相关文章！</p>\n"},{"title":"linux系统开关机基本命令","date":"2022-10-19T04:53:09.000Z","_content":"Linux中的重启命令： 1、“shutdown -r now”命令，停止系统服务后重启；2、“init 1”重启命令；3、“reboot”命令，立即重启；4、“poweroff”重启命令；5、“halt”重启命令。\n\n\n\n程序员必备接口测试调试工具：\n【相关文章推荐：linux教程】\n\nLinux是一套免费使用和自由传播的类Unix操作系统，是一个基于POSIX和UNIX的多用户、多任务、支持多线程和多CPU的操作系统。它能运行主要的UNIX工具软件、应用程序和网络协议。它支持32位和64位硬件。Linux继承了Unix以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。\n\nLinux 有五个重启命令\n\n1、shutdown\n\nshutdown是最常用也是最安全的关机和重启命令，它会在关机之前调用fsck检查磁盘，其中-h和-r是最常用的参数：\n\n\n\n\n\n示例：\n\n\n\n\n\n\n\n\n\n\n\n2、poweroff\n\npoweroff表示立即关机，效果等同于shutdown -h now，在多用户模式下(Run Level 3）不建议使用。\n\n3、init\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ninit是所有进程的祖先﹐它的进程号始终为1﹐所以发送TERM信号给init会终止所有的 用户进程﹑守护进程等。shutdown 就是使用这种机制。init定义了8个运行级别(runlevel)， init 0为关机﹐init 1为重启。\n\n4、reboot\n\nreboot表示立即重启，效果等同于shutdown -r now\n\n5、halt\n\n不理会目前系统状况下，进行硬件关机，一般不建议使用。\n\n本篇文章就是关于Linux 重启命令的介绍，希望对需要的朋友有所帮助！\n\n以上就是Linux 重启命令是什么？的详细内容，更多请关注php中文网其它相关文章！","source":"_posts/linux-qidong.md","raw":"---\ntitle: linux系统开关机基本命令\ndate: 2022-10-19 12:53:09\ntags: linux\ncategories: 系统\n---\nLinux中的重启命令： 1、“shutdown -r now”命令，停止系统服务后重启；2、“init 1”重启命令；3、“reboot”命令，立即重启；4、“poweroff”重启命令；5、“halt”重启命令。\n\n\n\n程序员必备接口测试调试工具：\n【相关文章推荐：linux教程】\n\nLinux是一套免费使用和自由传播的类Unix操作系统，是一个基于POSIX和UNIX的多用户、多任务、支持多线程和多CPU的操作系统。它能运行主要的UNIX工具软件、应用程序和网络协议。它支持32位和64位硬件。Linux继承了Unix以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。\n\nLinux 有五个重启命令\n\n1、shutdown\n\nshutdown是最常用也是最安全的关机和重启命令，它会在关机之前调用fsck检查磁盘，其中-h和-r是最常用的参数：\n\n\n\n\n\n示例：\n\n\n\n\n\n\n\n\n\n\n\n2、poweroff\n\npoweroff表示立即关机，效果等同于shutdown -h now，在多用户模式下(Run Level 3）不建议使用。\n\n3、init\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ninit是所有进程的祖先﹐它的进程号始终为1﹐所以发送TERM信号给init会终止所有的 用户进程﹑守护进程等。shutdown 就是使用这种机制。init定义了8个运行级别(runlevel)， init 0为关机﹐init 1为重启。\n\n4、reboot\n\nreboot表示立即重启，效果等同于shutdown -r now\n\n5、halt\n\n不理会目前系统状况下，进行硬件关机，一般不建议使用。\n\n本篇文章就是关于Linux 重启命令的介绍，希望对需要的朋友有所帮助！\n\n以上就是Linux 重启命令是什么？的详细内容，更多请关注php中文网其它相关文章！","slug":"linux-qidong","published":1,"updated":"2023-07-23T14:19:13.676Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkjdd1bw001p98aj0qr8bq8x","content":"<p>Linux中的重启命令： 1、“shutdown -r now”命令，停止系统服务后重启；2、“init 1”重启命令；3、“reboot”命令，立即重启；4、“poweroff”重启命令；5、“halt”重启命令。</p>\n<p>程序员必备接口测试调试工具：<br>【相关文章推荐：linux教程】</p>\n<p>Linux是一套免费使用和自由传播的类Unix操作系统，是一个基于POSIX和UNIX的多用户、多任务、支持多线程和多CPU的操作系统。它能运行主要的UNIX工具软件、应用程序和网络协议。它支持32位和64位硬件。Linux继承了Unix以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。</p>\n<p>Linux 有五个重启命令</p>\n<p>1、shutdown</p>\n<p>shutdown是最常用也是最安全的关机和重启命令，它会在关机之前调用fsck检查磁盘，其中-h和-r是最常用的参数：</p>\n<p>示例：</p>\n<p>2、poweroff</p>\n<p>poweroff表示立即关机，效果等同于shutdown -h now，在多用户模式下(Run Level 3）不建议使用。</p>\n<p>3、init</p>\n<p>init是所有进程的祖先﹐它的进程号始终为1﹐所以发送TERM信号给init会终止所有的 用户进程﹑守护进程等。shutdown 就是使用这种机制。init定义了8个运行级别(runlevel)， init 0为关机﹐init 1为重启。</p>\n<p>4、reboot</p>\n<p>reboot表示立即重启，效果等同于shutdown -r now</p>\n<p>5、halt</p>\n<p>不理会目前系统状况下，进行硬件关机，一般不建议使用。</p>\n<p>本篇文章就是关于Linux 重启命令的介绍，希望对需要的朋友有所帮助！</p>\n<p>以上就是Linux 重启命令是什么？的详细内容，更多请关注php中文网其它相关文章！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Linux中的重启命令： 1、“shutdown -r now”命令，停止系统服务后重启；2、“init 1”重启命令；3、“reboot”命令，立即重启；4、“poweroff”重启命令；5、“halt”重启命令。</p>\n<p>程序员必备接口测试调试工具：<br>【相关文章推荐：linux教程】</p>\n<p>Linux是一套免费使用和自由传播的类Unix操作系统，是一个基于POSIX和UNIX的多用户、多任务、支持多线程和多CPU的操作系统。它能运行主要的UNIX工具软件、应用程序和网络协议。它支持32位和64位硬件。Linux继承了Unix以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。</p>\n<p>Linux 有五个重启命令</p>\n<p>1、shutdown</p>\n<p>shutdown是最常用也是最安全的关机和重启命令，它会在关机之前调用fsck检查磁盘，其中-h和-r是最常用的参数：</p>\n<p>示例：</p>\n<p>2、poweroff</p>\n<p>poweroff表示立即关机，效果等同于shutdown -h now，在多用户模式下(Run Level 3）不建议使用。</p>\n<p>3、init</p>\n<p>init是所有进程的祖先﹐它的进程号始终为1﹐所以发送TERM信号给init会终止所有的 用户进程﹑守护进程等。shutdown 就是使用这种机制。init定义了8个运行级别(runlevel)， init 0为关机﹐init 1为重启。</p>\n<p>4、reboot</p>\n<p>reboot表示立即重启，效果等同于shutdown -r now</p>\n<p>5、halt</p>\n<p>不理会目前系统状况下，进行硬件关机，一般不建议使用。</p>\n<p>本篇文章就是关于Linux 重启命令的介绍，希望对需要的朋友有所帮助！</p>\n<p>以上就是Linux 重启命令是什么？的详细内容，更多请关注php中文网其它相关文章！</p>\n"},{"title":"马家店少儿编程 | STEAM亲子创客活动","date":"2023-04-09T13:52:08.000Z","_content":"\n## 课程安排\n\n1. 算法：输入与输出的“你写我猜”、micro：cube设计与编程\n2. 变量：“micro：scorekeeper”编程，micro创意设计\n3. 条件：前进“红绿灯”，“石头剪刀布”游戏编程\n4. 迭代：“指示前进”游戏，疯狂动画”头脑风暴\n5. 坐标网络：战舰棋盘游戏，LED简单动画制作，屏幕保护程序编程\n6. 布尔值：“双币翻转游戏”编程，布尔棋盘游戏编程\n7. 位、字节：“二进制自动售货机”与二进制转换，“二进制收银机”设计与制作\n8. 无线电：“病毒传播感染”模拟游戏，marco polo 和morse密码，无线通信创意设计\n9. 数组：头带字谜游戏，micro：guitar制作\n10. 交流展示\n\n\n\n## 第一课 教学设计\n\n### 学习内容分析\n\n通过设计与制作microbit.pet,通过制作实物，协助学生认识与使用microbit微控制器板。\n\n### 教学目标\n\n课程标准：microbit微型控制板的认知与使用\n\n知识与技能：microbit微型控制板的使用\n\n过程与方法：设计与制作microbit.pet\n\n### 教学流程\n\n* 导言：引入主题\n\n> 通过趣味方式展示介绍microbit微型控制板的制作、建造、工艺和构造作用。\n\n* 不插电活动（交流设计Micro：Bit）\n\n> 以有形的，动觉的方式展示新概念，不需要电脑或微型手机培养学生的理解。学生们相互采访自己理想的宠物，设计解决方案，创建微型宠物原型，并以绘图或文字的形式作记录。\n\n学生A从对搭档B的采访中收集信息，帮助搭档设计其理想的微型宠物，设计解决方案，创建微型宠物模型。例：你有宠物吗？你喜欢什么宠物？你喜欢你的宠物的什么？你希望你的宠物能做什么?......\n\n* Microbit实操活动（microbitpet制作）\n\n介绍编程环境、进行笑脸哭脸实验、按钮实验。\n\n![笑脸哭脸实验](http://files.xiaoxiaosky.top/blogimg/majiadian/happysad.jpg)\n\n* 实验成果评价\n\n> 使用不定性的标准对创意或与搭档伙伴需求的匹配程度以及是否符合microbit板的使用规范等进行micropet制作评分，诱导学生分享制作过程中的心得体会，并让学生写一篇100—150字的反思。\n\n* 总结\n\n> 总结microbit微型控制板的构造，建造与工艺作用，巩固理论知识内容。培养学生互助协作，沟通交流，积极思考，解决问题等理论应用能力。\n\n## 第二课 教学设计\n\n### 学习内容\n\n* 课程标准：microbit基础使用\n* 知识与技能：培养基本逻辑思维\n* 过程与方法：完善设计micro:pet\n\n### 教学流程\n\n* 导言：引入主题\n\n> 通过介绍基本计算机储存与计算的方式了解计算机的基本原理\n\n* 不插电活动 \n> 通过角色扮演：一名同学扮演计算机的使用者，另外一名同学扮演计算机，扮演计算机的同学可以设计一个简短的逻辑程序，然后使用者给出一个输入数，计算机给出运算结果，在几轮结束后使用者通过几次输入与输出尝试猜出计算机的内部程序。\n\n* Microbit实操活动\n\n介绍实验用到的基础方块\n\n![AB按钮实验]()\n\n* 实验成果评价\n\n> 使用不定性的标准对创意或与搭档伙伴需求的匹配程度以及是否符合microbit板的使用规范等进行micropet制作评分，诱导学生分享制作过程中的心得体会，并让学生写一篇100—150字的反思。\n\n* 总结\n\n> 总结microbit微型控制板的构造，建造与工艺作用，巩固理论知识内容。培养学生互助协作，沟通交流，积极思考，解决问题等理论应用能力。\n\n## 第三课 教学设计\n\n### 学习内容\n\n* 课程标准：microbit基础使用\n* 知识与技能：培养基本逻辑思维\n* 过程与方法：设计一个比赛记录器\n\n### 教学流程\n\n* 导言：引入主题\n\n> 通过介绍生活中的变量与常量，引入变量与常量的概念\n\n* 不插电活动\n\n> 两个人一组进行“石头剪刀布”游戏，在游戏过程中需要记录有关游戏数据，在几轮游戏过后，引导学生寻找游戏中存在的变量与常量。\n\n* Microbit实操活动\n\n介绍实验用到的基础方块\n\n![积分器实验]()\n\n* 实验成果评价\n\n> 使用不定性的标准对创意或与搭档伙伴需求的匹配程度以及是否符合microbit板的使用规范等进行micropet制作评分，诱导学生分享制作过程中的心得体会，并让学生写一篇100—150字的反思。\n\n* 总结\n\n> 总结microbit微型控制板的构造，建造与工艺作用，巩固理论知识内容。培养学生互助协作，沟通交流，积极思考，解决问题等理论应用能力。\n\n### 第四课 教学设计\n\n### 学习内容\n\n* 课程标准：microbit基础使用\n* 知识与技能：培养基本逻辑思维\n* 过程与方法：设计一个比赛记录器\n\n### 教学流程\n\n* 导言：引入主题\n\n> 通过列举数学赋值运算问题， 引入条件的概念与意义。\n\n* 不插电活动\n\n> 学生以开小火车的形式寻找生活中的条件存在现象，理解条件的概念，并分成两组进行“红绿灯”游戏，在游戏中引导学生感受条件对事物发展的能动作用以及对智能化编程的重要影响。\n\n* Microbit实操活动\n\n介绍实验用到的基础方块\n\n![太空探险活动]()\n\n* 实验成果评价\n\n总结条件对事物发展的能动作用以及对智能化编程的重要影响引导学生感受生活中条件影响的存在，锻炼其观察能力及逻辑思维能力。回顾总结本节课主要学习内容，检验学生学习成果及学习感受。\n\n\n### 第五课 教学设计\n\n### 学习内容\n\n课程标准：microbit基础使用\n知识与技能：培养基本逻辑思维\n过程与方法：设计斐波拉契数列运算程序\n\n### 教学流程\n\n* 导言：引入主题\n\n> 通过一首童谣，吸引学生兴趣，帮助学生感受并理解迭代的概念。引导学生列举生活中循环现象的存在及各种表示方法。\n\n* 不插电活动\n\n> 学生通过“绕椅子“游戏，借助具体的情景感受循环过程，通过不同方式描述绕转过程，并不断简化指引命令，为循化语句的学习奠定。学生学习斐波拉契数列，根据所学循环语句设计斐波拉契数列运算程序。\n\n* Microbit实操活动\n\n介绍实验用到的基础方块\n\n![猫爪老鼠scratch程序设计]()\n\n* 实验成果评价\n\n> 总结迭代在计算机编程中的重要作用，理解并掌握for / while等循环语句的用法，在以后的编程学习中学会利用循环语句简化程序。在此过程中，培养学生的逻辑循环能力及举一反三的能力，增加编程学习的兴趣和信心。\n\n### 第六课 教学设计\n\n### 学习内容\n\n课程标准：microbit基础使用\n知识与技能：培养基本逻辑思维\n过程与方法：设计斐波拉契数列运算程序\n\n### 教学流程\n\n* Micro：Bit 吃豆子小游戏\n\n> 通过介绍吃豆子小游戏的运行逻辑让小朋友们了解程序的运作原理以及熟悉micro：bit的基本编程思想。\n\n* Scratch 飞翔的小鸟小游戏\n\n> 通过介绍飞翔的小鸟小游戏的运行逻辑让小朋友们了解程序的运作原理以及熟悉Scratch的基本编程思想。\n\n* 实验成果评价\n\n> 总结两个游戏的编程方式，并让小朋友们自己编写属于他们自己的游戏。\n\n\n### 第七课 教学设计\n\n### 学习内容\n\n课程标准：scratch基础使用\n知识与技能：培养基本逻辑思维\n过程与方法：绘制毕达哥拉斯树分图形\n\n### 教学流程\n\n* 导言：引入主题\n\n通过展示毕达哥拉斯树分图形及空间分图形，引入scratch分图形绘制模块的设计与运用。感受编程与数学的灵魂碰撞，吸引学生兴趣。\n不插电活动\n\n学生进行“苹果拯救”小游戏 在体验游戏的同时进一步了解游戏规则及游戏过程，并引导学生根据体验的过程设计该游戏程序。在此过程中，锻炼学生的逻辑思维及思考能力，并在能力允许的范围内对游戏加以完善和创新。\n\n* scratch实操活动\n\n通过学习勾股定理，带领了解毕达哥拉斯树分图形绘制的基本原理，并学习scratch画笔绘制图形功能的使用方法。在清楚原理之后，进一步学习特殊角度的毕达哥拉斯树分图形绘制，并引导学生加大绘制难度。\n\n### 实验成果评价\n\n学生学习毕达哥拉斯树分图形的绘制，掌握scratch分图形绘制功能的使用方法，感受编程与数学的灵魂碰撞，以及数学图形之美。增强学生对scratch编程学习和数学学习的兴趣。培养学生逻辑思维及创新思考能力。\n\n### 总结\n\n总结scratch分图形绘制的使用方法，和scratch编程的基本方法。培养学生逻辑思维及创新思考能力。进一步感受编程与数学之间的紧密联系与灵魂碰撞。\n","source":"_posts/majiadian.md","raw":"---\ntitle: 马家店少儿编程 | STEAM亲子创客活动\ndate: 2023-04-09 21:52:08\ncategories:\ntags:\n---\n\n## 课程安排\n\n1. 算法：输入与输出的“你写我猜”、micro：cube设计与编程\n2. 变量：“micro：scorekeeper”编程，micro创意设计\n3. 条件：前进“红绿灯”，“石头剪刀布”游戏编程\n4. 迭代：“指示前进”游戏，疯狂动画”头脑风暴\n5. 坐标网络：战舰棋盘游戏，LED简单动画制作，屏幕保护程序编程\n6. 布尔值：“双币翻转游戏”编程，布尔棋盘游戏编程\n7. 位、字节：“二进制自动售货机”与二进制转换，“二进制收银机”设计与制作\n8. 无线电：“病毒传播感染”模拟游戏，marco polo 和morse密码，无线通信创意设计\n9. 数组：头带字谜游戏，micro：guitar制作\n10. 交流展示\n\n\n\n## 第一课 教学设计\n\n### 学习内容分析\n\n通过设计与制作microbit.pet,通过制作实物，协助学生认识与使用microbit微控制器板。\n\n### 教学目标\n\n课程标准：microbit微型控制板的认知与使用\n\n知识与技能：microbit微型控制板的使用\n\n过程与方法：设计与制作microbit.pet\n\n### 教学流程\n\n* 导言：引入主题\n\n> 通过趣味方式展示介绍microbit微型控制板的制作、建造、工艺和构造作用。\n\n* 不插电活动（交流设计Micro：Bit）\n\n> 以有形的，动觉的方式展示新概念，不需要电脑或微型手机培养学生的理解。学生们相互采访自己理想的宠物，设计解决方案，创建微型宠物原型，并以绘图或文字的形式作记录。\n\n学生A从对搭档B的采访中收集信息，帮助搭档设计其理想的微型宠物，设计解决方案，创建微型宠物模型。例：你有宠物吗？你喜欢什么宠物？你喜欢你的宠物的什么？你希望你的宠物能做什么?......\n\n* Microbit实操活动（microbitpet制作）\n\n介绍编程环境、进行笑脸哭脸实验、按钮实验。\n\n![笑脸哭脸实验](http://files.xiaoxiaosky.top/blogimg/majiadian/happysad.jpg)\n\n* 实验成果评价\n\n> 使用不定性的标准对创意或与搭档伙伴需求的匹配程度以及是否符合microbit板的使用规范等进行micropet制作评分，诱导学生分享制作过程中的心得体会，并让学生写一篇100—150字的反思。\n\n* 总结\n\n> 总结microbit微型控制板的构造，建造与工艺作用，巩固理论知识内容。培养学生互助协作，沟通交流，积极思考，解决问题等理论应用能力。\n\n## 第二课 教学设计\n\n### 学习内容\n\n* 课程标准：microbit基础使用\n* 知识与技能：培养基本逻辑思维\n* 过程与方法：完善设计micro:pet\n\n### 教学流程\n\n* 导言：引入主题\n\n> 通过介绍基本计算机储存与计算的方式了解计算机的基本原理\n\n* 不插电活动 \n> 通过角色扮演：一名同学扮演计算机的使用者，另外一名同学扮演计算机，扮演计算机的同学可以设计一个简短的逻辑程序，然后使用者给出一个输入数，计算机给出运算结果，在几轮结束后使用者通过几次输入与输出尝试猜出计算机的内部程序。\n\n* Microbit实操活动\n\n介绍实验用到的基础方块\n\n![AB按钮实验]()\n\n* 实验成果评价\n\n> 使用不定性的标准对创意或与搭档伙伴需求的匹配程度以及是否符合microbit板的使用规范等进行micropet制作评分，诱导学生分享制作过程中的心得体会，并让学生写一篇100—150字的反思。\n\n* 总结\n\n> 总结microbit微型控制板的构造，建造与工艺作用，巩固理论知识内容。培养学生互助协作，沟通交流，积极思考，解决问题等理论应用能力。\n\n## 第三课 教学设计\n\n### 学习内容\n\n* 课程标准：microbit基础使用\n* 知识与技能：培养基本逻辑思维\n* 过程与方法：设计一个比赛记录器\n\n### 教学流程\n\n* 导言：引入主题\n\n> 通过介绍生活中的变量与常量，引入变量与常量的概念\n\n* 不插电活动\n\n> 两个人一组进行“石头剪刀布”游戏，在游戏过程中需要记录有关游戏数据，在几轮游戏过后，引导学生寻找游戏中存在的变量与常量。\n\n* Microbit实操活动\n\n介绍实验用到的基础方块\n\n![积分器实验]()\n\n* 实验成果评价\n\n> 使用不定性的标准对创意或与搭档伙伴需求的匹配程度以及是否符合microbit板的使用规范等进行micropet制作评分，诱导学生分享制作过程中的心得体会，并让学生写一篇100—150字的反思。\n\n* 总结\n\n> 总结microbit微型控制板的构造，建造与工艺作用，巩固理论知识内容。培养学生互助协作，沟通交流，积极思考，解决问题等理论应用能力。\n\n### 第四课 教学设计\n\n### 学习内容\n\n* 课程标准：microbit基础使用\n* 知识与技能：培养基本逻辑思维\n* 过程与方法：设计一个比赛记录器\n\n### 教学流程\n\n* 导言：引入主题\n\n> 通过列举数学赋值运算问题， 引入条件的概念与意义。\n\n* 不插电活动\n\n> 学生以开小火车的形式寻找生活中的条件存在现象，理解条件的概念，并分成两组进行“红绿灯”游戏，在游戏中引导学生感受条件对事物发展的能动作用以及对智能化编程的重要影响。\n\n* Microbit实操活动\n\n介绍实验用到的基础方块\n\n![太空探险活动]()\n\n* 实验成果评价\n\n总结条件对事物发展的能动作用以及对智能化编程的重要影响引导学生感受生活中条件影响的存在，锻炼其观察能力及逻辑思维能力。回顾总结本节课主要学习内容，检验学生学习成果及学习感受。\n\n\n### 第五课 教学设计\n\n### 学习内容\n\n课程标准：microbit基础使用\n知识与技能：培养基本逻辑思维\n过程与方法：设计斐波拉契数列运算程序\n\n### 教学流程\n\n* 导言：引入主题\n\n> 通过一首童谣，吸引学生兴趣，帮助学生感受并理解迭代的概念。引导学生列举生活中循环现象的存在及各种表示方法。\n\n* 不插电活动\n\n> 学生通过“绕椅子“游戏，借助具体的情景感受循环过程，通过不同方式描述绕转过程，并不断简化指引命令，为循化语句的学习奠定。学生学习斐波拉契数列，根据所学循环语句设计斐波拉契数列运算程序。\n\n* Microbit实操活动\n\n介绍实验用到的基础方块\n\n![猫爪老鼠scratch程序设计]()\n\n* 实验成果评价\n\n> 总结迭代在计算机编程中的重要作用，理解并掌握for / while等循环语句的用法，在以后的编程学习中学会利用循环语句简化程序。在此过程中，培养学生的逻辑循环能力及举一反三的能力，增加编程学习的兴趣和信心。\n\n### 第六课 教学设计\n\n### 学习内容\n\n课程标准：microbit基础使用\n知识与技能：培养基本逻辑思维\n过程与方法：设计斐波拉契数列运算程序\n\n### 教学流程\n\n* Micro：Bit 吃豆子小游戏\n\n> 通过介绍吃豆子小游戏的运行逻辑让小朋友们了解程序的运作原理以及熟悉micro：bit的基本编程思想。\n\n* Scratch 飞翔的小鸟小游戏\n\n> 通过介绍飞翔的小鸟小游戏的运行逻辑让小朋友们了解程序的运作原理以及熟悉Scratch的基本编程思想。\n\n* 实验成果评价\n\n> 总结两个游戏的编程方式，并让小朋友们自己编写属于他们自己的游戏。\n\n\n### 第七课 教学设计\n\n### 学习内容\n\n课程标准：scratch基础使用\n知识与技能：培养基本逻辑思维\n过程与方法：绘制毕达哥拉斯树分图形\n\n### 教学流程\n\n* 导言：引入主题\n\n通过展示毕达哥拉斯树分图形及空间分图形，引入scratch分图形绘制模块的设计与运用。感受编程与数学的灵魂碰撞，吸引学生兴趣。\n不插电活动\n\n学生进行“苹果拯救”小游戏 在体验游戏的同时进一步了解游戏规则及游戏过程，并引导学生根据体验的过程设计该游戏程序。在此过程中，锻炼学生的逻辑思维及思考能力，并在能力允许的范围内对游戏加以完善和创新。\n\n* scratch实操活动\n\n通过学习勾股定理，带领了解毕达哥拉斯树分图形绘制的基本原理，并学习scratch画笔绘制图形功能的使用方法。在清楚原理之后，进一步学习特殊角度的毕达哥拉斯树分图形绘制，并引导学生加大绘制难度。\n\n### 实验成果评价\n\n学生学习毕达哥拉斯树分图形的绘制，掌握scratch分图形绘制功能的使用方法，感受编程与数学的灵魂碰撞，以及数学图形之美。增强学生对scratch编程学习和数学学习的兴趣。培养学生逻辑思维及创新思考能力。\n\n### 总结\n\n总结scratch分图形绘制的使用方法，和scratch编程的基本方法。培养学生逻辑思维及创新思考能力。进一步感受编程与数学之间的紧密联系与灵魂碰撞。\n","slug":"majiadian","published":1,"updated":"2023-07-23T14:19:13.585Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkjdd1by001r98aj278i42lo","content":"<h2 id=\"课程安排\"><a href=\"#课程安排\" class=\"headerlink\" title=\"课程安排\"></a>课程安排</h2><ol>\n<li>算法：输入与输出的“你写我猜”、micro：cube设计与编程</li>\n<li>变量：“micro：scorekeeper”编程，micro创意设计</li>\n<li>条件：前进“红绿灯”，“石头剪刀布”游戏编程</li>\n<li>迭代：“指示前进”游戏，疯狂动画”头脑风暴</li>\n<li>坐标网络：战舰棋盘游戏，LED简单动画制作，屏幕保护程序编程</li>\n<li>布尔值：“双币翻转游戏”编程，布尔棋盘游戏编程</li>\n<li>位、字节：“二进制自动售货机”与二进制转换，“二进制收银机”设计与制作</li>\n<li>无线电：“病毒传播感染”模拟游戏，marco polo 和morse密码，无线通信创意设计</li>\n<li>数组：头带字谜游戏，micro：guitar制作</li>\n<li>交流展示</li>\n</ol>\n<h2 id=\"第一课-教学设计\"><a href=\"#第一课-教学设计\" class=\"headerlink\" title=\"第一课 教学设计\"></a>第一课 教学设计</h2><h3 id=\"学习内容分析\"><a href=\"#学习内容分析\" class=\"headerlink\" title=\"学习内容分析\"></a>学习内容分析</h3><p>通过设计与制作microbit.pet,通过制作实物，协助学生认识与使用microbit微控制器板。</p>\n<h3 id=\"教学目标\"><a href=\"#教学目标\" class=\"headerlink\" title=\"教学目标\"></a>教学目标</h3><p>课程标准：microbit微型控制板的认知与使用</p>\n<p>知识与技能：microbit微型控制板的使用</p>\n<p>过程与方法：设计与制作microbit.pet</p>\n<h3 id=\"教学流程\"><a href=\"#教学流程\" class=\"headerlink\" title=\"教学流程\"></a>教学流程</h3><ul>\n<li>导言：引入主题</li>\n</ul>\n<blockquote>\n<p>通过趣味方式展示介绍microbit微型控制板的制作、建造、工艺和构造作用。</p>\n</blockquote>\n<ul>\n<li>不插电活动（交流设计Micro：Bit）</li>\n</ul>\n<blockquote>\n<p>以有形的，动觉的方式展示新概念，不需要电脑或微型手机培养学生的理解。学生们相互采访自己理想的宠物，设计解决方案，创建微型宠物原型，并以绘图或文字的形式作记录。</p>\n</blockquote>\n<p>学生A从对搭档B的采访中收集信息，帮助搭档设计其理想的微型宠物，设计解决方案，创建微型宠物模型。例：你有宠物吗？你喜欢什么宠物？你喜欢你的宠物的什么？你希望你的宠物能做什么?……</p>\n<ul>\n<li>Microbit实操活动（microbitpet制作）</li>\n</ul>\n<p>介绍编程环境、进行笑脸哭脸实验、按钮实验。</p>\n<p><img src=\"http://files.xiaoxiaosky.top/blogimg/majiadian/happysad.jpg\" alt=\"笑脸哭脸实验\"></p>\n<ul>\n<li>实验成果评价</li>\n</ul>\n<blockquote>\n<p>使用不定性的标准对创意或与搭档伙伴需求的匹配程度以及是否符合microbit板的使用规范等进行micropet制作评分，诱导学生分享制作过程中的心得体会，并让学生写一篇100—150字的反思。</p>\n</blockquote>\n<ul>\n<li>总结</li>\n</ul>\n<blockquote>\n<p>总结microbit微型控制板的构造，建造与工艺作用，巩固理论知识内容。培养学生互助协作，沟通交流，积极思考，解决问题等理论应用能力。</p>\n</blockquote>\n<h2 id=\"第二课-教学设计\"><a href=\"#第二课-教学设计\" class=\"headerlink\" title=\"第二课 教学设计\"></a>第二课 教学设计</h2><h3 id=\"学习内容\"><a href=\"#学习内容\" class=\"headerlink\" title=\"学习内容\"></a>学习内容</h3><ul>\n<li>课程标准：microbit基础使用</li>\n<li>知识与技能：培养基本逻辑思维</li>\n<li>过程与方法：完善设计micro:pet</li>\n</ul>\n<h3 id=\"教学流程-1\"><a href=\"#教学流程-1\" class=\"headerlink\" title=\"教学流程\"></a>教学流程</h3><ul>\n<li>导言：引入主题</li>\n</ul>\n<blockquote>\n<p>通过介绍基本计算机储存与计算的方式了解计算机的基本原理</p>\n</blockquote>\n<ul>\n<li><p>不插电活动 </p>\n<blockquote>\n<p>通过角色扮演：一名同学扮演计算机的使用者，另外一名同学扮演计算机，扮演计算机的同学可以设计一个简短的逻辑程序，然后使用者给出一个输入数，计算机给出运算结果，在几轮结束后使用者通过几次输入与输出尝试猜出计算机的内部程序。</p>\n</blockquote>\n</li>\n<li><p>Microbit实操活动</p>\n</li>\n</ul>\n<p>介绍实验用到的基础方块</p>\n<p><img src=\"/\" alt=\"AB按钮实验\"></p>\n<ul>\n<li>实验成果评价</li>\n</ul>\n<blockquote>\n<p>使用不定性的标准对创意或与搭档伙伴需求的匹配程度以及是否符合microbit板的使用规范等进行micropet制作评分，诱导学生分享制作过程中的心得体会，并让学生写一篇100—150字的反思。</p>\n</blockquote>\n<ul>\n<li>总结</li>\n</ul>\n<blockquote>\n<p>总结microbit微型控制板的构造，建造与工艺作用，巩固理论知识内容。培养学生互助协作，沟通交流，积极思考，解决问题等理论应用能力。</p>\n</blockquote>\n<h2 id=\"第三课-教学设计\"><a href=\"#第三课-教学设计\" class=\"headerlink\" title=\"第三课 教学设计\"></a>第三课 教学设计</h2><h3 id=\"学习内容-1\"><a href=\"#学习内容-1\" class=\"headerlink\" title=\"学习内容\"></a>学习内容</h3><ul>\n<li>课程标准：microbit基础使用</li>\n<li>知识与技能：培养基本逻辑思维</li>\n<li>过程与方法：设计一个比赛记录器</li>\n</ul>\n<h3 id=\"教学流程-2\"><a href=\"#教学流程-2\" class=\"headerlink\" title=\"教学流程\"></a>教学流程</h3><ul>\n<li>导言：引入主题</li>\n</ul>\n<blockquote>\n<p>通过介绍生活中的变量与常量，引入变量与常量的概念</p>\n</blockquote>\n<ul>\n<li>不插电活动</li>\n</ul>\n<blockquote>\n<p>两个人一组进行“石头剪刀布”游戏，在游戏过程中需要记录有关游戏数据，在几轮游戏过后，引导学生寻找游戏中存在的变量与常量。</p>\n</blockquote>\n<ul>\n<li>Microbit实操活动</li>\n</ul>\n<p>介绍实验用到的基础方块</p>\n<p><img src=\"/\" alt=\"积分器实验\"></p>\n<ul>\n<li>实验成果评价</li>\n</ul>\n<blockquote>\n<p>使用不定性的标准对创意或与搭档伙伴需求的匹配程度以及是否符合microbit板的使用规范等进行micropet制作评分，诱导学生分享制作过程中的心得体会，并让学生写一篇100—150字的反思。</p>\n</blockquote>\n<ul>\n<li>总结</li>\n</ul>\n<blockquote>\n<p>总结microbit微型控制板的构造，建造与工艺作用，巩固理论知识内容。培养学生互助协作，沟通交流，积极思考，解决问题等理论应用能力。</p>\n</blockquote>\n<h3 id=\"第四课-教学设计\"><a href=\"#第四课-教学设计\" class=\"headerlink\" title=\"第四课 教学设计\"></a>第四课 教学设计</h3><h3 id=\"学习内容-2\"><a href=\"#学习内容-2\" class=\"headerlink\" title=\"学习内容\"></a>学习内容</h3><ul>\n<li>课程标准：microbit基础使用</li>\n<li>知识与技能：培养基本逻辑思维</li>\n<li>过程与方法：设计一个比赛记录器</li>\n</ul>\n<h3 id=\"教学流程-3\"><a href=\"#教学流程-3\" class=\"headerlink\" title=\"教学流程\"></a>教学流程</h3><ul>\n<li>导言：引入主题</li>\n</ul>\n<blockquote>\n<p>通过列举数学赋值运算问题， 引入条件的概念与意义。</p>\n</blockquote>\n<ul>\n<li>不插电活动</li>\n</ul>\n<blockquote>\n<p>学生以开小火车的形式寻找生活中的条件存在现象，理解条件的概念，并分成两组进行“红绿灯”游戏，在游戏中引导学生感受条件对事物发展的能动作用以及对智能化编程的重要影响。</p>\n</blockquote>\n<ul>\n<li>Microbit实操活动</li>\n</ul>\n<p>介绍实验用到的基础方块</p>\n<p><img src=\"/\" alt=\"太空探险活动\"></p>\n<ul>\n<li>实验成果评价</li>\n</ul>\n<p>总结条件对事物发展的能动作用以及对智能化编程的重要影响引导学生感受生活中条件影响的存在，锻炼其观察能力及逻辑思维能力。回顾总结本节课主要学习内容，检验学生学习成果及学习感受。</p>\n<h3 id=\"第五课-教学设计\"><a href=\"#第五课-教学设计\" class=\"headerlink\" title=\"第五课 教学设计\"></a>第五课 教学设计</h3><h3 id=\"学习内容-3\"><a href=\"#学习内容-3\" class=\"headerlink\" title=\"学习内容\"></a>学习内容</h3><p>课程标准：microbit基础使用<br>知识与技能：培养基本逻辑思维<br>过程与方法：设计斐波拉契数列运算程序</p>\n<h3 id=\"教学流程-4\"><a href=\"#教学流程-4\" class=\"headerlink\" title=\"教学流程\"></a>教学流程</h3><ul>\n<li>导言：引入主题</li>\n</ul>\n<blockquote>\n<p>通过一首童谣，吸引学生兴趣，帮助学生感受并理解迭代的概念。引导学生列举生活中循环现象的存在及各种表示方法。</p>\n</blockquote>\n<ul>\n<li>不插电活动</li>\n</ul>\n<blockquote>\n<p>学生通过“绕椅子“游戏，借助具体的情景感受循环过程，通过不同方式描述绕转过程，并不断简化指引命令，为循化语句的学习奠定。学生学习斐波拉契数列，根据所学循环语句设计斐波拉契数列运算程序。</p>\n</blockquote>\n<ul>\n<li>Microbit实操活动</li>\n</ul>\n<p>介绍实验用到的基础方块</p>\n<p><img src=\"/\" alt=\"猫爪老鼠scratch程序设计\"></p>\n<ul>\n<li>实验成果评价</li>\n</ul>\n<blockquote>\n<p>总结迭代在计算机编程中的重要作用，理解并掌握for &#x2F; while等循环语句的用法，在以后的编程学习中学会利用循环语句简化程序。在此过程中，培养学生的逻辑循环能力及举一反三的能力，增加编程学习的兴趣和信心。</p>\n</blockquote>\n<h3 id=\"第六课-教学设计\"><a href=\"#第六课-教学设计\" class=\"headerlink\" title=\"第六课 教学设计\"></a>第六课 教学设计</h3><h3 id=\"学习内容-4\"><a href=\"#学习内容-4\" class=\"headerlink\" title=\"学习内容\"></a>学习内容</h3><p>课程标准：microbit基础使用<br>知识与技能：培养基本逻辑思维<br>过程与方法：设计斐波拉契数列运算程序</p>\n<h3 id=\"教学流程-5\"><a href=\"#教学流程-5\" class=\"headerlink\" title=\"教学流程\"></a>教学流程</h3><ul>\n<li>Micro：Bit 吃豆子小游戏</li>\n</ul>\n<blockquote>\n<p>通过介绍吃豆子小游戏的运行逻辑让小朋友们了解程序的运作原理以及熟悉micro：bit的基本编程思想。</p>\n</blockquote>\n<ul>\n<li>Scratch 飞翔的小鸟小游戏</li>\n</ul>\n<blockquote>\n<p>通过介绍飞翔的小鸟小游戏的运行逻辑让小朋友们了解程序的运作原理以及熟悉Scratch的基本编程思想。</p>\n</blockquote>\n<ul>\n<li>实验成果评价</li>\n</ul>\n<blockquote>\n<p>总结两个游戏的编程方式，并让小朋友们自己编写属于他们自己的游戏。</p>\n</blockquote>\n<h3 id=\"第七课-教学设计\"><a href=\"#第七课-教学设计\" class=\"headerlink\" title=\"第七课 教学设计\"></a>第七课 教学设计</h3><h3 id=\"学习内容-5\"><a href=\"#学习内容-5\" class=\"headerlink\" title=\"学习内容\"></a>学习内容</h3><p>课程标准：scratch基础使用<br>知识与技能：培养基本逻辑思维<br>过程与方法：绘制毕达哥拉斯树分图形</p>\n<h3 id=\"教学流程-6\"><a href=\"#教学流程-6\" class=\"headerlink\" title=\"教学流程\"></a>教学流程</h3><ul>\n<li>导言：引入主题</li>\n</ul>\n<p>通过展示毕达哥拉斯树分图形及空间分图形，引入scratch分图形绘制模块的设计与运用。感受编程与数学的灵魂碰撞，吸引学生兴趣。<br>不插电活动</p>\n<p>学生进行“苹果拯救”小游戏 在体验游戏的同时进一步了解游戏规则及游戏过程，并引导学生根据体验的过程设计该游戏程序。在此过程中，锻炼学生的逻辑思维及思考能力，并在能力允许的范围内对游戏加以完善和创新。</p>\n<ul>\n<li>scratch实操活动</li>\n</ul>\n<p>通过学习勾股定理，带领了解毕达哥拉斯树分图形绘制的基本原理，并学习scratch画笔绘制图形功能的使用方法。在清楚原理之后，进一步学习特殊角度的毕达哥拉斯树分图形绘制，并引导学生加大绘制难度。</p>\n<h3 id=\"实验成果评价\"><a href=\"#实验成果评价\" class=\"headerlink\" title=\"实验成果评价\"></a>实验成果评价</h3><p>学生学习毕达哥拉斯树分图形的绘制，掌握scratch分图形绘制功能的使用方法，感受编程与数学的灵魂碰撞，以及数学图形之美。增强学生对scratch编程学习和数学学习的兴趣。培养学生逻辑思维及创新思考能力。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>总结scratch分图形绘制的使用方法，和scratch编程的基本方法。培养学生逻辑思维及创新思考能力。进一步感受编程与数学之间的紧密联系与灵魂碰撞。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"课程安排\"><a href=\"#课程安排\" class=\"headerlink\" title=\"课程安排\"></a>课程安排</h2><ol>\n<li>算法：输入与输出的“你写我猜”、micro：cube设计与编程</li>\n<li>变量：“micro：scorekeeper”编程，micro创意设计</li>\n<li>条件：前进“红绿灯”，“石头剪刀布”游戏编程</li>\n<li>迭代：“指示前进”游戏，疯狂动画”头脑风暴</li>\n<li>坐标网络：战舰棋盘游戏，LED简单动画制作，屏幕保护程序编程</li>\n<li>布尔值：“双币翻转游戏”编程，布尔棋盘游戏编程</li>\n<li>位、字节：“二进制自动售货机”与二进制转换，“二进制收银机”设计与制作</li>\n<li>无线电：“病毒传播感染”模拟游戏，marco polo 和morse密码，无线通信创意设计</li>\n<li>数组：头带字谜游戏，micro：guitar制作</li>\n<li>交流展示</li>\n</ol>\n<h2 id=\"第一课-教学设计\"><a href=\"#第一课-教学设计\" class=\"headerlink\" title=\"第一课 教学设计\"></a>第一课 教学设计</h2><h3 id=\"学习内容分析\"><a href=\"#学习内容分析\" class=\"headerlink\" title=\"学习内容分析\"></a>学习内容分析</h3><p>通过设计与制作microbit.pet,通过制作实物，协助学生认识与使用microbit微控制器板。</p>\n<h3 id=\"教学目标\"><a href=\"#教学目标\" class=\"headerlink\" title=\"教学目标\"></a>教学目标</h3><p>课程标准：microbit微型控制板的认知与使用</p>\n<p>知识与技能：microbit微型控制板的使用</p>\n<p>过程与方法：设计与制作microbit.pet</p>\n<h3 id=\"教学流程\"><a href=\"#教学流程\" class=\"headerlink\" title=\"教学流程\"></a>教学流程</h3><ul>\n<li>导言：引入主题</li>\n</ul>\n<blockquote>\n<p>通过趣味方式展示介绍microbit微型控制板的制作、建造、工艺和构造作用。</p>\n</blockquote>\n<ul>\n<li>不插电活动（交流设计Micro：Bit）</li>\n</ul>\n<blockquote>\n<p>以有形的，动觉的方式展示新概念，不需要电脑或微型手机培养学生的理解。学生们相互采访自己理想的宠物，设计解决方案，创建微型宠物原型，并以绘图或文字的形式作记录。</p>\n</blockquote>\n<p>学生A从对搭档B的采访中收集信息，帮助搭档设计其理想的微型宠物，设计解决方案，创建微型宠物模型。例：你有宠物吗？你喜欢什么宠物？你喜欢你的宠物的什么？你希望你的宠物能做什么?……</p>\n<ul>\n<li>Microbit实操活动（microbitpet制作）</li>\n</ul>\n<p>介绍编程环境、进行笑脸哭脸实验、按钮实验。</p>\n<p><img src=\"http://files.xiaoxiaosky.top/blogimg/majiadian/happysad.jpg\" alt=\"笑脸哭脸实验\"></p>\n<ul>\n<li>实验成果评价</li>\n</ul>\n<blockquote>\n<p>使用不定性的标准对创意或与搭档伙伴需求的匹配程度以及是否符合microbit板的使用规范等进行micropet制作评分，诱导学生分享制作过程中的心得体会，并让学生写一篇100—150字的反思。</p>\n</blockquote>\n<ul>\n<li>总结</li>\n</ul>\n<blockquote>\n<p>总结microbit微型控制板的构造，建造与工艺作用，巩固理论知识内容。培养学生互助协作，沟通交流，积极思考，解决问题等理论应用能力。</p>\n</blockquote>\n<h2 id=\"第二课-教学设计\"><a href=\"#第二课-教学设计\" class=\"headerlink\" title=\"第二课 教学设计\"></a>第二课 教学设计</h2><h3 id=\"学习内容\"><a href=\"#学习内容\" class=\"headerlink\" title=\"学习内容\"></a>学习内容</h3><ul>\n<li>课程标准：microbit基础使用</li>\n<li>知识与技能：培养基本逻辑思维</li>\n<li>过程与方法：完善设计micro:pet</li>\n</ul>\n<h3 id=\"教学流程-1\"><a href=\"#教学流程-1\" class=\"headerlink\" title=\"教学流程\"></a>教学流程</h3><ul>\n<li>导言：引入主题</li>\n</ul>\n<blockquote>\n<p>通过介绍基本计算机储存与计算的方式了解计算机的基本原理</p>\n</blockquote>\n<ul>\n<li><p>不插电活动 </p>\n<blockquote>\n<p>通过角色扮演：一名同学扮演计算机的使用者，另外一名同学扮演计算机，扮演计算机的同学可以设计一个简短的逻辑程序，然后使用者给出一个输入数，计算机给出运算结果，在几轮结束后使用者通过几次输入与输出尝试猜出计算机的内部程序。</p>\n</blockquote>\n</li>\n<li><p>Microbit实操活动</p>\n</li>\n</ul>\n<p>介绍实验用到的基础方块</p>\n<p><img src=\"/\" alt=\"AB按钮实验\"></p>\n<ul>\n<li>实验成果评价</li>\n</ul>\n<blockquote>\n<p>使用不定性的标准对创意或与搭档伙伴需求的匹配程度以及是否符合microbit板的使用规范等进行micropet制作评分，诱导学生分享制作过程中的心得体会，并让学生写一篇100—150字的反思。</p>\n</blockquote>\n<ul>\n<li>总结</li>\n</ul>\n<blockquote>\n<p>总结microbit微型控制板的构造，建造与工艺作用，巩固理论知识内容。培养学生互助协作，沟通交流，积极思考，解决问题等理论应用能力。</p>\n</blockquote>\n<h2 id=\"第三课-教学设计\"><a href=\"#第三课-教学设计\" class=\"headerlink\" title=\"第三课 教学设计\"></a>第三课 教学设计</h2><h3 id=\"学习内容-1\"><a href=\"#学习内容-1\" class=\"headerlink\" title=\"学习内容\"></a>学习内容</h3><ul>\n<li>课程标准：microbit基础使用</li>\n<li>知识与技能：培养基本逻辑思维</li>\n<li>过程与方法：设计一个比赛记录器</li>\n</ul>\n<h3 id=\"教学流程-2\"><a href=\"#教学流程-2\" class=\"headerlink\" title=\"教学流程\"></a>教学流程</h3><ul>\n<li>导言：引入主题</li>\n</ul>\n<blockquote>\n<p>通过介绍生活中的变量与常量，引入变量与常量的概念</p>\n</blockquote>\n<ul>\n<li>不插电活动</li>\n</ul>\n<blockquote>\n<p>两个人一组进行“石头剪刀布”游戏，在游戏过程中需要记录有关游戏数据，在几轮游戏过后，引导学生寻找游戏中存在的变量与常量。</p>\n</blockquote>\n<ul>\n<li>Microbit实操活动</li>\n</ul>\n<p>介绍实验用到的基础方块</p>\n<p><img src=\"/\" alt=\"积分器实验\"></p>\n<ul>\n<li>实验成果评价</li>\n</ul>\n<blockquote>\n<p>使用不定性的标准对创意或与搭档伙伴需求的匹配程度以及是否符合microbit板的使用规范等进行micropet制作评分，诱导学生分享制作过程中的心得体会，并让学生写一篇100—150字的反思。</p>\n</blockquote>\n<ul>\n<li>总结</li>\n</ul>\n<blockquote>\n<p>总结microbit微型控制板的构造，建造与工艺作用，巩固理论知识内容。培养学生互助协作，沟通交流，积极思考，解决问题等理论应用能力。</p>\n</blockquote>\n<h3 id=\"第四课-教学设计\"><a href=\"#第四课-教学设计\" class=\"headerlink\" title=\"第四课 教学设计\"></a>第四课 教学设计</h3><h3 id=\"学习内容-2\"><a href=\"#学习内容-2\" class=\"headerlink\" title=\"学习内容\"></a>学习内容</h3><ul>\n<li>课程标准：microbit基础使用</li>\n<li>知识与技能：培养基本逻辑思维</li>\n<li>过程与方法：设计一个比赛记录器</li>\n</ul>\n<h3 id=\"教学流程-3\"><a href=\"#教学流程-3\" class=\"headerlink\" title=\"教学流程\"></a>教学流程</h3><ul>\n<li>导言：引入主题</li>\n</ul>\n<blockquote>\n<p>通过列举数学赋值运算问题， 引入条件的概念与意义。</p>\n</blockquote>\n<ul>\n<li>不插电活动</li>\n</ul>\n<blockquote>\n<p>学生以开小火车的形式寻找生活中的条件存在现象，理解条件的概念，并分成两组进行“红绿灯”游戏，在游戏中引导学生感受条件对事物发展的能动作用以及对智能化编程的重要影响。</p>\n</blockquote>\n<ul>\n<li>Microbit实操活动</li>\n</ul>\n<p>介绍实验用到的基础方块</p>\n<p><img src=\"/\" alt=\"太空探险活动\"></p>\n<ul>\n<li>实验成果评价</li>\n</ul>\n<p>总结条件对事物发展的能动作用以及对智能化编程的重要影响引导学生感受生活中条件影响的存在，锻炼其观察能力及逻辑思维能力。回顾总结本节课主要学习内容，检验学生学习成果及学习感受。</p>\n<h3 id=\"第五课-教学设计\"><a href=\"#第五课-教学设计\" class=\"headerlink\" title=\"第五课 教学设计\"></a>第五课 教学设计</h3><h3 id=\"学习内容-3\"><a href=\"#学习内容-3\" class=\"headerlink\" title=\"学习内容\"></a>学习内容</h3><p>课程标准：microbit基础使用<br>知识与技能：培养基本逻辑思维<br>过程与方法：设计斐波拉契数列运算程序</p>\n<h3 id=\"教学流程-4\"><a href=\"#教学流程-4\" class=\"headerlink\" title=\"教学流程\"></a>教学流程</h3><ul>\n<li>导言：引入主题</li>\n</ul>\n<blockquote>\n<p>通过一首童谣，吸引学生兴趣，帮助学生感受并理解迭代的概念。引导学生列举生活中循环现象的存在及各种表示方法。</p>\n</blockquote>\n<ul>\n<li>不插电活动</li>\n</ul>\n<blockquote>\n<p>学生通过“绕椅子“游戏，借助具体的情景感受循环过程，通过不同方式描述绕转过程，并不断简化指引命令，为循化语句的学习奠定。学生学习斐波拉契数列，根据所学循环语句设计斐波拉契数列运算程序。</p>\n</blockquote>\n<ul>\n<li>Microbit实操活动</li>\n</ul>\n<p>介绍实验用到的基础方块</p>\n<p><img src=\"/\" alt=\"猫爪老鼠scratch程序设计\"></p>\n<ul>\n<li>实验成果评价</li>\n</ul>\n<blockquote>\n<p>总结迭代在计算机编程中的重要作用，理解并掌握for &#x2F; while等循环语句的用法，在以后的编程学习中学会利用循环语句简化程序。在此过程中，培养学生的逻辑循环能力及举一反三的能力，增加编程学习的兴趣和信心。</p>\n</blockquote>\n<h3 id=\"第六课-教学设计\"><a href=\"#第六课-教学设计\" class=\"headerlink\" title=\"第六课 教学设计\"></a>第六课 教学设计</h3><h3 id=\"学习内容-4\"><a href=\"#学习内容-4\" class=\"headerlink\" title=\"学习内容\"></a>学习内容</h3><p>课程标准：microbit基础使用<br>知识与技能：培养基本逻辑思维<br>过程与方法：设计斐波拉契数列运算程序</p>\n<h3 id=\"教学流程-5\"><a href=\"#教学流程-5\" class=\"headerlink\" title=\"教学流程\"></a>教学流程</h3><ul>\n<li>Micro：Bit 吃豆子小游戏</li>\n</ul>\n<blockquote>\n<p>通过介绍吃豆子小游戏的运行逻辑让小朋友们了解程序的运作原理以及熟悉micro：bit的基本编程思想。</p>\n</blockquote>\n<ul>\n<li>Scratch 飞翔的小鸟小游戏</li>\n</ul>\n<blockquote>\n<p>通过介绍飞翔的小鸟小游戏的运行逻辑让小朋友们了解程序的运作原理以及熟悉Scratch的基本编程思想。</p>\n</blockquote>\n<ul>\n<li>实验成果评价</li>\n</ul>\n<blockquote>\n<p>总结两个游戏的编程方式，并让小朋友们自己编写属于他们自己的游戏。</p>\n</blockquote>\n<h3 id=\"第七课-教学设计\"><a href=\"#第七课-教学设计\" class=\"headerlink\" title=\"第七课 教学设计\"></a>第七课 教学设计</h3><h3 id=\"学习内容-5\"><a href=\"#学习内容-5\" class=\"headerlink\" title=\"学习内容\"></a>学习内容</h3><p>课程标准：scratch基础使用<br>知识与技能：培养基本逻辑思维<br>过程与方法：绘制毕达哥拉斯树分图形</p>\n<h3 id=\"教学流程-6\"><a href=\"#教学流程-6\" class=\"headerlink\" title=\"教学流程\"></a>教学流程</h3><ul>\n<li>导言：引入主题</li>\n</ul>\n<p>通过展示毕达哥拉斯树分图形及空间分图形，引入scratch分图形绘制模块的设计与运用。感受编程与数学的灵魂碰撞，吸引学生兴趣。<br>不插电活动</p>\n<p>学生进行“苹果拯救”小游戏 在体验游戏的同时进一步了解游戏规则及游戏过程，并引导学生根据体验的过程设计该游戏程序。在此过程中，锻炼学生的逻辑思维及思考能力，并在能力允许的范围内对游戏加以完善和创新。</p>\n<ul>\n<li>scratch实操活动</li>\n</ul>\n<p>通过学习勾股定理，带领了解毕达哥拉斯树分图形绘制的基本原理，并学习scratch画笔绘制图形功能的使用方法。在清楚原理之后，进一步学习特殊角度的毕达哥拉斯树分图形绘制，并引导学生加大绘制难度。</p>\n<h3 id=\"实验成果评价\"><a href=\"#实验成果评价\" class=\"headerlink\" title=\"实验成果评价\"></a>实验成果评价</h3><p>学生学习毕达哥拉斯树分图形的绘制，掌握scratch分图形绘制功能的使用方法，感受编程与数学的灵魂碰撞，以及数学图形之美。增强学生对scratch编程学习和数学学习的兴趣。培养学生逻辑思维及创新思考能力。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>总结scratch分图形绘制的使用方法，和scratch编程的基本方法。培养学生逻辑思维及创新思考能力。进一步感受编程与数学之间的紧密联系与灵魂碰撞。</p>\n"},{"title":"linux-zip-tar","date":"2022-12-31T03:28:00.000Z","_content":"https://www.php.cn/linux-441774.html\n\nLinux压缩命令（总结）\n转载2020-01-23 13:35:2640866\n\n\nLinux压缩命令\n\nLinux常见的压缩格式有.zip、.gz、.bz2、.tar、.tar.gz、.tar.bz2；常用的压缩命令有zip、tar。这里列举了各压缩命令的使用示例。更多的用法请使用命令 --help查阅。\n\n推荐：《Linux教程》\n\nzip\n\n格式：\n\n\n\nzip [options] 目标压缩包名称 待压缩源文件\n\nunzip [-Z] [options] 待压缩源文件 [list] [-x xlist] [-d exdir]\n\n常用命令：\n\n\n\n\n\n\n\n\n\n# 压缩文件\n\nzip myfile.zip myfile\n\n# 压缩文件夹（包含子目录）\n\nzip -r mydir.zip mydir\n\n# 压缩当前目录所有文件\n\nzip mydir.zip *\n\n# 解压文件\n\nunzip mydir.zip\n\nzip更多参数：\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-v 显示操作详细信息\n\n-d 从压缩包里删除文件\n\n-m 将文件剪切到压缩包里，源文件将被删除\n\n-r 递归压缩\n\n-x 排除文件\n\n-c 加一行备注\n\n-z 加备注\n\n-T 测试压缩包完整性\n\n-e 加密\n\n-q 安静模式\n\n-1, --fast 更快的压缩速度\n\n-9, --best 更好的压缩率\n\n--help 查看帮助\n\n-h2 查看更多帮助\n\nunzip更多参数：\n\n\n\n\n\n\n\n\n\n\n-v 显示操作详细信息\n\n-l 查看压缩包内容\n\n-d 解压到指定文件夹\n\n-x 排除压缩包内文件\n\n-t 测试压缩包文件内容\n\n-z 查看备注\n\n-o 覆盖文件无需提示\n\n-q 安静模式\n\n--help 查看帮助\n\n示例：\n\n\n\n$ ls\n\nt.md  t.php t.php.zip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 创建压缩包\n\n$ zip -v myfile.zip t.*\n\n  adding: t.md  (in=8121) (out=1051) (deflated 87%)\n\n  adding: t.php (in=740) (out=319) (deflated 57%)\n\n  adding: t.php.zip     (in=1666) (out=1666) (stored 0%)\n\ntotal bytes=10527, compressed=3036 -> 71% savings\n\n# 测试压缩包完整性\n\n$ zip -T myfile.zip \n\ntest of myfile.zip OK\n\n# 测试压缩包文件内容\n\n$ unzip -t myfile.zip \n\nArchive:  myfile.zip\n\n    testing: t.md                     OK\n\n    testing: t.php                    OK\n\n    testing: t.php.zip                OK\n\nNo errors detected in compressed data of myfile.zip.\n\n# 查看压缩包里内容\n\n$ unzip -l myfile.zip \n\nArchive:  myfile.zip\n\n  Length      Date    Time    Name\n\n---------  ---------- -----   ----\n\n     8121  06-08-2016 17:03   t.md\n\n      740  06-08-2016 17:02   t.php\n\n     1666  07-30-2016 17:38   t.php.zip\n\n---------                     -------\n\n    10527                     3 files\n\n# 从压缩包里删除文件t.php.zip   \n\n$ zip -d myfile.zip t.php.zip\n\ndeleting: t.php.zip\n\n# 从压缩包里删除文件t.php\n\n$ zip -d myfile.zip t.php\n\ndeleting: t.php\n\n# 添加文件到压缩包里\n\n$ zip -u myfile.zip t.php\n\n  adding: t.php (deflated 57%)\n\n# 给压缩包添加注释  \n\n$ zip -z myfile.zip\n\nenter new zip file comment (end with .):\n\ntest\n\n.\n\n# 查看压缩包注释\n\n$ unzip -z myfile.zip \n\nArchive:  myfile.zip\n\ntest\n\n# 解压到指定文件夹\n\n$ unzip myfile.zip -d my\n\nArchive:  myfile.zip\n\ntest .\n\n  inflating: my/t.md                 \n\n  inflating: my/t.php\n\n# 排除文件不解压\n\n$ unzip myfile.zip  -x t.php -d my\n\nArchive:  myfile.zip\n\ntest .\n\n  inflating: my/t.md\n\ngz\n\n格式：\n\n\n\ngzip [options] 待压缩源文件\n\ngunzip [options]  待解压文件\n\n不用写最终的压缩文件名，会自动在后面加.gz后缀，同时删除源文件。\n\n常用命令：\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 压缩1.log，同时会自动删除源文件\n\ngzip 1.log\n\n# 解压1.log.gz，同时会自动删除压缩包\n\ngzip -d 1.log.gz\n\n# 压缩1.log，保留源文件\n\ngzip -k 1.log\n\n# 解压1.log.gz，保留压缩包\n\ngzip -dk 1.log.gz\n\n# 查看压缩包信息\n\ngzip -l 1.log.gz\n\n# 递归的对目录里的每个文件单独压缩\n\ngzip -r mydir\n\n注意：gunzip与gzip -d等效，都可以解压gz文件。\n\n更多参数：\n\n\n\n\n-c, --stdout 将压缩后的内容在标准输出显示出来，保留原文件\n\n-1, --fast 更快的压缩速度\n\n-9, --best 更好的压缩率\n\n示例：\n\n\n\n# 压缩1.log为1.log.gz，保留源文件\n\ngzip -c 1.log > 1.log.gz\n\nbz2\n\n格式：\n\n\n\nbzip2 [options] 待压缩源文件\n\nbunzip2 [options]  待解压文件\n\n常用命令：\n\n\n\n\n\n\n\n\n\n# 压缩1.log\n\nbzip2 1.log\n\nbzip2 -k 1.log\n\n# 解压1.log.bz2\n\nbzip2 -d 1.log.bz2\n\nbzip2 -dk 1.log.bz2\n\nbunzip2 1.log.bz2\n\nbunzip2 -k 1.log.bz2\n\n更多参数：\n\n\n\n\n-c, --stdout 将压缩后的内容在标准输出显示出来，保留原文件\n\n-1, --fast 更快的压缩速度\n\n-9, --best 更好的压缩率\n\ntar\n\n格式：\n\n\ntar [options] 目标压缩包名称 待压缩源文件\n\n常用命令：\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 打包后，以gzip 压缩\n\ntar zcvf test.tar.gz /test  #压缩/test为test.tar.gz\n\n# 解压test.tar.gz\n\ntar zxvf test.tar.gz \n\n# 打包后，以bzip2 压缩\n\ntar jcvf test.tar.bz2 /test  #压缩/test为test.tar.bz2\n\n# 解压test.tar.bz2\n\ntar jxvf test.tar.bz2\n\n# 仅打包，不压缩\n\ntar cvf test.tar /test  #压缩/test为test.tar\n\n# 解压test.tar\n\ntar xvf test.tar\n\n# 查看压缩包内容列表\n\ntar tvf test.tar.gz\n\n# 解压到指定文件夹（目标文件夹必须存在）\n\n$ tar -zxvf all.tar.gz -C my/\n\n# 压缩时排除某些目录\n\n$ tar -zcvf tomcat.tar.gz --exclude=tomcat/logs tomcat\n\n$ tar -zcvf tomcat.tar.gz --exclude=tomcat/logs --exclude=tomcat/libs --exclude=tomcat/xiaoshan.txt tomcat\n\n常用参数说明：\n\n\n\n\n\n\n\n\n-c, --create: 建立压缩档案\n\n-x, --extract, --get：解压\n\n-t, --list：查看内容\n\n-r, --append：向压缩归档文件末尾追加文件\n\n-u, --update：更新原压缩包中的文件\n\n-d, --diff, --compare 将压缩包里的文件与文件系统进行对比\n\n    --delete 从压缩包里删除\n\n这几个是独立的命令，压缩解压都要用到其中一个，可以和别的命令连用但只能用其中一个。下面的参数是根据需要在压缩或解压档案时可选的:\n\n\n\n\n\n\n\n-z, --gzip, --gunzip, --ungzip：有gzip属性的\n\n-j, --bzip2：有bz2属性的\n\n-Z, --compress, --uncompress：有compress属性的\n\n-v, --verbose：显示所有过程\n\n-O, --to-stdout：将文件解开到标准输出\n\n-C, --directory=DIR：解压到指定文件夹\n\n最后的参数-f是必须的:\n\n\n-f, --file=ARCHIVE: 使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名。\n\n查看命令帮助：\n\n\n\n\ntar --help\n\ntar -?\n\ntar --usage\n\n更多示例：\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 比较压缩包里文件与源文件变动\n\n$ tar --diff -vf 1.log.tar 1.log\n\n1.log\n\n1.log: Mod time differs\n\n1.log: Size differs\n\n# 删除压缩包里的1.log\n\n$ tar --delete -vf 1.log.tar 1.log\n\n# 向压缩归档文件里追加文件\n\n$ tar rvf 1.log.tar 1.log 2.log\n\n1.log\n\n2.log\n\n# 向压缩归档文件里更新文件\n\n$ tar uvf 1.log.tar 1.log 2.log\n\n说明：不能向tar.gz和tar.bz2里追加或者更新文件：\n\n\n\n\n$ tar zrvf all.tar.gz 3.log\n\ntar: Cannot update compressed archives\n\nTry 'tar --help' or 'tar --usage' for more information.\n\n以上就是Linux压缩命令（总结）的详细内容，更多请关注php中文网其它相关文章！","source":"_posts/linux-zip-tar.md","raw":"---\ntitle: linux-zip-tar\ndate: 2022-12-31 11:28:00\ncategories:\ntags:\n---\nhttps://www.php.cn/linux-441774.html\n\nLinux压缩命令（总结）\n转载2020-01-23 13:35:2640866\n\n\nLinux压缩命令\n\nLinux常见的压缩格式有.zip、.gz、.bz2、.tar、.tar.gz、.tar.bz2；常用的压缩命令有zip、tar。这里列举了各压缩命令的使用示例。更多的用法请使用命令 --help查阅。\n\n推荐：《Linux教程》\n\nzip\n\n格式：\n\n\n\nzip [options] 目标压缩包名称 待压缩源文件\n\nunzip [-Z] [options] 待压缩源文件 [list] [-x xlist] [-d exdir]\n\n常用命令：\n\n\n\n\n\n\n\n\n\n# 压缩文件\n\nzip myfile.zip myfile\n\n# 压缩文件夹（包含子目录）\n\nzip -r mydir.zip mydir\n\n# 压缩当前目录所有文件\n\nzip mydir.zip *\n\n# 解压文件\n\nunzip mydir.zip\n\nzip更多参数：\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-v 显示操作详细信息\n\n-d 从压缩包里删除文件\n\n-m 将文件剪切到压缩包里，源文件将被删除\n\n-r 递归压缩\n\n-x 排除文件\n\n-c 加一行备注\n\n-z 加备注\n\n-T 测试压缩包完整性\n\n-e 加密\n\n-q 安静模式\n\n-1, --fast 更快的压缩速度\n\n-9, --best 更好的压缩率\n\n--help 查看帮助\n\n-h2 查看更多帮助\n\nunzip更多参数：\n\n\n\n\n\n\n\n\n\n\n-v 显示操作详细信息\n\n-l 查看压缩包内容\n\n-d 解压到指定文件夹\n\n-x 排除压缩包内文件\n\n-t 测试压缩包文件内容\n\n-z 查看备注\n\n-o 覆盖文件无需提示\n\n-q 安静模式\n\n--help 查看帮助\n\n示例：\n\n\n\n$ ls\n\nt.md  t.php t.php.zip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 创建压缩包\n\n$ zip -v myfile.zip t.*\n\n  adding: t.md  (in=8121) (out=1051) (deflated 87%)\n\n  adding: t.php (in=740) (out=319) (deflated 57%)\n\n  adding: t.php.zip     (in=1666) (out=1666) (stored 0%)\n\ntotal bytes=10527, compressed=3036 -> 71% savings\n\n# 测试压缩包完整性\n\n$ zip -T myfile.zip \n\ntest of myfile.zip OK\n\n# 测试压缩包文件内容\n\n$ unzip -t myfile.zip \n\nArchive:  myfile.zip\n\n    testing: t.md                     OK\n\n    testing: t.php                    OK\n\n    testing: t.php.zip                OK\n\nNo errors detected in compressed data of myfile.zip.\n\n# 查看压缩包里内容\n\n$ unzip -l myfile.zip \n\nArchive:  myfile.zip\n\n  Length      Date    Time    Name\n\n---------  ---------- -----   ----\n\n     8121  06-08-2016 17:03   t.md\n\n      740  06-08-2016 17:02   t.php\n\n     1666  07-30-2016 17:38   t.php.zip\n\n---------                     -------\n\n    10527                     3 files\n\n# 从压缩包里删除文件t.php.zip   \n\n$ zip -d myfile.zip t.php.zip\n\ndeleting: t.php.zip\n\n# 从压缩包里删除文件t.php\n\n$ zip -d myfile.zip t.php\n\ndeleting: t.php\n\n# 添加文件到压缩包里\n\n$ zip -u myfile.zip t.php\n\n  adding: t.php (deflated 57%)\n\n# 给压缩包添加注释  \n\n$ zip -z myfile.zip\n\nenter new zip file comment (end with .):\n\ntest\n\n.\n\n# 查看压缩包注释\n\n$ unzip -z myfile.zip \n\nArchive:  myfile.zip\n\ntest\n\n# 解压到指定文件夹\n\n$ unzip myfile.zip -d my\n\nArchive:  myfile.zip\n\ntest .\n\n  inflating: my/t.md                 \n\n  inflating: my/t.php\n\n# 排除文件不解压\n\n$ unzip myfile.zip  -x t.php -d my\n\nArchive:  myfile.zip\n\ntest .\n\n  inflating: my/t.md\n\ngz\n\n格式：\n\n\n\ngzip [options] 待压缩源文件\n\ngunzip [options]  待解压文件\n\n不用写最终的压缩文件名，会自动在后面加.gz后缀，同时删除源文件。\n\n常用命令：\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 压缩1.log，同时会自动删除源文件\n\ngzip 1.log\n\n# 解压1.log.gz，同时会自动删除压缩包\n\ngzip -d 1.log.gz\n\n# 压缩1.log，保留源文件\n\ngzip -k 1.log\n\n# 解压1.log.gz，保留压缩包\n\ngzip -dk 1.log.gz\n\n# 查看压缩包信息\n\ngzip -l 1.log.gz\n\n# 递归的对目录里的每个文件单独压缩\n\ngzip -r mydir\n\n注意：gunzip与gzip -d等效，都可以解压gz文件。\n\n更多参数：\n\n\n\n\n-c, --stdout 将压缩后的内容在标准输出显示出来，保留原文件\n\n-1, --fast 更快的压缩速度\n\n-9, --best 更好的压缩率\n\n示例：\n\n\n\n# 压缩1.log为1.log.gz，保留源文件\n\ngzip -c 1.log > 1.log.gz\n\nbz2\n\n格式：\n\n\n\nbzip2 [options] 待压缩源文件\n\nbunzip2 [options]  待解压文件\n\n常用命令：\n\n\n\n\n\n\n\n\n\n# 压缩1.log\n\nbzip2 1.log\n\nbzip2 -k 1.log\n\n# 解压1.log.bz2\n\nbzip2 -d 1.log.bz2\n\nbzip2 -dk 1.log.bz2\n\nbunzip2 1.log.bz2\n\nbunzip2 -k 1.log.bz2\n\n更多参数：\n\n\n\n\n-c, --stdout 将压缩后的内容在标准输出显示出来，保留原文件\n\n-1, --fast 更快的压缩速度\n\n-9, --best 更好的压缩率\n\ntar\n\n格式：\n\n\ntar [options] 目标压缩包名称 待压缩源文件\n\n常用命令：\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 打包后，以gzip 压缩\n\ntar zcvf test.tar.gz /test  #压缩/test为test.tar.gz\n\n# 解压test.tar.gz\n\ntar zxvf test.tar.gz \n\n# 打包后，以bzip2 压缩\n\ntar jcvf test.tar.bz2 /test  #压缩/test为test.tar.bz2\n\n# 解压test.tar.bz2\n\ntar jxvf test.tar.bz2\n\n# 仅打包，不压缩\n\ntar cvf test.tar /test  #压缩/test为test.tar\n\n# 解压test.tar\n\ntar xvf test.tar\n\n# 查看压缩包内容列表\n\ntar tvf test.tar.gz\n\n# 解压到指定文件夹（目标文件夹必须存在）\n\n$ tar -zxvf all.tar.gz -C my/\n\n# 压缩时排除某些目录\n\n$ tar -zcvf tomcat.tar.gz --exclude=tomcat/logs tomcat\n\n$ tar -zcvf tomcat.tar.gz --exclude=tomcat/logs --exclude=tomcat/libs --exclude=tomcat/xiaoshan.txt tomcat\n\n常用参数说明：\n\n\n\n\n\n\n\n\n-c, --create: 建立压缩档案\n\n-x, --extract, --get：解压\n\n-t, --list：查看内容\n\n-r, --append：向压缩归档文件末尾追加文件\n\n-u, --update：更新原压缩包中的文件\n\n-d, --diff, --compare 将压缩包里的文件与文件系统进行对比\n\n    --delete 从压缩包里删除\n\n这几个是独立的命令，压缩解压都要用到其中一个，可以和别的命令连用但只能用其中一个。下面的参数是根据需要在压缩或解压档案时可选的:\n\n\n\n\n\n\n\n-z, --gzip, --gunzip, --ungzip：有gzip属性的\n\n-j, --bzip2：有bz2属性的\n\n-Z, --compress, --uncompress：有compress属性的\n\n-v, --verbose：显示所有过程\n\n-O, --to-stdout：将文件解开到标准输出\n\n-C, --directory=DIR：解压到指定文件夹\n\n最后的参数-f是必须的:\n\n\n-f, --file=ARCHIVE: 使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名。\n\n查看命令帮助：\n\n\n\n\ntar --help\n\ntar -?\n\ntar --usage\n\n更多示例：\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 比较压缩包里文件与源文件变动\n\n$ tar --diff -vf 1.log.tar 1.log\n\n1.log\n\n1.log: Mod time differs\n\n1.log: Size differs\n\n# 删除压缩包里的1.log\n\n$ tar --delete -vf 1.log.tar 1.log\n\n# 向压缩归档文件里追加文件\n\n$ tar rvf 1.log.tar 1.log 2.log\n\n1.log\n\n2.log\n\n# 向压缩归档文件里更新文件\n\n$ tar uvf 1.log.tar 1.log 2.log\n\n说明：不能向tar.gz和tar.bz2里追加或者更新文件：\n\n\n\n\n$ tar zrvf all.tar.gz 3.log\n\ntar: Cannot update compressed archives\n\nTry 'tar --help' or 'tar --usage' for more information.\n\n以上就是Linux压缩命令（总结）的详细内容，更多请关注php中文网其它相关文章！","slug":"linux-zip-tar","published":1,"updated":"2023-07-23T14:19:11.545Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkjdd1c3001v98aj3cdra9yu","content":"<p><a href=\"https://www.php.cn/linux-441774.html\">https://www.php.cn/linux-441774.html</a></p>\n<p>Linux压缩命令（总结）<br>转载2020-01-23 13:35:2640866</p>\n<p>Linux压缩命令</p>\n<p>Linux常见的压缩格式有.zip、.gz、.bz2、.tar、.tar.gz、.tar.bz2；常用的压缩命令有zip、tar。这里列举了各压缩命令的使用示例。更多的用法请使用命令 –help查阅。</p>\n<p>推荐：《Linux教程》</p>\n<p>zip</p>\n<p>格式：</p>\n<p>zip [options] 目标压缩包名称 待压缩源文件</p>\n<p>unzip [-Z] [options] 待压缩源文件 [list] [-x xlist] [-d exdir]</p>\n<p>常用命令：</p>\n<h1 id=\"压缩文件\"><a href=\"#压缩文件\" class=\"headerlink\" title=\"压缩文件\"></a>压缩文件</h1><p>zip myfile.zip myfile</p>\n<h1 id=\"压缩文件夹（包含子目录）\"><a href=\"#压缩文件夹（包含子目录）\" class=\"headerlink\" title=\"压缩文件夹（包含子目录）\"></a>压缩文件夹（包含子目录）</h1><p>zip -r mydir.zip mydir</p>\n<h1 id=\"压缩当前目录所有文件\"><a href=\"#压缩当前目录所有文件\" class=\"headerlink\" title=\"压缩当前目录所有文件\"></a>压缩当前目录所有文件</h1><p>zip mydir.zip *</p>\n<h1 id=\"解压文件\"><a href=\"#解压文件\" class=\"headerlink\" title=\"解压文件\"></a>解压文件</h1><p>unzip mydir.zip</p>\n<p>zip更多参数：</p>\n<p>-v 显示操作详细信息</p>\n<p>-d 从压缩包里删除文件</p>\n<p>-m 将文件剪切到压缩包里，源文件将被删除</p>\n<p>-r 递归压缩</p>\n<p>-x 排除文件</p>\n<p>-c 加一行备注</p>\n<p>-z 加备注</p>\n<p>-T 测试压缩包完整性</p>\n<p>-e 加密</p>\n<p>-q 安静模式</p>\n<p>-1, –fast 更快的压缩速度</p>\n<p>-9, –best 更好的压缩率</p>\n<p>–help 查看帮助</p>\n<p>-h2 查看更多帮助</p>\n<p>unzip更多参数：</p>\n<p>-v 显示操作详细信息</p>\n<p>-l 查看压缩包内容</p>\n<p>-d 解压到指定文件夹</p>\n<p>-x 排除压缩包内文件</p>\n<p>-t 测试压缩包文件内容</p>\n<p>-z 查看备注</p>\n<p>-o 覆盖文件无需提示</p>\n<p>-q 安静模式</p>\n<p>–help 查看帮助</p>\n<p>示例：</p>\n<p>$ ls</p>\n<p>t.md  t.php t.php.zip</p>\n<h1 id=\"创建压缩包\"><a href=\"#创建压缩包\" class=\"headerlink\" title=\"创建压缩包\"></a>创建压缩包</h1><p>$ zip -v myfile.zip t.*</p>\n<p>  adding: t.md  (in&#x3D;8121) (out&#x3D;1051) (deflated 87%)</p>\n<p>  adding: t.php (in&#x3D;740) (out&#x3D;319) (deflated 57%)</p>\n<p>  adding: t.php.zip     (in&#x3D;1666) (out&#x3D;1666) (stored 0%)</p>\n<p>total bytes&#x3D;10527, compressed&#x3D;3036 -&gt; 71% savings</p>\n<h1 id=\"测试压缩包完整性\"><a href=\"#测试压缩包完整性\" class=\"headerlink\" title=\"测试压缩包完整性\"></a>测试压缩包完整性</h1><p>$ zip -T myfile.zip </p>\n<p>test of myfile.zip OK</p>\n<h1 id=\"测试压缩包文件内容\"><a href=\"#测试压缩包文件内容\" class=\"headerlink\" title=\"测试压缩包文件内容\"></a>测试压缩包文件内容</h1><p>$ unzip -t myfile.zip </p>\n<p>Archive:  myfile.zip</p>\n<pre><code>testing: t.md                     OK\n\ntesting: t.php                    OK\n\ntesting: t.php.zip                OK\n</code></pre>\n<p>No errors detected in compressed data of myfile.zip.</p>\n<h1 id=\"查看压缩包里内容\"><a href=\"#查看压缩包里内容\" class=\"headerlink\" title=\"查看压缩包里内容\"></a>查看压缩包里内容</h1><p>$ unzip -l myfile.zip </p>\n<p>Archive:  myfile.zip</p>\n<p>  Length      Date    Time    Name</p>\n<hr>\n<pre><code> 8121  06-08-2016 17:03   t.md\n\n  740  06-08-2016 17:02   t.php\n\n 1666  07-30-2016 17:38   t.php.zip\n</code></pre>\n<hr>\n<pre><code>10527                     3 files\n</code></pre>\n<h1 id=\"从压缩包里删除文件t-php-zip\"><a href=\"#从压缩包里删除文件t-php-zip\" class=\"headerlink\" title=\"从压缩包里删除文件t.php.zip\"></a>从压缩包里删除文件t.php.zip</h1><p>$ zip -d myfile.zip t.php.zip</p>\n<p>deleting: t.php.zip</p>\n<h1 id=\"从压缩包里删除文件t-php\"><a href=\"#从压缩包里删除文件t-php\" class=\"headerlink\" title=\"从压缩包里删除文件t.php\"></a>从压缩包里删除文件t.php</h1><p>$ zip -d myfile.zip t.php</p>\n<p>deleting: t.php</p>\n<h1 id=\"添加文件到压缩包里\"><a href=\"#添加文件到压缩包里\" class=\"headerlink\" title=\"添加文件到压缩包里\"></a>添加文件到压缩包里</h1><p>$ zip -u myfile.zip t.php</p>\n<p>  adding: t.php (deflated 57%)</p>\n<h1 id=\"给压缩包添加注释\"><a href=\"#给压缩包添加注释\" class=\"headerlink\" title=\"给压缩包添加注释\"></a>给压缩包添加注释</h1><p>$ zip -z myfile.zip</p>\n<p>enter new zip file comment (end with .):</p>\n<p>test</p>\n<p>.</p>\n<h1 id=\"查看压缩包注释\"><a href=\"#查看压缩包注释\" class=\"headerlink\" title=\"查看压缩包注释\"></a>查看压缩包注释</h1><p>$ unzip -z myfile.zip </p>\n<p>Archive:  myfile.zip</p>\n<p>test</p>\n<h1 id=\"解压到指定文件夹\"><a href=\"#解压到指定文件夹\" class=\"headerlink\" title=\"解压到指定文件夹\"></a>解压到指定文件夹</h1><p>$ unzip myfile.zip -d my</p>\n<p>Archive:  myfile.zip</p>\n<p>test .</p>\n<p>  inflating: my&#x2F;t.md                 </p>\n<p>  inflating: my&#x2F;t.php</p>\n<h1 id=\"排除文件不解压\"><a href=\"#排除文件不解压\" class=\"headerlink\" title=\"排除文件不解压\"></a>排除文件不解压</h1><p>$ unzip myfile.zip  -x t.php -d my</p>\n<p>Archive:  myfile.zip</p>\n<p>test .</p>\n<p>  inflating: my&#x2F;t.md</p>\n<p>gz</p>\n<p>格式：</p>\n<p>gzip [options] 待压缩源文件</p>\n<p>gunzip [options]  待解压文件</p>\n<p>不用写最终的压缩文件名，会自动在后面加.gz后缀，同时删除源文件。</p>\n<p>常用命令：</p>\n<h1 id=\"压缩1-log，同时会自动删除源文件\"><a href=\"#压缩1-log，同时会自动删除源文件\" class=\"headerlink\" title=\"压缩1.log，同时会自动删除源文件\"></a>压缩1.log，同时会自动删除源文件</h1><p>gzip 1.log</p>\n<h1 id=\"解压1-log-gz，同时会自动删除压缩包\"><a href=\"#解压1-log-gz，同时会自动删除压缩包\" class=\"headerlink\" title=\"解压1.log.gz，同时会自动删除压缩包\"></a>解压1.log.gz，同时会自动删除压缩包</h1><p>gzip -d 1.log.gz</p>\n<h1 id=\"压缩1-log，保留源文件\"><a href=\"#压缩1-log，保留源文件\" class=\"headerlink\" title=\"压缩1.log，保留源文件\"></a>压缩1.log，保留源文件</h1><p>gzip -k 1.log</p>\n<h1 id=\"解压1-log-gz，保留压缩包\"><a href=\"#解压1-log-gz，保留压缩包\" class=\"headerlink\" title=\"解压1.log.gz，保留压缩包\"></a>解压1.log.gz，保留压缩包</h1><p>gzip -dk 1.log.gz</p>\n<h1 id=\"查看压缩包信息\"><a href=\"#查看压缩包信息\" class=\"headerlink\" title=\"查看压缩包信息\"></a>查看压缩包信息</h1><p>gzip -l 1.log.gz</p>\n<h1 id=\"递归的对目录里的每个文件单独压缩\"><a href=\"#递归的对目录里的每个文件单独压缩\" class=\"headerlink\" title=\"递归的对目录里的每个文件单独压缩\"></a>递归的对目录里的每个文件单独压缩</h1><p>gzip -r mydir</p>\n<p>注意：gunzip与gzip -d等效，都可以解压gz文件。</p>\n<p>更多参数：</p>\n<p>-c, –stdout 将压缩后的内容在标准输出显示出来，保留原文件</p>\n<p>-1, –fast 更快的压缩速度</p>\n<p>-9, –best 更好的压缩率</p>\n<p>示例：</p>\n<h1 id=\"压缩1-log为1-log-gz，保留源文件\"><a href=\"#压缩1-log为1-log-gz，保留源文件\" class=\"headerlink\" title=\"压缩1.log为1.log.gz，保留源文件\"></a>压缩1.log为1.log.gz，保留源文件</h1><p>gzip -c 1.log &gt; 1.log.gz</p>\n<p>bz2</p>\n<p>格式：</p>\n<p>bzip2 [options] 待压缩源文件</p>\n<p>bunzip2 [options]  待解压文件</p>\n<p>常用命令：</p>\n<h1 id=\"压缩1-log\"><a href=\"#压缩1-log\" class=\"headerlink\" title=\"压缩1.log\"></a>压缩1.log</h1><p>bzip2 1.log</p>\n<p>bzip2 -k 1.log</p>\n<h1 id=\"解压1-log-bz2\"><a href=\"#解压1-log-bz2\" class=\"headerlink\" title=\"解压1.log.bz2\"></a>解压1.log.bz2</h1><p>bzip2 -d 1.log.bz2</p>\n<p>bzip2 -dk 1.log.bz2</p>\n<p>bunzip2 1.log.bz2</p>\n<p>bunzip2 -k 1.log.bz2</p>\n<p>更多参数：</p>\n<p>-c, –stdout 将压缩后的内容在标准输出显示出来，保留原文件</p>\n<p>-1, –fast 更快的压缩速度</p>\n<p>-9, –best 更好的压缩率</p>\n<p>tar</p>\n<p>格式：</p>\n<p>tar [options] 目标压缩包名称 待压缩源文件</p>\n<p>常用命令：</p>\n<h1 id=\"打包后，以gzip-压缩\"><a href=\"#打包后，以gzip-压缩\" class=\"headerlink\" title=\"打包后，以gzip 压缩\"></a>打包后，以gzip 压缩</h1><p>tar zcvf test.tar.gz &#x2F;test  #压缩&#x2F;test为test.tar.gz</p>\n<h1 id=\"解压test-tar-gz\"><a href=\"#解压test-tar-gz\" class=\"headerlink\" title=\"解压test.tar.gz\"></a>解压test.tar.gz</h1><p>tar zxvf test.tar.gz </p>\n<h1 id=\"打包后，以bzip2-压缩\"><a href=\"#打包后，以bzip2-压缩\" class=\"headerlink\" title=\"打包后，以bzip2 压缩\"></a>打包后，以bzip2 压缩</h1><p>tar jcvf test.tar.bz2 &#x2F;test  #压缩&#x2F;test为test.tar.bz2</p>\n<h1 id=\"解压test-tar-bz2\"><a href=\"#解压test-tar-bz2\" class=\"headerlink\" title=\"解压test.tar.bz2\"></a>解压test.tar.bz2</h1><p>tar jxvf test.tar.bz2</p>\n<h1 id=\"仅打包，不压缩\"><a href=\"#仅打包，不压缩\" class=\"headerlink\" title=\"仅打包，不压缩\"></a>仅打包，不压缩</h1><p>tar cvf test.tar &#x2F;test  #压缩&#x2F;test为test.tar</p>\n<h1 id=\"解压test-tar\"><a href=\"#解压test-tar\" class=\"headerlink\" title=\"解压test.tar\"></a>解压test.tar</h1><p>tar xvf test.tar</p>\n<h1 id=\"查看压缩包内容列表\"><a href=\"#查看压缩包内容列表\" class=\"headerlink\" title=\"查看压缩包内容列表\"></a>查看压缩包内容列表</h1><p>tar tvf test.tar.gz</p>\n<h1 id=\"解压到指定文件夹（目标文件夹必须存在）\"><a href=\"#解压到指定文件夹（目标文件夹必须存在）\" class=\"headerlink\" title=\"解压到指定文件夹（目标文件夹必须存在）\"></a>解压到指定文件夹（目标文件夹必须存在）</h1><p>$ tar -zxvf all.tar.gz -C my&#x2F;</p>\n<h1 id=\"压缩时排除某些目录\"><a href=\"#压缩时排除某些目录\" class=\"headerlink\" title=\"压缩时排除某些目录\"></a>压缩时排除某些目录</h1><p>$ tar -zcvf tomcat.tar.gz –exclude&#x3D;tomcat&#x2F;logs tomcat</p>\n<p>$ tar -zcvf tomcat.tar.gz –exclude&#x3D;tomcat&#x2F;logs –exclude&#x3D;tomcat&#x2F;libs –exclude&#x3D;tomcat&#x2F;xiaoshan.txt tomcat</p>\n<p>常用参数说明：</p>\n<p>-c, –create: 建立压缩档案</p>\n<p>-x, –extract, –get：解压</p>\n<p>-t, –list：查看内容</p>\n<p>-r, –append：向压缩归档文件末尾追加文件</p>\n<p>-u, –update：更新原压缩包中的文件</p>\n<p>-d, –diff, –compare 将压缩包里的文件与文件系统进行对比</p>\n<pre><code>--delete 从压缩包里删除\n</code></pre>\n<p>这几个是独立的命令，压缩解压都要用到其中一个，可以和别的命令连用但只能用其中一个。下面的参数是根据需要在压缩或解压档案时可选的:</p>\n<p>-z, –gzip, –gunzip, –ungzip：有gzip属性的</p>\n<p>-j, –bzip2：有bz2属性的</p>\n<p>-Z, –compress, –uncompress：有compress属性的</p>\n<p>-v, –verbose：显示所有过程</p>\n<p>-O, –to-stdout：将文件解开到标准输出</p>\n<p>-C, –directory&#x3D;DIR：解压到指定文件夹</p>\n<p>最后的参数-f是必须的:</p>\n<p>-f, –file&#x3D;ARCHIVE: 使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名。</p>\n<p>查看命令帮助：</p>\n<p>tar –help</p>\n<p>tar -?</p>\n<p>tar –usage</p>\n<p>更多示例：</p>\n<h1 id=\"比较压缩包里文件与源文件变动\"><a href=\"#比较压缩包里文件与源文件变动\" class=\"headerlink\" title=\"比较压缩包里文件与源文件变动\"></a>比较压缩包里文件与源文件变动</h1><p>$ tar –diff -vf 1.log.tar 1.log</p>\n<p>1.log</p>\n<p>1.log: Mod time differs</p>\n<p>1.log: Size differs</p>\n<h1 id=\"删除压缩包里的1-log\"><a href=\"#删除压缩包里的1-log\" class=\"headerlink\" title=\"删除压缩包里的1.log\"></a>删除压缩包里的1.log</h1><p>$ tar –delete -vf 1.log.tar 1.log</p>\n<h1 id=\"向压缩归档文件里追加文件\"><a href=\"#向压缩归档文件里追加文件\" class=\"headerlink\" title=\"向压缩归档文件里追加文件\"></a>向压缩归档文件里追加文件</h1><p>$ tar rvf 1.log.tar 1.log 2.log</p>\n<p>1.log</p>\n<p>2.log</p>\n<h1 id=\"向压缩归档文件里更新文件\"><a href=\"#向压缩归档文件里更新文件\" class=\"headerlink\" title=\"向压缩归档文件里更新文件\"></a>向压缩归档文件里更新文件</h1><p>$ tar uvf 1.log.tar 1.log 2.log</p>\n<p>说明：不能向tar.gz和tar.bz2里追加或者更新文件：</p>\n<p>$ tar zrvf all.tar.gz 3.log</p>\n<p>tar: Cannot update compressed archives</p>\n<p>Try ‘tar –help’ or ‘tar –usage’ for more information.</p>\n<p>以上就是Linux压缩命令（总结）的详细内容，更多请关注php中文网其它相关文章！</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.php.cn/linux-441774.html\">https://www.php.cn/linux-441774.html</a></p>\n<p>Linux压缩命令（总结）<br>转载2020-01-23 13:35:2640866</p>\n<p>Linux压缩命令</p>\n<p>Linux常见的压缩格式有.zip、.gz、.bz2、.tar、.tar.gz、.tar.bz2；常用的压缩命令有zip、tar。这里列举了各压缩命令的使用示例。更多的用法请使用命令 –help查阅。</p>\n<p>推荐：《Linux教程》</p>\n<p>zip</p>\n<p>格式：</p>\n<p>zip [options] 目标压缩包名称 待压缩源文件</p>\n<p>unzip [-Z] [options] 待压缩源文件 [list] [-x xlist] [-d exdir]</p>\n<p>常用命令：</p>\n<h1 id=\"压缩文件\"><a href=\"#压缩文件\" class=\"headerlink\" title=\"压缩文件\"></a>压缩文件</h1><p>zip myfile.zip myfile</p>\n<h1 id=\"压缩文件夹（包含子目录）\"><a href=\"#压缩文件夹（包含子目录）\" class=\"headerlink\" title=\"压缩文件夹（包含子目录）\"></a>压缩文件夹（包含子目录）</h1><p>zip -r mydir.zip mydir</p>\n<h1 id=\"压缩当前目录所有文件\"><a href=\"#压缩当前目录所有文件\" class=\"headerlink\" title=\"压缩当前目录所有文件\"></a>压缩当前目录所有文件</h1><p>zip mydir.zip *</p>\n<h1 id=\"解压文件\"><a href=\"#解压文件\" class=\"headerlink\" title=\"解压文件\"></a>解压文件</h1><p>unzip mydir.zip</p>\n<p>zip更多参数：</p>\n<p>-v 显示操作详细信息</p>\n<p>-d 从压缩包里删除文件</p>\n<p>-m 将文件剪切到压缩包里，源文件将被删除</p>\n<p>-r 递归压缩</p>\n<p>-x 排除文件</p>\n<p>-c 加一行备注</p>\n<p>-z 加备注</p>\n<p>-T 测试压缩包完整性</p>\n<p>-e 加密</p>\n<p>-q 安静模式</p>\n<p>-1, –fast 更快的压缩速度</p>\n<p>-9, –best 更好的压缩率</p>\n<p>–help 查看帮助</p>\n<p>-h2 查看更多帮助</p>\n<p>unzip更多参数：</p>\n<p>-v 显示操作详细信息</p>\n<p>-l 查看压缩包内容</p>\n<p>-d 解压到指定文件夹</p>\n<p>-x 排除压缩包内文件</p>\n<p>-t 测试压缩包文件内容</p>\n<p>-z 查看备注</p>\n<p>-o 覆盖文件无需提示</p>\n<p>-q 安静模式</p>\n<p>–help 查看帮助</p>\n<p>示例：</p>\n<p>$ ls</p>\n<p>t.md  t.php t.php.zip</p>\n<h1 id=\"创建压缩包\"><a href=\"#创建压缩包\" class=\"headerlink\" title=\"创建压缩包\"></a>创建压缩包</h1><p>$ zip -v myfile.zip t.*</p>\n<p>  adding: t.md  (in&#x3D;8121) (out&#x3D;1051) (deflated 87%)</p>\n<p>  adding: t.php (in&#x3D;740) (out&#x3D;319) (deflated 57%)</p>\n<p>  adding: t.php.zip     (in&#x3D;1666) (out&#x3D;1666) (stored 0%)</p>\n<p>total bytes&#x3D;10527, compressed&#x3D;3036 -&gt; 71% savings</p>\n<h1 id=\"测试压缩包完整性\"><a href=\"#测试压缩包完整性\" class=\"headerlink\" title=\"测试压缩包完整性\"></a>测试压缩包完整性</h1><p>$ zip -T myfile.zip </p>\n<p>test of myfile.zip OK</p>\n<h1 id=\"测试压缩包文件内容\"><a href=\"#测试压缩包文件内容\" class=\"headerlink\" title=\"测试压缩包文件内容\"></a>测试压缩包文件内容</h1><p>$ unzip -t myfile.zip </p>\n<p>Archive:  myfile.zip</p>\n<pre><code>testing: t.md                     OK\n\ntesting: t.php                    OK\n\ntesting: t.php.zip                OK\n</code></pre>\n<p>No errors detected in compressed data of myfile.zip.</p>\n<h1 id=\"查看压缩包里内容\"><a href=\"#查看压缩包里内容\" class=\"headerlink\" title=\"查看压缩包里内容\"></a>查看压缩包里内容</h1><p>$ unzip -l myfile.zip </p>\n<p>Archive:  myfile.zip</p>\n<p>  Length      Date    Time    Name</p>\n<hr>\n<pre><code> 8121  06-08-2016 17:03   t.md\n\n  740  06-08-2016 17:02   t.php\n\n 1666  07-30-2016 17:38   t.php.zip\n</code></pre>\n<hr>\n<pre><code>10527                     3 files\n</code></pre>\n<h1 id=\"从压缩包里删除文件t-php-zip\"><a href=\"#从压缩包里删除文件t-php-zip\" class=\"headerlink\" title=\"从压缩包里删除文件t.php.zip\"></a>从压缩包里删除文件t.php.zip</h1><p>$ zip -d myfile.zip t.php.zip</p>\n<p>deleting: t.php.zip</p>\n<h1 id=\"从压缩包里删除文件t-php\"><a href=\"#从压缩包里删除文件t-php\" class=\"headerlink\" title=\"从压缩包里删除文件t.php\"></a>从压缩包里删除文件t.php</h1><p>$ zip -d myfile.zip t.php</p>\n<p>deleting: t.php</p>\n<h1 id=\"添加文件到压缩包里\"><a href=\"#添加文件到压缩包里\" class=\"headerlink\" title=\"添加文件到压缩包里\"></a>添加文件到压缩包里</h1><p>$ zip -u myfile.zip t.php</p>\n<p>  adding: t.php (deflated 57%)</p>\n<h1 id=\"给压缩包添加注释\"><a href=\"#给压缩包添加注释\" class=\"headerlink\" title=\"给压缩包添加注释\"></a>给压缩包添加注释</h1><p>$ zip -z myfile.zip</p>\n<p>enter new zip file comment (end with .):</p>\n<p>test</p>\n<p>.</p>\n<h1 id=\"查看压缩包注释\"><a href=\"#查看压缩包注释\" class=\"headerlink\" title=\"查看压缩包注释\"></a>查看压缩包注释</h1><p>$ unzip -z myfile.zip </p>\n<p>Archive:  myfile.zip</p>\n<p>test</p>\n<h1 id=\"解压到指定文件夹\"><a href=\"#解压到指定文件夹\" class=\"headerlink\" title=\"解压到指定文件夹\"></a>解压到指定文件夹</h1><p>$ unzip myfile.zip -d my</p>\n<p>Archive:  myfile.zip</p>\n<p>test .</p>\n<p>  inflating: my&#x2F;t.md                 </p>\n<p>  inflating: my&#x2F;t.php</p>\n<h1 id=\"排除文件不解压\"><a href=\"#排除文件不解压\" class=\"headerlink\" title=\"排除文件不解压\"></a>排除文件不解压</h1><p>$ unzip myfile.zip  -x t.php -d my</p>\n<p>Archive:  myfile.zip</p>\n<p>test .</p>\n<p>  inflating: my&#x2F;t.md</p>\n<p>gz</p>\n<p>格式：</p>\n<p>gzip [options] 待压缩源文件</p>\n<p>gunzip [options]  待解压文件</p>\n<p>不用写最终的压缩文件名，会自动在后面加.gz后缀，同时删除源文件。</p>\n<p>常用命令：</p>\n<h1 id=\"压缩1-log，同时会自动删除源文件\"><a href=\"#压缩1-log，同时会自动删除源文件\" class=\"headerlink\" title=\"压缩1.log，同时会自动删除源文件\"></a>压缩1.log，同时会自动删除源文件</h1><p>gzip 1.log</p>\n<h1 id=\"解压1-log-gz，同时会自动删除压缩包\"><a href=\"#解压1-log-gz，同时会自动删除压缩包\" class=\"headerlink\" title=\"解压1.log.gz，同时会自动删除压缩包\"></a>解压1.log.gz，同时会自动删除压缩包</h1><p>gzip -d 1.log.gz</p>\n<h1 id=\"压缩1-log，保留源文件\"><a href=\"#压缩1-log，保留源文件\" class=\"headerlink\" title=\"压缩1.log，保留源文件\"></a>压缩1.log，保留源文件</h1><p>gzip -k 1.log</p>\n<h1 id=\"解压1-log-gz，保留压缩包\"><a href=\"#解压1-log-gz，保留压缩包\" class=\"headerlink\" title=\"解压1.log.gz，保留压缩包\"></a>解压1.log.gz，保留压缩包</h1><p>gzip -dk 1.log.gz</p>\n<h1 id=\"查看压缩包信息\"><a href=\"#查看压缩包信息\" class=\"headerlink\" title=\"查看压缩包信息\"></a>查看压缩包信息</h1><p>gzip -l 1.log.gz</p>\n<h1 id=\"递归的对目录里的每个文件单独压缩\"><a href=\"#递归的对目录里的每个文件单独压缩\" class=\"headerlink\" title=\"递归的对目录里的每个文件单独压缩\"></a>递归的对目录里的每个文件单独压缩</h1><p>gzip -r mydir</p>\n<p>注意：gunzip与gzip -d等效，都可以解压gz文件。</p>\n<p>更多参数：</p>\n<p>-c, –stdout 将压缩后的内容在标准输出显示出来，保留原文件</p>\n<p>-1, –fast 更快的压缩速度</p>\n<p>-9, –best 更好的压缩率</p>\n<p>示例：</p>\n<h1 id=\"压缩1-log为1-log-gz，保留源文件\"><a href=\"#压缩1-log为1-log-gz，保留源文件\" class=\"headerlink\" title=\"压缩1.log为1.log.gz，保留源文件\"></a>压缩1.log为1.log.gz，保留源文件</h1><p>gzip -c 1.log &gt; 1.log.gz</p>\n<p>bz2</p>\n<p>格式：</p>\n<p>bzip2 [options] 待压缩源文件</p>\n<p>bunzip2 [options]  待解压文件</p>\n<p>常用命令：</p>\n<h1 id=\"压缩1-log\"><a href=\"#压缩1-log\" class=\"headerlink\" title=\"压缩1.log\"></a>压缩1.log</h1><p>bzip2 1.log</p>\n<p>bzip2 -k 1.log</p>\n<h1 id=\"解压1-log-bz2\"><a href=\"#解压1-log-bz2\" class=\"headerlink\" title=\"解压1.log.bz2\"></a>解压1.log.bz2</h1><p>bzip2 -d 1.log.bz2</p>\n<p>bzip2 -dk 1.log.bz2</p>\n<p>bunzip2 1.log.bz2</p>\n<p>bunzip2 -k 1.log.bz2</p>\n<p>更多参数：</p>\n<p>-c, –stdout 将压缩后的内容在标准输出显示出来，保留原文件</p>\n<p>-1, –fast 更快的压缩速度</p>\n<p>-9, –best 更好的压缩率</p>\n<p>tar</p>\n<p>格式：</p>\n<p>tar [options] 目标压缩包名称 待压缩源文件</p>\n<p>常用命令：</p>\n<h1 id=\"打包后，以gzip-压缩\"><a href=\"#打包后，以gzip-压缩\" class=\"headerlink\" title=\"打包后，以gzip 压缩\"></a>打包后，以gzip 压缩</h1><p>tar zcvf test.tar.gz &#x2F;test  #压缩&#x2F;test为test.tar.gz</p>\n<h1 id=\"解压test-tar-gz\"><a href=\"#解压test-tar-gz\" class=\"headerlink\" title=\"解压test.tar.gz\"></a>解压test.tar.gz</h1><p>tar zxvf test.tar.gz </p>\n<h1 id=\"打包后，以bzip2-压缩\"><a href=\"#打包后，以bzip2-压缩\" class=\"headerlink\" title=\"打包后，以bzip2 压缩\"></a>打包后，以bzip2 压缩</h1><p>tar jcvf test.tar.bz2 &#x2F;test  #压缩&#x2F;test为test.tar.bz2</p>\n<h1 id=\"解压test-tar-bz2\"><a href=\"#解压test-tar-bz2\" class=\"headerlink\" title=\"解压test.tar.bz2\"></a>解压test.tar.bz2</h1><p>tar jxvf test.tar.bz2</p>\n<h1 id=\"仅打包，不压缩\"><a href=\"#仅打包，不压缩\" class=\"headerlink\" title=\"仅打包，不压缩\"></a>仅打包，不压缩</h1><p>tar cvf test.tar &#x2F;test  #压缩&#x2F;test为test.tar</p>\n<h1 id=\"解压test-tar\"><a href=\"#解压test-tar\" class=\"headerlink\" title=\"解压test.tar\"></a>解压test.tar</h1><p>tar xvf test.tar</p>\n<h1 id=\"查看压缩包内容列表\"><a href=\"#查看压缩包内容列表\" class=\"headerlink\" title=\"查看压缩包内容列表\"></a>查看压缩包内容列表</h1><p>tar tvf test.tar.gz</p>\n<h1 id=\"解压到指定文件夹（目标文件夹必须存在）\"><a href=\"#解压到指定文件夹（目标文件夹必须存在）\" class=\"headerlink\" title=\"解压到指定文件夹（目标文件夹必须存在）\"></a>解压到指定文件夹（目标文件夹必须存在）</h1><p>$ tar -zxvf all.tar.gz -C my&#x2F;</p>\n<h1 id=\"压缩时排除某些目录\"><a href=\"#压缩时排除某些目录\" class=\"headerlink\" title=\"压缩时排除某些目录\"></a>压缩时排除某些目录</h1><p>$ tar -zcvf tomcat.tar.gz –exclude&#x3D;tomcat&#x2F;logs tomcat</p>\n<p>$ tar -zcvf tomcat.tar.gz –exclude&#x3D;tomcat&#x2F;logs –exclude&#x3D;tomcat&#x2F;libs –exclude&#x3D;tomcat&#x2F;xiaoshan.txt tomcat</p>\n<p>常用参数说明：</p>\n<p>-c, –create: 建立压缩档案</p>\n<p>-x, –extract, –get：解压</p>\n<p>-t, –list：查看内容</p>\n<p>-r, –append：向压缩归档文件末尾追加文件</p>\n<p>-u, –update：更新原压缩包中的文件</p>\n<p>-d, –diff, –compare 将压缩包里的文件与文件系统进行对比</p>\n<pre><code>--delete 从压缩包里删除\n</code></pre>\n<p>这几个是独立的命令，压缩解压都要用到其中一个，可以和别的命令连用但只能用其中一个。下面的参数是根据需要在压缩或解压档案时可选的:</p>\n<p>-z, –gzip, –gunzip, –ungzip：有gzip属性的</p>\n<p>-j, –bzip2：有bz2属性的</p>\n<p>-Z, –compress, –uncompress：有compress属性的</p>\n<p>-v, –verbose：显示所有过程</p>\n<p>-O, –to-stdout：将文件解开到标准输出</p>\n<p>-C, –directory&#x3D;DIR：解压到指定文件夹</p>\n<p>最后的参数-f是必须的:</p>\n<p>-f, –file&#x3D;ARCHIVE: 使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名。</p>\n<p>查看命令帮助：</p>\n<p>tar –help</p>\n<p>tar -?</p>\n<p>tar –usage</p>\n<p>更多示例：</p>\n<h1 id=\"比较压缩包里文件与源文件变动\"><a href=\"#比较压缩包里文件与源文件变动\" class=\"headerlink\" title=\"比较压缩包里文件与源文件变动\"></a>比较压缩包里文件与源文件变动</h1><p>$ tar –diff -vf 1.log.tar 1.log</p>\n<p>1.log</p>\n<p>1.log: Mod time differs</p>\n<p>1.log: Size differs</p>\n<h1 id=\"删除压缩包里的1-log\"><a href=\"#删除压缩包里的1-log\" class=\"headerlink\" title=\"删除压缩包里的1.log\"></a>删除压缩包里的1.log</h1><p>$ tar –delete -vf 1.log.tar 1.log</p>\n<h1 id=\"向压缩归档文件里追加文件\"><a href=\"#向压缩归档文件里追加文件\" class=\"headerlink\" title=\"向压缩归档文件里追加文件\"></a>向压缩归档文件里追加文件</h1><p>$ tar rvf 1.log.tar 1.log 2.log</p>\n<p>1.log</p>\n<p>2.log</p>\n<h1 id=\"向压缩归档文件里更新文件\"><a href=\"#向压缩归档文件里更新文件\" class=\"headerlink\" title=\"向压缩归档文件里更新文件\"></a>向压缩归档文件里更新文件</h1><p>$ tar uvf 1.log.tar 1.log 2.log</p>\n<p>说明：不能向tar.gz和tar.bz2里追加或者更新文件：</p>\n<p>$ tar zrvf all.tar.gz 3.log</p>\n<p>tar: Cannot update compressed archives</p>\n<p>Try ‘tar –help’ or ‘tar –usage’ for more information.</p>\n<p>以上就是Linux压缩命令（总结）的详细内容，更多请关注php中文网其它相关文章！</p>\n"},{"layout":"posts","title":"micor：bit制作吃豆子小游戏-详解","date":"2022-07-29T07:23:20.000Z","_content":"\n# 代码逻辑\n\n## 代码构成\n\n+ 游戏初始化\n\n+ 游戏主循环\n\n+ 游戏后台\n\n## 代码详解\n\n### 一、游戏初始化\n\n\n![初始化代码](https://foruda.gitee.com/images/1667287166408016185/30e59892_10348382.png \"1.png\")\n\n\n> 在游戏开始时，播放初始化音乐，检测“A”键是否按下，如果按下，则开始游戏。\n\n### 二、游戏后台\n\n![后台代码](https://foruda.gitee.com/images/1667287177736048596/79ff73f6_10348382.png \"2.png\")\n\n\n> 循环播放背景音乐\n\n### 三、游戏主循环\n\n\n![每局游戏初始化](https://foruda.gitee.com/images/1667287205320935095/2b5faa31_10348382.png \"3.png\")\n\n\n> 每次开始游戏，都需要初始化游戏，包括人物的位置、豆子的位置、得分等。\n>> 其中，每次游戏开局人物位置固定，豆子的位置是随机的。\n\n代码下面有一段是为了防止生成的随机豆子与人物重合而设置的。\n\n![判断是否需要暂停](https://foruda.gitee.com/images/1667287214987395721/c5eba0f4_10348382.png \"4.png\")\n\n\n> 下面的代码是判断是否需要暂停游戏。具体的逻辑是：\n>> 如果按下“A”和“B”键，则暂停游戏；在按AB间的时候会有k值得变化，当确定需要暂停后，我们需要注意将k值设置为0，这样就可以再次判断是否继续游戏。\n\n![绘制人物和豆子](https://foruda.gitee.com/images/1667287231827351204/a6e6eb82_10348382.png \"5.png\")\n\n\n> 这里采用了修改点阵屏亮度的方式提高人物与豆子的辨识度。\n\n![是否吃到豆子](https://foruda.gitee.com/images/1667287244534390310/654b39f4_10348382.png \"6.png\")\n\n\n> 当吃到豆子的时候，即为豆子和人的xy值相同，这时计算得分，并且重新生成豆子。\n\n![判断出界](https://foruda.gitee.com/images/1667287260759214030/c94af515_10348382.png \"7.png\")\n\n\n> 当人物走出屏幕的时候，则判断为游戏结束。\n\n![游戏结束](https://foruda.gitee.com/images/1667287270228842567/4b443155_10348382.png \"8.png\")\n\n\n> 当游戏结束后，显示最终的得分，并且进入是否需要重新开始的判断。\n\n### 四、游戏操作\n\n![游戏操作](https://foruda.gitee.com/images/1667287278931176864/acc83f26_10348382.png \"9.png\")\n\n\n> 我们分别采用转动板子来实现人物的移动，需要注意人物上下移动时的逻辑，徽标朝上，实际指的是我们向下反转板子及人物下移；徽标朝下，实际指的是我们向上反转板子及人物上移。\n\n![k值](https://foruda.gitee.com/images/1667287288800769765/a3875cce_10348382.png \"10.png\")\n\n\n> 最后一块就是k值修改的部分。\n\n## 补充说明\n\n![补充说明](https://foruda.gitee.com/images/1667287297464890887/1347af93_10348382.png \"11.png\")\n\n> 我们规定左上角为(0,0)，右下角为(4，4)，这样方便我们计算人物的位置。向下移动时，人物的y值加1，向上移动时，人物的y值减1。同理，向左移动时，人物的x值减1，向右移动时，人物的x值加1。\n","source":"_posts/micro-bit-eat-ben-xiang-xi.md","raw":"---\nlayout: posts\ntitle: micor：bit制作吃豆子小游戏-详解\ndate: 2022-07-29 15:23:20\ntags: micro:bit\ncategories: 学习\n---\n\n# 代码逻辑\n\n## 代码构成\n\n+ 游戏初始化\n\n+ 游戏主循环\n\n+ 游戏后台\n\n## 代码详解\n\n### 一、游戏初始化\n\n\n![初始化代码](https://foruda.gitee.com/images/1667287166408016185/30e59892_10348382.png \"1.png\")\n\n\n> 在游戏开始时，播放初始化音乐，检测“A”键是否按下，如果按下，则开始游戏。\n\n### 二、游戏后台\n\n![后台代码](https://foruda.gitee.com/images/1667287177736048596/79ff73f6_10348382.png \"2.png\")\n\n\n> 循环播放背景音乐\n\n### 三、游戏主循环\n\n\n![每局游戏初始化](https://foruda.gitee.com/images/1667287205320935095/2b5faa31_10348382.png \"3.png\")\n\n\n> 每次开始游戏，都需要初始化游戏，包括人物的位置、豆子的位置、得分等。\n>> 其中，每次游戏开局人物位置固定，豆子的位置是随机的。\n\n代码下面有一段是为了防止生成的随机豆子与人物重合而设置的。\n\n![判断是否需要暂停](https://foruda.gitee.com/images/1667287214987395721/c5eba0f4_10348382.png \"4.png\")\n\n\n> 下面的代码是判断是否需要暂停游戏。具体的逻辑是：\n>> 如果按下“A”和“B”键，则暂停游戏；在按AB间的时候会有k值得变化，当确定需要暂停后，我们需要注意将k值设置为0，这样就可以再次判断是否继续游戏。\n\n![绘制人物和豆子](https://foruda.gitee.com/images/1667287231827351204/a6e6eb82_10348382.png \"5.png\")\n\n\n> 这里采用了修改点阵屏亮度的方式提高人物与豆子的辨识度。\n\n![是否吃到豆子](https://foruda.gitee.com/images/1667287244534390310/654b39f4_10348382.png \"6.png\")\n\n\n> 当吃到豆子的时候，即为豆子和人的xy值相同，这时计算得分，并且重新生成豆子。\n\n![判断出界](https://foruda.gitee.com/images/1667287260759214030/c94af515_10348382.png \"7.png\")\n\n\n> 当人物走出屏幕的时候，则判断为游戏结束。\n\n![游戏结束](https://foruda.gitee.com/images/1667287270228842567/4b443155_10348382.png \"8.png\")\n\n\n> 当游戏结束后，显示最终的得分，并且进入是否需要重新开始的判断。\n\n### 四、游戏操作\n\n![游戏操作](https://foruda.gitee.com/images/1667287278931176864/acc83f26_10348382.png \"9.png\")\n\n\n> 我们分别采用转动板子来实现人物的移动，需要注意人物上下移动时的逻辑，徽标朝上，实际指的是我们向下反转板子及人物下移；徽标朝下，实际指的是我们向上反转板子及人物上移。\n\n![k值](https://foruda.gitee.com/images/1667287288800769765/a3875cce_10348382.png \"10.png\")\n\n\n> 最后一块就是k值修改的部分。\n\n## 补充说明\n\n![补充说明](https://foruda.gitee.com/images/1667287297464890887/1347af93_10348382.png \"11.png\")\n\n> 我们规定左上角为(0,0)，右下角为(4，4)，这样方便我们计算人物的位置。向下移动时，人物的y值加1，向上移动时，人物的y值减1。同理，向左移动时，人物的x值减1，向右移动时，人物的x值加1。\n","slug":"micro-bit-eat-ben-xiang-xi","published":1,"updated":"2023-07-23T14:19:11.275Z","comments":1,"photos":[],"link":"","_id":"clkjdd1c4001x98aj7w16blgx","content":"<h1 id=\"代码逻辑\"><a href=\"#代码逻辑\" class=\"headerlink\" title=\"代码逻辑\"></a>代码逻辑</h1><h2 id=\"代码构成\"><a href=\"#代码构成\" class=\"headerlink\" title=\"代码构成\"></a>代码构成</h2><ul>\n<li><p>游戏初始化</p>\n</li>\n<li><p>游戏主循环</p>\n</li>\n<li><p>游戏后台</p>\n</li>\n</ul>\n<h2 id=\"代码详解\"><a href=\"#代码详解\" class=\"headerlink\" title=\"代码详解\"></a>代码详解</h2><h3 id=\"一、游戏初始化\"><a href=\"#一、游戏初始化\" class=\"headerlink\" title=\"一、游戏初始化\"></a>一、游戏初始化</h3><p><img src=\"https://foruda.gitee.com/images/1667287166408016185/30e59892_10348382.png\" alt=\"初始化代码\" title=\"1.png\"></p>\n<blockquote>\n<p>在游戏开始时，播放初始化音乐，检测“A”键是否按下，如果按下，则开始游戏。</p>\n</blockquote>\n<h3 id=\"二、游戏后台\"><a href=\"#二、游戏后台\" class=\"headerlink\" title=\"二、游戏后台\"></a>二、游戏后台</h3><p><img src=\"https://foruda.gitee.com/images/1667287177736048596/79ff73f6_10348382.png\" alt=\"后台代码\" title=\"2.png\"></p>\n<blockquote>\n<p>循环播放背景音乐</p>\n</blockquote>\n<h3 id=\"三、游戏主循环\"><a href=\"#三、游戏主循环\" class=\"headerlink\" title=\"三、游戏主循环\"></a>三、游戏主循环</h3><p><img src=\"https://foruda.gitee.com/images/1667287205320935095/2b5faa31_10348382.png\" alt=\"每局游戏初始化\" title=\"3.png\"></p>\n<blockquote>\n<p>每次开始游戏，都需要初始化游戏，包括人物的位置、豆子的位置、得分等。</p>\n<blockquote>\n<p>其中，每次游戏开局人物位置固定，豆子的位置是随机的。</p>\n</blockquote>\n</blockquote>\n<p>代码下面有一段是为了防止生成的随机豆子与人物重合而设置的。</p>\n<p><img src=\"https://foruda.gitee.com/images/1667287214987395721/c5eba0f4_10348382.png\" alt=\"判断是否需要暂停\" title=\"4.png\"></p>\n<blockquote>\n<p>下面的代码是判断是否需要暂停游戏。具体的逻辑是：</p>\n<blockquote>\n<p>如果按下“A”和“B”键，则暂停游戏；在按AB间的时候会有k值得变化，当确定需要暂停后，我们需要注意将k值设置为0，这样就可以再次判断是否继续游戏。</p>\n</blockquote>\n</blockquote>\n<p><img src=\"https://foruda.gitee.com/images/1667287231827351204/a6e6eb82_10348382.png\" alt=\"绘制人物和豆子\" title=\"5.png\"></p>\n<blockquote>\n<p>这里采用了修改点阵屏亮度的方式提高人物与豆子的辨识度。</p>\n</blockquote>\n<p><img src=\"https://foruda.gitee.com/images/1667287244534390310/654b39f4_10348382.png\" alt=\"是否吃到豆子\" title=\"6.png\"></p>\n<blockquote>\n<p>当吃到豆子的时候，即为豆子和人的xy值相同，这时计算得分，并且重新生成豆子。</p>\n</blockquote>\n<p><img src=\"https://foruda.gitee.com/images/1667287260759214030/c94af515_10348382.png\" alt=\"判断出界\" title=\"7.png\"></p>\n<blockquote>\n<p>当人物走出屏幕的时候，则判断为游戏结束。</p>\n</blockquote>\n<p><img src=\"https://foruda.gitee.com/images/1667287270228842567/4b443155_10348382.png\" alt=\"游戏结束\" title=\"8.png\"></p>\n<blockquote>\n<p>当游戏结束后，显示最终的得分，并且进入是否需要重新开始的判断。</p>\n</blockquote>\n<h3 id=\"四、游戏操作\"><a href=\"#四、游戏操作\" class=\"headerlink\" title=\"四、游戏操作\"></a>四、游戏操作</h3><p><img src=\"https://foruda.gitee.com/images/1667287278931176864/acc83f26_10348382.png\" alt=\"游戏操作\" title=\"9.png\"></p>\n<blockquote>\n<p>我们分别采用转动板子来实现人物的移动，需要注意人物上下移动时的逻辑，徽标朝上，实际指的是我们向下反转板子及人物下移；徽标朝下，实际指的是我们向上反转板子及人物上移。</p>\n</blockquote>\n<p><img src=\"https://foruda.gitee.com/images/1667287288800769765/a3875cce_10348382.png\" alt=\"k值\" title=\"10.png\"></p>\n<blockquote>\n<p>最后一块就是k值修改的部分。</p>\n</blockquote>\n<h2 id=\"补充说明\"><a href=\"#补充说明\" class=\"headerlink\" title=\"补充说明\"></a>补充说明</h2><p><img src=\"https://foruda.gitee.com/images/1667287297464890887/1347af93_10348382.png\" alt=\"补充说明\" title=\"11.png\"></p>\n<blockquote>\n<p>我们规定左上角为(0,0)，右下角为(4，4)，这样方便我们计算人物的位置。向下移动时，人物的y值加1，向上移动时，人物的y值减1。同理，向左移动时，人物的x值减1，向右移动时，人物的x值加1。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"代码逻辑\"><a href=\"#代码逻辑\" class=\"headerlink\" title=\"代码逻辑\"></a>代码逻辑</h1><h2 id=\"代码构成\"><a href=\"#代码构成\" class=\"headerlink\" title=\"代码构成\"></a>代码构成</h2><ul>\n<li><p>游戏初始化</p>\n</li>\n<li><p>游戏主循环</p>\n</li>\n<li><p>游戏后台</p>\n</li>\n</ul>\n<h2 id=\"代码详解\"><a href=\"#代码详解\" class=\"headerlink\" title=\"代码详解\"></a>代码详解</h2><h3 id=\"一、游戏初始化\"><a href=\"#一、游戏初始化\" class=\"headerlink\" title=\"一、游戏初始化\"></a>一、游戏初始化</h3><p><img src=\"https://foruda.gitee.com/images/1667287166408016185/30e59892_10348382.png\" alt=\"初始化代码\" title=\"1.png\"></p>\n<blockquote>\n<p>在游戏开始时，播放初始化音乐，检测“A”键是否按下，如果按下，则开始游戏。</p>\n</blockquote>\n<h3 id=\"二、游戏后台\"><a href=\"#二、游戏后台\" class=\"headerlink\" title=\"二、游戏后台\"></a>二、游戏后台</h3><p><img src=\"https://foruda.gitee.com/images/1667287177736048596/79ff73f6_10348382.png\" alt=\"后台代码\" title=\"2.png\"></p>\n<blockquote>\n<p>循环播放背景音乐</p>\n</blockquote>\n<h3 id=\"三、游戏主循环\"><a href=\"#三、游戏主循环\" class=\"headerlink\" title=\"三、游戏主循环\"></a>三、游戏主循环</h3><p><img src=\"https://foruda.gitee.com/images/1667287205320935095/2b5faa31_10348382.png\" alt=\"每局游戏初始化\" title=\"3.png\"></p>\n<blockquote>\n<p>每次开始游戏，都需要初始化游戏，包括人物的位置、豆子的位置、得分等。</p>\n<blockquote>\n<p>其中，每次游戏开局人物位置固定，豆子的位置是随机的。</p>\n</blockquote>\n</blockquote>\n<p>代码下面有一段是为了防止生成的随机豆子与人物重合而设置的。</p>\n<p><img src=\"https://foruda.gitee.com/images/1667287214987395721/c5eba0f4_10348382.png\" alt=\"判断是否需要暂停\" title=\"4.png\"></p>\n<blockquote>\n<p>下面的代码是判断是否需要暂停游戏。具体的逻辑是：</p>\n<blockquote>\n<p>如果按下“A”和“B”键，则暂停游戏；在按AB间的时候会有k值得变化，当确定需要暂停后，我们需要注意将k值设置为0，这样就可以再次判断是否继续游戏。</p>\n</blockquote>\n</blockquote>\n<p><img src=\"https://foruda.gitee.com/images/1667287231827351204/a6e6eb82_10348382.png\" alt=\"绘制人物和豆子\" title=\"5.png\"></p>\n<blockquote>\n<p>这里采用了修改点阵屏亮度的方式提高人物与豆子的辨识度。</p>\n</blockquote>\n<p><img src=\"https://foruda.gitee.com/images/1667287244534390310/654b39f4_10348382.png\" alt=\"是否吃到豆子\" title=\"6.png\"></p>\n<blockquote>\n<p>当吃到豆子的时候，即为豆子和人的xy值相同，这时计算得分，并且重新生成豆子。</p>\n</blockquote>\n<p><img src=\"https://foruda.gitee.com/images/1667287260759214030/c94af515_10348382.png\" alt=\"判断出界\" title=\"7.png\"></p>\n<blockquote>\n<p>当人物走出屏幕的时候，则判断为游戏结束。</p>\n</blockquote>\n<p><img src=\"https://foruda.gitee.com/images/1667287270228842567/4b443155_10348382.png\" alt=\"游戏结束\" title=\"8.png\"></p>\n<blockquote>\n<p>当游戏结束后，显示最终的得分，并且进入是否需要重新开始的判断。</p>\n</blockquote>\n<h3 id=\"四、游戏操作\"><a href=\"#四、游戏操作\" class=\"headerlink\" title=\"四、游戏操作\"></a>四、游戏操作</h3><p><img src=\"https://foruda.gitee.com/images/1667287278931176864/acc83f26_10348382.png\" alt=\"游戏操作\" title=\"9.png\"></p>\n<blockquote>\n<p>我们分别采用转动板子来实现人物的移动，需要注意人物上下移动时的逻辑，徽标朝上，实际指的是我们向下反转板子及人物下移；徽标朝下，实际指的是我们向上反转板子及人物上移。</p>\n</blockquote>\n<p><img src=\"https://foruda.gitee.com/images/1667287288800769765/a3875cce_10348382.png\" alt=\"k值\" title=\"10.png\"></p>\n<blockquote>\n<p>最后一块就是k值修改的部分。</p>\n</blockquote>\n<h2 id=\"补充说明\"><a href=\"#补充说明\" class=\"headerlink\" title=\"补充说明\"></a>补充说明</h2><p><img src=\"https://foruda.gitee.com/images/1667287297464890887/1347af93_10348382.png\" alt=\"补充说明\" title=\"11.png\"></p>\n<blockquote>\n<p>我们规定左上角为(0,0)，右下角为(4，4)，这样方便我们计算人物的位置。向下移动时，人物的y值加1，向上移动时，人物的y值减1。同理，向左移动时，人物的x值减1，向右移动时，人物的x值加1。</p>\n</blockquote>\n"},{"title":"我的世界服务器2023年开新坑啦！！！","date":"2023-01-03T06:19:19.000Z","_content":"\n# 新图开坑\n\n大家开新图啦，本次地图加入了暮色森林玩法！\n\n# 服务器基本信息：\n\n服务器地址为：game.xiaoxaiosky.top\n\nMinecraft - 1.19.2\n\nforge       - 43.2.0\n\n# 文件获取\n\nmod获取链接在[这里http://images.xiaoxiaosky.top/mc-server/mods/](http://images.xiaoxiaosky.top/mc-server/mods/)\n\n---\n\n## 服务器未开正版验证，大家可以放心游玩\n\n---\n\n#### 另：\n\n以前的地图可以通过此[链接http://images.xiaoxiaosky.top/mc-server/maps/](http://images.xiaoxiaosky.top/mc-server/maps/)获取\n","source":"_posts/mc-server-news.md","raw":"---\ntitle: 我的世界服务器2023年开新坑啦！！！\ndate: 2023-01-03 14:19:19\ncategories: Minecraft\ntags: mc\n---\n\n# 新图开坑\n\n大家开新图啦，本次地图加入了暮色森林玩法！\n\n# 服务器基本信息：\n\n服务器地址为：game.xiaoxaiosky.top\n\nMinecraft - 1.19.2\n\nforge       - 43.2.0\n\n# 文件获取\n\nmod获取链接在[这里http://images.xiaoxiaosky.top/mc-server/mods/](http://images.xiaoxiaosky.top/mc-server/mods/)\n\n---\n\n## 服务器未开正版验证，大家可以放心游玩\n\n---\n\n#### 另：\n\n以前的地图可以通过此[链接http://images.xiaoxiaosky.top/mc-server/maps/](http://images.xiaoxiaosky.top/mc-server/maps/)获取\n","slug":"mc-server-news","published":1,"updated":"2023-07-23T14:19:11.387Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkjdd1c5002098ajbq1gfs4b","content":"<h1 id=\"新图开坑\"><a href=\"#新图开坑\" class=\"headerlink\" title=\"新图开坑\"></a>新图开坑</h1><p>大家开新图啦，本次地图加入了暮色森林玩法！</p>\n<h1 id=\"服务器基本信息：\"><a href=\"#服务器基本信息：\" class=\"headerlink\" title=\"服务器基本信息：\"></a>服务器基本信息：</h1><p>服务器地址为：game.xiaoxaiosky.top</p>\n<p>Minecraft - 1.19.2</p>\n<p>forge       - 43.2.0</p>\n<h1 id=\"文件获取\"><a href=\"#文件获取\" class=\"headerlink\" title=\"文件获取\"></a>文件获取</h1><p>mod获取链接在<a href=\"http://images.xiaoxiaosky.top/mc-server/mods/\">这里http://images.xiaoxiaosky.top/mc-server/mods/</a></p>\n<hr>\n<h2 id=\"服务器未开正版验证，大家可以放心游玩\"><a href=\"#服务器未开正版验证，大家可以放心游玩\" class=\"headerlink\" title=\"服务器未开正版验证，大家可以放心游玩\"></a>服务器未开正版验证，大家可以放心游玩</h2><hr>\n<h4 id=\"另：\"><a href=\"#另：\" class=\"headerlink\" title=\"另：\"></a>另：</h4><p>以前的地图可以通过此<a href=\"http://images.xiaoxiaosky.top/mc-server/maps/\">链接http://images.xiaoxiaosky.top/mc-server/maps/</a>获取</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"新图开坑\"><a href=\"#新图开坑\" class=\"headerlink\" title=\"新图开坑\"></a>新图开坑</h1><p>大家开新图啦，本次地图加入了暮色森林玩法！</p>\n<h1 id=\"服务器基本信息：\"><a href=\"#服务器基本信息：\" class=\"headerlink\" title=\"服务器基本信息：\"></a>服务器基本信息：</h1><p>服务器地址为：game.xiaoxaiosky.top</p>\n<p>Minecraft - 1.19.2</p>\n<p>forge       - 43.2.0</p>\n<h1 id=\"文件获取\"><a href=\"#文件获取\" class=\"headerlink\" title=\"文件获取\"></a>文件获取</h1><p>mod获取链接在<a href=\"http://images.xiaoxiaosky.top/mc-server/mods/\">这里http://images.xiaoxiaosky.top/mc-server/mods/</a></p>\n<hr>\n<h2 id=\"服务器未开正版验证，大家可以放心游玩\"><a href=\"#服务器未开正版验证，大家可以放心游玩\" class=\"headerlink\" title=\"服务器未开正版验证，大家可以放心游玩\"></a>服务器未开正版验证，大家可以放心游玩</h2><hr>\n<h4 id=\"另：\"><a href=\"#另：\" class=\"headerlink\" title=\"另：\"></a>另：</h4><p>以前的地图可以通过此<a href=\"http://images.xiaoxiaosky.top/mc-server/maps/\">链接http://images.xiaoxiaosky.top/mc-server/maps/</a>获取</p>\n"},{"layout":"posts","title":"micor：bit制作吃豆子小游戏","date":"2022-07-29T07:23:09.000Z","_content":"\n> 在 [https://songxiao1018.github.io/micro-bit-eat-ben/](https://songxiao1018.github.io/micro-bit-eat-ben/) 打开此页面\n\n## 用作扩展\n\n此仓库可以作为 **插件** 添加到 MakeCode 中。\n\n* 打开 [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* 点击 **新项目**\n* 点击齿轮图标菜单下的 **扩展**\n* 搜索 **https://github.com/songxiao1018/micro-bit-eat-ben** 并导入\n\n## 编辑此项目 ![构建状态标志](https://github.com/songxiao1018/micro-bit-eat-ben/workflows/MakeCode/badge.svg)\n\n在 MakeCode 中编辑此仓库。\n\n* 打开 [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* 点击 **导入**，然后点击 **导入 URL**\n* 粘贴 **https://github.com/songxiao1018/micro-bit-eat-ben** 并点击导入\n\n## 游戏玩法&基本运行逻辑\n\n[在这里阅读详细代码解析](https://songxiao1018.github.io/micro-bit-eat-ben/daimajieshuo) \n\n* 游戏玩法\n\n游戏目标：人物(较亮的点)吃掉豆子(较暗的点)\n游戏操作：玩家可以通过前后左右倾斜micro：bit板子来控制人物的移动\n\n* 游戏逻辑,详细见[这篇文章](http://www.xiaoxiaosky.top/2022/07/29/micro-bit-eat-ben-xiang-xi/)\n\n```\n\n> 程序初始化\n\n 播放初始化音乐\n\n 检测“A”键是否按下\n\n> 游戏后台\n\n 循环播放背景音乐\n\n> 游戏主体\n\n 将人物固定在中心\n\n 生成“豆子”，注意与人物位置不同\n\n> 开始游戏\n\n 进行判断是否需要暂停游戏\n\n 操作方法：同时按下“A”与“B”键。解除同理\n\n 绘制人物与豆子的位置\n\n 判断人物有没有走出棋盘\n\n> 游戏结束\n\n 输出得分\n\n 是否重新开始游戏\n\n> 操作方法：同时按下“A”与“B”键。解除同理\n\n```\n\n## 积木块预览\n\n此图像显示主分支中最后一次提交的块代码。\n此图像可能需要几分钟才能刷新。\n\n![块的渲染视图](https://github.com/songxiao1018/micro-bit-eat-ben/raw/master/.github/makecode/blocks.png)\n\n#### 元数据（用于搜索、渲染）\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n","source":"_posts/micro-bit-eat-ben.md","raw":"---\nlayout: posts\ntitle: micor：bit制作吃豆子小游戏\ndate: 2022-07-29 15:23:09\ntags: micro:bit\ncategories: 学习\n---\n\n> 在 [https://songxiao1018.github.io/micro-bit-eat-ben/](https://songxiao1018.github.io/micro-bit-eat-ben/) 打开此页面\n\n## 用作扩展\n\n此仓库可以作为 **插件** 添加到 MakeCode 中。\n\n* 打开 [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* 点击 **新项目**\n* 点击齿轮图标菜单下的 **扩展**\n* 搜索 **https://github.com/songxiao1018/micro-bit-eat-ben** 并导入\n\n## 编辑此项目 ![构建状态标志](https://github.com/songxiao1018/micro-bit-eat-ben/workflows/MakeCode/badge.svg)\n\n在 MakeCode 中编辑此仓库。\n\n* 打开 [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* 点击 **导入**，然后点击 **导入 URL**\n* 粘贴 **https://github.com/songxiao1018/micro-bit-eat-ben** 并点击导入\n\n## 游戏玩法&基本运行逻辑\n\n[在这里阅读详细代码解析](https://songxiao1018.github.io/micro-bit-eat-ben/daimajieshuo) \n\n* 游戏玩法\n\n游戏目标：人物(较亮的点)吃掉豆子(较暗的点)\n游戏操作：玩家可以通过前后左右倾斜micro：bit板子来控制人物的移动\n\n* 游戏逻辑,详细见[这篇文章](http://www.xiaoxiaosky.top/2022/07/29/micro-bit-eat-ben-xiang-xi/)\n\n```\n\n> 程序初始化\n\n 播放初始化音乐\n\n 检测“A”键是否按下\n\n> 游戏后台\n\n 循环播放背景音乐\n\n> 游戏主体\n\n 将人物固定在中心\n\n 生成“豆子”，注意与人物位置不同\n\n> 开始游戏\n\n 进行判断是否需要暂停游戏\n\n 操作方法：同时按下“A”与“B”键。解除同理\n\n 绘制人物与豆子的位置\n\n 判断人物有没有走出棋盘\n\n> 游戏结束\n\n 输出得分\n\n 是否重新开始游戏\n\n> 操作方法：同时按下“A”与“B”键。解除同理\n\n```\n\n## 积木块预览\n\n此图像显示主分支中最后一次提交的块代码。\n此图像可能需要几分钟才能刷新。\n\n![块的渲染视图](https://github.com/songxiao1018/micro-bit-eat-ben/raw/master/.github/makecode/blocks.png)\n\n#### 元数据（用于搜索、渲染）\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n","slug":"micro-bit-eat-ben","published":1,"updated":"2023-07-23T14:19:12.781Z","comments":1,"photos":[],"link":"","_id":"clkjdd1c7002398aj2v6rhte2","content":"<blockquote>\n<p>在 <a href=\"https://songxiao1018.github.io/micro-bit-eat-ben/\">https://songxiao1018.github.io/micro-bit-eat-ben/</a> 打开此页面</p>\n</blockquote>\n<h2 id=\"用作扩展\"><a href=\"#用作扩展\" class=\"headerlink\" title=\"用作扩展\"></a>用作扩展</h2><p>此仓库可以作为 <strong>插件</strong> 添加到 MakeCode 中。</p>\n<ul>\n<li>打开 <a href=\"https://makecode.microbit.org/\">https://makecode.microbit.org/</a></li>\n<li>点击 <strong>新项目</strong></li>\n<li>点击齿轮图标菜单下的 <strong>扩展</strong></li>\n<li>搜索 <strong><a href=\"https://github.com/songxiao1018/micro-bit-eat-ben\">https://github.com/songxiao1018/micro-bit-eat-ben</a></strong> 并导入</li>\n</ul>\n<h2 id=\"编辑此项目\"><a href=\"#编辑此项目\" class=\"headerlink\" title=\"编辑此项目 \"></a>编辑此项目 <img src=\"https://github.com/songxiao1018/micro-bit-eat-ben/workflows/MakeCode/badge.svg\" alt=\"构建状态标志\"></h2><p>在 MakeCode 中编辑此仓库。</p>\n<ul>\n<li>打开 <a href=\"https://makecode.microbit.org/\">https://makecode.microbit.org/</a></li>\n<li>点击 <strong>导入</strong>，然后点击 <strong>导入 URL</strong></li>\n<li>粘贴 <strong><a href=\"https://github.com/songxiao1018/micro-bit-eat-ben\">https://github.com/songxiao1018/micro-bit-eat-ben</a></strong> 并点击导入</li>\n</ul>\n<h2 id=\"游戏玩法-基本运行逻辑\"><a href=\"#游戏玩法-基本运行逻辑\" class=\"headerlink\" title=\"游戏玩法&amp;基本运行逻辑\"></a>游戏玩法&amp;基本运行逻辑</h2><p><a href=\"https://songxiao1018.github.io/micro-bit-eat-ben/daimajieshuo\">在这里阅读详细代码解析</a> </p>\n<ul>\n<li>游戏玩法</li>\n</ul>\n<p>游戏目标：人物(较亮的点)吃掉豆子(较暗的点)<br>游戏操作：玩家可以通过前后左右倾斜micro：bit板子来控制人物的移动</p>\n<ul>\n<li>游戏逻辑,详细见<a href=\"http://www.xiaoxiaosky.top/2022/07/29/micro-bit-eat-ben-xiang-xi/\">这篇文章</a></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&gt; 程序初始化</span><br><span class=\"line\"></span><br><span class=\"line\"> 播放初始化音乐</span><br><span class=\"line\"></span><br><span class=\"line\"> 检测“A”键是否按下</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 游戏后台</span><br><span class=\"line\"></span><br><span class=\"line\"> 循环播放背景音乐</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 游戏主体</span><br><span class=\"line\"></span><br><span class=\"line\"> 将人物固定在中心</span><br><span class=\"line\"></span><br><span class=\"line\"> 生成“豆子”，注意与人物位置不同</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 开始游戏</span><br><span class=\"line\"></span><br><span class=\"line\"> 进行判断是否需要暂停游戏</span><br><span class=\"line\"></span><br><span class=\"line\"> 操作方法：同时按下“A”与“B”键。解除同理</span><br><span class=\"line\"></span><br><span class=\"line\"> 绘制人物与豆子的位置</span><br><span class=\"line\"></span><br><span class=\"line\"> 判断人物有没有走出棋盘</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 游戏结束</span><br><span class=\"line\"></span><br><span class=\"line\"> 输出得分</span><br><span class=\"line\"></span><br><span class=\"line\"> 是否重新开始游戏</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 操作方法：同时按下“A”与“B”键。解除同理</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"积木块预览\"><a href=\"#积木块预览\" class=\"headerlink\" title=\"积木块预览\"></a>积木块预览</h2><p>此图像显示主分支中最后一次提交的块代码。<br>此图像可能需要几分钟才能刷新。</p>\n<p><img src=\"https://github.com/songxiao1018/micro-bit-eat-ben/raw/master/.github/makecode/blocks.png\" alt=\"块的渲染视图\"></p>\n<h4 id=\"元数据（用于搜索、渲染）\"><a href=\"#元数据（用于搜索、渲染）\" class=\"headerlink\" title=\"元数据（用于搜索、渲染）\"></a>元数据（用于搜索、渲染）</h4><ul>\n<li>for PXT&#x2F;microbit<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"\", \"/\");</script></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>在 <a href=\"https://songxiao1018.github.io/micro-bit-eat-ben/\">https://songxiao1018.github.io/micro-bit-eat-ben/</a> 打开此页面</p>\n</blockquote>\n<h2 id=\"用作扩展\"><a href=\"#用作扩展\" class=\"headerlink\" title=\"用作扩展\"></a>用作扩展</h2><p>此仓库可以作为 <strong>插件</strong> 添加到 MakeCode 中。</p>\n<ul>\n<li>打开 <a href=\"https://makecode.microbit.org/\">https://makecode.microbit.org/</a></li>\n<li>点击 <strong>新项目</strong></li>\n<li>点击齿轮图标菜单下的 <strong>扩展</strong></li>\n<li>搜索 <strong><a href=\"https://github.com/songxiao1018/micro-bit-eat-ben\">https://github.com/songxiao1018/micro-bit-eat-ben</a></strong> 并导入</li>\n</ul>\n<h2 id=\"编辑此项目\"><a href=\"#编辑此项目\" class=\"headerlink\" title=\"编辑此项目 \"></a>编辑此项目 <img src=\"https://github.com/songxiao1018/micro-bit-eat-ben/workflows/MakeCode/badge.svg\" alt=\"构建状态标志\"></h2><p>在 MakeCode 中编辑此仓库。</p>\n<ul>\n<li>打开 <a href=\"https://makecode.microbit.org/\">https://makecode.microbit.org/</a></li>\n<li>点击 <strong>导入</strong>，然后点击 <strong>导入 URL</strong></li>\n<li>粘贴 <strong><a href=\"https://github.com/songxiao1018/micro-bit-eat-ben\">https://github.com/songxiao1018/micro-bit-eat-ben</a></strong> 并点击导入</li>\n</ul>\n<h2 id=\"游戏玩法-基本运行逻辑\"><a href=\"#游戏玩法-基本运行逻辑\" class=\"headerlink\" title=\"游戏玩法&amp;基本运行逻辑\"></a>游戏玩法&amp;基本运行逻辑</h2><p><a href=\"https://songxiao1018.github.io/micro-bit-eat-ben/daimajieshuo\">在这里阅读详细代码解析</a> </p>\n<ul>\n<li>游戏玩法</li>\n</ul>\n<p>游戏目标：人物(较亮的点)吃掉豆子(较暗的点)<br>游戏操作：玩家可以通过前后左右倾斜micro：bit板子来控制人物的移动</p>\n<ul>\n<li>游戏逻辑,详细见<a href=\"http://www.xiaoxiaosky.top/2022/07/29/micro-bit-eat-ben-xiang-xi/\">这篇文章</a></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&gt; 程序初始化</span><br><span class=\"line\"></span><br><span class=\"line\"> 播放初始化音乐</span><br><span class=\"line\"></span><br><span class=\"line\"> 检测“A”键是否按下</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 游戏后台</span><br><span class=\"line\"></span><br><span class=\"line\"> 循环播放背景音乐</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 游戏主体</span><br><span class=\"line\"></span><br><span class=\"line\"> 将人物固定在中心</span><br><span class=\"line\"></span><br><span class=\"line\"> 生成“豆子”，注意与人物位置不同</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 开始游戏</span><br><span class=\"line\"></span><br><span class=\"line\"> 进行判断是否需要暂停游戏</span><br><span class=\"line\"></span><br><span class=\"line\"> 操作方法：同时按下“A”与“B”键。解除同理</span><br><span class=\"line\"></span><br><span class=\"line\"> 绘制人物与豆子的位置</span><br><span class=\"line\"></span><br><span class=\"line\"> 判断人物有没有走出棋盘</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 游戏结束</span><br><span class=\"line\"></span><br><span class=\"line\"> 输出得分</span><br><span class=\"line\"></span><br><span class=\"line\"> 是否重新开始游戏</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 操作方法：同时按下“A”与“B”键。解除同理</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"积木块预览\"><a href=\"#积木块预览\" class=\"headerlink\" title=\"积木块预览\"></a>积木块预览</h2><p>此图像显示主分支中最后一次提交的块代码。<br>此图像可能需要几分钟才能刷新。</p>\n<p><img src=\"https://github.com/songxiao1018/micro-bit-eat-ben/raw/master/.github/makecode/blocks.png\" alt=\"块的渲染视图\"></p>\n<h4 id=\"元数据（用于搜索、渲染）\"><a href=\"#元数据（用于搜索、渲染）\" class=\"headerlink\" title=\"元数据（用于搜索、渲染）\"></a>元数据（用于搜索、渲染）</h4><ul>\n<li>for PXT&#x2F;microbit<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"\", \"/\");</script></li>\n</ul>\n"},{"title":"micro:bit麦昆小车程序1","date":"2022-07-28T07:23:09.000Z","_content":"\n> 在 [https://songxiao1018.github.io/micro-bit-in-car/](https://songxiao1018.github.io/micro-bit-in-car/) 打开此页面\n\n## 用作扩展\n\n此仓库可以作为 **插件** 添加到 MakeCode 中。\n\n* 打开 [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* 点击 **新项目**\n* 点击齿轮图标菜单下的 **扩展**\n* 搜索 **https://github.com/songxiao1018/micro-bit-in-car** 并导入\n\n## 编辑此项目 ![构建状态标志](https://github.com/songxiao1018/micro-bit-in-car/workflows/MakeCode/badge.svg)\n\n在 MakeCode 中编辑此仓库。\n\n* 打开 [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* 点击 **导入**，然后点击 **导入 URL**\n* 粘贴 **https://github.com/songxiao1018/micro-bit-in-car** 并点击导入\n\n## 积木块预览\n\n此图像显示主分支中最后一次提交的块代码。\n此图像可能需要几分钟才能刷新。\n\n![块的渲染视图](https://github.com/songxiao1018/micro-bit-in-car/raw/master/.github/makecode/blocks.png)\n\n#### 元数据（用于搜索、渲染）\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n","source":"_posts/micro-bit-in-car.md","raw":"---\ntitle: micro:bit麦昆小车程序1\ndate: 2022-07-28 15:23:09\ntags: micro:bit\ncategories: 学习\n---\n\n> 在 [https://songxiao1018.github.io/micro-bit-in-car/](https://songxiao1018.github.io/micro-bit-in-car/) 打开此页面\n\n## 用作扩展\n\n此仓库可以作为 **插件** 添加到 MakeCode 中。\n\n* 打开 [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* 点击 **新项目**\n* 点击齿轮图标菜单下的 **扩展**\n* 搜索 **https://github.com/songxiao1018/micro-bit-in-car** 并导入\n\n## 编辑此项目 ![构建状态标志](https://github.com/songxiao1018/micro-bit-in-car/workflows/MakeCode/badge.svg)\n\n在 MakeCode 中编辑此仓库。\n\n* 打开 [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* 点击 **导入**，然后点击 **导入 URL**\n* 粘贴 **https://github.com/songxiao1018/micro-bit-in-car** 并点击导入\n\n## 积木块预览\n\n此图像显示主分支中最后一次提交的块代码。\n此图像可能需要几分钟才能刷新。\n\n![块的渲染视图](https://github.com/songxiao1018/micro-bit-in-car/raw/master/.github/makecode/blocks.png)\n\n#### 元数据（用于搜索、渲染）\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n","slug":"micro-bit-in-car","published":1,"updated":"2023-07-23T14:19:11.467Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkjdd1c9002798aj3ep57bog","content":"<blockquote>\n<p>在 <a href=\"https://songxiao1018.github.io/micro-bit-in-car/\">https://songxiao1018.github.io/micro-bit-in-car/</a> 打开此页面</p>\n</blockquote>\n<h2 id=\"用作扩展\"><a href=\"#用作扩展\" class=\"headerlink\" title=\"用作扩展\"></a>用作扩展</h2><p>此仓库可以作为 <strong>插件</strong> 添加到 MakeCode 中。</p>\n<ul>\n<li>打开 <a href=\"https://makecode.microbit.org/\">https://makecode.microbit.org/</a></li>\n<li>点击 <strong>新项目</strong></li>\n<li>点击齿轮图标菜单下的 <strong>扩展</strong></li>\n<li>搜索 <strong><a href=\"https://github.com/songxiao1018/micro-bit-in-car\">https://github.com/songxiao1018/micro-bit-in-car</a></strong> 并导入</li>\n</ul>\n<h2 id=\"编辑此项目\"><a href=\"#编辑此项目\" class=\"headerlink\" title=\"编辑此项目 \"></a>编辑此项目 <img src=\"https://github.com/songxiao1018/micro-bit-in-car/workflows/MakeCode/badge.svg\" alt=\"构建状态标志\"></h2><p>在 MakeCode 中编辑此仓库。</p>\n<ul>\n<li>打开 <a href=\"https://makecode.microbit.org/\">https://makecode.microbit.org/</a></li>\n<li>点击 <strong>导入</strong>，然后点击 <strong>导入 URL</strong></li>\n<li>粘贴 <strong><a href=\"https://github.com/songxiao1018/micro-bit-in-car\">https://github.com/songxiao1018/micro-bit-in-car</a></strong> 并点击导入</li>\n</ul>\n<h2 id=\"积木块预览\"><a href=\"#积木块预览\" class=\"headerlink\" title=\"积木块预览\"></a>积木块预览</h2><p>此图像显示主分支中最后一次提交的块代码。<br>此图像可能需要几分钟才能刷新。</p>\n<p><img src=\"https://github.com/songxiao1018/micro-bit-in-car/raw/master/.github/makecode/blocks.png\" alt=\"块的渲染视图\"></p>\n<h4 id=\"元数据（用于搜索、渲染）\"><a href=\"#元数据（用于搜索、渲染）\" class=\"headerlink\" title=\"元数据（用于搜索、渲染）\"></a>元数据（用于搜索、渲染）</h4><ul>\n<li>for PXT&#x2F;microbit<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"\", \"/\");</script></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>在 <a href=\"https://songxiao1018.github.io/micro-bit-in-car/\">https://songxiao1018.github.io/micro-bit-in-car/</a> 打开此页面</p>\n</blockquote>\n<h2 id=\"用作扩展\"><a href=\"#用作扩展\" class=\"headerlink\" title=\"用作扩展\"></a>用作扩展</h2><p>此仓库可以作为 <strong>插件</strong> 添加到 MakeCode 中。</p>\n<ul>\n<li>打开 <a href=\"https://makecode.microbit.org/\">https://makecode.microbit.org/</a></li>\n<li>点击 <strong>新项目</strong></li>\n<li>点击齿轮图标菜单下的 <strong>扩展</strong></li>\n<li>搜索 <strong><a href=\"https://github.com/songxiao1018/micro-bit-in-car\">https://github.com/songxiao1018/micro-bit-in-car</a></strong> 并导入</li>\n</ul>\n<h2 id=\"编辑此项目\"><a href=\"#编辑此项目\" class=\"headerlink\" title=\"编辑此项目 \"></a>编辑此项目 <img src=\"https://github.com/songxiao1018/micro-bit-in-car/workflows/MakeCode/badge.svg\" alt=\"构建状态标志\"></h2><p>在 MakeCode 中编辑此仓库。</p>\n<ul>\n<li>打开 <a href=\"https://makecode.microbit.org/\">https://makecode.microbit.org/</a></li>\n<li>点击 <strong>导入</strong>，然后点击 <strong>导入 URL</strong></li>\n<li>粘贴 <strong><a href=\"https://github.com/songxiao1018/micro-bit-in-car\">https://github.com/songxiao1018/micro-bit-in-car</a></strong> 并点击导入</li>\n</ul>\n<h2 id=\"积木块预览\"><a href=\"#积木块预览\" class=\"headerlink\" title=\"积木块预览\"></a>积木块预览</h2><p>此图像显示主分支中最后一次提交的块代码。<br>此图像可能需要几分钟才能刷新。</p>\n<p><img src=\"https://github.com/songxiao1018/micro-bit-in-car/raw/master/.github/makecode/blocks.png\" alt=\"块的渲染视图\"></p>\n<h4 id=\"元数据（用于搜索、渲染）\"><a href=\"#元数据（用于搜索、渲染）\" class=\"headerlink\" title=\"元数据（用于搜索、渲染）\"></a>元数据（用于搜索、渲染）</h4><ul>\n<li>for PXT&#x2F;microbit<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"\", \"/\");</script></li>\n</ul>\n"},{"title":"我的世界linux和windows启动脚本","date":"2022-10-18T11:30:30.000Z","_content":"\n# MC服务器启动脚本写法\n\n1. Linux系统的.sh启动脚本\n\n> Linux单次启动\n> Linux循环十次启动\n> Linux无限循环启动\n\n1. Windows系统的.bat启动脚本\n\n> Windows单次启动\n> Windows循环十次启动\n> Windows无限循环启动\n\n## Minecraft服务器的启动脚本写法记录\n\n首先，每个服务端都会有一个用于启动服务器的`jar`文件，这个根据具体情况具体修改，此处以`forge`直接启动服务器为例，使用文件`forge-1.12.2-14.23.5.2854.jar`启动服务器。\n\n将服务端最低内存设置为1024M，最大内存设置为4096M，同时不需要图形界面，配置参数nogui。\n核心的启动命令即为：\n\n```java\njava -server -XX:+UseG1GC  -Xmx4096M -Xms1024M -jar forge-1.12.2-14.23.5.2854.jar nogui\n```\n\n再随便瞎加一些优化参数（不一定是正优化，根据具体情况调整）\n\n```java\njava -server -XX:+UseG1GC  -Xms1024M -Xmx4096M -jar forge-1.12.2-14.23.5.2854.jar nogui -noverify -XX:+AggressiveOpts -XX:+UseCompressedOops\n```\n\n在完成了核心启动语句后，就要根据具体操作系统编写启动脚本了。\n\n1. Linux系统的`.sh`启动脚本\n\n新建任何一个后缀名为`.sh`的文件，使用`chmod +x`添加运行权限。\n\n运行时使用`./文件名.sh`来运行文件。\n\n1.1 Linux单次启动\n\n```sh\n#!/bin/sh\n\njava -server -XX:+UseG1GC  -Xms1024M -Xmx4096M -jar forge-1.12.2-14.23.5.2854.jar nogui -noverify -XX:+AggressiveOpts -XX:+UseCompressedOops\n```\n\n1.2 Linux循环十次启动\n\n服务器崩溃后会自动重新启动，一共启动十次，用于应对那些不是启动秒崩无限循环的小崩溃bug。\n\n```sh\n#!/bin/sh\n\nfor ((i=0; i<10; i ++))\ndo\n    java -server -XX:+UseG1GC  -Xms1024M -Xmx4096M -jar forge-1.12.2-14.23.5.2854.jar nogui -noverify -XX:+AggressiveOpts -XX:+UseCompressedOops\ndone\n```\n\n1.3 Linux无限循环启动\n\n崩溃后无限循环启动，只能通过强制终止`screen`或重启计算机停止。\n\n```sh\n#!/bin/sh\n\nwhile ((1))\ndo\n    java -server -XX:+UseG1GC  -Xms1024M -Xmx4096M -jar forge-1.12.2-14.23.5.2854.jar nogui -noverify -XX:+AggressiveOpts -XX:+UseCompressedOops\ndone\n```\n\n2. `Windows`系统的`.bat`启动脚本\n\n新建任何一个后缀名为`.bat`的文件，运行时直接双击来运行文件。\n\n> 注：`windows`系统的`cmd`如果要使用中文，需要用`GB2312`编码来编写`.bat`文件，否则中文会出现乱码问题。\n\n2.1 `Windows`单次启动\n\n单次启动的`.bat`脚本写法：\n\n```bat\n@ECHO OFF\ntitle Minecraft Server\njava -server -XX:+UseG1GC  -Xms1024M -Xmx4096M -jar forge-1.12.2-14.23.5.2854.jar nogui -noverify -XX:+AggressiveOpts -XX:+UseCompressedOops\npause\nEXIT\n```\n\n2.2 `Windows`循环十次启动\n\n服务器崩溃后会自动重新启动，一共启动十次，用于应对那些不是启动秒崩无限循环的小崩溃bug。\n\n```bat\n@ECHO OFF\ntitle Minecraft Server\nset n=0\n:start_server\njava -server -XX:+UseG1GC  -Xms1024M -Xmx4096M -jar forge-1.12.2-14.23.5.2854.jar nogui -noverify -XX:+AggressiveOpts -XX:+UseCompressedOops\nset /a n+=1\nif %n%==10 exit\ngoto start_server\n```\n\n2.3 `Windows`无限循环启动\n崩溃后无限循环启动，可以通过关闭cmd窗口停止。\n\n```bat\n@ECHO OFF\ntitle Minecraft Server\n:start_server\njava -server -XX:+UseG1GC  -Xms1024M -Xmx4096M -jar forge-1.12.2-14.23.5.2854.jar nogui -noverify -XX:+AggressiveOpts -XX:+UseCompressedOops\ngoto start_server\n```\n\n[](https://blog.csdn.net/starvapour/article/details/113415562)\n[](https://www.cnblogs.com/anliven/articles/6847762.html)\n","source":"_posts/minecraft-start.md","raw":"---\ntitle: 我的世界linux和windows启动脚本\ndate: 2022-10-18 19:30:30\ntags: \n - linux\n - windows\n - mc\ncategories: Minecraft\n---\n\n# MC服务器启动脚本写法\n\n1. Linux系统的.sh启动脚本\n\n> Linux单次启动\n> Linux循环十次启动\n> Linux无限循环启动\n\n1. Windows系统的.bat启动脚本\n\n> Windows单次启动\n> Windows循环十次启动\n> Windows无限循环启动\n\n## Minecraft服务器的启动脚本写法记录\n\n首先，每个服务端都会有一个用于启动服务器的`jar`文件，这个根据具体情况具体修改，此处以`forge`直接启动服务器为例，使用文件`forge-1.12.2-14.23.5.2854.jar`启动服务器。\n\n将服务端最低内存设置为1024M，最大内存设置为4096M，同时不需要图形界面，配置参数nogui。\n核心的启动命令即为：\n\n```java\njava -server -XX:+UseG1GC  -Xmx4096M -Xms1024M -jar forge-1.12.2-14.23.5.2854.jar nogui\n```\n\n再随便瞎加一些优化参数（不一定是正优化，根据具体情况调整）\n\n```java\njava -server -XX:+UseG1GC  -Xms1024M -Xmx4096M -jar forge-1.12.2-14.23.5.2854.jar nogui -noverify -XX:+AggressiveOpts -XX:+UseCompressedOops\n```\n\n在完成了核心启动语句后，就要根据具体操作系统编写启动脚本了。\n\n1. Linux系统的`.sh`启动脚本\n\n新建任何一个后缀名为`.sh`的文件，使用`chmod +x`添加运行权限。\n\n运行时使用`./文件名.sh`来运行文件。\n\n1.1 Linux单次启动\n\n```sh\n#!/bin/sh\n\njava -server -XX:+UseG1GC  -Xms1024M -Xmx4096M -jar forge-1.12.2-14.23.5.2854.jar nogui -noverify -XX:+AggressiveOpts -XX:+UseCompressedOops\n```\n\n1.2 Linux循环十次启动\n\n服务器崩溃后会自动重新启动，一共启动十次，用于应对那些不是启动秒崩无限循环的小崩溃bug。\n\n```sh\n#!/bin/sh\n\nfor ((i=0; i<10; i ++))\ndo\n    java -server -XX:+UseG1GC  -Xms1024M -Xmx4096M -jar forge-1.12.2-14.23.5.2854.jar nogui -noverify -XX:+AggressiveOpts -XX:+UseCompressedOops\ndone\n```\n\n1.3 Linux无限循环启动\n\n崩溃后无限循环启动，只能通过强制终止`screen`或重启计算机停止。\n\n```sh\n#!/bin/sh\n\nwhile ((1))\ndo\n    java -server -XX:+UseG1GC  -Xms1024M -Xmx4096M -jar forge-1.12.2-14.23.5.2854.jar nogui -noverify -XX:+AggressiveOpts -XX:+UseCompressedOops\ndone\n```\n\n2. `Windows`系统的`.bat`启动脚本\n\n新建任何一个后缀名为`.bat`的文件，运行时直接双击来运行文件。\n\n> 注：`windows`系统的`cmd`如果要使用中文，需要用`GB2312`编码来编写`.bat`文件，否则中文会出现乱码问题。\n\n2.1 `Windows`单次启动\n\n单次启动的`.bat`脚本写法：\n\n```bat\n@ECHO OFF\ntitle Minecraft Server\njava -server -XX:+UseG1GC  -Xms1024M -Xmx4096M -jar forge-1.12.2-14.23.5.2854.jar nogui -noverify -XX:+AggressiveOpts -XX:+UseCompressedOops\npause\nEXIT\n```\n\n2.2 `Windows`循环十次启动\n\n服务器崩溃后会自动重新启动，一共启动十次，用于应对那些不是启动秒崩无限循环的小崩溃bug。\n\n```bat\n@ECHO OFF\ntitle Minecraft Server\nset n=0\n:start_server\njava -server -XX:+UseG1GC  -Xms1024M -Xmx4096M -jar forge-1.12.2-14.23.5.2854.jar nogui -noverify -XX:+AggressiveOpts -XX:+UseCompressedOops\nset /a n+=1\nif %n%==10 exit\ngoto start_server\n```\n\n2.3 `Windows`无限循环启动\n崩溃后无限循环启动，可以通过关闭cmd窗口停止。\n\n```bat\n@ECHO OFF\ntitle Minecraft Server\n:start_server\njava -server -XX:+UseG1GC  -Xms1024M -Xmx4096M -jar forge-1.12.2-14.23.5.2854.jar nogui -noverify -XX:+AggressiveOpts -XX:+UseCompressedOops\ngoto start_server\n```\n\n[](https://blog.csdn.net/starvapour/article/details/113415562)\n[](https://www.cnblogs.com/anliven/articles/6847762.html)\n","slug":"minecraft-start","published":1,"updated":"2023-07-23T14:19:12.090Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkjdd1ca002a98aj0rhvffij","content":"<h1 id=\"MC服务器启动脚本写法\"><a href=\"#MC服务器启动脚本写法\" class=\"headerlink\" title=\"MC服务器启动脚本写法\"></a>MC服务器启动脚本写法</h1><ol>\n<li>Linux系统的.sh启动脚本</li>\n</ol>\n<blockquote>\n<p>Linux单次启动<br>Linux循环十次启动<br>Linux无限循环启动</p>\n</blockquote>\n<ol>\n<li>Windows系统的.bat启动脚本</li>\n</ol>\n<blockquote>\n<p>Windows单次启动<br>Windows循环十次启动<br>Windows无限循环启动</p>\n</blockquote>\n<h2 id=\"Minecraft服务器的启动脚本写法记录\"><a href=\"#Minecraft服务器的启动脚本写法记录\" class=\"headerlink\" title=\"Minecraft服务器的启动脚本写法记录\"></a>Minecraft服务器的启动脚本写法记录</h2><p>首先，每个服务端都会有一个用于启动服务器的<code>jar</code>文件，这个根据具体情况具体修改，此处以<code>forge</code>直接启动服务器为例，使用文件<code>forge-1.12.2-14.23.5.2854.jar</code>启动服务器。</p>\n<p>将服务端最低内存设置为1024M，最大内存设置为4096M，同时不需要图形界面，配置参数nogui。<br>核心的启动命令即为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -server -XX:+UseG1GC  -Xmx4096M -Xms1024M -jar forge-<span class=\"number\">1.12</span><span class=\"number\">.2</span>-<span class=\"number\">14.23</span><span class=\"number\">.5</span><span class=\"number\">.2854</span>.jar nogui</span><br></pre></td></tr></table></figure>\n\n<p>再随便瞎加一些优化参数（不一定是正优化，根据具体情况调整）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -server -XX:+UseG1GC  -Xms1024M -Xmx4096M -jar forge-<span class=\"number\">1.12</span><span class=\"number\">.2</span>-<span class=\"number\">14.23</span><span class=\"number\">.5</span><span class=\"number\">.2854</span>.jar nogui -noverify -XX:+AggressiveOpts -XX:+UseCompressedOops</span><br></pre></td></tr></table></figure>\n\n<p>在完成了核心启动语句后，就要根据具体操作系统编写启动脚本了。</p>\n<ol>\n<li>Linux系统的<code>.sh</code>启动脚本</li>\n</ol>\n<p>新建任何一个后缀名为<code>.sh</code>的文件，使用<code>chmod +x</code>添加运行权限。</p>\n<p>运行时使用<code>./文件名.sh</code>来运行文件。</p>\n<p>1.1 Linux单次启动</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"></span><br><span class=\"line\">java -server -XX:+UseG1GC  -Xms1024M -Xmx4096M -jar forge-1.12.2-14.23.5.2854.jar nogui -noverify -XX:+AggressiveOpts -XX:+UseCompressedOops</span><br></pre></td></tr></table></figure>\n\n<p>1.2 Linux循环十次启动</p>\n<p>服务器崩溃后会自动重新启动，一共启动十次，用于应对那些不是启动秒崩无限循环的小崩溃bug。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> ((i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">10</span>; i ++))</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    java -server -XX:+UseG1GC  -Xms1024M -Xmx4096M -jar forge-1.12.2-14.23.5.2854.jar nogui -noverify -XX:+AggressiveOpts -XX:+UseCompressedOops</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<p>1.3 Linux无限循环启动</p>\n<p>崩溃后无限循环启动，只能通过强制终止<code>screen</code>或重启计算机停止。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> ((<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    java -server -XX:+UseG1GC  -Xms1024M -Xmx4096M -jar forge-1.12.2-14.23.5.2854.jar nogui -noverify -XX:+AggressiveOpts -XX:+UseCompressedOops</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><code>Windows</code>系统的<code>.bat</code>启动脚本</li>\n</ol>\n<p>新建任何一个后缀名为<code>.bat</code>的文件，运行时直接双击来运行文件。</p>\n<blockquote>\n<p>注：<code>windows</code>系统的<code>cmd</code>如果要使用中文，需要用<code>GB2312</code>编码来编写<code>.bat</code>文件，否则中文会出现乱码问题。</p>\n</blockquote>\n<p>2.1 <code>Windows</code>单次启动</p>\n<p>单次启动的<code>.bat</code>脚本写法：</p>\n<figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"built_in\">ECHO</span> OFF</span><br><span class=\"line\"><span class=\"built_in\">title</span> Minecraft Server</span><br><span class=\"line\">java -server -XX:+UseG1GC  -Xms1024M -Xmx4096M -jar forge-<span class=\"number\">1</span>.<span class=\"number\">12</span>.<span class=\"number\">2</span>-<span class=\"number\">14</span>.<span class=\"number\">23</span>.<span class=\"number\">5</span>.<span class=\"number\">2854</span>.jar nogui -noverify -XX:+AggressiveOpts -XX:+UseCompressedOops</span><br><span class=\"line\"><span class=\"built_in\">pause</span></span><br><span class=\"line\"><span class=\"keyword\">EXIT</span></span><br></pre></td></tr></table></figure>\n\n<p>2.2 <code>Windows</code>循环十次启动</p>\n<p>服务器崩溃后会自动重新启动，一共启动十次，用于应对那些不是启动秒崩无限循环的小崩溃bug。</p>\n<figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"built_in\">ECHO</span> OFF</span><br><span class=\"line\"><span class=\"built_in\">title</span> Minecraft Server</span><br><span class=\"line\"><span class=\"built_in\">set</span> n=<span class=\"number\">0</span></span><br><span class=\"line\">:start_server</span><br><span class=\"line\">java -server -XX:+UseG1GC  -Xms1024M -Xmx4096M -jar forge-<span class=\"number\">1</span>.<span class=\"number\">12</span>.<span class=\"number\">2</span>-<span class=\"number\">14</span>.<span class=\"number\">23</span>.<span class=\"number\">5</span>.<span class=\"number\">2854</span>.jar nogui -noverify -XX:+AggressiveOpts -XX:+UseCompressedOops</span><br><span class=\"line\"><span class=\"built_in\">set</span> /a n+=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"variable\">%n%</span>==<span class=\"number\">10</span> <span class=\"keyword\">exit</span></span><br><span class=\"line\"><span class=\"keyword\">goto</span> start_server</span><br></pre></td></tr></table></figure>\n\n<p>2.3 <code>Windows</code>无限循环启动<br>崩溃后无限循环启动，可以通过关闭cmd窗口停止。</p>\n<figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"built_in\">ECHO</span> OFF</span><br><span class=\"line\"><span class=\"built_in\">title</span> Minecraft Server</span><br><span class=\"line\">:start_server</span><br><span class=\"line\">java -server -XX:+UseG1GC  -Xms1024M -Xmx4096M -jar forge-<span class=\"number\">1</span>.<span class=\"number\">12</span>.<span class=\"number\">2</span>-<span class=\"number\">14</span>.<span class=\"number\">23</span>.<span class=\"number\">5</span>.<span class=\"number\">2854</span>.jar nogui -noverify -XX:+AggressiveOpts -XX:+UseCompressedOops</span><br><span class=\"line\"><span class=\"keyword\">goto</span> start_server</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://blog.csdn.net/starvapour/article/details/113415562\"></a><br><a href=\"https://www.cnblogs.com/anliven/articles/6847762.html\"></a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"MC服务器启动脚本写法\"><a href=\"#MC服务器启动脚本写法\" class=\"headerlink\" title=\"MC服务器启动脚本写法\"></a>MC服务器启动脚本写法</h1><ol>\n<li>Linux系统的.sh启动脚本</li>\n</ol>\n<blockquote>\n<p>Linux单次启动<br>Linux循环十次启动<br>Linux无限循环启动</p>\n</blockquote>\n<ol>\n<li>Windows系统的.bat启动脚本</li>\n</ol>\n<blockquote>\n<p>Windows单次启动<br>Windows循环十次启动<br>Windows无限循环启动</p>\n</blockquote>\n<h2 id=\"Minecraft服务器的启动脚本写法记录\"><a href=\"#Minecraft服务器的启动脚本写法记录\" class=\"headerlink\" title=\"Minecraft服务器的启动脚本写法记录\"></a>Minecraft服务器的启动脚本写法记录</h2><p>首先，每个服务端都会有一个用于启动服务器的<code>jar</code>文件，这个根据具体情况具体修改，此处以<code>forge</code>直接启动服务器为例，使用文件<code>forge-1.12.2-14.23.5.2854.jar</code>启动服务器。</p>\n<p>将服务端最低内存设置为1024M，最大内存设置为4096M，同时不需要图形界面，配置参数nogui。<br>核心的启动命令即为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -server -XX:+UseG1GC  -Xmx4096M -Xms1024M -jar forge-<span class=\"number\">1.12</span><span class=\"number\">.2</span>-<span class=\"number\">14.23</span><span class=\"number\">.5</span><span class=\"number\">.2854</span>.jar nogui</span><br></pre></td></tr></table></figure>\n\n<p>再随便瞎加一些优化参数（不一定是正优化，根据具体情况调整）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -server -XX:+UseG1GC  -Xms1024M -Xmx4096M -jar forge-<span class=\"number\">1.12</span><span class=\"number\">.2</span>-<span class=\"number\">14.23</span><span class=\"number\">.5</span><span class=\"number\">.2854</span>.jar nogui -noverify -XX:+AggressiveOpts -XX:+UseCompressedOops</span><br></pre></td></tr></table></figure>\n\n<p>在完成了核心启动语句后，就要根据具体操作系统编写启动脚本了。</p>\n<ol>\n<li>Linux系统的<code>.sh</code>启动脚本</li>\n</ol>\n<p>新建任何一个后缀名为<code>.sh</code>的文件，使用<code>chmod +x</code>添加运行权限。</p>\n<p>运行时使用<code>./文件名.sh</code>来运行文件。</p>\n<p>1.1 Linux单次启动</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"></span><br><span class=\"line\">java -server -XX:+UseG1GC  -Xms1024M -Xmx4096M -jar forge-1.12.2-14.23.5.2854.jar nogui -noverify -XX:+AggressiveOpts -XX:+UseCompressedOops</span><br></pre></td></tr></table></figure>\n\n<p>1.2 Linux循环十次启动</p>\n<p>服务器崩溃后会自动重新启动，一共启动十次，用于应对那些不是启动秒崩无限循环的小崩溃bug。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> ((i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">10</span>; i ++))</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    java -server -XX:+UseG1GC  -Xms1024M -Xmx4096M -jar forge-1.12.2-14.23.5.2854.jar nogui -noverify -XX:+AggressiveOpts -XX:+UseCompressedOops</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<p>1.3 Linux无限循环启动</p>\n<p>崩溃后无限循环启动，只能通过强制终止<code>screen</code>或重启计算机停止。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> ((<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    java -server -XX:+UseG1GC  -Xms1024M -Xmx4096M -jar forge-1.12.2-14.23.5.2854.jar nogui -noverify -XX:+AggressiveOpts -XX:+UseCompressedOops</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><code>Windows</code>系统的<code>.bat</code>启动脚本</li>\n</ol>\n<p>新建任何一个后缀名为<code>.bat</code>的文件，运行时直接双击来运行文件。</p>\n<blockquote>\n<p>注：<code>windows</code>系统的<code>cmd</code>如果要使用中文，需要用<code>GB2312</code>编码来编写<code>.bat</code>文件，否则中文会出现乱码问题。</p>\n</blockquote>\n<p>2.1 <code>Windows</code>单次启动</p>\n<p>单次启动的<code>.bat</code>脚本写法：</p>\n<figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"built_in\">ECHO</span> OFF</span><br><span class=\"line\"><span class=\"built_in\">title</span> Minecraft Server</span><br><span class=\"line\">java -server -XX:+UseG1GC  -Xms1024M -Xmx4096M -jar forge-<span class=\"number\">1</span>.<span class=\"number\">12</span>.<span class=\"number\">2</span>-<span class=\"number\">14</span>.<span class=\"number\">23</span>.<span class=\"number\">5</span>.<span class=\"number\">2854</span>.jar nogui -noverify -XX:+AggressiveOpts -XX:+UseCompressedOops</span><br><span class=\"line\"><span class=\"built_in\">pause</span></span><br><span class=\"line\"><span class=\"keyword\">EXIT</span></span><br></pre></td></tr></table></figure>\n\n<p>2.2 <code>Windows</code>循环十次启动</p>\n<p>服务器崩溃后会自动重新启动，一共启动十次，用于应对那些不是启动秒崩无限循环的小崩溃bug。</p>\n<figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"built_in\">ECHO</span> OFF</span><br><span class=\"line\"><span class=\"built_in\">title</span> Minecraft Server</span><br><span class=\"line\"><span class=\"built_in\">set</span> n=<span class=\"number\">0</span></span><br><span class=\"line\">:start_server</span><br><span class=\"line\">java -server -XX:+UseG1GC  -Xms1024M -Xmx4096M -jar forge-<span class=\"number\">1</span>.<span class=\"number\">12</span>.<span class=\"number\">2</span>-<span class=\"number\">14</span>.<span class=\"number\">23</span>.<span class=\"number\">5</span>.<span class=\"number\">2854</span>.jar nogui -noverify -XX:+AggressiveOpts -XX:+UseCompressedOops</span><br><span class=\"line\"><span class=\"built_in\">set</span> /a n+=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"variable\">%n%</span>==<span class=\"number\">10</span> <span class=\"keyword\">exit</span></span><br><span class=\"line\"><span class=\"keyword\">goto</span> start_server</span><br></pre></td></tr></table></figure>\n\n<p>2.3 <code>Windows</code>无限循环启动<br>崩溃后无限循环启动，可以通过关闭cmd窗口停止。</p>\n<figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"built_in\">ECHO</span> OFF</span><br><span class=\"line\"><span class=\"built_in\">title</span> Minecraft Server</span><br><span class=\"line\">:start_server</span><br><span class=\"line\">java -server -XX:+UseG1GC  -Xms1024M -Xmx4096M -jar forge-<span class=\"number\">1</span>.<span class=\"number\">12</span>.<span class=\"number\">2</span>-<span class=\"number\">14</span>.<span class=\"number\">23</span>.<span class=\"number\">5</span>.<span class=\"number\">2854</span>.jar nogui -noverify -XX:+AggressiveOpts -XX:+UseCompressedOops</span><br><span class=\"line\"><span class=\"keyword\">goto</span> start_server</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://blog.csdn.net/starvapour/article/details/113415562\"></a><br><a href=\"https://www.cnblogs.com/anliven/articles/6847762.html\"></a></p>\n"},{"title":"nextcloud基本使用方法","date":"2022-10-24T11:34:10.000Z","_content":"\n(https://zhuanlan.zhihu.com/p/44103820)[https://zhuanlan.zhihu.com/p/44103820]\n\n现在国内可选择的网盘越来越少，自建网盘无疑是一个不错的选项\n\n优点：自己控制数据、不限速（但取决于服你的务器）、功能多、无广告\n\n缺点：稳定性不如大公司、成本高、有一定技术门槛\n\n请在下面选一个自己需要的即可，对应官网有详细的安装说明\n\nAList\n\n真的是颜值极高的一个网盘程序，支持常见的多种存储、文件预览、网页上传、打包下载，甚至还支持暗黑模式和多语言\n\n演示地址：https://alist.nn.ci\n\n下载地址：https://github.com/alist-org/alist-web\n\nNextcloud\n\n可以搭建个人同步分享的网盘，同样全平台支持，Nextcloud作为ownCloud的衍生版本,在其基础上做了许多改进\n\n官网地址：https://nextcloud.com/\n\n下载地址：https://nextcloud.com/install/#instructions-server\n\nCloudreve\n\n如果你需要一个相对简单的网盘，这个是最合适不过了，强大的离线下载功能，支持七牛云等第三方云存储，支持视频音频文档等文件的在线预览\n\n响应式的设计使得在移动设备上也有良好的阅读体验\n\n官网：https://cloudreve.org\n\nownCloud\n\nownCloud 是一个开源免费专业的私有云存储项目，它能帮你快速在个人电脑或服务器上架设一套专属的私有云文件同步网盘，可以像Dropbox 那样实现文件跨平台同步、共享、版本控制、团队协作等等。\n\n安装方法：需要建立数据库，上传后访问即可\n\n了解更多：http://www.iplaysoft.com/owncloud.html\n\n官网地址：https://owncloud.org/\n\n下载地址：https://owncloud.org/install/#edition\n\nSeafile\n\n安全、可靠、快速的企业云盘 Seafile 是一款开源的企业云盘，注重可靠性和性能。支持 Windows, Mac, Linux, iOS, Android 平台。支持文件同步或者直接挂载到本地访问。\n\n很好用的同步云，全平台主持，饱受好评。\n\n官网：https://www.seafile.com/home/\n\nDzzOffice-大桌子办公\n\n“DzzOffice-大桌子办公“系统本身是一款图形化，简单易用的网盘管理软件。\n\n可以实现将企业的局域网服务器、企业私有云存储、企业租用的公有云存储（如阿里云OSS）、企业员工的私有云存储（如百度网盘、DropBox）等进行综合管理。实现企业文档、文件统一管理的目的。然后通各类办公应用的接入（如文档在线查看编辑、图片在线查看编辑、讨论板、任务板等）实现企业在线协同办公、提高工作效率的目的。\n\n官网地址：http://www.dzzoffice.com/\n\n演示地址：http://dev.dzzoffice.com/\n\n下载地址：http://www.dzzoffice.com/download.html\n\n可道云\n\n功能丰富强大，界面精致友好，像操作本地文件一样编辑、预览、解压，直接上传到主机即可使用，无需数据库\n\n官网地址：http://www.kalcaddle.com/\n\n演示地址：http://demo.kalcaddle.com/（登录用户名与密码都是demo）\n\n下载地址：http://www.kalcaddle.com/download.html\n\noneindex\n\n利用OneDrive搭建的公开分享型网盘程序，使用OneDrive的存储和流量\n\n开源地址：https://github.com/donwa/oneindex\n\n基于原版的修改版开源地址：https://github.com/spencerwooo/onedrive-cf-index\n\nZPan\n\n一个基于云存储的网盘系统，用于自建私人网盘或企业网盘，因此不受限于服务器本身的流量和带宽限制\n\n官网地址：https://github.com/saltbo/zpan\n\n开源地址：https://github.com/saltbo/zpan\n\nfilegator\n\n此程序开源，上传即用无需数据库，支持多用户，后台支持上传、下载、重命名等常用操作\n\n官网地址：https://filegator.io\n\n演示地址：https://demo.filegator.io\n\n我用它搭建的站：软件资源库\n\n安装遇到问题可以参考：文件共享管理器：FileGator - 玩客\n\nh5ai\n\n颜值极高而且功能强大的目录存储程序，支持在线预览的格式非常多，没有后台\n\n官网地址：https://larsjung.de/h5ai/\n\n演示地址：https://larsjung.de/h5ai/demo\n\nGitHub：https://github.com/lrsjng/h5ai\n\nDirectory Lister\n\n优美极简的在线网盘，适合搭建一个简单的自用下载站\n\n官网地址：https://www.directorylister.com\n\n演示地址：https://demo.directorylister.com\n\nZdir\n\n基于开源网盘开发的目录网盘，支持加密以及MP4等文件的在线预览等，有一个简单的后台，支持后台离线下载\n\n官网地址：https://www.xiaoz.me/archives/1046\n\n演示地址：http://soft.xiaoz.org\n\nGitHub：https://github.com/helloxz/zdir\n\nIFILE\n\n官方介绍：IFILE 是一个在线个人文件管理工具，在线网盘程序， 支持本地存储和对象存储（目前仅支持阿里云oss）, 如部署在公网服务器，可替代百度网盘等在线网盘，自主搭建，数据完全自主管理！也可部署在家庭软路由、nas等个人存储设备中，作为局域网文件管理工具使用。支持多用户、多存储空间、及精细的权限管理。\n在线演示：IFILE.SPACE 个人云文件管理\n\n官网：https://ifile.space/\n\n官网提供详尽的安装文档，由个人开发者维护\n\nBeautyDirectory\n\n基于zdir修改的网盘系统\n\n在线演示：Beauty Directory目录列表\n\n作者介绍：README\n\nZ-File\n\n一个在线文件目录的程序，支持各种对象存储和本地存储，使用定位是个人放常用工具下载，或做公共的文件库，不会向多账户方向开发\n\n开源地址：zhaojun1998/zfile\n\n演示地址：https://zfile.jun6.net\n\n官方文档：http://docs.zhaojun.im/zfile/\n\nTiny File Manager\n\n简单的列目录网盘，需要密码访问，支持简单的离线下载功能\n\n官网地址：https://tinyfilemanager.github.io/\n\n演示地址：https://tinyfilemanager.github.io/demo/\n\nGitHub：https://github.com/prasathmani/tinyfilemanager\n\nEvoluted Directory Listing\n\n图片来自异次元网站\n单文件开源文件管理程序，来自异次元的汉化版本\n\n使用方法以及下载地址：https://www.iplaysoft.com/evoluted-directory-listing.html\n\n极简云盘\n\n无需数据库，支持用户注册分享，极简网盘\n\n使用方法以及下载地址：https://51.ruyo.net/3459.html\n\niBarn\n基于PHP的开源网盘 – 堪比百度网盘\n\n实际小编没有体验，但是感觉有点简陋\n\n功能列表：\n\n多文件上传，文件断点续传，秒传，上传进度条\n文件下载，文件夹下载\n创建文件夹；移动文件文件夹；删除文件文件夹；分享文件文件夹；编辑文件文件夹。\n搜索功能\n列表大小图标切换\n按照文件名称大小上传时间等排序\n收藏功能\n分享功能\n回收站功能\n官方推荐模块\n官网地址：http://www.godeye.org/code/ibarn\n\n演示地址：http://www.godeye.org:82/index.php\n\nGitHub：https://github.com/zhimengzhe/iBarn\n\n总结\n颜值党选择：filegator、Directory Lister、h5ai\n\n技术党选择：Cloudreve、aria2\n\n团队协作：可道云、大桌子\n\n本文原创，转载请注明出处\n\n关于我们\n\n软件探索是一个致力于推荐实用软件与网站的自媒体\n\n如果您喜欢我们的文章，欢迎关注我的知乎专栏(>▽<)\n\n编辑于 2022-05-04 18:42","source":"_posts/nextcloud.md","raw":"---\ntitle: nextcloud基本使用方法\t\ndate: 2022-10-24 19:34:10\ntags: nextcloud\ncategories: 系统\n---\n\n(https://zhuanlan.zhihu.com/p/44103820)[https://zhuanlan.zhihu.com/p/44103820]\n\n现在国内可选择的网盘越来越少，自建网盘无疑是一个不错的选项\n\n优点：自己控制数据、不限速（但取决于服你的务器）、功能多、无广告\n\n缺点：稳定性不如大公司、成本高、有一定技术门槛\n\n请在下面选一个自己需要的即可，对应官网有详细的安装说明\n\nAList\n\n真的是颜值极高的一个网盘程序，支持常见的多种存储、文件预览、网页上传、打包下载，甚至还支持暗黑模式和多语言\n\n演示地址：https://alist.nn.ci\n\n下载地址：https://github.com/alist-org/alist-web\n\nNextcloud\n\n可以搭建个人同步分享的网盘，同样全平台支持，Nextcloud作为ownCloud的衍生版本,在其基础上做了许多改进\n\n官网地址：https://nextcloud.com/\n\n下载地址：https://nextcloud.com/install/#instructions-server\n\nCloudreve\n\n如果你需要一个相对简单的网盘，这个是最合适不过了，强大的离线下载功能，支持七牛云等第三方云存储，支持视频音频文档等文件的在线预览\n\n响应式的设计使得在移动设备上也有良好的阅读体验\n\n官网：https://cloudreve.org\n\nownCloud\n\nownCloud 是一个开源免费专业的私有云存储项目，它能帮你快速在个人电脑或服务器上架设一套专属的私有云文件同步网盘，可以像Dropbox 那样实现文件跨平台同步、共享、版本控制、团队协作等等。\n\n安装方法：需要建立数据库，上传后访问即可\n\n了解更多：http://www.iplaysoft.com/owncloud.html\n\n官网地址：https://owncloud.org/\n\n下载地址：https://owncloud.org/install/#edition\n\nSeafile\n\n安全、可靠、快速的企业云盘 Seafile 是一款开源的企业云盘，注重可靠性和性能。支持 Windows, Mac, Linux, iOS, Android 平台。支持文件同步或者直接挂载到本地访问。\n\n很好用的同步云，全平台主持，饱受好评。\n\n官网：https://www.seafile.com/home/\n\nDzzOffice-大桌子办公\n\n“DzzOffice-大桌子办公“系统本身是一款图形化，简单易用的网盘管理软件。\n\n可以实现将企业的局域网服务器、企业私有云存储、企业租用的公有云存储（如阿里云OSS）、企业员工的私有云存储（如百度网盘、DropBox）等进行综合管理。实现企业文档、文件统一管理的目的。然后通各类办公应用的接入（如文档在线查看编辑、图片在线查看编辑、讨论板、任务板等）实现企业在线协同办公、提高工作效率的目的。\n\n官网地址：http://www.dzzoffice.com/\n\n演示地址：http://dev.dzzoffice.com/\n\n下载地址：http://www.dzzoffice.com/download.html\n\n可道云\n\n功能丰富强大，界面精致友好，像操作本地文件一样编辑、预览、解压，直接上传到主机即可使用，无需数据库\n\n官网地址：http://www.kalcaddle.com/\n\n演示地址：http://demo.kalcaddle.com/（登录用户名与密码都是demo）\n\n下载地址：http://www.kalcaddle.com/download.html\n\noneindex\n\n利用OneDrive搭建的公开分享型网盘程序，使用OneDrive的存储和流量\n\n开源地址：https://github.com/donwa/oneindex\n\n基于原版的修改版开源地址：https://github.com/spencerwooo/onedrive-cf-index\n\nZPan\n\n一个基于云存储的网盘系统，用于自建私人网盘或企业网盘，因此不受限于服务器本身的流量和带宽限制\n\n官网地址：https://github.com/saltbo/zpan\n\n开源地址：https://github.com/saltbo/zpan\n\nfilegator\n\n此程序开源，上传即用无需数据库，支持多用户，后台支持上传、下载、重命名等常用操作\n\n官网地址：https://filegator.io\n\n演示地址：https://demo.filegator.io\n\n我用它搭建的站：软件资源库\n\n安装遇到问题可以参考：文件共享管理器：FileGator - 玩客\n\nh5ai\n\n颜值极高而且功能强大的目录存储程序，支持在线预览的格式非常多，没有后台\n\n官网地址：https://larsjung.de/h5ai/\n\n演示地址：https://larsjung.de/h5ai/demo\n\nGitHub：https://github.com/lrsjng/h5ai\n\nDirectory Lister\n\n优美极简的在线网盘，适合搭建一个简单的自用下载站\n\n官网地址：https://www.directorylister.com\n\n演示地址：https://demo.directorylister.com\n\nZdir\n\n基于开源网盘开发的目录网盘，支持加密以及MP4等文件的在线预览等，有一个简单的后台，支持后台离线下载\n\n官网地址：https://www.xiaoz.me/archives/1046\n\n演示地址：http://soft.xiaoz.org\n\nGitHub：https://github.com/helloxz/zdir\n\nIFILE\n\n官方介绍：IFILE 是一个在线个人文件管理工具，在线网盘程序， 支持本地存储和对象存储（目前仅支持阿里云oss）, 如部署在公网服务器，可替代百度网盘等在线网盘，自主搭建，数据完全自主管理！也可部署在家庭软路由、nas等个人存储设备中，作为局域网文件管理工具使用。支持多用户、多存储空间、及精细的权限管理。\n在线演示：IFILE.SPACE 个人云文件管理\n\n官网：https://ifile.space/\n\n官网提供详尽的安装文档，由个人开发者维护\n\nBeautyDirectory\n\n基于zdir修改的网盘系统\n\n在线演示：Beauty Directory目录列表\n\n作者介绍：README\n\nZ-File\n\n一个在线文件目录的程序，支持各种对象存储和本地存储，使用定位是个人放常用工具下载，或做公共的文件库，不会向多账户方向开发\n\n开源地址：zhaojun1998/zfile\n\n演示地址：https://zfile.jun6.net\n\n官方文档：http://docs.zhaojun.im/zfile/\n\nTiny File Manager\n\n简单的列目录网盘，需要密码访问，支持简单的离线下载功能\n\n官网地址：https://tinyfilemanager.github.io/\n\n演示地址：https://tinyfilemanager.github.io/demo/\n\nGitHub：https://github.com/prasathmani/tinyfilemanager\n\nEvoluted Directory Listing\n\n图片来自异次元网站\n单文件开源文件管理程序，来自异次元的汉化版本\n\n使用方法以及下载地址：https://www.iplaysoft.com/evoluted-directory-listing.html\n\n极简云盘\n\n无需数据库，支持用户注册分享，极简网盘\n\n使用方法以及下载地址：https://51.ruyo.net/3459.html\n\niBarn\n基于PHP的开源网盘 – 堪比百度网盘\n\n实际小编没有体验，但是感觉有点简陋\n\n功能列表：\n\n多文件上传，文件断点续传，秒传，上传进度条\n文件下载，文件夹下载\n创建文件夹；移动文件文件夹；删除文件文件夹；分享文件文件夹；编辑文件文件夹。\n搜索功能\n列表大小图标切换\n按照文件名称大小上传时间等排序\n收藏功能\n分享功能\n回收站功能\n官方推荐模块\n官网地址：http://www.godeye.org/code/ibarn\n\n演示地址：http://www.godeye.org:82/index.php\n\nGitHub：https://github.com/zhimengzhe/iBarn\n\n总结\n颜值党选择：filegator、Directory Lister、h5ai\n\n技术党选择：Cloudreve、aria2\n\n团队协作：可道云、大桌子\n\n本文原创，转载请注明出处\n\n关于我们\n\n软件探索是一个致力于推荐实用软件与网站的自媒体\n\n如果您喜欢我们的文章，欢迎关注我的知乎专栏(>▽<)\n\n编辑于 2022-05-04 18:42","slug":"nextcloud","published":1,"updated":"2023-07-23T14:19:13.529Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkjdd1cd002c98aj80veb0yu","content":"<p>(<a href=\"https://zhuanlan.zhihu.com/p/44103820)[https://zhuanlan.zhihu.com/p/44103820]\">https://zhuanlan.zhihu.com/p/44103820)[https://zhuanlan.zhihu.com/p/44103820]</a></p>\n<p>现在国内可选择的网盘越来越少，自建网盘无疑是一个不错的选项</p>\n<p>优点：自己控制数据、不限速（但取决于服你的务器）、功能多、无广告</p>\n<p>缺点：稳定性不如大公司、成本高、有一定技术门槛</p>\n<p>请在下面选一个自己需要的即可，对应官网有详细的安装说明</p>\n<p>AList</p>\n<p>真的是颜值极高的一个网盘程序，支持常见的多种存储、文件预览、网页上传、打包下载，甚至还支持暗黑模式和多语言</p>\n<p>演示地址：<a href=\"https://alist.nn.ci/\">https://alist.nn.ci</a></p>\n<p>下载地址：<a href=\"https://github.com/alist-org/alist-web\">https://github.com/alist-org/alist-web</a></p>\n<p>Nextcloud</p>\n<p>可以搭建个人同步分享的网盘，同样全平台支持，Nextcloud作为ownCloud的衍生版本,在其基础上做了许多改进</p>\n<p>官网地址：<a href=\"https://nextcloud.com/\">https://nextcloud.com/</a></p>\n<p>下载地址：<a href=\"https://nextcloud.com/install/#instructions-server\">https://nextcloud.com/install/#instructions-server</a></p>\n<p>Cloudreve</p>\n<p>如果你需要一个相对简单的网盘，这个是最合适不过了，强大的离线下载功能，支持七牛云等第三方云存储，支持视频音频文档等文件的在线预览</p>\n<p>响应式的设计使得在移动设备上也有良好的阅读体验</p>\n<p>官网：<a href=\"https://cloudreve.org/\">https://cloudreve.org</a></p>\n<p>ownCloud</p>\n<p>ownCloud 是一个开源免费专业的私有云存储项目，它能帮你快速在个人电脑或服务器上架设一套专属的私有云文件同步网盘，可以像Dropbox 那样实现文件跨平台同步、共享、版本控制、团队协作等等。</p>\n<p>安装方法：需要建立数据库，上传后访问即可</p>\n<p>了解更多：<a href=\"http://www.iplaysoft.com/owncloud.html\">http://www.iplaysoft.com/owncloud.html</a></p>\n<p>官网地址：<a href=\"https://owncloud.org/\">https://owncloud.org/</a></p>\n<p>下载地址：<a href=\"https://owncloud.org/install/#edition\">https://owncloud.org/install/#edition</a></p>\n<p>Seafile</p>\n<p>安全、可靠、快速的企业云盘 Seafile 是一款开源的企业云盘，注重可靠性和性能。支持 Windows, Mac, Linux, iOS, Android 平台。支持文件同步或者直接挂载到本地访问。</p>\n<p>很好用的同步云，全平台主持，饱受好评。</p>\n<p>官网：<a href=\"https://www.seafile.com/home/\">https://www.seafile.com/home/</a></p>\n<p>DzzOffice-大桌子办公</p>\n<p>“DzzOffice-大桌子办公“系统本身是一款图形化，简单易用的网盘管理软件。</p>\n<p>可以实现将企业的局域网服务器、企业私有云存储、企业租用的公有云存储（如阿里云OSS）、企业员工的私有云存储（如百度网盘、DropBox）等进行综合管理。实现企业文档、文件统一管理的目的。然后通各类办公应用的接入（如文档在线查看编辑、图片在线查看编辑、讨论板、任务板等）实现企业在线协同办公、提高工作效率的目的。</p>\n<p>官网地址：<a href=\"http://www.dzzoffice.com/\">http://www.dzzoffice.com/</a></p>\n<p>演示地址：<a href=\"http://dev.dzzoffice.com/\">http://dev.dzzoffice.com/</a></p>\n<p>下载地址：<a href=\"http://www.dzzoffice.com/download.html\">http://www.dzzoffice.com/download.html</a></p>\n<p>可道云</p>\n<p>功能丰富强大，界面精致友好，像操作本地文件一样编辑、预览、解压，直接上传到主机即可使用，无需数据库</p>\n<p>官网地址：<a href=\"http://www.kalcaddle.com/\">http://www.kalcaddle.com/</a></p>\n<p>演示地址：<a href=\"http://demo.kalcaddle.com/%EF%BC%88%E7%99%BB%E5%BD%95%E7%94%A8%E6%88%B7%E5%90%8D%E4%B8%8E%E5%AF%86%E7%A0%81%E9%83%BD%E6%98%AFdemo%EF%BC%89\">http://demo.kalcaddle.com/（登录用户名与密码都是demo）</a></p>\n<p>下载地址：<a href=\"http://www.kalcaddle.com/download.html\">http://www.kalcaddle.com/download.html</a></p>\n<p>oneindex</p>\n<p>利用OneDrive搭建的公开分享型网盘程序，使用OneDrive的存储和流量</p>\n<p>开源地址：<a href=\"https://github.com/donwa/oneindex\">https://github.com/donwa/oneindex</a></p>\n<p>基于原版的修改版开源地址：<a href=\"https://github.com/spencerwooo/onedrive-cf-index\">https://github.com/spencerwooo/onedrive-cf-index</a></p>\n<p>ZPan</p>\n<p>一个基于云存储的网盘系统，用于自建私人网盘或企业网盘，因此不受限于服务器本身的流量和带宽限制</p>\n<p>官网地址：<a href=\"https://github.com/saltbo/zpan\">https://github.com/saltbo/zpan</a></p>\n<p>开源地址：<a href=\"https://github.com/saltbo/zpan\">https://github.com/saltbo/zpan</a></p>\n<p>filegator</p>\n<p>此程序开源，上传即用无需数据库，支持多用户，后台支持上传、下载、重命名等常用操作</p>\n<p>官网地址：<a href=\"https://filegator.io/\">https://filegator.io</a></p>\n<p>演示地址：<a href=\"https://demo.filegator.io/\">https://demo.filegator.io</a></p>\n<p>我用它搭建的站：软件资源库</p>\n<p>安装遇到问题可以参考：文件共享管理器：FileGator - 玩客</p>\n<p>h5ai</p>\n<p>颜值极高而且功能强大的目录存储程序，支持在线预览的格式非常多，没有后台</p>\n<p>官网地址：<a href=\"https://larsjung.de/h5ai/\">https://larsjung.de/h5ai/</a></p>\n<p>演示地址：<a href=\"https://larsjung.de/h5ai/demo\">https://larsjung.de/h5ai/demo</a></p>\n<p>GitHub：<a href=\"https://github.com/lrsjng/h5ai\">https://github.com/lrsjng/h5ai</a></p>\n<p>Directory Lister</p>\n<p>优美极简的在线网盘，适合搭建一个简单的自用下载站</p>\n<p>官网地址：<a href=\"https://www.directorylister.com/\">https://www.directorylister.com</a></p>\n<p>演示地址：<a href=\"https://demo.directorylister.com/\">https://demo.directorylister.com</a></p>\n<p>Zdir</p>\n<p>基于开源网盘开发的目录网盘，支持加密以及MP4等文件的在线预览等，有一个简单的后台，支持后台离线下载</p>\n<p>官网地址：<a href=\"https://www.xiaoz.me/archives/1046\">https://www.xiaoz.me/archives/1046</a></p>\n<p>演示地址：<a href=\"http://soft.xiaoz.org/\">http://soft.xiaoz.org</a></p>\n<p>GitHub：<a href=\"https://github.com/helloxz/zdir\">https://github.com/helloxz/zdir</a></p>\n<p>IFILE</p>\n<p>官方介绍：IFILE 是一个在线个人文件管理工具，在线网盘程序， 支持本地存储和对象存储（目前仅支持阿里云oss）, 如部署在公网服务器，可替代百度网盘等在线网盘，自主搭建，数据完全自主管理！也可部署在家庭软路由、nas等个人存储设备中，作为局域网文件管理工具使用。支持多用户、多存储空间、及精细的权限管理。<br>在线演示：IFILE.SPACE 个人云文件管理</p>\n<p>官网：<a href=\"https://ifile.space/\">https://ifile.space/</a></p>\n<p>官网提供详尽的安装文档，由个人开发者维护</p>\n<p>BeautyDirectory</p>\n<p>基于zdir修改的网盘系统</p>\n<p>在线演示：Beauty Directory目录列表</p>\n<p>作者介绍：README</p>\n<p>Z-File</p>\n<p>一个在线文件目录的程序，支持各种对象存储和本地存储，使用定位是个人放常用工具下载，或做公共的文件库，不会向多账户方向开发</p>\n<p>开源地址：zhaojun1998&#x2F;zfile</p>\n<p>演示地址：<a href=\"https://zfile.jun6.net/\">https://zfile.jun6.net</a></p>\n<p>官方文档：<a href=\"http://docs.zhaojun.im/zfile/\">http://docs.zhaojun.im/zfile/</a></p>\n<p>Tiny File Manager</p>\n<p>简单的列目录网盘，需要密码访问，支持简单的离线下载功能</p>\n<p>官网地址：<a href=\"https://tinyfilemanager.github.io/\">https://tinyfilemanager.github.io/</a></p>\n<p>演示地址：<a href=\"https://tinyfilemanager.github.io/demo/\">https://tinyfilemanager.github.io/demo/</a></p>\n<p>GitHub：<a href=\"https://github.com/prasathmani/tinyfilemanager\">https://github.com/prasathmani/tinyfilemanager</a></p>\n<p>Evoluted Directory Listing</p>\n<p>图片来自异次元网站<br>单文件开源文件管理程序，来自异次元的汉化版本</p>\n<p>使用方法以及下载地址：<a href=\"https://www.iplaysoft.com/evoluted-directory-listing.html\">https://www.iplaysoft.com/evoluted-directory-listing.html</a></p>\n<p>极简云盘</p>\n<p>无需数据库，支持用户注册分享，极简网盘</p>\n<p>使用方法以及下载地址：<a href=\"https://51.ruyo.net/3459.html\">https://51.ruyo.net/3459.html</a></p>\n<p>iBarn<br>基于PHP的开源网盘 – 堪比百度网盘</p>\n<p>实际小编没有体验，但是感觉有点简陋</p>\n<p>功能列表：</p>\n<p>多文件上传，文件断点续传，秒传，上传进度条<br>文件下载，文件夹下载<br>创建文件夹；移动文件文件夹；删除文件文件夹；分享文件文件夹；编辑文件文件夹。<br>搜索功能<br>列表大小图标切换<br>按照文件名称大小上传时间等排序<br>收藏功能<br>分享功能<br>回收站功能<br>官方推荐模块<br>官网地址：<a href=\"http://www.godeye.org/code/ibarn\">http://www.godeye.org/code/ibarn</a></p>\n<p>演示地址：<a href=\"http://www.godeye.org:82/index.php\">http://www.godeye.org:82/index.php</a></p>\n<p>GitHub：<a href=\"https://github.com/zhimengzhe/iBarn\">https://github.com/zhimengzhe/iBarn</a></p>\n<p>总结<br>颜值党选择：filegator、Directory Lister、h5ai</p>\n<p>技术党选择：Cloudreve、aria2</p>\n<p>团队协作：可道云、大桌子</p>\n<p>本文原创，转载请注明出处</p>\n<p>关于我们</p>\n<p>软件探索是一个致力于推荐实用软件与网站的自媒体</p>\n<p>如果您喜欢我们的文章，欢迎关注我的知乎专栏(&gt;▽&lt;)</p>\n<p>编辑于 2022-05-04 18:42</p>\n","site":{"data":{}},"excerpt":"","more":"<p>(<a href=\"https://zhuanlan.zhihu.com/p/44103820)[https://zhuanlan.zhihu.com/p/44103820]\">https://zhuanlan.zhihu.com/p/44103820)[https://zhuanlan.zhihu.com/p/44103820]</a></p>\n<p>现在国内可选择的网盘越来越少，自建网盘无疑是一个不错的选项</p>\n<p>优点：自己控制数据、不限速（但取决于服你的务器）、功能多、无广告</p>\n<p>缺点：稳定性不如大公司、成本高、有一定技术门槛</p>\n<p>请在下面选一个自己需要的即可，对应官网有详细的安装说明</p>\n<p>AList</p>\n<p>真的是颜值极高的一个网盘程序，支持常见的多种存储、文件预览、网页上传、打包下载，甚至还支持暗黑模式和多语言</p>\n<p>演示地址：<a href=\"https://alist.nn.ci/\">https://alist.nn.ci</a></p>\n<p>下载地址：<a href=\"https://github.com/alist-org/alist-web\">https://github.com/alist-org/alist-web</a></p>\n<p>Nextcloud</p>\n<p>可以搭建个人同步分享的网盘，同样全平台支持，Nextcloud作为ownCloud的衍生版本,在其基础上做了许多改进</p>\n<p>官网地址：<a href=\"https://nextcloud.com/\">https://nextcloud.com/</a></p>\n<p>下载地址：<a href=\"https://nextcloud.com/install/#instructions-server\">https://nextcloud.com/install/#instructions-server</a></p>\n<p>Cloudreve</p>\n<p>如果你需要一个相对简单的网盘，这个是最合适不过了，强大的离线下载功能，支持七牛云等第三方云存储，支持视频音频文档等文件的在线预览</p>\n<p>响应式的设计使得在移动设备上也有良好的阅读体验</p>\n<p>官网：<a href=\"https://cloudreve.org/\">https://cloudreve.org</a></p>\n<p>ownCloud</p>\n<p>ownCloud 是一个开源免费专业的私有云存储项目，它能帮你快速在个人电脑或服务器上架设一套专属的私有云文件同步网盘，可以像Dropbox 那样实现文件跨平台同步、共享、版本控制、团队协作等等。</p>\n<p>安装方法：需要建立数据库，上传后访问即可</p>\n<p>了解更多：<a href=\"http://www.iplaysoft.com/owncloud.html\">http://www.iplaysoft.com/owncloud.html</a></p>\n<p>官网地址：<a href=\"https://owncloud.org/\">https://owncloud.org/</a></p>\n<p>下载地址：<a href=\"https://owncloud.org/install/#edition\">https://owncloud.org/install/#edition</a></p>\n<p>Seafile</p>\n<p>安全、可靠、快速的企业云盘 Seafile 是一款开源的企业云盘，注重可靠性和性能。支持 Windows, Mac, Linux, iOS, Android 平台。支持文件同步或者直接挂载到本地访问。</p>\n<p>很好用的同步云，全平台主持，饱受好评。</p>\n<p>官网：<a href=\"https://www.seafile.com/home/\">https://www.seafile.com/home/</a></p>\n<p>DzzOffice-大桌子办公</p>\n<p>“DzzOffice-大桌子办公“系统本身是一款图形化，简单易用的网盘管理软件。</p>\n<p>可以实现将企业的局域网服务器、企业私有云存储、企业租用的公有云存储（如阿里云OSS）、企业员工的私有云存储（如百度网盘、DropBox）等进行综合管理。实现企业文档、文件统一管理的目的。然后通各类办公应用的接入（如文档在线查看编辑、图片在线查看编辑、讨论板、任务板等）实现企业在线协同办公、提高工作效率的目的。</p>\n<p>官网地址：<a href=\"http://www.dzzoffice.com/\">http://www.dzzoffice.com/</a></p>\n<p>演示地址：<a href=\"http://dev.dzzoffice.com/\">http://dev.dzzoffice.com/</a></p>\n<p>下载地址：<a href=\"http://www.dzzoffice.com/download.html\">http://www.dzzoffice.com/download.html</a></p>\n<p>可道云</p>\n<p>功能丰富强大，界面精致友好，像操作本地文件一样编辑、预览、解压，直接上传到主机即可使用，无需数据库</p>\n<p>官网地址：<a href=\"http://www.kalcaddle.com/\">http://www.kalcaddle.com/</a></p>\n<p>演示地址：<a href=\"http://demo.kalcaddle.com/%EF%BC%88%E7%99%BB%E5%BD%95%E7%94%A8%E6%88%B7%E5%90%8D%E4%B8%8E%E5%AF%86%E7%A0%81%E9%83%BD%E6%98%AFdemo%EF%BC%89\">http://demo.kalcaddle.com/（登录用户名与密码都是demo）</a></p>\n<p>下载地址：<a href=\"http://www.kalcaddle.com/download.html\">http://www.kalcaddle.com/download.html</a></p>\n<p>oneindex</p>\n<p>利用OneDrive搭建的公开分享型网盘程序，使用OneDrive的存储和流量</p>\n<p>开源地址：<a href=\"https://github.com/donwa/oneindex\">https://github.com/donwa/oneindex</a></p>\n<p>基于原版的修改版开源地址：<a href=\"https://github.com/spencerwooo/onedrive-cf-index\">https://github.com/spencerwooo/onedrive-cf-index</a></p>\n<p>ZPan</p>\n<p>一个基于云存储的网盘系统，用于自建私人网盘或企业网盘，因此不受限于服务器本身的流量和带宽限制</p>\n<p>官网地址：<a href=\"https://github.com/saltbo/zpan\">https://github.com/saltbo/zpan</a></p>\n<p>开源地址：<a href=\"https://github.com/saltbo/zpan\">https://github.com/saltbo/zpan</a></p>\n<p>filegator</p>\n<p>此程序开源，上传即用无需数据库，支持多用户，后台支持上传、下载、重命名等常用操作</p>\n<p>官网地址：<a href=\"https://filegator.io/\">https://filegator.io</a></p>\n<p>演示地址：<a href=\"https://demo.filegator.io/\">https://demo.filegator.io</a></p>\n<p>我用它搭建的站：软件资源库</p>\n<p>安装遇到问题可以参考：文件共享管理器：FileGator - 玩客</p>\n<p>h5ai</p>\n<p>颜值极高而且功能强大的目录存储程序，支持在线预览的格式非常多，没有后台</p>\n<p>官网地址：<a href=\"https://larsjung.de/h5ai/\">https://larsjung.de/h5ai/</a></p>\n<p>演示地址：<a href=\"https://larsjung.de/h5ai/demo\">https://larsjung.de/h5ai/demo</a></p>\n<p>GitHub：<a href=\"https://github.com/lrsjng/h5ai\">https://github.com/lrsjng/h5ai</a></p>\n<p>Directory Lister</p>\n<p>优美极简的在线网盘，适合搭建一个简单的自用下载站</p>\n<p>官网地址：<a href=\"https://www.directorylister.com/\">https://www.directorylister.com</a></p>\n<p>演示地址：<a href=\"https://demo.directorylister.com/\">https://demo.directorylister.com</a></p>\n<p>Zdir</p>\n<p>基于开源网盘开发的目录网盘，支持加密以及MP4等文件的在线预览等，有一个简单的后台，支持后台离线下载</p>\n<p>官网地址：<a href=\"https://www.xiaoz.me/archives/1046\">https://www.xiaoz.me/archives/1046</a></p>\n<p>演示地址：<a href=\"http://soft.xiaoz.org/\">http://soft.xiaoz.org</a></p>\n<p>GitHub：<a href=\"https://github.com/helloxz/zdir\">https://github.com/helloxz/zdir</a></p>\n<p>IFILE</p>\n<p>官方介绍：IFILE 是一个在线个人文件管理工具，在线网盘程序， 支持本地存储和对象存储（目前仅支持阿里云oss）, 如部署在公网服务器，可替代百度网盘等在线网盘，自主搭建，数据完全自主管理！也可部署在家庭软路由、nas等个人存储设备中，作为局域网文件管理工具使用。支持多用户、多存储空间、及精细的权限管理。<br>在线演示：IFILE.SPACE 个人云文件管理</p>\n<p>官网：<a href=\"https://ifile.space/\">https://ifile.space/</a></p>\n<p>官网提供详尽的安装文档，由个人开发者维护</p>\n<p>BeautyDirectory</p>\n<p>基于zdir修改的网盘系统</p>\n<p>在线演示：Beauty Directory目录列表</p>\n<p>作者介绍：README</p>\n<p>Z-File</p>\n<p>一个在线文件目录的程序，支持各种对象存储和本地存储，使用定位是个人放常用工具下载，或做公共的文件库，不会向多账户方向开发</p>\n<p>开源地址：zhaojun1998&#x2F;zfile</p>\n<p>演示地址：<a href=\"https://zfile.jun6.net/\">https://zfile.jun6.net</a></p>\n<p>官方文档：<a href=\"http://docs.zhaojun.im/zfile/\">http://docs.zhaojun.im/zfile/</a></p>\n<p>Tiny File Manager</p>\n<p>简单的列目录网盘，需要密码访问，支持简单的离线下载功能</p>\n<p>官网地址：<a href=\"https://tinyfilemanager.github.io/\">https://tinyfilemanager.github.io/</a></p>\n<p>演示地址：<a href=\"https://tinyfilemanager.github.io/demo/\">https://tinyfilemanager.github.io/demo/</a></p>\n<p>GitHub：<a href=\"https://github.com/prasathmani/tinyfilemanager\">https://github.com/prasathmani/tinyfilemanager</a></p>\n<p>Evoluted Directory Listing</p>\n<p>图片来自异次元网站<br>单文件开源文件管理程序，来自异次元的汉化版本</p>\n<p>使用方法以及下载地址：<a href=\"https://www.iplaysoft.com/evoluted-directory-listing.html\">https://www.iplaysoft.com/evoluted-directory-listing.html</a></p>\n<p>极简云盘</p>\n<p>无需数据库，支持用户注册分享，极简网盘</p>\n<p>使用方法以及下载地址：<a href=\"https://51.ruyo.net/3459.html\">https://51.ruyo.net/3459.html</a></p>\n<p>iBarn<br>基于PHP的开源网盘 – 堪比百度网盘</p>\n<p>实际小编没有体验，但是感觉有点简陋</p>\n<p>功能列表：</p>\n<p>多文件上传，文件断点续传，秒传，上传进度条<br>文件下载，文件夹下载<br>创建文件夹；移动文件文件夹；删除文件文件夹；分享文件文件夹；编辑文件文件夹。<br>搜索功能<br>列表大小图标切换<br>按照文件名称大小上传时间等排序<br>收藏功能<br>分享功能<br>回收站功能<br>官方推荐模块<br>官网地址：<a href=\"http://www.godeye.org/code/ibarn\">http://www.godeye.org/code/ibarn</a></p>\n<p>演示地址：<a href=\"http://www.godeye.org:82/index.php\">http://www.godeye.org:82/index.php</a></p>\n<p>GitHub：<a href=\"https://github.com/zhimengzhe/iBarn\">https://github.com/zhimengzhe/iBarn</a></p>\n<p>总结<br>颜值党选择：filegator、Directory Lister、h5ai</p>\n<p>技术党选择：Cloudreve、aria2</p>\n<p>团队协作：可道云、大桌子</p>\n<p>本文原创，转载请注明出处</p>\n<p>关于我们</p>\n<p>软件探索是一个致力于推荐实用软件与网站的自媒体</p>\n<p>如果您喜欢我们的文章，欢迎关注我的知乎专栏(&gt;▽&lt;)</p>\n<p>编辑于 2022-05-04 18:42</p>\n"},{"title":"nginx-ip","date":"2022-12-21T03:25:35.000Z","_content":"https://www.jianshu.com/p/4e761ec96f67\n\nNginx 多个子域名映射到不同的端口或 ip\n\nMrTricker\nIP属地: 福建\n0.267\n2019.07.17 15:42:10\n字数 1,163\n阅读 7,597\n场景介绍\n\n在部署 DevOps 环境时，多个服务通过 Docker 部署到一个服务器上，映射到不同的端口。\n现在每次访问，都要带上端口号，既不美观，也很麻烦。\n\n一、思考过程\n如果不想带上端口号，就只能访问 80 或 443 端口。\n可以用过二级目录区分服务，通过反向代理转发到不同的 Server。\n可以用过子域名区分服务，通过反向代理转发到不同的 Server。\n二、方案评估\n对于不带端口号访问，以我目前的经验来看，找不到其它更好的方法，只能使用 80 或 443 端口。\n使用二级目录区分服务，可行性很大。\n能通过二级目录名，明确区分服务。\n可是和直接使用端口号差别不大，只是把辨别服务的方法，从端口号变成了二级目录名。\n可能导致 url 过长。\n还是没有什么美观性。\n使用子域名区分服务，可行性与二级目录相差无几。\n能通过子域名，明确区分服务。\n具有一定的美观性。\n三、方案确定 和 方案设计\n我决定采用采用 子域名区分服务 的方式，然后使用 nginx 做反向代理，分发到不同的端口。\n\n1. 本地测试\n注意\n\n我使用的环境是 Ubuntu Desktop 桌面操作系统。\n\n首先安装 nginx\n\n# 使用 Ubuntu 包管理器中的 nginx 即可。\n$ sudo apt update\n$ sudo apt install nginx\n安装 Docker 和 Docker Composer\n\n参考官方文档 Get Docker CE for Ubuntu 和 Install Docker Compose。\n\n创建目录结构\n\n# 我使用的是 Jetbrains 全家桶；\n# 这里比较麻烦。\n$ mkdir -p DevOps\n$ cd mkdir\n$ mkdir -p gitlab registry teamcity mysql\n$ mkdir -p -m 750 hub/backups hub/conf hub/data hub/logs youtrack/backups youtrack/conf youtrack/data youtrack/logs upsource/backups upsource/conf upsource/data upsource/logs\n$ sudo chmod -R 13001:13001 hub youtrack upsource\n$ touch docker-compose.yml\n编写 docker-compose.yml 配置文件\n\nversion: '3'\n\nservices:\n\n  gitlab:\n    image: gitlab/gitlab-ce:latest\n    restart: always\n    hostname: 'gitlab.tricker.org'\n    prots:\n      - 8888:80\n      - 2222:22\n    volumes:\n      - './gitlab/config:/etc/gitlab'\n      - './gitlab/data:/var/opt/gitlab'\n      - './gitlab/logs:/var/log/gitlab'\n    environment:\n      GITLAB_OMNIBUS_CONFIG: |\n        external_url \"http://gitlab.tricker.org\"\n        gitlab_rails[\"gitlab_shell_ssh_port\"] = 2222\n    networks:\n      devops:\n        aliases:\n          - 'gitlab.tricker.org'\n\n  registry:\n    image: registry:latest\n    hostname: 'registry.tricker.org'\n    ports:\n      - 5555:5000\n    volumes:\n      - './registry/data:/var/lib/registry'\n    networks:\n      devops:\n        aliases:\n          - 'registry.tricker.org'\n\n  hub:\n    image: jetbrains/hub:2019.1.11584\n    hostname: 'hub.tricker.org'\n    ports:\n      - 18080:8080\n    volumes:\n      - './hub/data:/opt/hub/data'\n      - './hub/conf:/opt/hub/conf'\n      - './hub/logs:/opt/hub/logs'\n      - './hub/backups:/opt/hub/backups'\n    networks:\n      devops:\n        aliases:\n          - 'hub.tricker.org'\n\n  youtrack:\n    image: jetbrains/youtrack:2019.2.54193\n    hostname: 'youtrack.tricker.org'\n    ports:\n      - 18081:8080\n    volumes:\n      - './youtrack/data:/opt/youtrack/data'\n      - './youtrack/conf:/opt/youtrack/conf'\n      - './youtrack/logs:/opt/youtrack/logs'\n      - './youtrack/backups:/opt/youtrack/backups'\n    networks:\n      devops:\n        aliases:\n          - 'youtrack.tricker.org'\n    depends_on:\n      - hub\n\n  upsource:\n    image: jetbrains/upsource:2019.1.1432\n    hostname: 'upsource.tricker.org'\n    ports:\n      - 18082:8080\n    volumes:\n      - './upsource/data:/opt/upsource/data'\n      - './upsource/conf:/opt/upsource/conf'\n      - './upsource/logs:/opt/upsource/logs'\n      - './upsource/backups:/opt/upsource/backups'\n    networks:\n      devops:\n        aliases:\n          - 'upsource.tricker.org'\n    depends_on:\n      - hub\n      - gitlab\n\n  teamcity:\n    image: jetbrains/teamcity-server\n    hostname: 'teamcity.tricker.org'\n    ports:\n      - 18111:8111\n    volumes:\n      - './teamcity/data:/data/teamcity_server/datadir'\n      - './teamcity/logs:/opt/teamcity/logs'\n    networks:\n      devops:\n        aliases:\n          - 'teamcity.tricker.org'\n    depends_on:\n      - mysql\n      - gitlab\n\nnetworks:\n  devops:\n修改 hosts 文件\n\n# 注意: 这里一定要使用 root 权限。\n$ sudo vim /etc/hosts\n# 关于 vim 的使用，此处不再复述，有问题找百度。\n127.0.0.1       gitlab.tricker.org\n127.0.0.1       registry.tricker.org\n127.0.0.1       hub.tricker.org\n127.0.0.1       youtrack.tricker.org\n127.0.0.1       upsource.tricker.org\n127.0.0.1       teamcity.tricker.org\n修改 nginx 配置\n\n# 进入 nginx 文件夹，这个文件夹内的操作，几乎都需要 root 权限。\n$ cd /etc/nginx\n$ cd sites-available/\n$ sudo mv default default.backup\n$ sudo vim devops\nserver {\n    listen 80;\n\n    server_name gitlab.tricker.org;\n\n    location / {\n        proxy_pass       http://127.0.0.1:8888;\n        proxy_set_header Host      $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\n\nserver {\n    listen 80;\n\n    server_name registry.tricker.org;\n\n    location / {\n        proxy_pass       http://127.0.0.1:5555;\n        proxy_set_header Host      $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\n\nserver {\n    listen 80;\n\n    server_name hub.tricker.org;\n\n    location / {\n        proxy_pass       http://127.0.0.1:18080;\n        proxy_set_header Host      $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\n\nserver {\n    listen 80;\n\n    server_name youtrack.tricker.org;\n\n    location / {\n        proxy_pass       http://127.0.0.1:18081;\n        proxy_set_header Host      $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\n\nserver {\n    listen 80;\n\n    server_name upsource.tricker.org;\n\n    location / {\n        proxy_pass       http://127.0.0.1:18082;\n        proxy_set_header Host      $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\n\nserver {\n    listen 80;\n\n    server_name teamcity.tricker.org;\n\n    location / {\n        proxy_pass       http://127.0.0.1:18111;\n        proxy_set_header Host      $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\n# 重启 nginx 打开浏览器访问相应的子域名，就可以转到相应的服务了。\n$ sudo systemct restart nginx","source":"_posts/nginx-ip.md","raw":"---\ntitle: nginx-ip\ndate: 2022-12-21 11:25:35\ncategories:\ntags:\n---\nhttps://www.jianshu.com/p/4e761ec96f67\n\nNginx 多个子域名映射到不同的端口或 ip\n\nMrTricker\nIP属地: 福建\n0.267\n2019.07.17 15:42:10\n字数 1,163\n阅读 7,597\n场景介绍\n\n在部署 DevOps 环境时，多个服务通过 Docker 部署到一个服务器上，映射到不同的端口。\n现在每次访问，都要带上端口号，既不美观，也很麻烦。\n\n一、思考过程\n如果不想带上端口号，就只能访问 80 或 443 端口。\n可以用过二级目录区分服务，通过反向代理转发到不同的 Server。\n可以用过子域名区分服务，通过反向代理转发到不同的 Server。\n二、方案评估\n对于不带端口号访问，以我目前的经验来看，找不到其它更好的方法，只能使用 80 或 443 端口。\n使用二级目录区分服务，可行性很大。\n能通过二级目录名，明确区分服务。\n可是和直接使用端口号差别不大，只是把辨别服务的方法，从端口号变成了二级目录名。\n可能导致 url 过长。\n还是没有什么美观性。\n使用子域名区分服务，可行性与二级目录相差无几。\n能通过子域名，明确区分服务。\n具有一定的美观性。\n三、方案确定 和 方案设计\n我决定采用采用 子域名区分服务 的方式，然后使用 nginx 做反向代理，分发到不同的端口。\n\n1. 本地测试\n注意\n\n我使用的环境是 Ubuntu Desktop 桌面操作系统。\n\n首先安装 nginx\n\n# 使用 Ubuntu 包管理器中的 nginx 即可。\n$ sudo apt update\n$ sudo apt install nginx\n安装 Docker 和 Docker Composer\n\n参考官方文档 Get Docker CE for Ubuntu 和 Install Docker Compose。\n\n创建目录结构\n\n# 我使用的是 Jetbrains 全家桶；\n# 这里比较麻烦。\n$ mkdir -p DevOps\n$ cd mkdir\n$ mkdir -p gitlab registry teamcity mysql\n$ mkdir -p -m 750 hub/backups hub/conf hub/data hub/logs youtrack/backups youtrack/conf youtrack/data youtrack/logs upsource/backups upsource/conf upsource/data upsource/logs\n$ sudo chmod -R 13001:13001 hub youtrack upsource\n$ touch docker-compose.yml\n编写 docker-compose.yml 配置文件\n\nversion: '3'\n\nservices:\n\n  gitlab:\n    image: gitlab/gitlab-ce:latest\n    restart: always\n    hostname: 'gitlab.tricker.org'\n    prots:\n      - 8888:80\n      - 2222:22\n    volumes:\n      - './gitlab/config:/etc/gitlab'\n      - './gitlab/data:/var/opt/gitlab'\n      - './gitlab/logs:/var/log/gitlab'\n    environment:\n      GITLAB_OMNIBUS_CONFIG: |\n        external_url \"http://gitlab.tricker.org\"\n        gitlab_rails[\"gitlab_shell_ssh_port\"] = 2222\n    networks:\n      devops:\n        aliases:\n          - 'gitlab.tricker.org'\n\n  registry:\n    image: registry:latest\n    hostname: 'registry.tricker.org'\n    ports:\n      - 5555:5000\n    volumes:\n      - './registry/data:/var/lib/registry'\n    networks:\n      devops:\n        aliases:\n          - 'registry.tricker.org'\n\n  hub:\n    image: jetbrains/hub:2019.1.11584\n    hostname: 'hub.tricker.org'\n    ports:\n      - 18080:8080\n    volumes:\n      - './hub/data:/opt/hub/data'\n      - './hub/conf:/opt/hub/conf'\n      - './hub/logs:/opt/hub/logs'\n      - './hub/backups:/opt/hub/backups'\n    networks:\n      devops:\n        aliases:\n          - 'hub.tricker.org'\n\n  youtrack:\n    image: jetbrains/youtrack:2019.2.54193\n    hostname: 'youtrack.tricker.org'\n    ports:\n      - 18081:8080\n    volumes:\n      - './youtrack/data:/opt/youtrack/data'\n      - './youtrack/conf:/opt/youtrack/conf'\n      - './youtrack/logs:/opt/youtrack/logs'\n      - './youtrack/backups:/opt/youtrack/backups'\n    networks:\n      devops:\n        aliases:\n          - 'youtrack.tricker.org'\n    depends_on:\n      - hub\n\n  upsource:\n    image: jetbrains/upsource:2019.1.1432\n    hostname: 'upsource.tricker.org'\n    ports:\n      - 18082:8080\n    volumes:\n      - './upsource/data:/opt/upsource/data'\n      - './upsource/conf:/opt/upsource/conf'\n      - './upsource/logs:/opt/upsource/logs'\n      - './upsource/backups:/opt/upsource/backups'\n    networks:\n      devops:\n        aliases:\n          - 'upsource.tricker.org'\n    depends_on:\n      - hub\n      - gitlab\n\n  teamcity:\n    image: jetbrains/teamcity-server\n    hostname: 'teamcity.tricker.org'\n    ports:\n      - 18111:8111\n    volumes:\n      - './teamcity/data:/data/teamcity_server/datadir'\n      - './teamcity/logs:/opt/teamcity/logs'\n    networks:\n      devops:\n        aliases:\n          - 'teamcity.tricker.org'\n    depends_on:\n      - mysql\n      - gitlab\n\nnetworks:\n  devops:\n修改 hosts 文件\n\n# 注意: 这里一定要使用 root 权限。\n$ sudo vim /etc/hosts\n# 关于 vim 的使用，此处不再复述，有问题找百度。\n127.0.0.1       gitlab.tricker.org\n127.0.0.1       registry.tricker.org\n127.0.0.1       hub.tricker.org\n127.0.0.1       youtrack.tricker.org\n127.0.0.1       upsource.tricker.org\n127.0.0.1       teamcity.tricker.org\n修改 nginx 配置\n\n# 进入 nginx 文件夹，这个文件夹内的操作，几乎都需要 root 权限。\n$ cd /etc/nginx\n$ cd sites-available/\n$ sudo mv default default.backup\n$ sudo vim devops\nserver {\n    listen 80;\n\n    server_name gitlab.tricker.org;\n\n    location / {\n        proxy_pass       http://127.0.0.1:8888;\n        proxy_set_header Host      $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\n\nserver {\n    listen 80;\n\n    server_name registry.tricker.org;\n\n    location / {\n        proxy_pass       http://127.0.0.1:5555;\n        proxy_set_header Host      $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\n\nserver {\n    listen 80;\n\n    server_name hub.tricker.org;\n\n    location / {\n        proxy_pass       http://127.0.0.1:18080;\n        proxy_set_header Host      $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\n\nserver {\n    listen 80;\n\n    server_name youtrack.tricker.org;\n\n    location / {\n        proxy_pass       http://127.0.0.1:18081;\n        proxy_set_header Host      $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\n\nserver {\n    listen 80;\n\n    server_name upsource.tricker.org;\n\n    location / {\n        proxy_pass       http://127.0.0.1:18082;\n        proxy_set_header Host      $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\n\nserver {\n    listen 80;\n\n    server_name teamcity.tricker.org;\n\n    location / {\n        proxy_pass       http://127.0.0.1:18111;\n        proxy_set_header Host      $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\n# 重启 nginx 打开浏览器访问相应的子域名，就可以转到相应的服务了。\n$ sudo systemct restart nginx","slug":"nginx-ip","published":1,"updated":"2023-07-23T14:19:13.130Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkjdd1ce002f98ajgay19508","content":"<p><a href=\"https://www.jianshu.com/p/4e761ec96f67\">https://www.jianshu.com/p/4e761ec96f67</a></p>\n<p>Nginx 多个子域名映射到不同的端口或 ip</p>\n<p>MrTricker<br>IP属地: 福建<br>0.267<br>2019.07.17 15:42:10<br>字数 1,163<br>阅读 7,597<br>场景介绍</p>\n<p>在部署 DevOps 环境时，多个服务通过 Docker 部署到一个服务器上，映射到不同的端口。<br>现在每次访问，都要带上端口号，既不美观，也很麻烦。</p>\n<p>一、思考过程<br>如果不想带上端口号，就只能访问 80 或 443 端口。<br>可以用过二级目录区分服务，通过反向代理转发到不同的 Server。<br>可以用过子域名区分服务，通过反向代理转发到不同的 Server。<br>二、方案评估<br>对于不带端口号访问，以我目前的经验来看，找不到其它更好的方法，只能使用 80 或 443 端口。<br>使用二级目录区分服务，可行性很大。<br>能通过二级目录名，明确区分服务。<br>可是和直接使用端口号差别不大，只是把辨别服务的方法，从端口号变成了二级目录名。<br>可能导致 url 过长。<br>还是没有什么美观性。<br>使用子域名区分服务，可行性与二级目录相差无几。<br>能通过子域名，明确区分服务。<br>具有一定的美观性。<br>三、方案确定 和 方案设计<br>我决定采用采用 子域名区分服务 的方式，然后使用 nginx 做反向代理，分发到不同的端口。</p>\n<ol>\n<li>本地测试<br>注意</li>\n</ol>\n<p>我使用的环境是 Ubuntu Desktop 桌面操作系统。</p>\n<p>首先安装 nginx</p>\n<h1 id=\"使用-Ubuntu-包管理器中的-nginx-即可。\"><a href=\"#使用-Ubuntu-包管理器中的-nginx-即可。\" class=\"headerlink\" title=\"使用 Ubuntu 包管理器中的 nginx 即可。\"></a>使用 Ubuntu 包管理器中的 nginx 即可。</h1><p>$ sudo apt update<br>$ sudo apt install nginx<br>安装 Docker 和 Docker Composer</p>\n<p>参考官方文档 Get Docker CE for Ubuntu 和 Install Docker Compose。</p>\n<p>创建目录结构</p>\n<h1 id=\"我使用的是-Jetbrains-全家桶；\"><a href=\"#我使用的是-Jetbrains-全家桶；\" class=\"headerlink\" title=\"我使用的是 Jetbrains 全家桶；\"></a>我使用的是 Jetbrains 全家桶；</h1><h1 id=\"这里比较麻烦。\"><a href=\"#这里比较麻烦。\" class=\"headerlink\" title=\"这里比较麻烦。\"></a>这里比较麻烦。</h1><p>$ mkdir -p DevOps<br>$ cd mkdir<br>$ mkdir -p gitlab registry teamcity mysql<br>$ mkdir -p -m 750 hub&#x2F;backups hub&#x2F;conf hub&#x2F;data hub&#x2F;logs youtrack&#x2F;backups youtrack&#x2F;conf youtrack&#x2F;data youtrack&#x2F;logs upsource&#x2F;backups upsource&#x2F;conf upsource&#x2F;data upsource&#x2F;logs<br>$ sudo chmod -R 13001:13001 hub youtrack upsource<br>$ touch docker-compose.yml<br>编写 docker-compose.yml 配置文件</p>\n<p>version: ‘3’</p>\n<p>services:</p>\n<p>  gitlab:<br>    image: gitlab&#x2F;gitlab-ce:latest<br>    restart: always<br>    hostname: ‘gitlab.tricker.org’<br>    prots:<br>      - 8888:80<br>      - 2222:22<br>    volumes:<br>      - ‘.&#x2F;gitlab&#x2F;config:&#x2F;etc&#x2F;gitlab’<br>      - ‘.&#x2F;gitlab&#x2F;data:&#x2F;var&#x2F;opt&#x2F;gitlab’<br>      - ‘.&#x2F;gitlab&#x2F;logs:&#x2F;var&#x2F;log&#x2F;gitlab’<br>    environment:<br>      GITLAB_OMNIBUS_CONFIG: |<br>        external_url “<a href=\"http://gitlab.tricker.org/\">http://gitlab.tricker.org</a>“<br>        gitlab_rails[“gitlab_shell_ssh_port”] &#x3D; 2222<br>    networks:<br>      devops:<br>        aliases:<br>          - ‘gitlab.tricker.org’</p>\n<p>  registry:<br>    image: registry:latest<br>    hostname: ‘registry.tricker.org’<br>    ports:<br>      - 5555:5000<br>    volumes:<br>      - ‘.&#x2F;registry&#x2F;data:&#x2F;var&#x2F;lib&#x2F;registry’<br>    networks:<br>      devops:<br>        aliases:<br>          - ‘registry.tricker.org’</p>\n<p>  hub:<br>    image: jetbrains&#x2F;hub:2019.1.11584<br>    hostname: ‘hub.tricker.org’<br>    ports:<br>      - 18080:8080<br>    volumes:<br>      - ‘.&#x2F;hub&#x2F;data:&#x2F;opt&#x2F;hub&#x2F;data’<br>      - ‘.&#x2F;hub&#x2F;conf:&#x2F;opt&#x2F;hub&#x2F;conf’<br>      - ‘.&#x2F;hub&#x2F;logs:&#x2F;opt&#x2F;hub&#x2F;logs’<br>      - ‘.&#x2F;hub&#x2F;backups:&#x2F;opt&#x2F;hub&#x2F;backups’<br>    networks:<br>      devops:<br>        aliases:<br>          - ‘hub.tricker.org’</p>\n<p>  youtrack:<br>    image: jetbrains&#x2F;youtrack:2019.2.54193<br>    hostname: ‘youtrack.tricker.org’<br>    ports:<br>      - 18081:8080<br>    volumes:<br>      - ‘.&#x2F;youtrack&#x2F;data:&#x2F;opt&#x2F;youtrack&#x2F;data’<br>      - ‘.&#x2F;youtrack&#x2F;conf:&#x2F;opt&#x2F;youtrack&#x2F;conf’<br>      - ‘.&#x2F;youtrack&#x2F;logs:&#x2F;opt&#x2F;youtrack&#x2F;logs’<br>      - ‘.&#x2F;youtrack&#x2F;backups:&#x2F;opt&#x2F;youtrack&#x2F;backups’<br>    networks:<br>      devops:<br>        aliases:<br>          - ‘youtrack.tricker.org’<br>    depends_on:<br>      - hub</p>\n<p>  upsource:<br>    image: jetbrains&#x2F;upsource:2019.1.1432<br>    hostname: ‘upsource.tricker.org’<br>    ports:<br>      - 18082:8080<br>    volumes:<br>      - ‘.&#x2F;upsource&#x2F;data:&#x2F;opt&#x2F;upsource&#x2F;data’<br>      - ‘.&#x2F;upsource&#x2F;conf:&#x2F;opt&#x2F;upsource&#x2F;conf’<br>      - ‘.&#x2F;upsource&#x2F;logs:&#x2F;opt&#x2F;upsource&#x2F;logs’<br>      - ‘.&#x2F;upsource&#x2F;backups:&#x2F;opt&#x2F;upsource&#x2F;backups’<br>    networks:<br>      devops:<br>        aliases:<br>          - ‘upsource.tricker.org’<br>    depends_on:<br>      - hub<br>      - gitlab</p>\n<p>  teamcity:<br>    image: jetbrains&#x2F;teamcity-server<br>    hostname: ‘teamcity.tricker.org’<br>    ports:<br>      - 18111:8111<br>    volumes:<br>      - ‘.&#x2F;teamcity&#x2F;data:&#x2F;data&#x2F;teamcity_server&#x2F;datadir’<br>      - ‘.&#x2F;teamcity&#x2F;logs:&#x2F;opt&#x2F;teamcity&#x2F;logs’<br>    networks:<br>      devops:<br>        aliases:<br>          - ‘teamcity.tricker.org’<br>    depends_on:<br>      - mysql<br>      - gitlab</p>\n<p>networks:<br>  devops:<br>修改 hosts 文件</p>\n<h1 id=\"注意-这里一定要使用-root-权限。\"><a href=\"#注意-这里一定要使用-root-权限。\" class=\"headerlink\" title=\"注意: 这里一定要使用 root 权限。\"></a>注意: 这里一定要使用 root 权限。</h1><p>$ sudo vim &#x2F;etc&#x2F;hosts</p>\n<h1 id=\"关于-vim-的使用，此处不再复述，有问题找百度。\"><a href=\"#关于-vim-的使用，此处不再复述，有问题找百度。\" class=\"headerlink\" title=\"关于 vim 的使用，此处不再复述，有问题找百度。\"></a>关于 vim 的使用，此处不再复述，有问题找百度。</h1><p>127.0.0.1       gitlab.tricker.org<br>127.0.0.1       registry.tricker.org<br>127.0.0.1       hub.tricker.org<br>127.0.0.1       youtrack.tricker.org<br>127.0.0.1       upsource.tricker.org<br>127.0.0.1       teamcity.tricker.org<br>修改 nginx 配置</p>\n<h1 id=\"进入-nginx-文件夹，这个文件夹内的操作，几乎都需要-root-权限。\"><a href=\"#进入-nginx-文件夹，这个文件夹内的操作，几乎都需要-root-权限。\" class=\"headerlink\" title=\"进入 nginx 文件夹，这个文件夹内的操作，几乎都需要 root 权限。\"></a>进入 nginx 文件夹，这个文件夹内的操作，几乎都需要 root 权限。</h1><p>$ cd &#x2F;etc&#x2F;nginx<br>$ cd sites-available&#x2F;<br>$ sudo mv default default.backup<br>$ sudo vim devops<br>server {<br>    listen 80;</p>\n<pre><code>server_name gitlab.tricker.org;\n\nlocation / &#123;\n    proxy_pass       http://127.0.0.1:8888;\n    proxy_set_header Host      $host;\n    proxy_set_header X-Real-IP $remote_addr;\n&#125;\n</code></pre>\n<p>}</p>\n<p>server {<br>    listen 80;</p>\n<pre><code>server_name registry.tricker.org;\n\nlocation / &#123;\n    proxy_pass       http://127.0.0.1:5555;\n    proxy_set_header Host      $host;\n    proxy_set_header X-Real-IP $remote_addr;\n&#125;\n</code></pre>\n<p>}</p>\n<p>server {<br>    listen 80;</p>\n<pre><code>server_name hub.tricker.org;\n\nlocation / &#123;\n    proxy_pass       http://127.0.0.1:18080;\n    proxy_set_header Host      $host;\n    proxy_set_header X-Real-IP $remote_addr;\n&#125;\n</code></pre>\n<p>}</p>\n<p>server {<br>    listen 80;</p>\n<pre><code>server_name youtrack.tricker.org;\n\nlocation / &#123;\n    proxy_pass       http://127.0.0.1:18081;\n    proxy_set_header Host      $host;\n    proxy_set_header X-Real-IP $remote_addr;\n&#125;\n</code></pre>\n<p>}</p>\n<p>server {<br>    listen 80;</p>\n<pre><code>server_name upsource.tricker.org;\n\nlocation / &#123;\n    proxy_pass       http://127.0.0.1:18082;\n    proxy_set_header Host      $host;\n    proxy_set_header X-Real-IP $remote_addr;\n&#125;\n</code></pre>\n<p>}</p>\n<p>server {<br>    listen 80;</p>\n<pre><code>server_name teamcity.tricker.org;\n\nlocation / &#123;\n    proxy_pass       http://127.0.0.1:18111;\n    proxy_set_header Host      $host;\n    proxy_set_header X-Real-IP $remote_addr;\n&#125;\n</code></pre>\n<p>}</p>\n<h1 id=\"重启-nginx-打开浏览器访问相应的子域名，就可以转到相应的服务了。\"><a href=\"#重启-nginx-打开浏览器访问相应的子域名，就可以转到相应的服务了。\" class=\"headerlink\" title=\"重启 nginx 打开浏览器访问相应的子域名，就可以转到相应的服务了。\"></a>重启 nginx 打开浏览器访问相应的子域名，就可以转到相应的服务了。</h1><p>$ sudo systemct restart nginx</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.jianshu.com/p/4e761ec96f67\">https://www.jianshu.com/p/4e761ec96f67</a></p>\n<p>Nginx 多个子域名映射到不同的端口或 ip</p>\n<p>MrTricker<br>IP属地: 福建<br>0.267<br>2019.07.17 15:42:10<br>字数 1,163<br>阅读 7,597<br>场景介绍</p>\n<p>在部署 DevOps 环境时，多个服务通过 Docker 部署到一个服务器上，映射到不同的端口。<br>现在每次访问，都要带上端口号，既不美观，也很麻烦。</p>\n<p>一、思考过程<br>如果不想带上端口号，就只能访问 80 或 443 端口。<br>可以用过二级目录区分服务，通过反向代理转发到不同的 Server。<br>可以用过子域名区分服务，通过反向代理转发到不同的 Server。<br>二、方案评估<br>对于不带端口号访问，以我目前的经验来看，找不到其它更好的方法，只能使用 80 或 443 端口。<br>使用二级目录区分服务，可行性很大。<br>能通过二级目录名，明确区分服务。<br>可是和直接使用端口号差别不大，只是把辨别服务的方法，从端口号变成了二级目录名。<br>可能导致 url 过长。<br>还是没有什么美观性。<br>使用子域名区分服务，可行性与二级目录相差无几。<br>能通过子域名，明确区分服务。<br>具有一定的美观性。<br>三、方案确定 和 方案设计<br>我决定采用采用 子域名区分服务 的方式，然后使用 nginx 做反向代理，分发到不同的端口。</p>\n<ol>\n<li>本地测试<br>注意</li>\n</ol>\n<p>我使用的环境是 Ubuntu Desktop 桌面操作系统。</p>\n<p>首先安装 nginx</p>\n<h1 id=\"使用-Ubuntu-包管理器中的-nginx-即可。\"><a href=\"#使用-Ubuntu-包管理器中的-nginx-即可。\" class=\"headerlink\" title=\"使用 Ubuntu 包管理器中的 nginx 即可。\"></a>使用 Ubuntu 包管理器中的 nginx 即可。</h1><p>$ sudo apt update<br>$ sudo apt install nginx<br>安装 Docker 和 Docker Composer</p>\n<p>参考官方文档 Get Docker CE for Ubuntu 和 Install Docker Compose。</p>\n<p>创建目录结构</p>\n<h1 id=\"我使用的是-Jetbrains-全家桶；\"><a href=\"#我使用的是-Jetbrains-全家桶；\" class=\"headerlink\" title=\"我使用的是 Jetbrains 全家桶；\"></a>我使用的是 Jetbrains 全家桶；</h1><h1 id=\"这里比较麻烦。\"><a href=\"#这里比较麻烦。\" class=\"headerlink\" title=\"这里比较麻烦。\"></a>这里比较麻烦。</h1><p>$ mkdir -p DevOps<br>$ cd mkdir<br>$ mkdir -p gitlab registry teamcity mysql<br>$ mkdir -p -m 750 hub&#x2F;backups hub&#x2F;conf hub&#x2F;data hub&#x2F;logs youtrack&#x2F;backups youtrack&#x2F;conf youtrack&#x2F;data youtrack&#x2F;logs upsource&#x2F;backups upsource&#x2F;conf upsource&#x2F;data upsource&#x2F;logs<br>$ sudo chmod -R 13001:13001 hub youtrack upsource<br>$ touch docker-compose.yml<br>编写 docker-compose.yml 配置文件</p>\n<p>version: ‘3’</p>\n<p>services:</p>\n<p>  gitlab:<br>    image: gitlab&#x2F;gitlab-ce:latest<br>    restart: always<br>    hostname: ‘gitlab.tricker.org’<br>    prots:<br>      - 8888:80<br>      - 2222:22<br>    volumes:<br>      - ‘.&#x2F;gitlab&#x2F;config:&#x2F;etc&#x2F;gitlab’<br>      - ‘.&#x2F;gitlab&#x2F;data:&#x2F;var&#x2F;opt&#x2F;gitlab’<br>      - ‘.&#x2F;gitlab&#x2F;logs:&#x2F;var&#x2F;log&#x2F;gitlab’<br>    environment:<br>      GITLAB_OMNIBUS_CONFIG: |<br>        external_url “<a href=\"http://gitlab.tricker.org/\">http://gitlab.tricker.org</a>“<br>        gitlab_rails[“gitlab_shell_ssh_port”] &#x3D; 2222<br>    networks:<br>      devops:<br>        aliases:<br>          - ‘gitlab.tricker.org’</p>\n<p>  registry:<br>    image: registry:latest<br>    hostname: ‘registry.tricker.org’<br>    ports:<br>      - 5555:5000<br>    volumes:<br>      - ‘.&#x2F;registry&#x2F;data:&#x2F;var&#x2F;lib&#x2F;registry’<br>    networks:<br>      devops:<br>        aliases:<br>          - ‘registry.tricker.org’</p>\n<p>  hub:<br>    image: jetbrains&#x2F;hub:2019.1.11584<br>    hostname: ‘hub.tricker.org’<br>    ports:<br>      - 18080:8080<br>    volumes:<br>      - ‘.&#x2F;hub&#x2F;data:&#x2F;opt&#x2F;hub&#x2F;data’<br>      - ‘.&#x2F;hub&#x2F;conf:&#x2F;opt&#x2F;hub&#x2F;conf’<br>      - ‘.&#x2F;hub&#x2F;logs:&#x2F;opt&#x2F;hub&#x2F;logs’<br>      - ‘.&#x2F;hub&#x2F;backups:&#x2F;opt&#x2F;hub&#x2F;backups’<br>    networks:<br>      devops:<br>        aliases:<br>          - ‘hub.tricker.org’</p>\n<p>  youtrack:<br>    image: jetbrains&#x2F;youtrack:2019.2.54193<br>    hostname: ‘youtrack.tricker.org’<br>    ports:<br>      - 18081:8080<br>    volumes:<br>      - ‘.&#x2F;youtrack&#x2F;data:&#x2F;opt&#x2F;youtrack&#x2F;data’<br>      - ‘.&#x2F;youtrack&#x2F;conf:&#x2F;opt&#x2F;youtrack&#x2F;conf’<br>      - ‘.&#x2F;youtrack&#x2F;logs:&#x2F;opt&#x2F;youtrack&#x2F;logs’<br>      - ‘.&#x2F;youtrack&#x2F;backups:&#x2F;opt&#x2F;youtrack&#x2F;backups’<br>    networks:<br>      devops:<br>        aliases:<br>          - ‘youtrack.tricker.org’<br>    depends_on:<br>      - hub</p>\n<p>  upsource:<br>    image: jetbrains&#x2F;upsource:2019.1.1432<br>    hostname: ‘upsource.tricker.org’<br>    ports:<br>      - 18082:8080<br>    volumes:<br>      - ‘.&#x2F;upsource&#x2F;data:&#x2F;opt&#x2F;upsource&#x2F;data’<br>      - ‘.&#x2F;upsource&#x2F;conf:&#x2F;opt&#x2F;upsource&#x2F;conf’<br>      - ‘.&#x2F;upsource&#x2F;logs:&#x2F;opt&#x2F;upsource&#x2F;logs’<br>      - ‘.&#x2F;upsource&#x2F;backups:&#x2F;opt&#x2F;upsource&#x2F;backups’<br>    networks:<br>      devops:<br>        aliases:<br>          - ‘upsource.tricker.org’<br>    depends_on:<br>      - hub<br>      - gitlab</p>\n<p>  teamcity:<br>    image: jetbrains&#x2F;teamcity-server<br>    hostname: ‘teamcity.tricker.org’<br>    ports:<br>      - 18111:8111<br>    volumes:<br>      - ‘.&#x2F;teamcity&#x2F;data:&#x2F;data&#x2F;teamcity_server&#x2F;datadir’<br>      - ‘.&#x2F;teamcity&#x2F;logs:&#x2F;opt&#x2F;teamcity&#x2F;logs’<br>    networks:<br>      devops:<br>        aliases:<br>          - ‘teamcity.tricker.org’<br>    depends_on:<br>      - mysql<br>      - gitlab</p>\n<p>networks:<br>  devops:<br>修改 hosts 文件</p>\n<h1 id=\"注意-这里一定要使用-root-权限。\"><a href=\"#注意-这里一定要使用-root-权限。\" class=\"headerlink\" title=\"注意: 这里一定要使用 root 权限。\"></a>注意: 这里一定要使用 root 权限。</h1><p>$ sudo vim &#x2F;etc&#x2F;hosts</p>\n<h1 id=\"关于-vim-的使用，此处不再复述，有问题找百度。\"><a href=\"#关于-vim-的使用，此处不再复述，有问题找百度。\" class=\"headerlink\" title=\"关于 vim 的使用，此处不再复述，有问题找百度。\"></a>关于 vim 的使用，此处不再复述，有问题找百度。</h1><p>127.0.0.1       gitlab.tricker.org<br>127.0.0.1       registry.tricker.org<br>127.0.0.1       hub.tricker.org<br>127.0.0.1       youtrack.tricker.org<br>127.0.0.1       upsource.tricker.org<br>127.0.0.1       teamcity.tricker.org<br>修改 nginx 配置</p>\n<h1 id=\"进入-nginx-文件夹，这个文件夹内的操作，几乎都需要-root-权限。\"><a href=\"#进入-nginx-文件夹，这个文件夹内的操作，几乎都需要-root-权限。\" class=\"headerlink\" title=\"进入 nginx 文件夹，这个文件夹内的操作，几乎都需要 root 权限。\"></a>进入 nginx 文件夹，这个文件夹内的操作，几乎都需要 root 权限。</h1><p>$ cd &#x2F;etc&#x2F;nginx<br>$ cd sites-available&#x2F;<br>$ sudo mv default default.backup<br>$ sudo vim devops<br>server {<br>    listen 80;</p>\n<pre><code>server_name gitlab.tricker.org;\n\nlocation / &#123;\n    proxy_pass       http://127.0.0.1:8888;\n    proxy_set_header Host      $host;\n    proxy_set_header X-Real-IP $remote_addr;\n&#125;\n</code></pre>\n<p>}</p>\n<p>server {<br>    listen 80;</p>\n<pre><code>server_name registry.tricker.org;\n\nlocation / &#123;\n    proxy_pass       http://127.0.0.1:5555;\n    proxy_set_header Host      $host;\n    proxy_set_header X-Real-IP $remote_addr;\n&#125;\n</code></pre>\n<p>}</p>\n<p>server {<br>    listen 80;</p>\n<pre><code>server_name hub.tricker.org;\n\nlocation / &#123;\n    proxy_pass       http://127.0.0.1:18080;\n    proxy_set_header Host      $host;\n    proxy_set_header X-Real-IP $remote_addr;\n&#125;\n</code></pre>\n<p>}</p>\n<p>server {<br>    listen 80;</p>\n<pre><code>server_name youtrack.tricker.org;\n\nlocation / &#123;\n    proxy_pass       http://127.0.0.1:18081;\n    proxy_set_header Host      $host;\n    proxy_set_header X-Real-IP $remote_addr;\n&#125;\n</code></pre>\n<p>}</p>\n<p>server {<br>    listen 80;</p>\n<pre><code>server_name upsource.tricker.org;\n\nlocation / &#123;\n    proxy_pass       http://127.0.0.1:18082;\n    proxy_set_header Host      $host;\n    proxy_set_header X-Real-IP $remote_addr;\n&#125;\n</code></pre>\n<p>}</p>\n<p>server {<br>    listen 80;</p>\n<pre><code>server_name teamcity.tricker.org;\n\nlocation / &#123;\n    proxy_pass       http://127.0.0.1:18111;\n    proxy_set_header Host      $host;\n    proxy_set_header X-Real-IP $remote_addr;\n&#125;\n</code></pre>\n<p>}</p>\n<h1 id=\"重启-nginx-打开浏览器访问相应的子域名，就可以转到相应的服务了。\"><a href=\"#重启-nginx-打开浏览器访问相应的子域名，就可以转到相应的服务了。\" class=\"headerlink\" title=\"重启 nginx 打开浏览器访问相应的子域名，就可以转到相应的服务了。\"></a>重启 nginx 打开浏览器访问相应的子域名，就可以转到相应的服务了。</h1><p>$ sudo systemct restart nginx</p>\n"},{"title":"nginx创建HTTPS连接new_ssl","date":"2022-10-14T03:23:04.000Z","_content":"\n创建存放SSL证书文件的文件夹：\n$ sudo mkdir -p /etc/nginx/ssl\n\n我这里是把这两个文件放在 /etc/nginx/ssl目录下，这里需要记住上传SSL证书文件的路径。\n接着，我们需要给nginx的配置文件加上添加证书的路径以及开启安全证书，进入默认的配置文件：\n\n$ vim /etc/nginx/sites-available/default\n\n添加的内容如下：\n\n点击 i ，进行修改内容，把以下内容复制/输入进去，当然别忘了把ssl_certificate和ssl_certificate_key后面路径的****换成是你的文件名字哦：\n        listen 443 ssl;\n        ssl_certificate    /etc/nginx/ssl/****.pem;\n        ssl_certificate_key /etc/nginx/ssl/****.key;\n        ssl_session_timeout 5m;\n        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\n        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n        ssl_prefer_server_ciphers on;\n\n最后按esc退出，然后输入**:wq** 保存并退出。\n\n然后检查一下我们修改内容有没有出错，输入：\n\n$ nginx -t\n\n提示successful\n\n\n最后的最后，还需要重启一下nginx，不然的话是不会生效的。\n输入：\n\n$ sudo service nginx restart\n\n最后，在浏览器访问我的域名，可以看到提示连接是安全的\n","source":"_posts/nginx-new-ssl.md","raw":"---\ntitle: nginx创建HTTPS连接new_ssl\ndate: 2022-10-14 11:23:04\ntags: nginx\ncategories: \n    - 系统\n---\n\n创建存放SSL证书文件的文件夹：\n$ sudo mkdir -p /etc/nginx/ssl\n\n我这里是把这两个文件放在 /etc/nginx/ssl目录下，这里需要记住上传SSL证书文件的路径。\n接着，我们需要给nginx的配置文件加上添加证书的路径以及开启安全证书，进入默认的配置文件：\n\n$ vim /etc/nginx/sites-available/default\n\n添加的内容如下：\n\n点击 i ，进行修改内容，把以下内容复制/输入进去，当然别忘了把ssl_certificate和ssl_certificate_key后面路径的****换成是你的文件名字哦：\n        listen 443 ssl;\n        ssl_certificate    /etc/nginx/ssl/****.pem;\n        ssl_certificate_key /etc/nginx/ssl/****.key;\n        ssl_session_timeout 5m;\n        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\n        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n        ssl_prefer_server_ciphers on;\n\n最后按esc退出，然后输入**:wq** 保存并退出。\n\n然后检查一下我们修改内容有没有出错，输入：\n\n$ nginx -t\n\n提示successful\n\n\n最后的最后，还需要重启一下nginx，不然的话是不会生效的。\n输入：\n\n$ sudo service nginx restart\n\n最后，在浏览器访问我的域名，可以看到提示连接是安全的\n","slug":"nginx-new-ssl","published":1,"updated":"2023-07-23T14:19:12.977Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkjdd1cg002i98ajcx8j1o5l","content":"<p>创建存放SSL证书文件的文件夹：<br>$ sudo mkdir -p &#x2F;etc&#x2F;nginx&#x2F;ssl</p>\n<p>我这里是把这两个文件放在 &#x2F;etc&#x2F;nginx&#x2F;ssl目录下，这里需要记住上传SSL证书文件的路径。<br>接着，我们需要给nginx的配置文件加上添加证书的路径以及开启安全证书，进入默认的配置文件：</p>\n<p>$ vim &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;default</p>\n<p>添加的内容如下：</p>\n<p>点击 i ，进行修改内容，把以下内容复制&#x2F;输入进去，当然别忘了把ssl_certificate和ssl_certificate_key后面路径的<strong><strong>换成是你的文件名字哦：<br>        listen 443 ssl;<br>        ssl_certificate    &#x2F;etc&#x2F;nginx&#x2F;ssl&#x2F;</strong></strong>.pem;<br>        ssl_certificate_key &#x2F;etc&#x2F;nginx&#x2F;ssl&#x2F;****.key;<br>        ssl_session_timeout 5m;<br>        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;<br>        ssl_prefer_server_ciphers on;</p>\n<p>最后按esc退出，然后输入**:wq** 保存并退出。</p>\n<p>然后检查一下我们修改内容有没有出错，输入：</p>\n<p>$ nginx -t</p>\n<p>提示successful</p>\n<p>最后的最后，还需要重启一下nginx，不然的话是不会生效的。<br>输入：</p>\n<p>$ sudo service nginx restart</p>\n<p>最后，在浏览器访问我的域名，可以看到提示连接是安全的</p>\n","site":{"data":{}},"excerpt":"","more":"<p>创建存放SSL证书文件的文件夹：<br>$ sudo mkdir -p &#x2F;etc&#x2F;nginx&#x2F;ssl</p>\n<p>我这里是把这两个文件放在 &#x2F;etc&#x2F;nginx&#x2F;ssl目录下，这里需要记住上传SSL证书文件的路径。<br>接着，我们需要给nginx的配置文件加上添加证书的路径以及开启安全证书，进入默认的配置文件：</p>\n<p>$ vim &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;default</p>\n<p>添加的内容如下：</p>\n<p>点击 i ，进行修改内容，把以下内容复制&#x2F;输入进去，当然别忘了把ssl_certificate和ssl_certificate_key后面路径的<strong><strong>换成是你的文件名字哦：<br>        listen 443 ssl;<br>        ssl_certificate    &#x2F;etc&#x2F;nginx&#x2F;ssl&#x2F;</strong></strong>.pem;<br>        ssl_certificate_key &#x2F;etc&#x2F;nginx&#x2F;ssl&#x2F;****.key;<br>        ssl_session_timeout 5m;<br>        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;<br>        ssl_prefer_server_ciphers on;</p>\n<p>最后按esc退出，然后输入**:wq** 保存并退出。</p>\n<p>然后检查一下我们修改内容有没有出错，输入：</p>\n<p>$ nginx -t</p>\n<p>提示successful</p>\n<p>最后的最后，还需要重启一下nginx，不然的话是不会生效的。<br>输入：</p>\n<p>$ sudo service nginx restart</p>\n<p>最后，在浏览器访问我的域名，可以看到提示连接是安全的</p>\n"},{"title":"Windows下Node.js\\+Python\\+Git 安装教程","date":"2023-03-12T14:38:02.000Z","_content":"\n# Windows下Node.js\\+Python\\+Git 安装教程\n\n## 首先 准备安装文件\n\n1. node.js 安装文件\n\n[https://nodejs.org/en/download/](https://nodejs.org/en/download/)\n\n2. python 安装文件\n    \n[https://www.python.org/downloads/](https://www.python.org/downloads/)\n\n3. git 安装文件\n    \n[https://git-scm.com/downloads](https://git-scm.com/downloads)\n\n![下载文件](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/1.jpg)\n\n\n## 1. 安装 Node.js\n\n1. 下载安装文件\n\n2. 双击安装文件，点击下一步\n\n![2](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/2.jpg)\n\n3. 勾选`I accept the terms in the license agreement`，点击下一步\n\n![3](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/3.jpg)\n\n4. 选择安装路径，推荐安装在`D:\\Program Files\\nodejs`，点击下一步。\n\n![4](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/4.jpg)\n\n5. 选择安装方式，推荐不修改原始配置，点击下一步。\n\n![5](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/5.jpg)\n\n6. 这里安装相关软件（可选）不推荐安装。\n\n![6](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/6.jpg)\n\n7. 点击安装。\n\n![7](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/7.jpg)\n\n8. 这里可能会需要管理员权限，输入密码，点击是。\n\n![8](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/8.jpg)\n\n9. 等待安装完成。\n\n![9](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/9.jpg)\n\n10. 验证安装是否成功\n\n    打开命令行工具，输入`node -v`，如果出现版本号，说明`nodejs`安装成功。\n\n    我们还需要`npm`工具，输入`npm -v`，如果出现版本号，说明`npm`安装成功。\n\n![28](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/28.jpg)\n\n## 2. 安装 Git\n\n1. 下载安装文件\n\n2. 双击安装文件,这里可能会需要管理员权限，输入密码，点击是。\n\n![11](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/11.jpg)\n\n3. 同意协议，点击`next`。\n\n![12](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/12.jpg)\n\n4. 选择安装路径，推荐安装在`D:\\Program Files\\Git`，点击下一步。\n\n![13](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/13.jpg)\n\n5. 选择安装方式，推荐不修改原始配置，点击下一步。\n\n![14](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/14.jpg)\n\n6. 一路点击`next`，直到安装完成。\n\n![15](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/15.jpg)\n\n7. 一路点击`next`，直到安装完成。\n\n![16](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/16.jpg)\n\n8. 一路点击`next`，直到安装完成。\n\n![17](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/17.jpg)\n\n9. 一路点击`next`，直到安装完成。\n\n![18](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/18.jpg)\n\n10. 一路点击`next`，直到安装完成。\n\n![19](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/19.jpg)\n\n11. 一路点击`next`，直到安装完成。\n\n![20](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/20.jpg)\n\n12. 一路点击`next`，直到安装完成。\n\n![21](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/21.jpg)\n\n13. 一路点击`next`，直到安装完成。\n\n![22](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/22.jpg)\n\n14. 一路点击`next`，直到安装完成。\n\n![23](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/23.jpg)\n\n15. 一路点击`next`，直到安装完成。\n\n![24](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/24.jpg)\n\n16. 一路点击`next`，直到安装完成。\n\n![25](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/25.jpg)\n\n17. 一路点击`next`，直到安装完成。\n\n![26](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/26.jpg)\n\n18. 一路点击`finish`，完成安装。\n\n![27](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/27.jpg)\n\n19. 验证安装是否成功\n\n    打开命令行工具，输入`git --version`，如果出现版本号，说明`git`安装成功。\n\n![29](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/29.jpg)\n\n## 3. 安装 Python\n\n1. 下载安装文件\n\n2. 双击安装文件,这里注意勾选`Add Python.exe to PATH`，点击`Install Now`。\n\n![30](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/30.jpg)\n\n3. 这里可能会需要管理员权限，输入密码，点击是。\n\n![31](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/31.jpg)\n\n4. 等待安装完成。\n\n![32](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/32.jpg)\n\n5. 验证安装是否成功\n\n    打开命令行工具，输入`python --version`，如果出现版本号，说明`python`安装成功。\n\n![33](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/33.jpg)\n\n## 安装完成\n","source":"_posts/ngp.md","raw":"---\ntitle: Windows下Node.js\\+Python\\+Git 安装教程\ndate: 2023-03-12 22:38:02\ncategories: 系统\ntags: \n - Node.js\n - Python\n - Git\n---\n\n# Windows下Node.js\\+Python\\+Git 安装教程\n\n## 首先 准备安装文件\n\n1. node.js 安装文件\n\n[https://nodejs.org/en/download/](https://nodejs.org/en/download/)\n\n2. python 安装文件\n    \n[https://www.python.org/downloads/](https://www.python.org/downloads/)\n\n3. git 安装文件\n    \n[https://git-scm.com/downloads](https://git-scm.com/downloads)\n\n![下载文件](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/1.jpg)\n\n\n## 1. 安装 Node.js\n\n1. 下载安装文件\n\n2. 双击安装文件，点击下一步\n\n![2](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/2.jpg)\n\n3. 勾选`I accept the terms in the license agreement`，点击下一步\n\n![3](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/3.jpg)\n\n4. 选择安装路径，推荐安装在`D:\\Program Files\\nodejs`，点击下一步。\n\n![4](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/4.jpg)\n\n5. 选择安装方式，推荐不修改原始配置，点击下一步。\n\n![5](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/5.jpg)\n\n6. 这里安装相关软件（可选）不推荐安装。\n\n![6](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/6.jpg)\n\n7. 点击安装。\n\n![7](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/7.jpg)\n\n8. 这里可能会需要管理员权限，输入密码，点击是。\n\n![8](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/8.jpg)\n\n9. 等待安装完成。\n\n![9](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/9.jpg)\n\n10. 验证安装是否成功\n\n    打开命令行工具，输入`node -v`，如果出现版本号，说明`nodejs`安装成功。\n\n    我们还需要`npm`工具，输入`npm -v`，如果出现版本号，说明`npm`安装成功。\n\n![28](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/28.jpg)\n\n## 2. 安装 Git\n\n1. 下载安装文件\n\n2. 双击安装文件,这里可能会需要管理员权限，输入密码，点击是。\n\n![11](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/11.jpg)\n\n3. 同意协议，点击`next`。\n\n![12](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/12.jpg)\n\n4. 选择安装路径，推荐安装在`D:\\Program Files\\Git`，点击下一步。\n\n![13](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/13.jpg)\n\n5. 选择安装方式，推荐不修改原始配置，点击下一步。\n\n![14](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/14.jpg)\n\n6. 一路点击`next`，直到安装完成。\n\n![15](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/15.jpg)\n\n7. 一路点击`next`，直到安装完成。\n\n![16](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/16.jpg)\n\n8. 一路点击`next`，直到安装完成。\n\n![17](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/17.jpg)\n\n9. 一路点击`next`，直到安装完成。\n\n![18](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/18.jpg)\n\n10. 一路点击`next`，直到安装完成。\n\n![19](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/19.jpg)\n\n11. 一路点击`next`，直到安装完成。\n\n![20](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/20.jpg)\n\n12. 一路点击`next`，直到安装完成。\n\n![21](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/21.jpg)\n\n13. 一路点击`next`，直到安装完成。\n\n![22](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/22.jpg)\n\n14. 一路点击`next`，直到安装完成。\n\n![23](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/23.jpg)\n\n15. 一路点击`next`，直到安装完成。\n\n![24](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/24.jpg)\n\n16. 一路点击`next`，直到安装完成。\n\n![25](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/25.jpg)\n\n17. 一路点击`next`，直到安装完成。\n\n![26](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/26.jpg)\n\n18. 一路点击`finish`，完成安装。\n\n![27](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/27.jpg)\n\n19. 验证安装是否成功\n\n    打开命令行工具，输入`git --version`，如果出现版本号，说明`git`安装成功。\n\n![29](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/29.jpg)\n\n## 3. 安装 Python\n\n1. 下载安装文件\n\n2. 双击安装文件,这里注意勾选`Add Python.exe to PATH`，点击`Install Now`。\n\n![30](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/30.jpg)\n\n3. 这里可能会需要管理员权限，输入密码，点击是。\n\n![31](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/31.jpg)\n\n4. 等待安装完成。\n\n![32](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/32.jpg)\n\n5. 验证安装是否成功\n\n    打开命令行工具，输入`python --version`，如果出现版本号，说明`python`安装成功。\n\n![33](https://github.com/songxiao1018/blog-img/blob/main/git-python-node/33.jpg)\n\n## 安装完成\n","slug":"ngp","published":1,"updated":"2023-07-23T14:19:13.245Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkjdd1ch002l98aj1ubr59i1","content":"<h1 id=\"Windows下Node-js-Python-Git-安装教程\"><a href=\"#Windows下Node-js-Python-Git-安装教程\" class=\"headerlink\" title=\"Windows下Node.js+Python+Git 安装教程\"></a>Windows下Node.js+Python+Git 安装教程</h1><h2 id=\"首先-准备安装文件\"><a href=\"#首先-准备安装文件\" class=\"headerlink\" title=\"首先 准备安装文件\"></a>首先 准备安装文件</h2><ol>\n<li>node.js 安装文件</li>\n</ol>\n<p><a href=\"https://nodejs.org/en/download/\">https://nodejs.org/en/download/</a></p>\n<ol start=\"2\">\n<li>python 安装文件</li>\n</ol>\n<p><a href=\"https://www.python.org/downloads/\">https://www.python.org/downloads/</a></p>\n<ol start=\"3\">\n<li>git 安装文件</li>\n</ol>\n<p><a href=\"https://git-scm.com/downloads\">https://git-scm.com/downloads</a></p>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/1.jpg\" alt=\"下载文件\"></p>\n<h2 id=\"1-安装-Node-js\"><a href=\"#1-安装-Node-js\" class=\"headerlink\" title=\"1. 安装 Node.js\"></a>1. 安装 Node.js</h2><ol>\n<li><p>下载安装文件</p>\n</li>\n<li><p>双击安装文件，点击下一步</p>\n</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/2.jpg\" alt=\"2\"></p>\n<ol start=\"3\">\n<li>勾选<code>I accept the terms in the license agreement</code>，点击下一步</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/3.jpg\" alt=\"3\"></p>\n<ol start=\"4\">\n<li>选择安装路径，推荐安装在<code>D:\\Program Files\\nodejs</code>，点击下一步。</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/4.jpg\" alt=\"4\"></p>\n<ol start=\"5\">\n<li>选择安装方式，推荐不修改原始配置，点击下一步。</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/5.jpg\" alt=\"5\"></p>\n<ol start=\"6\">\n<li>这里安装相关软件（可选）不推荐安装。</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/6.jpg\" alt=\"6\"></p>\n<ol start=\"7\">\n<li>点击安装。</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/7.jpg\" alt=\"7\"></p>\n<ol start=\"8\">\n<li>这里可能会需要管理员权限，输入密码，点击是。</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/8.jpg\" alt=\"8\"></p>\n<ol start=\"9\">\n<li>等待安装完成。</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/9.jpg\" alt=\"9\"></p>\n<ol start=\"10\">\n<li><p>验证安装是否成功</p>\n<p>打开命令行工具，输入<code>node -v</code>，如果出现版本号，说明<code>nodejs</code>安装成功。</p>\n<p>我们还需要<code>npm</code>工具，输入<code>npm -v</code>，如果出现版本号，说明<code>npm</code>安装成功。</p>\n</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/28.jpg\" alt=\"28\"></p>\n<h2 id=\"2-安装-Git\"><a href=\"#2-安装-Git\" class=\"headerlink\" title=\"2. 安装 Git\"></a>2. 安装 Git</h2><ol>\n<li><p>下载安装文件</p>\n</li>\n<li><p>双击安装文件,这里可能会需要管理员权限，输入密码，点击是。</p>\n</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/11.jpg\" alt=\"11\"></p>\n<ol start=\"3\">\n<li>同意协议，点击<code>next</code>。</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/12.jpg\" alt=\"12\"></p>\n<ol start=\"4\">\n<li>选择安装路径，推荐安装在<code>D:\\Program Files\\Git</code>，点击下一步。</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/13.jpg\" alt=\"13\"></p>\n<ol start=\"5\">\n<li>选择安装方式，推荐不修改原始配置，点击下一步。</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/14.jpg\" alt=\"14\"></p>\n<ol start=\"6\">\n<li>一路点击<code>next</code>，直到安装完成。</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/15.jpg\" alt=\"15\"></p>\n<ol start=\"7\">\n<li>一路点击<code>next</code>，直到安装完成。</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/16.jpg\" alt=\"16\"></p>\n<ol start=\"8\">\n<li>一路点击<code>next</code>，直到安装完成。</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/17.jpg\" alt=\"17\"></p>\n<ol start=\"9\">\n<li>一路点击<code>next</code>，直到安装完成。</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/18.jpg\" alt=\"18\"></p>\n<ol start=\"10\">\n<li>一路点击<code>next</code>，直到安装完成。</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/19.jpg\" alt=\"19\"></p>\n<ol start=\"11\">\n<li>一路点击<code>next</code>，直到安装完成。</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/20.jpg\" alt=\"20\"></p>\n<ol start=\"12\">\n<li>一路点击<code>next</code>，直到安装完成。</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/21.jpg\" alt=\"21\"></p>\n<ol start=\"13\">\n<li>一路点击<code>next</code>，直到安装完成。</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/22.jpg\" alt=\"22\"></p>\n<ol start=\"14\">\n<li>一路点击<code>next</code>，直到安装完成。</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/23.jpg\" alt=\"23\"></p>\n<ol start=\"15\">\n<li>一路点击<code>next</code>，直到安装完成。</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/24.jpg\" alt=\"24\"></p>\n<ol start=\"16\">\n<li>一路点击<code>next</code>，直到安装完成。</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/25.jpg\" alt=\"25\"></p>\n<ol start=\"17\">\n<li>一路点击<code>next</code>，直到安装完成。</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/26.jpg\" alt=\"26\"></p>\n<ol start=\"18\">\n<li>一路点击<code>finish</code>，完成安装。</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/27.jpg\" alt=\"27\"></p>\n<ol start=\"19\">\n<li><p>验证安装是否成功</p>\n<p>打开命令行工具，输入<code>git --version</code>，如果出现版本号，说明<code>git</code>安装成功。</p>\n</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/29.jpg\" alt=\"29\"></p>\n<h2 id=\"3-安装-Python\"><a href=\"#3-安装-Python\" class=\"headerlink\" title=\"3. 安装 Python\"></a>3. 安装 Python</h2><ol>\n<li><p>下载安装文件</p>\n</li>\n<li><p>双击安装文件,这里注意勾选<code>Add Python.exe to PATH</code>，点击<code>Install Now</code>。</p>\n</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/30.jpg\" alt=\"30\"></p>\n<ol start=\"3\">\n<li>这里可能会需要管理员权限，输入密码，点击是。</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/31.jpg\" alt=\"31\"></p>\n<ol start=\"4\">\n<li>等待安装完成。</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/32.jpg\" alt=\"32\"></p>\n<ol start=\"5\">\n<li><p>验证安装是否成功</p>\n<p> 打开命令行工具，输入<code>python --version</code>，如果出现版本号，说明<code>python</code>安装成功。</p>\n</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/33.jpg\" alt=\"33\"></p>\n<h2 id=\"安装完成\"><a href=\"#安装完成\" class=\"headerlink\" title=\"安装完成\"></a>安装完成</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Windows下Node-js-Python-Git-安装教程\"><a href=\"#Windows下Node-js-Python-Git-安装教程\" class=\"headerlink\" title=\"Windows下Node.js+Python+Git 安装教程\"></a>Windows下Node.js+Python+Git 安装教程</h1><h2 id=\"首先-准备安装文件\"><a href=\"#首先-准备安装文件\" class=\"headerlink\" title=\"首先 准备安装文件\"></a>首先 准备安装文件</h2><ol>\n<li>node.js 安装文件</li>\n</ol>\n<p><a href=\"https://nodejs.org/en/download/\">https://nodejs.org/en/download/</a></p>\n<ol start=\"2\">\n<li>python 安装文件</li>\n</ol>\n<p><a href=\"https://www.python.org/downloads/\">https://www.python.org/downloads/</a></p>\n<ol start=\"3\">\n<li>git 安装文件</li>\n</ol>\n<p><a href=\"https://git-scm.com/downloads\">https://git-scm.com/downloads</a></p>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/1.jpg\" alt=\"下载文件\"></p>\n<h2 id=\"1-安装-Node-js\"><a href=\"#1-安装-Node-js\" class=\"headerlink\" title=\"1. 安装 Node.js\"></a>1. 安装 Node.js</h2><ol>\n<li><p>下载安装文件</p>\n</li>\n<li><p>双击安装文件，点击下一步</p>\n</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/2.jpg\" alt=\"2\"></p>\n<ol start=\"3\">\n<li>勾选<code>I accept the terms in the license agreement</code>，点击下一步</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/3.jpg\" alt=\"3\"></p>\n<ol start=\"4\">\n<li>选择安装路径，推荐安装在<code>D:\\Program Files\\nodejs</code>，点击下一步。</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/4.jpg\" alt=\"4\"></p>\n<ol start=\"5\">\n<li>选择安装方式，推荐不修改原始配置，点击下一步。</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/5.jpg\" alt=\"5\"></p>\n<ol start=\"6\">\n<li>这里安装相关软件（可选）不推荐安装。</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/6.jpg\" alt=\"6\"></p>\n<ol start=\"7\">\n<li>点击安装。</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/7.jpg\" alt=\"7\"></p>\n<ol start=\"8\">\n<li>这里可能会需要管理员权限，输入密码，点击是。</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/8.jpg\" alt=\"8\"></p>\n<ol start=\"9\">\n<li>等待安装完成。</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/9.jpg\" alt=\"9\"></p>\n<ol start=\"10\">\n<li><p>验证安装是否成功</p>\n<p>打开命令行工具，输入<code>node -v</code>，如果出现版本号，说明<code>nodejs</code>安装成功。</p>\n<p>我们还需要<code>npm</code>工具，输入<code>npm -v</code>，如果出现版本号，说明<code>npm</code>安装成功。</p>\n</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/28.jpg\" alt=\"28\"></p>\n<h2 id=\"2-安装-Git\"><a href=\"#2-安装-Git\" class=\"headerlink\" title=\"2. 安装 Git\"></a>2. 安装 Git</h2><ol>\n<li><p>下载安装文件</p>\n</li>\n<li><p>双击安装文件,这里可能会需要管理员权限，输入密码，点击是。</p>\n</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/11.jpg\" alt=\"11\"></p>\n<ol start=\"3\">\n<li>同意协议，点击<code>next</code>。</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/12.jpg\" alt=\"12\"></p>\n<ol start=\"4\">\n<li>选择安装路径，推荐安装在<code>D:\\Program Files\\Git</code>，点击下一步。</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/13.jpg\" alt=\"13\"></p>\n<ol start=\"5\">\n<li>选择安装方式，推荐不修改原始配置，点击下一步。</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/14.jpg\" alt=\"14\"></p>\n<ol start=\"6\">\n<li>一路点击<code>next</code>，直到安装完成。</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/15.jpg\" alt=\"15\"></p>\n<ol start=\"7\">\n<li>一路点击<code>next</code>，直到安装完成。</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/16.jpg\" alt=\"16\"></p>\n<ol start=\"8\">\n<li>一路点击<code>next</code>，直到安装完成。</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/17.jpg\" alt=\"17\"></p>\n<ol start=\"9\">\n<li>一路点击<code>next</code>，直到安装完成。</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/18.jpg\" alt=\"18\"></p>\n<ol start=\"10\">\n<li>一路点击<code>next</code>，直到安装完成。</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/19.jpg\" alt=\"19\"></p>\n<ol start=\"11\">\n<li>一路点击<code>next</code>，直到安装完成。</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/20.jpg\" alt=\"20\"></p>\n<ol start=\"12\">\n<li>一路点击<code>next</code>，直到安装完成。</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/21.jpg\" alt=\"21\"></p>\n<ol start=\"13\">\n<li>一路点击<code>next</code>，直到安装完成。</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/22.jpg\" alt=\"22\"></p>\n<ol start=\"14\">\n<li>一路点击<code>next</code>，直到安装完成。</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/23.jpg\" alt=\"23\"></p>\n<ol start=\"15\">\n<li>一路点击<code>next</code>，直到安装完成。</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/24.jpg\" alt=\"24\"></p>\n<ol start=\"16\">\n<li>一路点击<code>next</code>，直到安装完成。</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/25.jpg\" alt=\"25\"></p>\n<ol start=\"17\">\n<li>一路点击<code>next</code>，直到安装完成。</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/26.jpg\" alt=\"26\"></p>\n<ol start=\"18\">\n<li>一路点击<code>finish</code>，完成安装。</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/27.jpg\" alt=\"27\"></p>\n<ol start=\"19\">\n<li><p>验证安装是否成功</p>\n<p>打开命令行工具，输入<code>git --version</code>，如果出现版本号，说明<code>git</code>安装成功。</p>\n</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/29.jpg\" alt=\"29\"></p>\n<h2 id=\"3-安装-Python\"><a href=\"#3-安装-Python\" class=\"headerlink\" title=\"3. 安装 Python\"></a>3. 安装 Python</h2><ol>\n<li><p>下载安装文件</p>\n</li>\n<li><p>双击安装文件,这里注意勾选<code>Add Python.exe to PATH</code>，点击<code>Install Now</code>。</p>\n</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/30.jpg\" alt=\"30\"></p>\n<ol start=\"3\">\n<li>这里可能会需要管理员权限，输入密码，点击是。</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/31.jpg\" alt=\"31\"></p>\n<ol start=\"4\">\n<li>等待安装完成。</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/32.jpg\" alt=\"32\"></p>\n<ol start=\"5\">\n<li><p>验证安装是否成功</p>\n<p> 打开命令行工具，输入<code>python --version</code>，如果出现版本号，说明<code>python</code>安装成功。</p>\n</li>\n</ol>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/git-python-node/33.jpg\" alt=\"33\"></p>\n<h2 id=\"安装完成\"><a href=\"#安装完成\" class=\"headerlink\" title=\"安装完成\"></a>安装完成</h2>"},{"title":"micro:bit麦昆小车程序2","date":"2022-07-27T07:23:09.000Z","_content":"\n\n> 在 [https://songxiao1018.github.io/micro-bit-out-car/](https://songxiao1018.github.io/micro-bit-out-car/) 打开此页面\n\n## 用作扩展\n\n此仓库可以作为 **插件** 添加到 MakeCode 中。\n\n* 打开 [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* 点击 **新项目**\n* 点击齿轮图标菜单下的 **扩展**\n* 搜索 **https://github.com/songxiao1018/micro-bit-out-car** 并导入\n\n## 编辑此项目 ![构建状态标志](https://github.com/songxiao1018/micro-bit-out-car/workflows/MakeCode/badge.svg)\n\n在 MakeCode 中编辑此仓库。\n\n* 打开 [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* 点击 **导入**，然后点击 **导入 URL**\n* 粘贴 **https://github.com/songxiao1018/micro-bit-out-car** 并点击导入\n\n## 积木块预览\n\n此图像显示主分支中最后一次提交的块代码。\n此图像可能需要几分钟才能刷新。\n\n![块的渲染视图](https://github.com/songxiao1018/micro-bit-out-car/raw/master/.github/makecode/blocks.png)\n\n#### 元数据（用于搜索、渲染）\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n","source":"_posts/micro-bit-out-car.md","raw":"---\ntitle: micro:bit麦昆小车程序2\ndate: 2022-07-27 15:23:09\ntags: micro:bit\ncategories: 学习\n---\n\n\n> 在 [https://songxiao1018.github.io/micro-bit-out-car/](https://songxiao1018.github.io/micro-bit-out-car/) 打开此页面\n\n## 用作扩展\n\n此仓库可以作为 **插件** 添加到 MakeCode 中。\n\n* 打开 [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* 点击 **新项目**\n* 点击齿轮图标菜单下的 **扩展**\n* 搜索 **https://github.com/songxiao1018/micro-bit-out-car** 并导入\n\n## 编辑此项目 ![构建状态标志](https://github.com/songxiao1018/micro-bit-out-car/workflows/MakeCode/badge.svg)\n\n在 MakeCode 中编辑此仓库。\n\n* 打开 [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* 点击 **导入**，然后点击 **导入 URL**\n* 粘贴 **https://github.com/songxiao1018/micro-bit-out-car** 并点击导入\n\n## 积木块预览\n\n此图像显示主分支中最后一次提交的块代码。\n此图像可能需要几分钟才能刷新。\n\n![块的渲染视图](https://github.com/songxiao1018/micro-bit-out-car/raw/master/.github/makecode/blocks.png)\n\n#### 元数据（用于搜索、渲染）\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n","slug":"micro-bit-out-car","published":1,"updated":"2023-07-23T14:19:11.897Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkjdd1cj002o98aj3iiggtqc","content":"<blockquote>\n<p>在 <a href=\"https://songxiao1018.github.io/micro-bit-out-car/\">https://songxiao1018.github.io/micro-bit-out-car/</a> 打开此页面</p>\n</blockquote>\n<h2 id=\"用作扩展\"><a href=\"#用作扩展\" class=\"headerlink\" title=\"用作扩展\"></a>用作扩展</h2><p>此仓库可以作为 <strong>插件</strong> 添加到 MakeCode 中。</p>\n<ul>\n<li>打开 <a href=\"https://makecode.microbit.org/\">https://makecode.microbit.org/</a></li>\n<li>点击 <strong>新项目</strong></li>\n<li>点击齿轮图标菜单下的 <strong>扩展</strong></li>\n<li>搜索 <strong><a href=\"https://github.com/songxiao1018/micro-bit-out-car\">https://github.com/songxiao1018/micro-bit-out-car</a></strong> 并导入</li>\n</ul>\n<h2 id=\"编辑此项目\"><a href=\"#编辑此项目\" class=\"headerlink\" title=\"编辑此项目 \"></a>编辑此项目 <img src=\"https://github.com/songxiao1018/micro-bit-out-car/workflows/MakeCode/badge.svg\" alt=\"构建状态标志\"></h2><p>在 MakeCode 中编辑此仓库。</p>\n<ul>\n<li>打开 <a href=\"https://makecode.microbit.org/\">https://makecode.microbit.org/</a></li>\n<li>点击 <strong>导入</strong>，然后点击 <strong>导入 URL</strong></li>\n<li>粘贴 <strong><a href=\"https://github.com/songxiao1018/micro-bit-out-car\">https://github.com/songxiao1018/micro-bit-out-car</a></strong> 并点击导入</li>\n</ul>\n<h2 id=\"积木块预览\"><a href=\"#积木块预览\" class=\"headerlink\" title=\"积木块预览\"></a>积木块预览</h2><p>此图像显示主分支中最后一次提交的块代码。<br>此图像可能需要几分钟才能刷新。</p>\n<p><img src=\"https://github.com/songxiao1018/micro-bit-out-car/raw/master/.github/makecode/blocks.png\" alt=\"块的渲染视图\"></p>\n<h4 id=\"元数据（用于搜索、渲染）\"><a href=\"#元数据（用于搜索、渲染）\" class=\"headerlink\" title=\"元数据（用于搜索、渲染）\"></a>元数据（用于搜索、渲染）</h4><ul>\n<li>for PXT&#x2F;microbit<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"\", \"/\");</script></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>在 <a href=\"https://songxiao1018.github.io/micro-bit-out-car/\">https://songxiao1018.github.io/micro-bit-out-car/</a> 打开此页面</p>\n</blockquote>\n<h2 id=\"用作扩展\"><a href=\"#用作扩展\" class=\"headerlink\" title=\"用作扩展\"></a>用作扩展</h2><p>此仓库可以作为 <strong>插件</strong> 添加到 MakeCode 中。</p>\n<ul>\n<li>打开 <a href=\"https://makecode.microbit.org/\">https://makecode.microbit.org/</a></li>\n<li>点击 <strong>新项目</strong></li>\n<li>点击齿轮图标菜单下的 <strong>扩展</strong></li>\n<li>搜索 <strong><a href=\"https://github.com/songxiao1018/micro-bit-out-car\">https://github.com/songxiao1018/micro-bit-out-car</a></strong> 并导入</li>\n</ul>\n<h2 id=\"编辑此项目\"><a href=\"#编辑此项目\" class=\"headerlink\" title=\"编辑此项目 \"></a>编辑此项目 <img src=\"https://github.com/songxiao1018/micro-bit-out-car/workflows/MakeCode/badge.svg\" alt=\"构建状态标志\"></h2><p>在 MakeCode 中编辑此仓库。</p>\n<ul>\n<li>打开 <a href=\"https://makecode.microbit.org/\">https://makecode.microbit.org/</a></li>\n<li>点击 <strong>导入</strong>，然后点击 <strong>导入 URL</strong></li>\n<li>粘贴 <strong><a href=\"https://github.com/songxiao1018/micro-bit-out-car\">https://github.com/songxiao1018/micro-bit-out-car</a></strong> 并点击导入</li>\n</ul>\n<h2 id=\"积木块预览\"><a href=\"#积木块预览\" class=\"headerlink\" title=\"积木块预览\"></a>积木块预览</h2><p>此图像显示主分支中最后一次提交的块代码。<br>此图像可能需要几分钟才能刷新。</p>\n<p><img src=\"https://github.com/songxiao1018/micro-bit-out-car/raw/master/.github/makecode/blocks.png\" alt=\"块的渲染视图\"></p>\n<h4 id=\"元数据（用于搜索、渲染）\"><a href=\"#元数据（用于搜索、渲染）\" class=\"headerlink\" title=\"元数据（用于搜索、渲染）\"></a>元数据（用于搜索、渲染）</h4><ul>\n<li>for PXT&#x2F;microbit<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"\", \"/\");</script></li>\n</ul>\n"},{"title":"AI智能绘图novelai","date":"2022-10-09T04:16:14.000Z","_content":"\n\n因为前两天看到`loc`上有人提问这个软件，就去搜索了解。\n意外发现该软件竟然被强制开源了。原因是有人认为制作团队盗用画师免费提供的图用于训练模型算法数据库，却反过来收费提供服务的行为极其不道德，所以，被看不惯的大神们点艹了。\n恭喜这位`MJJ`成功省下了一大笔开销`@yushui`\n\n首先放链接，据悉其中包括应用程序和成品模型数据库。\n`magnet:?xt=urn:btih:5bde442da86265b670a3e5ea3163afad2c6f8ecc`\n复制代码\n百度云、迅雷网盘和夸克网盘目前已可离线\n\n因为`NovelAI`是基于开源软件`Stable Diffusion`制作而来，所以想复制一个“世界一流绘图AI”，理论上只需按照`Stable Diffusion`的搭建教程走，最后导入`NAI`的数据库即可。\n\n`Stable Diffusion`部署教程网上很多，这里放几个简单示例：\n```\nhttps://bbs.saraba1st.com/2b/thread-2098295-1-1.html\nhttps://zhuanlan.zhihu.com/p/561546984\nhttps://www.bilibili.com/read/cv18292916\nhttps://boards.4channel.org/g/thread/89011971\n```\n\n如遇问题请善用`谷歌`、`必应`、`百度`、`Yandex`等搜索引擎，或是加入相应社区进行讨论。\n\n\n欢迎感兴趣的`MJJ`们来搞，众人拾柴火焰高。\n\n```\n另外国外某论坛也有人指出：“因代码来源尚不明朗，故存在安全风险，在确认文件安全之前，最好不要在生产环境或主要使用的计算机上调用模型”。\n```\n\n注：因为AI、大数据、知识图谱等项目无一例外都对GPU的要求极其苛刻，请参考官方文档及其他网友反馈，自行斟酌自己的运行环境是否达标。\n\n\n\n\n更新网盘分流，感谢上传的热心群众\nGD by 炼铜术士 ↓\n`https://drive.google.com/drive/folders/1y3MALY5qZ8ksGuXbS0jr5cvyTEyaUbXO`\n\nGD by Jonathan ↓\n`https://drive.google.com/drive/folders/1OWwzaL2RTrORQ87UOEGLeDopRHQkNNT_`\n\nOD by Jonathan ↓\n`https://dannylivestanford-my.sharepoint.com/:f:/g/personal/shea_chloe_alumni_stanford_edu/EpsNYAx1aDxMv07BduEPAHQBkcVZZ6jGzOOsJwlUy4ssdw?e=G9VPG2`\n\n阿里云盘 by Ecisrt ↓\n`https://www.aliyundrive.com/s/4xATgZRwnzZ`\n\n\n","source":"_posts/novelai.md","raw":"---\ntitle: AI智能绘图novelai\ndate: 2022-10-09 12:16:14\ntags: Novelai\ncategories: \n    - 学习\n---\n\n\n因为前两天看到`loc`上有人提问这个软件，就去搜索了解。\n意外发现该软件竟然被强制开源了。原因是有人认为制作团队盗用画师免费提供的图用于训练模型算法数据库，却反过来收费提供服务的行为极其不道德，所以，被看不惯的大神们点艹了。\n恭喜这位`MJJ`成功省下了一大笔开销`@yushui`\n\n首先放链接，据悉其中包括应用程序和成品模型数据库。\n`magnet:?xt=urn:btih:5bde442da86265b670a3e5ea3163afad2c6f8ecc`\n复制代码\n百度云、迅雷网盘和夸克网盘目前已可离线\n\n因为`NovelAI`是基于开源软件`Stable Diffusion`制作而来，所以想复制一个“世界一流绘图AI”，理论上只需按照`Stable Diffusion`的搭建教程走，最后导入`NAI`的数据库即可。\n\n`Stable Diffusion`部署教程网上很多，这里放几个简单示例：\n```\nhttps://bbs.saraba1st.com/2b/thread-2098295-1-1.html\nhttps://zhuanlan.zhihu.com/p/561546984\nhttps://www.bilibili.com/read/cv18292916\nhttps://boards.4channel.org/g/thread/89011971\n```\n\n如遇问题请善用`谷歌`、`必应`、`百度`、`Yandex`等搜索引擎，或是加入相应社区进行讨论。\n\n\n欢迎感兴趣的`MJJ`们来搞，众人拾柴火焰高。\n\n```\n另外国外某论坛也有人指出：“因代码来源尚不明朗，故存在安全风险，在确认文件安全之前，最好不要在生产环境或主要使用的计算机上调用模型”。\n```\n\n注：因为AI、大数据、知识图谱等项目无一例外都对GPU的要求极其苛刻，请参考官方文档及其他网友反馈，自行斟酌自己的运行环境是否达标。\n\n\n\n\n更新网盘分流，感谢上传的热心群众\nGD by 炼铜术士 ↓\n`https://drive.google.com/drive/folders/1y3MALY5qZ8ksGuXbS0jr5cvyTEyaUbXO`\n\nGD by Jonathan ↓\n`https://drive.google.com/drive/folders/1OWwzaL2RTrORQ87UOEGLeDopRHQkNNT_`\n\nOD by Jonathan ↓\n`https://dannylivestanford-my.sharepoint.com/:f:/g/personal/shea_chloe_alumni_stanford_edu/EpsNYAx1aDxMv07BduEPAHQBkcVZZ6jGzOOsJwlUy4ssdw?e=G9VPG2`\n\n阿里云盘 by Ecisrt ↓\n`https://www.aliyundrive.com/s/4xATgZRwnzZ`\n\n\n","slug":"novelai","published":1,"updated":"2023-07-23T14:19:12.858Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkjdd1ck002q98aj16pgge9w","content":"<p>因为前两天看到<code>loc</code>上有人提问这个软件，就去搜索了解。<br>意外发现该软件竟然被强制开源了。原因是有人认为制作团队盗用画师免费提供的图用于训练模型算法数据库，却反过来收费提供服务的行为极其不道德，所以，被看不惯的大神们点艹了。<br>恭喜这位<code>MJJ</code>成功省下了一大笔开销<code>@yushui</code></p>\n<p>首先放链接，据悉其中包括应用程序和成品模型数据库。<br><code>magnet:?xt=urn:btih:5bde442da86265b670a3e5ea3163afad2c6f8ecc</code><br>复制代码<br>百度云、迅雷网盘和夸克网盘目前已可离线</p>\n<p>因为<code>NovelAI</code>是基于开源软件<code>Stable Diffusion</code>制作而来，所以想复制一个“世界一流绘图AI”，理论上只需按照<code>Stable Diffusion</code>的搭建教程走，最后导入<code>NAI</code>的数据库即可。</p>\n<p><code>Stable Diffusion</code>部署教程网上很多，这里放几个简单示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://bbs.saraba1st.com/2b/thread-2098295-1-1.html</span><br><span class=\"line\">https://zhuanlan.zhihu.com/p/561546984</span><br><span class=\"line\">https://www.bilibili.com/read/cv18292916</span><br><span class=\"line\">https://boards.4channel.org/g/thread/89011971</span><br></pre></td></tr></table></figure>\n\n<p>如遇问题请善用<code>谷歌</code>、<code>必应</code>、<code>百度</code>、<code>Yandex</code>等搜索引擎，或是加入相应社区进行讨论。</p>\n<p>欢迎感兴趣的<code>MJJ</code>们来搞，众人拾柴火焰高。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">另外国外某论坛也有人指出：“因代码来源尚不明朗，故存在安全风险，在确认文件安全之前，最好不要在生产环境或主要使用的计算机上调用模型”。</span><br></pre></td></tr></table></figure>\n\n<p>注：因为AI、大数据、知识图谱等项目无一例外都对GPU的要求极其苛刻，请参考官方文档及其他网友反馈，自行斟酌自己的运行环境是否达标。</p>\n<p>更新网盘分流，感谢上传的热心群众<br>GD by 炼铜术士 ↓<br><code>https://drive.google.com/drive/folders/1y3MALY5qZ8ksGuXbS0jr5cvyTEyaUbXO</code></p>\n<p>GD by Jonathan ↓<br><code>https://drive.google.com/drive/folders/1OWwzaL2RTrORQ87UOEGLeDopRHQkNNT_</code></p>\n<p>OD by Jonathan ↓<br><code>https://dannylivestanford-my.sharepoint.com/:f:/g/personal/shea_chloe_alumni_stanford_edu/EpsNYAx1aDxMv07BduEPAHQBkcVZZ6jGzOOsJwlUy4ssdw?e=G9VPG2</code></p>\n<p>阿里云盘 by Ecisrt ↓<br><code>https://www.aliyundrive.com/s/4xATgZRwnzZ</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p>因为前两天看到<code>loc</code>上有人提问这个软件，就去搜索了解。<br>意外发现该软件竟然被强制开源了。原因是有人认为制作团队盗用画师免费提供的图用于训练模型算法数据库，却反过来收费提供服务的行为极其不道德，所以，被看不惯的大神们点艹了。<br>恭喜这位<code>MJJ</code>成功省下了一大笔开销<code>@yushui</code></p>\n<p>首先放链接，据悉其中包括应用程序和成品模型数据库。<br><code>magnet:?xt=urn:btih:5bde442da86265b670a3e5ea3163afad2c6f8ecc</code><br>复制代码<br>百度云、迅雷网盘和夸克网盘目前已可离线</p>\n<p>因为<code>NovelAI</code>是基于开源软件<code>Stable Diffusion</code>制作而来，所以想复制一个“世界一流绘图AI”，理论上只需按照<code>Stable Diffusion</code>的搭建教程走，最后导入<code>NAI</code>的数据库即可。</p>\n<p><code>Stable Diffusion</code>部署教程网上很多，这里放几个简单示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://bbs.saraba1st.com/2b/thread-2098295-1-1.html</span><br><span class=\"line\">https://zhuanlan.zhihu.com/p/561546984</span><br><span class=\"line\">https://www.bilibili.com/read/cv18292916</span><br><span class=\"line\">https://boards.4channel.org/g/thread/89011971</span><br></pre></td></tr></table></figure>\n\n<p>如遇问题请善用<code>谷歌</code>、<code>必应</code>、<code>百度</code>、<code>Yandex</code>等搜索引擎，或是加入相应社区进行讨论。</p>\n<p>欢迎感兴趣的<code>MJJ</code>们来搞，众人拾柴火焰高。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">另外国外某论坛也有人指出：“因代码来源尚不明朗，故存在安全风险，在确认文件安全之前，最好不要在生产环境或主要使用的计算机上调用模型”。</span><br></pre></td></tr></table></figure>\n\n<p>注：因为AI、大数据、知识图谱等项目无一例外都对GPU的要求极其苛刻，请参考官方文档及其他网友反馈，自行斟酌自己的运行环境是否达标。</p>\n<p>更新网盘分流，感谢上传的热心群众<br>GD by 炼铜术士 ↓<br><code>https://drive.google.com/drive/folders/1y3MALY5qZ8ksGuXbS0jr5cvyTEyaUbXO</code></p>\n<p>GD by Jonathan ↓<br><code>https://drive.google.com/drive/folders/1OWwzaL2RTrORQ87UOEGLeDopRHQkNNT_</code></p>\n<p>OD by Jonathan ↓<br><code>https://dannylivestanford-my.sharepoint.com/:f:/g/personal/shea_chloe_alumni_stanford_edu/EpsNYAx1aDxMv07BduEPAHQBkcVZZ6jGzOOsJwlUy4ssdw?e=G9VPG2</code></p>\n<p>阿里云盘 by Ecisrt ↓<br><code>https://www.aliyundrive.com/s/4xATgZRwnzZ</code></p>\n"},{"title":"pi-bluetooth","mp3":"http://domain.com/awesome.mp3","cover":"http://domain.com/awesome.jpg","date":"2022-11-26T07:53:22.000Z","_content":"\n\n","source":"_posts/pi-bluetooth.md","raw":"---\ntitle: pi-bluetooth\nmp3: http://domain.com/awesome.mp3\ncover: http://domain.com/awesome.jpg\ndate: 2022-11-26 15:53:22\ncategories:\ntags:\n---\n\n\n","slug":"pi-bluetooth","published":1,"updated":"2023-07-23T14:19:11.037Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkjdd1cm002t98aj0igx5uba","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"pi","date":"2022-11-23T11:58:33.000Z","_content":"","source":"_posts/pi.md","raw":"---\ntitle: pi\ndate: 2022-11-23 19:58:33\ntags:\n---\n","slug":"pi","published":1,"updated":"2023-07-23T14:19:12.445Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkjdd1co002v98aj8wqj713i","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"python发送邮件","date":"2022-10-14T09:41:47.000Z","_content":"\n\n\n```\n#!/usr/bin/python3\n#-*- coding: utf-8 -*-            # 使其支持中文字符\n\nimport smtplib                    # 调用模块\nfrom email.header import Header\nfrom email.mime.text import MIMEText\n\n#第三方SMTP服务\nhost = \"smtp.163.com\"          # 邮箱服务host = \"smtp.yeah.net\"\nport = 465                     # 端口号port = 465\nuser = \"xxxxxxxx@163.com\"      # 用户名user = \"XXXXXXXXXX@yeah.net\"\npassword = \"xxxxxxxxxxx\"       # 授权码\nsender = \"xxxxxxxxxxxx@163.com\"   # 发件人\nreceivers = [\"xxxxxx@163.com\",'xxxxxx@163.com','xxxxxx@163.com',\"xxxxxx@163.com\",\"xxxxxx@163.com\",\"xxxxxx@163.com\"]  # 收件人，可以群发邮件，多个用户名就以列表形式展现                                                      \n\ncontent = '''                    \n    这是一封测试邮件\n    内容随你喜欢\n    随便写\n'''                         # 邮件内容\nsubject = '测试邮件'         # 邮件主题\n\n#发送邮件\ndef send_email():\n    msg = MIMEText(content+'\\n send_email' ,'plain' ,'utf-8')\n    msg['From'] = user\n    msg['To'] = ','.join(receivers)        # 群发邮件形式，如果单独发送邮件直接调用receivers即可\n    msg['Subject'] = subject+' send_email'\n\n\n    try:\n        #验证\n        smtpObj = smtplib.SMTP_SSL(host,port)  # 启用SSL发短信\n        smtpObj.login(user,password)           # 用户名密码验证\n        smtpObj.sendmail(sender,receivers,msg.as_string())   # 发送\n        print(\"邮件发送成功\")\n    except smtplib.SMTPException as e:\n        print(e)\n\nif __name__ == '__main__':\n    send_email()\n\n```\n\n\n\n\n\n\n\n\n\n\n提前准备，需要设置邮箱服务器\n\n\n发送邮件代码块如下\n\n#coding:utf-8\n\n#发送邮件的\nimport smtplib\nfrom email.mime.text import MIMEText\nclass SendEmail:\n    global send_user\n    global email_host\n    global password\n    email_host=\"smtp.qq.com\"\n    send_user=\"xxx@qq.com\"\n    password=\"xxx\"\n    #接受人，主题，内容\n    def send_mail(self,user_list,sub,content):\n        #发件者\n        user=\"cherish\"+\"<\"+send_user+\">\"\n        #内容、格式、编码\n        message=MIMEText(content,_subtype='plain',_charset='utf-8')\n        #主题\n        message['Subject']=sub\n        #发送人\n        message['From']=user\n        #接受人\n        message['To']=\";\".join(user_list)\n        #服务连接\n        server=smtplib.SMTP()\n        server.connect(email_host)\n        #邮件登录\n        server.login(send_user,password)\n        #发送邮件内容\n        server.sendmail(user,user_list,message.as_string())\n        #关掉连接\n        server.close()\n    def send_main(self,pass_list,fail_list):\n        pass_num=float(len(pass_list))\n        fail_num=float(len(fail_list))\n        count_num=pass_num+fail_num\n        #取小数后2位,通过率\n        pass_result=\"%.2f%%\"%(pass_num/count_num*100)\n        fail_result = \"%.2f%%\"%(fail_num / count_num * 100)\n        user_list = ['xx@qq.com','xx@qq.com']\n        sub = \"接口自动化测试报告\"\n        content=\"这次一共测试%s个接口,通过个数为%s,失败个数为%s,通过率为%s,失败率为%s\"%(count_num,pass_num,fail_num,pass_result,fail_result)\n        self.send_mail(user_list,sub,content)\n\nif __name__ == '__main__':\n    sen=SendEmail()\n    sen.send_main([1,2,3,4],[5])\n\n\n测试结果：\n\n测试用例执行代码块\n\n#coding:utf-8\nfrom base.runmethod import RunMethod\nfrom data.get_data import GetData\nfrom data.depend_data import DependData\nfrom util.operation_json import OperationJson\nfrom util.common_util import CommonUtil\nimport operator\nimport json\nfrom logs.get_log import get_log\nfrom util.send_email import SendEmail\nimport getcwd\nclass RunTest:\n\tdef __init__(self):\n\t\tself.path = getcwd.get_cwd()\n\t\tself.log_msg = get_log(self.path + '/data/get_data.py')\n\t\tself.run_method = RunMethod()\n\t\tself.data = GetData()\n\t\tself.com_util = CommonUtil()\n\t\tself.op_json = OperationJson('../dataconfig/rigang_data/header_value.json')\n\t\tself.json_path='../dataconfig/rigang_data/expect_monitor_add.json'\n\n\t#程序执行的\n\tdef go_on_run(self):\n\t\tres = None\n\t\tpass_count = []\n\t\tfail_count = []\n\t\t#10  0,1,2,3\n\t\t#用例行数\n\t\trows_count = self.data.get_case_lines()\n\t\t#遍历所有用例进行测试\n\t\tfor i in range(1,rows_count):\n\t\t\tis_run = self.data.get_is_run(i)\n\t\t\tif is_run:\n\t\t\t\tcaseid=self.data.get_caseid(i)\n\t\t\t\turl = self.data.get_request_url(i)\n\t\t\t\tmethod = self.data.get_request_method(i)\n\t\t\t\trequest_data = json.dumps(self.data.get_data_for_json(i))\n\t\t\t\texpect = self.data.get_expect_data_for_json(i,self.json_path)\n\t\t\t\theader = self.data.is_header(i)\n\t\t\t\tdepend_case=self.data.is_depend(i)\n\t\t\t\t#判断是否有数据依赖\n\t\t\t\tif depend_case!=None:\n\t\t\t\t\tself.depend_data = DependData(caseid)\n\t\t\t\t\t#获取依赖的响应数据\n\t\t\t\t\tdepend_response_data=self.depend_data.get_data_for_key(i)\n\t\t\t\t\t#获取依赖字段\n\t\t\t\t\tdepend_key=self.data.get_depend_field(i)\n\t\t\t\t\t#请求数据的依赖字段重新赋值之前的依赖数据\n\t\t\t\t\trequest_data[depend_key]=depend_response_data\n\t\t\t\t# res = self.run_method.run_main(method, url, request_data)\n\n\t\t\t\tif header == '5':\n\t\t\t\t\t#根据关键字test获取header信息\n\t\t\t\t\theader = self.op_json.get_data('monitor_add')\n\t\t\t\t\tres = self.run_method.run_main(method,url,request_data,header)\n\n\t\t\t\t\tself.log_msg.info('该条用例header内容是：%s' % header)\n\t\t\t\t\t#将返回结果写入json文件\n\t\t\t\t\tresponse_dato_tojson=self.op_json.write_data(res,'../dataconfig/rigang_data/actual_monitor_add.json')\n\t\t\t\telse:\n\t\t\t\t\tres = self.run_method.run_main(method,url,request_data)\n\t\t\t\t\tresponse_dato_tojson=self.op_json.write_data(res, '../dataconfig/rigang_data/actual_monitor_add.json')\n\t\t\t\tread_json_data=self.op_json.read_data('../dataconfig/rigang_data/actual_monitor_add.json')\n\t\t\t\tself.log_msg.info('写入json的返回结果是：%s' % read_json_data)\n\n\t\t\t\tif operator.eq(expect,res) == True:\n\t\t\t\t\tself.data.write_result(i,'pass')\n\t\t\t\t\t#统计通过个数\n\t\t\t\t\tpass_count.append(i)\n\t\t\t\t\tself.log_msg.info('用例ID为%s-------------------测试通过\\n'%caseid )\n\t\t\t\telse:\n\t\t\t\t\tres = json.dumps(res)\n\t\t\t\t\tself.data.write_result(i,res)\n\t\t\t\t\t#统计失败个数\n\t\t\t\t\tfail_count.append(i)\n\t\t\t\t\tself.log_msg.info('用例ID为%s-------------------测试失败\\n' % caseid)\n\n\t\tsend_email=SendEmail()\n\t\tsend_email.send_main(pass_count,fail_count)\n\nif __name__ == '__main__':\n\trun = RunTest()\n\trun.go_on_run()\n\n\n\n\n测试结果\n\n","source":"_posts/python-IMAP.md","raw":"---\ntitle: python发送邮件\ndate: 2022-10-14 17:41:47\ntags: python\ncategories: 学习\n---\n\n\n\n```\n#!/usr/bin/python3\n#-*- coding: utf-8 -*-            # 使其支持中文字符\n\nimport smtplib                    # 调用模块\nfrom email.header import Header\nfrom email.mime.text import MIMEText\n\n#第三方SMTP服务\nhost = \"smtp.163.com\"          # 邮箱服务host = \"smtp.yeah.net\"\nport = 465                     # 端口号port = 465\nuser = \"xxxxxxxx@163.com\"      # 用户名user = \"XXXXXXXXXX@yeah.net\"\npassword = \"xxxxxxxxxxx\"       # 授权码\nsender = \"xxxxxxxxxxxx@163.com\"   # 发件人\nreceivers = [\"xxxxxx@163.com\",'xxxxxx@163.com','xxxxxx@163.com',\"xxxxxx@163.com\",\"xxxxxx@163.com\",\"xxxxxx@163.com\"]  # 收件人，可以群发邮件，多个用户名就以列表形式展现                                                      \n\ncontent = '''                    \n    这是一封测试邮件\n    内容随你喜欢\n    随便写\n'''                         # 邮件内容\nsubject = '测试邮件'         # 邮件主题\n\n#发送邮件\ndef send_email():\n    msg = MIMEText(content+'\\n send_email' ,'plain' ,'utf-8')\n    msg['From'] = user\n    msg['To'] = ','.join(receivers)        # 群发邮件形式，如果单独发送邮件直接调用receivers即可\n    msg['Subject'] = subject+' send_email'\n\n\n    try:\n        #验证\n        smtpObj = smtplib.SMTP_SSL(host,port)  # 启用SSL发短信\n        smtpObj.login(user,password)           # 用户名密码验证\n        smtpObj.sendmail(sender,receivers,msg.as_string())   # 发送\n        print(\"邮件发送成功\")\n    except smtplib.SMTPException as e:\n        print(e)\n\nif __name__ == '__main__':\n    send_email()\n\n```\n\n\n\n\n\n\n\n\n\n\n提前准备，需要设置邮箱服务器\n\n\n发送邮件代码块如下\n\n#coding:utf-8\n\n#发送邮件的\nimport smtplib\nfrom email.mime.text import MIMEText\nclass SendEmail:\n    global send_user\n    global email_host\n    global password\n    email_host=\"smtp.qq.com\"\n    send_user=\"xxx@qq.com\"\n    password=\"xxx\"\n    #接受人，主题，内容\n    def send_mail(self,user_list,sub,content):\n        #发件者\n        user=\"cherish\"+\"<\"+send_user+\">\"\n        #内容、格式、编码\n        message=MIMEText(content,_subtype='plain',_charset='utf-8')\n        #主题\n        message['Subject']=sub\n        #发送人\n        message['From']=user\n        #接受人\n        message['To']=\";\".join(user_list)\n        #服务连接\n        server=smtplib.SMTP()\n        server.connect(email_host)\n        #邮件登录\n        server.login(send_user,password)\n        #发送邮件内容\n        server.sendmail(user,user_list,message.as_string())\n        #关掉连接\n        server.close()\n    def send_main(self,pass_list,fail_list):\n        pass_num=float(len(pass_list))\n        fail_num=float(len(fail_list))\n        count_num=pass_num+fail_num\n        #取小数后2位,通过率\n        pass_result=\"%.2f%%\"%(pass_num/count_num*100)\n        fail_result = \"%.2f%%\"%(fail_num / count_num * 100)\n        user_list = ['xx@qq.com','xx@qq.com']\n        sub = \"接口自动化测试报告\"\n        content=\"这次一共测试%s个接口,通过个数为%s,失败个数为%s,通过率为%s,失败率为%s\"%(count_num,pass_num,fail_num,pass_result,fail_result)\n        self.send_mail(user_list,sub,content)\n\nif __name__ == '__main__':\n    sen=SendEmail()\n    sen.send_main([1,2,3,4],[5])\n\n\n测试结果：\n\n测试用例执行代码块\n\n#coding:utf-8\nfrom base.runmethod import RunMethod\nfrom data.get_data import GetData\nfrom data.depend_data import DependData\nfrom util.operation_json import OperationJson\nfrom util.common_util import CommonUtil\nimport operator\nimport json\nfrom logs.get_log import get_log\nfrom util.send_email import SendEmail\nimport getcwd\nclass RunTest:\n\tdef __init__(self):\n\t\tself.path = getcwd.get_cwd()\n\t\tself.log_msg = get_log(self.path + '/data/get_data.py')\n\t\tself.run_method = RunMethod()\n\t\tself.data = GetData()\n\t\tself.com_util = CommonUtil()\n\t\tself.op_json = OperationJson('../dataconfig/rigang_data/header_value.json')\n\t\tself.json_path='../dataconfig/rigang_data/expect_monitor_add.json'\n\n\t#程序执行的\n\tdef go_on_run(self):\n\t\tres = None\n\t\tpass_count = []\n\t\tfail_count = []\n\t\t#10  0,1,2,3\n\t\t#用例行数\n\t\trows_count = self.data.get_case_lines()\n\t\t#遍历所有用例进行测试\n\t\tfor i in range(1,rows_count):\n\t\t\tis_run = self.data.get_is_run(i)\n\t\t\tif is_run:\n\t\t\t\tcaseid=self.data.get_caseid(i)\n\t\t\t\turl = self.data.get_request_url(i)\n\t\t\t\tmethod = self.data.get_request_method(i)\n\t\t\t\trequest_data = json.dumps(self.data.get_data_for_json(i))\n\t\t\t\texpect = self.data.get_expect_data_for_json(i,self.json_path)\n\t\t\t\theader = self.data.is_header(i)\n\t\t\t\tdepend_case=self.data.is_depend(i)\n\t\t\t\t#判断是否有数据依赖\n\t\t\t\tif depend_case!=None:\n\t\t\t\t\tself.depend_data = DependData(caseid)\n\t\t\t\t\t#获取依赖的响应数据\n\t\t\t\t\tdepend_response_data=self.depend_data.get_data_for_key(i)\n\t\t\t\t\t#获取依赖字段\n\t\t\t\t\tdepend_key=self.data.get_depend_field(i)\n\t\t\t\t\t#请求数据的依赖字段重新赋值之前的依赖数据\n\t\t\t\t\trequest_data[depend_key]=depend_response_data\n\t\t\t\t# res = self.run_method.run_main(method, url, request_data)\n\n\t\t\t\tif header == '5':\n\t\t\t\t\t#根据关键字test获取header信息\n\t\t\t\t\theader = self.op_json.get_data('monitor_add')\n\t\t\t\t\tres = self.run_method.run_main(method,url,request_data,header)\n\n\t\t\t\t\tself.log_msg.info('该条用例header内容是：%s' % header)\n\t\t\t\t\t#将返回结果写入json文件\n\t\t\t\t\tresponse_dato_tojson=self.op_json.write_data(res,'../dataconfig/rigang_data/actual_monitor_add.json')\n\t\t\t\telse:\n\t\t\t\t\tres = self.run_method.run_main(method,url,request_data)\n\t\t\t\t\tresponse_dato_tojson=self.op_json.write_data(res, '../dataconfig/rigang_data/actual_monitor_add.json')\n\t\t\t\tread_json_data=self.op_json.read_data('../dataconfig/rigang_data/actual_monitor_add.json')\n\t\t\t\tself.log_msg.info('写入json的返回结果是：%s' % read_json_data)\n\n\t\t\t\tif operator.eq(expect,res) == True:\n\t\t\t\t\tself.data.write_result(i,'pass')\n\t\t\t\t\t#统计通过个数\n\t\t\t\t\tpass_count.append(i)\n\t\t\t\t\tself.log_msg.info('用例ID为%s-------------------测试通过\\n'%caseid )\n\t\t\t\telse:\n\t\t\t\t\tres = json.dumps(res)\n\t\t\t\t\tself.data.write_result(i,res)\n\t\t\t\t\t#统计失败个数\n\t\t\t\t\tfail_count.append(i)\n\t\t\t\t\tself.log_msg.info('用例ID为%s-------------------测试失败\\n' % caseid)\n\n\t\tsend_email=SendEmail()\n\t\tsend_email.send_main(pass_count,fail_count)\n\nif __name__ == '__main__':\n\trun = RunTest()\n\trun.go_on_run()\n\n\n\n\n测试结果\n\n","slug":"python-IMAP","published":1,"updated":"2023-07-23T14:19:14.086Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkjdd1cp002x98aj0slf30kp","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python3</span><br><span class=\"line\">#-*- coding: utf-8 -*-            # 使其支持中文字符</span><br><span class=\"line\"></span><br><span class=\"line\">import smtplib                    # 调用模块</span><br><span class=\"line\">from email.header import Header</span><br><span class=\"line\">from email.mime.text import MIMEText</span><br><span class=\"line\"></span><br><span class=\"line\">#第三方SMTP服务</span><br><span class=\"line\">host = &quot;smtp.163.com&quot;          # 邮箱服务host = &quot;smtp.yeah.net&quot;</span><br><span class=\"line\">port = 465                     # 端口号port = 465</span><br><span class=\"line\">user = &quot;xxxxxxxx@163.com&quot;      # 用户名user = &quot;XXXXXXXXXX@yeah.net&quot;</span><br><span class=\"line\">password = &quot;xxxxxxxxxxx&quot;       # 授权码</span><br><span class=\"line\">sender = &quot;xxxxxxxxxxxx@163.com&quot;   # 发件人</span><br><span class=\"line\">receivers = [&quot;xxxxxx@163.com&quot;,&#x27;xxxxxx@163.com&#x27;,&#x27;xxxxxx@163.com&#x27;,&quot;xxxxxx@163.com&quot;,&quot;xxxxxx@163.com&quot;,&quot;xxxxxx@163.com&quot;]  # 收件人，可以群发邮件，多个用户名就以列表形式展现                                                      </span><br><span class=\"line\"></span><br><span class=\"line\">content = &#x27;&#x27;&#x27;                    </span><br><span class=\"line\">    这是一封测试邮件</span><br><span class=\"line\">    内容随你喜欢</span><br><span class=\"line\">    随便写</span><br><span class=\"line\">&#x27;&#x27;&#x27;                         # 邮件内容</span><br><span class=\"line\">subject = &#x27;测试邮件&#x27;         # 邮件主题</span><br><span class=\"line\"></span><br><span class=\"line\">#发送邮件</span><br><span class=\"line\">def send_email():</span><br><span class=\"line\">    msg = MIMEText(content+&#x27;\\n send_email&#x27; ,&#x27;plain&#x27; ,&#x27;utf-8&#x27;)</span><br><span class=\"line\">    msg[&#x27;From&#x27;] = user</span><br><span class=\"line\">    msg[&#x27;To&#x27;] = &#x27;,&#x27;.join(receivers)        # 群发邮件形式，如果单独发送邮件直接调用receivers即可</span><br><span class=\"line\">    msg[&#x27;Subject&#x27;] = subject+&#x27; send_email&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    try:</span><br><span class=\"line\">        #验证</span><br><span class=\"line\">        smtpObj = smtplib.SMTP_SSL(host,port)  # 启用SSL发短信</span><br><span class=\"line\">        smtpObj.login(user,password)           # 用户名密码验证</span><br><span class=\"line\">        smtpObj.sendmail(sender,receivers,msg.as_string())   # 发送</span><br><span class=\"line\">        print(&quot;邮件发送成功&quot;)</span><br><span class=\"line\">    except smtplib.SMTPException as e:</span><br><span class=\"line\">        print(e)</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &#x27;__main__&#x27;:</span><br><span class=\"line\">    send_email()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n<p>提前准备，需要设置邮箱服务器</p>\n<p>发送邮件代码块如下</p>\n<p>#coding:utf-8</p>\n<p>#发送邮件的<br>import smtplib<br>from email.mime.text import MIMEText<br>class SendEmail:<br>    global send_user<br>    global email_host<br>    global password<br>    email_host&#x3D;”smtp.qq.com”<br>    send_user&#x3D;”<a href=\"mailto:&#120;&#120;&#x78;&#64;&#113;&#113;&#46;&#x63;&#x6f;&#109;\">&#120;&#120;&#x78;&#64;&#113;&#113;&#46;&#x63;&#x6f;&#109;</a>“<br>    password&#x3D;”xxx”<br>    #接受人，主题，内容<br>    def send_mail(self,user_list,sub,content):<br>        #发件者<br>        user&#x3D;”cherish”+”&lt;”+send_user+”&gt;”<br>        #内容、格式、编码<br>        message&#x3D;MIMEText(content,_subtype&#x3D;’plain’,_charset&#x3D;’utf-8’)<br>        #主题<br>        message[‘Subject’]&#x3D;sub<br>        #发送人<br>        message[‘From’]&#x3D;user<br>        #接受人<br>        message[‘To’]&#x3D;”;”.join(user_list)<br>        #服务连接<br>        server&#x3D;smtplib.SMTP()<br>        server.connect(email_host)<br>        #邮件登录<br>        server.login(send_user,password)<br>        #发送邮件内容<br>        server.sendmail(user,user_list,message.as_string())<br>        #关掉连接<br>        server.close()<br>    def send_main(self,pass_list,fail_list):<br>        pass_num&#x3D;float(len(pass_list))<br>        fail_num&#x3D;float(len(fail_list))<br>        count_num&#x3D;pass_num+fail_num<br>        #取小数后2位,通过率<br>        pass_result&#x3D;”%.2f%%”%(pass_num&#x2F;count_num*100)<br>        fail_result &#x3D; “%.2f%%”%(fail_num &#x2F; count_num * 100)<br>        user_list &#x3D; [‘<a href=\"mailto:&#x78;&#120;&#x40;&#x71;&#113;&#x2e;&#x63;&#111;&#109;\">&#x78;&#120;&#x40;&#x71;&#113;&#x2e;&#x63;&#111;&#109;</a>‘,‘<a href=\"mailto:&#x78;&#x78;&#64;&#x71;&#113;&#x2e;&#99;&#x6f;&#x6d;\">&#x78;&#x78;&#64;&#x71;&#113;&#x2e;&#99;&#x6f;&#x6d;</a>‘]<br>        sub &#x3D; “接口自动化测试报告”<br>        content&#x3D;”这次一共测试%s个接口,通过个数为%s,失败个数为%s,通过率为%s,失败率为%s”%(count_num,pass_num,fail_num,pass_result,fail_result)<br>        self.send_mail(user_list,sub,content)</p>\n<p>if <strong>name</strong> &#x3D;&#x3D; ‘<strong>main</strong>‘:<br>    sen&#x3D;SendEmail()<br>    sen.send_main([1,2,3,4],[5])</p>\n<p>测试结果：</p>\n<p>测试用例执行代码块</p>\n<p>#coding:utf-8<br>from base.runmethod import RunMethod<br>from data.get_data import GetData<br>from data.depend_data import DependData<br>from util.operation_json import OperationJson<br>from util.common_util import CommonUtil<br>import operator<br>import json<br>from logs.get_log import get_log<br>from util.send_email import SendEmail<br>import getcwd<br>class RunTest:<br>    def <strong>init</strong>(self):<br>        self.path &#x3D; getcwd.get_cwd()<br>        self.log_msg &#x3D; get_log(self.path + ‘&#x2F;data&#x2F;get_data.py’)<br>        self.run_method &#x3D; RunMethod()<br>        self.data &#x3D; GetData()<br>        self.com_util &#x3D; CommonUtil()<br>        self.op_json &#x3D; OperationJson(‘..&#x2F;dataconfig&#x2F;rigang_data&#x2F;header_value.json’)<br>        self.json_path&#x3D;’..&#x2F;dataconfig&#x2F;rigang_data&#x2F;expect_monitor_add.json’</p>\n<pre><code>#程序执行的\ndef go_on_run(self):\n    res = None\n    pass_count = []\n    fail_count = []\n    #10  0,1,2,3\n    #用例行数\n    rows_count = self.data.get_case_lines()\n    #遍历所有用例进行测试\n    for i in range(1,rows_count):\n        is_run = self.data.get_is_run(i)\n        if is_run:\n            caseid=self.data.get_caseid(i)\n            url = self.data.get_request_url(i)\n            method = self.data.get_request_method(i)\n            request_data = json.dumps(self.data.get_data_for_json(i))\n            expect = self.data.get_expect_data_for_json(i,self.json_path)\n            header = self.data.is_header(i)\n            depend_case=self.data.is_depend(i)\n            #判断是否有数据依赖\n            if depend_case!=None:\n                self.depend_data = DependData(caseid)\n                #获取依赖的响应数据\n                depend_response_data=self.depend_data.get_data_for_key(i)\n                #获取依赖字段\n                depend_key=self.data.get_depend_field(i)\n                #请求数据的依赖字段重新赋值之前的依赖数据\n                request_data[depend_key]=depend_response_data\n            # res = self.run_method.run_main(method, url, request_data)\n\n            if header == &#39;5&#39;:\n                #根据关键字test获取header信息\n                header = self.op_json.get_data(&#39;monitor_add&#39;)\n                res = self.run_method.run_main(method,url,request_data,header)\n\n                self.log_msg.info(&#39;该条用例header内容是：%s&#39; % header)\n                #将返回结果写入json文件\n                response_dato_tojson=self.op_json.write_data(res,&#39;../dataconfig/rigang_data/actual_monitor_add.json&#39;)\n            else:\n                res = self.run_method.run_main(method,url,request_data)\n                response_dato_tojson=self.op_json.write_data(res, &#39;../dataconfig/rigang_data/actual_monitor_add.json&#39;)\n            read_json_data=self.op_json.read_data(&#39;../dataconfig/rigang_data/actual_monitor_add.json&#39;)\n            self.log_msg.info(&#39;写入json的返回结果是：%s&#39; % read_json_data)\n\n            if operator.eq(expect,res) == True:\n                self.data.write_result(i,&#39;pass&#39;)\n                #统计通过个数\n                pass_count.append(i)\n                self.log_msg.info(&#39;用例ID为%s-------------------测试通过\\n&#39;%caseid )\n            else:\n                res = json.dumps(res)\n                self.data.write_result(i,res)\n                #统计失败个数\n                fail_count.append(i)\n                self.log_msg.info(&#39;用例ID为%s-------------------测试失败\\n&#39; % caseid)\n\n    send_email=SendEmail()\n    send_email.send_main(pass_count,fail_count)\n</code></pre>\n<p>if <strong>name</strong> &#x3D;&#x3D; ‘<strong>main</strong>‘:<br>    run &#x3D; RunTest()<br>    run.go_on_run()</p>\n<p>测试结果</p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python3</span><br><span class=\"line\">#-*- coding: utf-8 -*-            # 使其支持中文字符</span><br><span class=\"line\"></span><br><span class=\"line\">import smtplib                    # 调用模块</span><br><span class=\"line\">from email.header import Header</span><br><span class=\"line\">from email.mime.text import MIMEText</span><br><span class=\"line\"></span><br><span class=\"line\">#第三方SMTP服务</span><br><span class=\"line\">host = &quot;smtp.163.com&quot;          # 邮箱服务host = &quot;smtp.yeah.net&quot;</span><br><span class=\"line\">port = 465                     # 端口号port = 465</span><br><span class=\"line\">user = &quot;xxxxxxxx@163.com&quot;      # 用户名user = &quot;XXXXXXXXXX@yeah.net&quot;</span><br><span class=\"line\">password = &quot;xxxxxxxxxxx&quot;       # 授权码</span><br><span class=\"line\">sender = &quot;xxxxxxxxxxxx@163.com&quot;   # 发件人</span><br><span class=\"line\">receivers = [&quot;xxxxxx@163.com&quot;,&#x27;xxxxxx@163.com&#x27;,&#x27;xxxxxx@163.com&#x27;,&quot;xxxxxx@163.com&quot;,&quot;xxxxxx@163.com&quot;,&quot;xxxxxx@163.com&quot;]  # 收件人，可以群发邮件，多个用户名就以列表形式展现                                                      </span><br><span class=\"line\"></span><br><span class=\"line\">content = &#x27;&#x27;&#x27;                    </span><br><span class=\"line\">    这是一封测试邮件</span><br><span class=\"line\">    内容随你喜欢</span><br><span class=\"line\">    随便写</span><br><span class=\"line\">&#x27;&#x27;&#x27;                         # 邮件内容</span><br><span class=\"line\">subject = &#x27;测试邮件&#x27;         # 邮件主题</span><br><span class=\"line\"></span><br><span class=\"line\">#发送邮件</span><br><span class=\"line\">def send_email():</span><br><span class=\"line\">    msg = MIMEText(content+&#x27;\\n send_email&#x27; ,&#x27;plain&#x27; ,&#x27;utf-8&#x27;)</span><br><span class=\"line\">    msg[&#x27;From&#x27;] = user</span><br><span class=\"line\">    msg[&#x27;To&#x27;] = &#x27;,&#x27;.join(receivers)        # 群发邮件形式，如果单独发送邮件直接调用receivers即可</span><br><span class=\"line\">    msg[&#x27;Subject&#x27;] = subject+&#x27; send_email&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    try:</span><br><span class=\"line\">        #验证</span><br><span class=\"line\">        smtpObj = smtplib.SMTP_SSL(host,port)  # 启用SSL发短信</span><br><span class=\"line\">        smtpObj.login(user,password)           # 用户名密码验证</span><br><span class=\"line\">        smtpObj.sendmail(sender,receivers,msg.as_string())   # 发送</span><br><span class=\"line\">        print(&quot;邮件发送成功&quot;)</span><br><span class=\"line\">    except smtplib.SMTPException as e:</span><br><span class=\"line\">        print(e)</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &#x27;__main__&#x27;:</span><br><span class=\"line\">    send_email()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n<p>提前准备，需要设置邮箱服务器</p>\n<p>发送邮件代码块如下</p>\n<p>#coding:utf-8</p>\n<p>#发送邮件的<br>import smtplib<br>from email.mime.text import MIMEText<br>class SendEmail:<br>    global send_user<br>    global email_host<br>    global password<br>    email_host&#x3D;”smtp.qq.com”<br>    send_user&#x3D;”<a href=\"mailto:&#120;&#120;&#x78;&#64;&#113;&#113;&#46;&#x63;&#x6f;&#109;\">&#120;&#120;&#x78;&#64;&#113;&#113;&#46;&#x63;&#x6f;&#109;</a>“<br>    password&#x3D;”xxx”<br>    #接受人，主题，内容<br>    def send_mail(self,user_list,sub,content):<br>        #发件者<br>        user&#x3D;”cherish”+”&lt;”+send_user+”&gt;”<br>        #内容、格式、编码<br>        message&#x3D;MIMEText(content,_subtype&#x3D;’plain’,_charset&#x3D;’utf-8’)<br>        #主题<br>        message[‘Subject’]&#x3D;sub<br>        #发送人<br>        message[‘From’]&#x3D;user<br>        #接受人<br>        message[‘To’]&#x3D;”;”.join(user_list)<br>        #服务连接<br>        server&#x3D;smtplib.SMTP()<br>        server.connect(email_host)<br>        #邮件登录<br>        server.login(send_user,password)<br>        #发送邮件内容<br>        server.sendmail(user,user_list,message.as_string())<br>        #关掉连接<br>        server.close()<br>    def send_main(self,pass_list,fail_list):<br>        pass_num&#x3D;float(len(pass_list))<br>        fail_num&#x3D;float(len(fail_list))<br>        count_num&#x3D;pass_num+fail_num<br>        #取小数后2位,通过率<br>        pass_result&#x3D;”%.2f%%”%(pass_num&#x2F;count_num*100)<br>        fail_result &#x3D; “%.2f%%”%(fail_num &#x2F; count_num * 100)<br>        user_list &#x3D; [‘<a href=\"mailto:&#x78;&#120;&#x40;&#x71;&#113;&#x2e;&#x63;&#111;&#109;\">&#x78;&#120;&#x40;&#x71;&#113;&#x2e;&#x63;&#111;&#109;</a>‘,‘<a href=\"mailto:&#x78;&#x78;&#64;&#x71;&#113;&#x2e;&#99;&#x6f;&#x6d;\">&#x78;&#x78;&#64;&#x71;&#113;&#x2e;&#99;&#x6f;&#x6d;</a>‘]<br>        sub &#x3D; “接口自动化测试报告”<br>        content&#x3D;”这次一共测试%s个接口,通过个数为%s,失败个数为%s,通过率为%s,失败率为%s”%(count_num,pass_num,fail_num,pass_result,fail_result)<br>        self.send_mail(user_list,sub,content)</p>\n<p>if <strong>name</strong> &#x3D;&#x3D; ‘<strong>main</strong>‘:<br>    sen&#x3D;SendEmail()<br>    sen.send_main([1,2,3,4],[5])</p>\n<p>测试结果：</p>\n<p>测试用例执行代码块</p>\n<p>#coding:utf-8<br>from base.runmethod import RunMethod<br>from data.get_data import GetData<br>from data.depend_data import DependData<br>from util.operation_json import OperationJson<br>from util.common_util import CommonUtil<br>import operator<br>import json<br>from logs.get_log import get_log<br>from util.send_email import SendEmail<br>import getcwd<br>class RunTest:<br>    def <strong>init</strong>(self):<br>        self.path &#x3D; getcwd.get_cwd()<br>        self.log_msg &#x3D; get_log(self.path + ‘&#x2F;data&#x2F;get_data.py’)<br>        self.run_method &#x3D; RunMethod()<br>        self.data &#x3D; GetData()<br>        self.com_util &#x3D; CommonUtil()<br>        self.op_json &#x3D; OperationJson(‘..&#x2F;dataconfig&#x2F;rigang_data&#x2F;header_value.json’)<br>        self.json_path&#x3D;’..&#x2F;dataconfig&#x2F;rigang_data&#x2F;expect_monitor_add.json’</p>\n<pre><code>#程序执行的\ndef go_on_run(self):\n    res = None\n    pass_count = []\n    fail_count = []\n    #10  0,1,2,3\n    #用例行数\n    rows_count = self.data.get_case_lines()\n    #遍历所有用例进行测试\n    for i in range(1,rows_count):\n        is_run = self.data.get_is_run(i)\n        if is_run:\n            caseid=self.data.get_caseid(i)\n            url = self.data.get_request_url(i)\n            method = self.data.get_request_method(i)\n            request_data = json.dumps(self.data.get_data_for_json(i))\n            expect = self.data.get_expect_data_for_json(i,self.json_path)\n            header = self.data.is_header(i)\n            depend_case=self.data.is_depend(i)\n            #判断是否有数据依赖\n            if depend_case!=None:\n                self.depend_data = DependData(caseid)\n                #获取依赖的响应数据\n                depend_response_data=self.depend_data.get_data_for_key(i)\n                #获取依赖字段\n                depend_key=self.data.get_depend_field(i)\n                #请求数据的依赖字段重新赋值之前的依赖数据\n                request_data[depend_key]=depend_response_data\n            # res = self.run_method.run_main(method, url, request_data)\n\n            if header == &#39;5&#39;:\n                #根据关键字test获取header信息\n                header = self.op_json.get_data(&#39;monitor_add&#39;)\n                res = self.run_method.run_main(method,url,request_data,header)\n\n                self.log_msg.info(&#39;该条用例header内容是：%s&#39; % header)\n                #将返回结果写入json文件\n                response_dato_tojson=self.op_json.write_data(res,&#39;../dataconfig/rigang_data/actual_monitor_add.json&#39;)\n            else:\n                res = self.run_method.run_main(method,url,request_data)\n                response_dato_tojson=self.op_json.write_data(res, &#39;../dataconfig/rigang_data/actual_monitor_add.json&#39;)\n            read_json_data=self.op_json.read_data(&#39;../dataconfig/rigang_data/actual_monitor_add.json&#39;)\n            self.log_msg.info(&#39;写入json的返回结果是：%s&#39; % read_json_data)\n\n            if operator.eq(expect,res) == True:\n                self.data.write_result(i,&#39;pass&#39;)\n                #统计通过个数\n                pass_count.append(i)\n                self.log_msg.info(&#39;用例ID为%s-------------------测试通过\\n&#39;%caseid )\n            else:\n                res = json.dumps(res)\n                self.data.write_result(i,res)\n                #统计失败个数\n                fail_count.append(i)\n                self.log_msg.info(&#39;用例ID为%s-------------------测试失败\\n&#39; % caseid)\n\n    send_email=SendEmail()\n    send_email.send_main(pass_count,fail_count)\n</code></pre>\n<p>if <strong>name</strong> &#x3D;&#x3D; ‘<strong>main</strong>‘:<br>    run &#x3D; RunTest()<br>    run.go_on_run()</p>\n<p>测试结果</p>\n"},{"title":"使用python打印数字矩阵python-draw-square","date":"2022-07-30T07:23:09.000Z","_content":"\n\n# 打印对应的图案\n\n## 问题分析\n\n本问题有多种表述形式，但基本上都离不开：\n+ 给一组样例或输入的数字\n+ 更据数字寻找绘图规律\n+ 编辑程序打印图形\n\n### 例题一\n\n#### 样例输入： 无\n\n#### 样例输出：\n\n``` python\n00 01 02 03 04 05 06 07 08 09\n\n10 11 12 13 14 15 16 17 18 19\n\n20 21 22 23 24 25 26 27 28 29\n\n30 31 32 33 34 35 36 37 38 39\n\n40 41 42 43 44 45 46 47 48 49\n\n50 51 52 53 54 55 56 57 58 59\n\n60 61 62 63 64 65 66 67 68 69\n\n70 71 72 73 74 75 76 77 78 79\n\n80 81 82 83 84 85 86 87 88 89\n\n90 91 92 93 94 95 96 97 98 99\n\n```\n\n#### 题目讲解：\n> 首先我们观察需要打印图形的图案，要求我们打印一个正方形的图案\n\n> 图案是由0-99所构成的\n\n> 再注意一个细节，小数字前位数不够需要补0\n\n#### 样例代码：\n\n``` python\n# 设置变量\na = 0\n\n# 设置两层循环\nfor x in range(10) :\n    for y in range(10) :\n        print (f'{a:0>2d} ' ,end ='')\n        a += 1\n    print ('\\n')\n```\n\n#### 语法讲解：\n\n1. 设置变量 `变量名`+`=`+`值`\n2. for循环 `for`+`变量`+`in`+`范围`\n\n#### 代码逻辑：\n\n+ 先创建一个变量，用来存储需要打印的数字\n+ 再建立一个嵌套循环\n+ 每经历一次循环就将变量加一\n+ 每经历十次循环就换下一行\n+ 直到循环结束\n\n#### 代码知识点：\n\n控制打印的数字位数：\n\n| 变量值      | 占位符     | 格式化结果    | 说明 |\n| ----------- | ---------- | ------------- | ---- |\n| `3.1415926` | `{:.2f}`   | `'3.14'`      | 保留小数点后两位 |\n| `3.1415926` | `{:+.2f}`  | `'+3.14'`       | 带符号保留小数点后两位 |\n| `-1`        | `{:+.2f}`  | `'-1.00'` | 带符号保留小数点后两位 |\n| `3.1415926` | `{:.0f}`   | `'3'` | 不带小数 |\n| `123`       | `{:0>10d}` | `'0000000123'` | 左边补`0`，补够10位 |\n| `123`       | `{:x<10d}` | `'123xxxxxxx'` | 右边补`x` ，补够10位 |\n| `123`       | `{:>10d}`  | `'       123'` | 左边补空格，补够10位 |\n| `123`       | `{:<10d}` | `'123       '` | 右边补空格，补够10位 |\n| `123456789` | `{:,}`     | `'123,456,789'` | 逗号分隔格式 |\n| `0.123`     | `{:.2%}`   | `'12.30%'`    | 百分比格式 |\n| `123456789` | `{:.2e}`   | `'1.23e+08'`  | 科学计数法格式 |\n\n> copy from [jackfrued's repository](https://github.com/jackfrued/Python-Core-50-Courses/blob/master/)\n\n#### 代码优化\n``` python\nfor x in range(10) :\n    for y in range(10) :\n        print (f'{x}{y} ' ,end ='')\n        #a += 1\n    print ('\\n')\n```\n\n#### 代码逻辑\n\n+ 观察需要打印的内容，刚好是其所在位置的坐标数字\n+ 直接双重循环，打印数字即可。\n","source":"_posts/python-draw-square.md","raw":"---\ntitle: 使用python打印数字矩阵python-draw-square\ndate: 2022-07-30 15:23:09\ntags: python\ncategories: 学习\n---\n\n\n# 打印对应的图案\n\n## 问题分析\n\n本问题有多种表述形式，但基本上都离不开：\n+ 给一组样例或输入的数字\n+ 更据数字寻找绘图规律\n+ 编辑程序打印图形\n\n### 例题一\n\n#### 样例输入： 无\n\n#### 样例输出：\n\n``` python\n00 01 02 03 04 05 06 07 08 09\n\n10 11 12 13 14 15 16 17 18 19\n\n20 21 22 23 24 25 26 27 28 29\n\n30 31 32 33 34 35 36 37 38 39\n\n40 41 42 43 44 45 46 47 48 49\n\n50 51 52 53 54 55 56 57 58 59\n\n60 61 62 63 64 65 66 67 68 69\n\n70 71 72 73 74 75 76 77 78 79\n\n80 81 82 83 84 85 86 87 88 89\n\n90 91 92 93 94 95 96 97 98 99\n\n```\n\n#### 题目讲解：\n> 首先我们观察需要打印图形的图案，要求我们打印一个正方形的图案\n\n> 图案是由0-99所构成的\n\n> 再注意一个细节，小数字前位数不够需要补0\n\n#### 样例代码：\n\n``` python\n# 设置变量\na = 0\n\n# 设置两层循环\nfor x in range(10) :\n    for y in range(10) :\n        print (f'{a:0>2d} ' ,end ='')\n        a += 1\n    print ('\\n')\n```\n\n#### 语法讲解：\n\n1. 设置变量 `变量名`+`=`+`值`\n2. for循环 `for`+`变量`+`in`+`范围`\n\n#### 代码逻辑：\n\n+ 先创建一个变量，用来存储需要打印的数字\n+ 再建立一个嵌套循环\n+ 每经历一次循环就将变量加一\n+ 每经历十次循环就换下一行\n+ 直到循环结束\n\n#### 代码知识点：\n\n控制打印的数字位数：\n\n| 变量值      | 占位符     | 格式化结果    | 说明 |\n| ----------- | ---------- | ------------- | ---- |\n| `3.1415926` | `{:.2f}`   | `'3.14'`      | 保留小数点后两位 |\n| `3.1415926` | `{:+.2f}`  | `'+3.14'`       | 带符号保留小数点后两位 |\n| `-1`        | `{:+.2f}`  | `'-1.00'` | 带符号保留小数点后两位 |\n| `3.1415926` | `{:.0f}`   | `'3'` | 不带小数 |\n| `123`       | `{:0>10d}` | `'0000000123'` | 左边补`0`，补够10位 |\n| `123`       | `{:x<10d}` | `'123xxxxxxx'` | 右边补`x` ，补够10位 |\n| `123`       | `{:>10d}`  | `'       123'` | 左边补空格，补够10位 |\n| `123`       | `{:<10d}` | `'123       '` | 右边补空格，补够10位 |\n| `123456789` | `{:,}`     | `'123,456,789'` | 逗号分隔格式 |\n| `0.123`     | `{:.2%}`   | `'12.30%'`    | 百分比格式 |\n| `123456789` | `{:.2e}`   | `'1.23e+08'`  | 科学计数法格式 |\n\n> copy from [jackfrued's repository](https://github.com/jackfrued/Python-Core-50-Courses/blob/master/)\n\n#### 代码优化\n``` python\nfor x in range(10) :\n    for y in range(10) :\n        print (f'{x}{y} ' ,end ='')\n        #a += 1\n    print ('\\n')\n```\n\n#### 代码逻辑\n\n+ 观察需要打印的内容，刚好是其所在位置的坐标数字\n+ 直接双重循环，打印数字即可。\n","slug":"python-draw-square","published":1,"updated":"2023-07-23T14:19:14.036Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkjdd1cq003198aj26y3erdd","content":"<h1 id=\"打印对应的图案\"><a href=\"#打印对应的图案\" class=\"headerlink\" title=\"打印对应的图案\"></a>打印对应的图案</h1><h2 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h2><p>本问题有多种表述形式，但基本上都离不开：</p>\n<ul>\n<li>给一组样例或输入的数字</li>\n<li>更据数字寻找绘图规律</li>\n<li>编辑程序打印图形</li>\n</ul>\n<h3 id=\"例题一\"><a href=\"#例题一\" class=\"headerlink\" title=\"例题一\"></a>例题一</h3><h4 id=\"样例输入：-无\"><a href=\"#样例输入：-无\" class=\"headerlink\" title=\"样例输入： 无\"></a>样例输入： 无</h4><h4 id=\"样例输出：\"><a href=\"#样例输出：\" class=\"headerlink\" title=\"样例输出：\"></a>样例输出：</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">00</span> 01 02 03 04 05 06 07 08 09</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">10</span> <span class=\"number\">11</span> <span class=\"number\">12</span> <span class=\"number\">13</span> <span class=\"number\">14</span> <span class=\"number\">15</span> <span class=\"number\">16</span> <span class=\"number\">17</span> <span class=\"number\">18</span> <span class=\"number\">19</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">20</span> <span class=\"number\">21</span> <span class=\"number\">22</span> <span class=\"number\">23</span> <span class=\"number\">24</span> <span class=\"number\">25</span> <span class=\"number\">26</span> <span class=\"number\">27</span> <span class=\"number\">28</span> <span class=\"number\">29</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">30</span> <span class=\"number\">31</span> <span class=\"number\">32</span> <span class=\"number\">33</span> <span class=\"number\">34</span> <span class=\"number\">35</span> <span class=\"number\">36</span> <span class=\"number\">37</span> <span class=\"number\">38</span> <span class=\"number\">39</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">40</span> <span class=\"number\">41</span> <span class=\"number\">42</span> <span class=\"number\">43</span> <span class=\"number\">44</span> <span class=\"number\">45</span> <span class=\"number\">46</span> <span class=\"number\">47</span> <span class=\"number\">48</span> <span class=\"number\">49</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">50</span> <span class=\"number\">51</span> <span class=\"number\">52</span> <span class=\"number\">53</span> <span class=\"number\">54</span> <span class=\"number\">55</span> <span class=\"number\">56</span> <span class=\"number\">57</span> <span class=\"number\">58</span> <span class=\"number\">59</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">60</span> <span class=\"number\">61</span> <span class=\"number\">62</span> <span class=\"number\">63</span> <span class=\"number\">64</span> <span class=\"number\">65</span> <span class=\"number\">66</span> <span class=\"number\">67</span> <span class=\"number\">68</span> <span class=\"number\">69</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">70</span> <span class=\"number\">71</span> <span class=\"number\">72</span> <span class=\"number\">73</span> <span class=\"number\">74</span> <span class=\"number\">75</span> <span class=\"number\">76</span> <span class=\"number\">77</span> <span class=\"number\">78</span> <span class=\"number\">79</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">80</span> <span class=\"number\">81</span> <span class=\"number\">82</span> <span class=\"number\">83</span> <span class=\"number\">84</span> <span class=\"number\">85</span> <span class=\"number\">86</span> <span class=\"number\">87</span> <span class=\"number\">88</span> <span class=\"number\">89</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">90</span> <span class=\"number\">91</span> <span class=\"number\">92</span> <span class=\"number\">93</span> <span class=\"number\">94</span> <span class=\"number\">95</span> <span class=\"number\">96</span> <span class=\"number\">97</span> <span class=\"number\">98</span> <span class=\"number\">99</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"题目讲解：\"><a href=\"#题目讲解：\" class=\"headerlink\" title=\"题目讲解：\"></a>题目讲解：</h4><blockquote>\n<p>首先我们观察需要打印图形的图案，要求我们打印一个正方形的图案</p>\n</blockquote>\n<blockquote>\n<p>图案是由0-99所构成的</p>\n</blockquote>\n<blockquote>\n<p>再注意一个细节，小数字前位数不够需要补0</p>\n</blockquote>\n<h4 id=\"样例代码：\"><a href=\"#样例代码：\" class=\"headerlink\" title=\"样例代码：\"></a>样例代码：</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置变量</span></span><br><span class=\"line\">a = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置两层循环</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>) :</span><br><span class=\"line\">    <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>) :</span><br><span class=\"line\">        <span class=\"built_in\">print</span> (<span class=\"string\">f&#x27;<span class=\"subst\">&#123;a:<span class=\"number\">0</span>&gt;2d&#125;</span> &#x27;</span> ,end =<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">        a += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span> (<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"语法讲解：\"><a href=\"#语法讲解：\" class=\"headerlink\" title=\"语法讲解：\"></a>语法讲解：</h4><ol>\n<li>设置变量 <code>变量名</code>+<code>=</code>+<code>值</code></li>\n<li>for循环 <code>for</code>+<code>变量</code>+<code>in</code>+<code>范围</code></li>\n</ol>\n<h4 id=\"代码逻辑：\"><a href=\"#代码逻辑：\" class=\"headerlink\" title=\"代码逻辑：\"></a>代码逻辑：</h4><ul>\n<li>先创建一个变量，用来存储需要打印的数字</li>\n<li>再建立一个嵌套循环</li>\n<li>每经历一次循环就将变量加一</li>\n<li>每经历十次循环就换下一行</li>\n<li>直到循环结束</li>\n</ul>\n<h4 id=\"代码知识点：\"><a href=\"#代码知识点：\" class=\"headerlink\" title=\"代码知识点：\"></a>代码知识点：</h4><p>控制打印的数字位数：</p>\n<table>\n<thead>\n<tr>\n<th>变量值</th>\n<th>占位符</th>\n<th>格式化结果</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>3.1415926</code></td>\n<td><code>&#123;:.2f&#125;</code></td>\n<td><code>&#39;3.14&#39;</code></td>\n<td>保留小数点后两位</td>\n</tr>\n<tr>\n<td><code>3.1415926</code></td>\n<td><code>&#123;:+.2f&#125;</code></td>\n<td><code>&#39;+3.14&#39;</code></td>\n<td>带符号保留小数点后两位</td>\n</tr>\n<tr>\n<td><code>-1</code></td>\n<td><code>&#123;:+.2f&#125;</code></td>\n<td><code>&#39;-1.00&#39;</code></td>\n<td>带符号保留小数点后两位</td>\n</tr>\n<tr>\n<td><code>3.1415926</code></td>\n<td><code>&#123;:.0f&#125;</code></td>\n<td><code>&#39;3&#39;</code></td>\n<td>不带小数</td>\n</tr>\n<tr>\n<td><code>123</code></td>\n<td><code>&#123;:0&gt;10d&#125;</code></td>\n<td><code>&#39;0000000123&#39;</code></td>\n<td>左边补<code>0</code>，补够10位</td>\n</tr>\n<tr>\n<td><code>123</code></td>\n<td><code>&#123;:x&lt;10d&#125;</code></td>\n<td><code>&#39;123xxxxxxx&#39;</code></td>\n<td>右边补<code>x</code> ，补够10位</td>\n</tr>\n<tr>\n<td><code>123</code></td>\n<td><code>&#123;:&gt;10d&#125;</code></td>\n<td><code>&#39;       123&#39;</code></td>\n<td>左边补空格，补够10位</td>\n</tr>\n<tr>\n<td><code>123</code></td>\n<td><code>&#123;:&lt;10d&#125;</code></td>\n<td><code>&#39;123       &#39;</code></td>\n<td>右边补空格，补够10位</td>\n</tr>\n<tr>\n<td><code>123456789</code></td>\n<td><code>&#123;:,&#125;</code></td>\n<td><code>&#39;123,456,789&#39;</code></td>\n<td>逗号分隔格式</td>\n</tr>\n<tr>\n<td><code>0.123</code></td>\n<td><code>&#123;:.2%&#125;</code></td>\n<td><code>&#39;12.30%&#39;</code></td>\n<td>百分比格式</td>\n</tr>\n<tr>\n<td><code>123456789</code></td>\n<td><code>&#123;:.2e&#125;</code></td>\n<td><code>&#39;1.23e+08&#39;</code></td>\n<td>科学计数法格式</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>copy from <a href=\"https://github.com/jackfrued/Python-Core-50-Courses/blob/master/\">jackfrued’s repository</a></p>\n</blockquote>\n<h4 id=\"代码优化\"><a href=\"#代码优化\" class=\"headerlink\" title=\"代码优化\"></a>代码优化</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>) :</span><br><span class=\"line\">    <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>) :</span><br><span class=\"line\">        <span class=\"built_in\">print</span> (<span class=\"string\">f&#x27;<span class=\"subst\">&#123;x&#125;</span><span class=\"subst\">&#123;y&#125;</span> &#x27;</span> ,end =<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">        <span class=\"comment\">#a += 1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span> (<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"代码逻辑\"><a href=\"#代码逻辑\" class=\"headerlink\" title=\"代码逻辑\"></a>代码逻辑</h4><ul>\n<li>观察需要打印的内容，刚好是其所在位置的坐标数字</li>\n<li>直接双重循环，打印数字即可。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"打印对应的图案\"><a href=\"#打印对应的图案\" class=\"headerlink\" title=\"打印对应的图案\"></a>打印对应的图案</h1><h2 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h2><p>本问题有多种表述形式，但基本上都离不开：</p>\n<ul>\n<li>给一组样例或输入的数字</li>\n<li>更据数字寻找绘图规律</li>\n<li>编辑程序打印图形</li>\n</ul>\n<h3 id=\"例题一\"><a href=\"#例题一\" class=\"headerlink\" title=\"例题一\"></a>例题一</h3><h4 id=\"样例输入：-无\"><a href=\"#样例输入：-无\" class=\"headerlink\" title=\"样例输入： 无\"></a>样例输入： 无</h4><h4 id=\"样例输出：\"><a href=\"#样例输出：\" class=\"headerlink\" title=\"样例输出：\"></a>样例输出：</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">00</span> 01 02 03 04 05 06 07 08 09</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">10</span> <span class=\"number\">11</span> <span class=\"number\">12</span> <span class=\"number\">13</span> <span class=\"number\">14</span> <span class=\"number\">15</span> <span class=\"number\">16</span> <span class=\"number\">17</span> <span class=\"number\">18</span> <span class=\"number\">19</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">20</span> <span class=\"number\">21</span> <span class=\"number\">22</span> <span class=\"number\">23</span> <span class=\"number\">24</span> <span class=\"number\">25</span> <span class=\"number\">26</span> <span class=\"number\">27</span> <span class=\"number\">28</span> <span class=\"number\">29</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">30</span> <span class=\"number\">31</span> <span class=\"number\">32</span> <span class=\"number\">33</span> <span class=\"number\">34</span> <span class=\"number\">35</span> <span class=\"number\">36</span> <span class=\"number\">37</span> <span class=\"number\">38</span> <span class=\"number\">39</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">40</span> <span class=\"number\">41</span> <span class=\"number\">42</span> <span class=\"number\">43</span> <span class=\"number\">44</span> <span class=\"number\">45</span> <span class=\"number\">46</span> <span class=\"number\">47</span> <span class=\"number\">48</span> <span class=\"number\">49</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">50</span> <span class=\"number\">51</span> <span class=\"number\">52</span> <span class=\"number\">53</span> <span class=\"number\">54</span> <span class=\"number\">55</span> <span class=\"number\">56</span> <span class=\"number\">57</span> <span class=\"number\">58</span> <span class=\"number\">59</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">60</span> <span class=\"number\">61</span> <span class=\"number\">62</span> <span class=\"number\">63</span> <span class=\"number\">64</span> <span class=\"number\">65</span> <span class=\"number\">66</span> <span class=\"number\">67</span> <span class=\"number\">68</span> <span class=\"number\">69</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">70</span> <span class=\"number\">71</span> <span class=\"number\">72</span> <span class=\"number\">73</span> <span class=\"number\">74</span> <span class=\"number\">75</span> <span class=\"number\">76</span> <span class=\"number\">77</span> <span class=\"number\">78</span> <span class=\"number\">79</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">80</span> <span class=\"number\">81</span> <span class=\"number\">82</span> <span class=\"number\">83</span> <span class=\"number\">84</span> <span class=\"number\">85</span> <span class=\"number\">86</span> <span class=\"number\">87</span> <span class=\"number\">88</span> <span class=\"number\">89</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">90</span> <span class=\"number\">91</span> <span class=\"number\">92</span> <span class=\"number\">93</span> <span class=\"number\">94</span> <span class=\"number\">95</span> <span class=\"number\">96</span> <span class=\"number\">97</span> <span class=\"number\">98</span> <span class=\"number\">99</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"题目讲解：\"><a href=\"#题目讲解：\" class=\"headerlink\" title=\"题目讲解：\"></a>题目讲解：</h4><blockquote>\n<p>首先我们观察需要打印图形的图案，要求我们打印一个正方形的图案</p>\n</blockquote>\n<blockquote>\n<p>图案是由0-99所构成的</p>\n</blockquote>\n<blockquote>\n<p>再注意一个细节，小数字前位数不够需要补0</p>\n</blockquote>\n<h4 id=\"样例代码：\"><a href=\"#样例代码：\" class=\"headerlink\" title=\"样例代码：\"></a>样例代码：</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置变量</span></span><br><span class=\"line\">a = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置两层循环</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>) :</span><br><span class=\"line\">    <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>) :</span><br><span class=\"line\">        <span class=\"built_in\">print</span> (<span class=\"string\">f&#x27;<span class=\"subst\">&#123;a:<span class=\"number\">0</span>&gt;2d&#125;</span> &#x27;</span> ,end =<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">        a += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span> (<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"语法讲解：\"><a href=\"#语法讲解：\" class=\"headerlink\" title=\"语法讲解：\"></a>语法讲解：</h4><ol>\n<li>设置变量 <code>变量名</code>+<code>=</code>+<code>值</code></li>\n<li>for循环 <code>for</code>+<code>变量</code>+<code>in</code>+<code>范围</code></li>\n</ol>\n<h4 id=\"代码逻辑：\"><a href=\"#代码逻辑：\" class=\"headerlink\" title=\"代码逻辑：\"></a>代码逻辑：</h4><ul>\n<li>先创建一个变量，用来存储需要打印的数字</li>\n<li>再建立一个嵌套循环</li>\n<li>每经历一次循环就将变量加一</li>\n<li>每经历十次循环就换下一行</li>\n<li>直到循环结束</li>\n</ul>\n<h4 id=\"代码知识点：\"><a href=\"#代码知识点：\" class=\"headerlink\" title=\"代码知识点：\"></a>代码知识点：</h4><p>控制打印的数字位数：</p>\n<table>\n<thead>\n<tr>\n<th>变量值</th>\n<th>占位符</th>\n<th>格式化结果</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>3.1415926</code></td>\n<td><code>&#123;:.2f&#125;</code></td>\n<td><code>&#39;3.14&#39;</code></td>\n<td>保留小数点后两位</td>\n</tr>\n<tr>\n<td><code>3.1415926</code></td>\n<td><code>&#123;:+.2f&#125;</code></td>\n<td><code>&#39;+3.14&#39;</code></td>\n<td>带符号保留小数点后两位</td>\n</tr>\n<tr>\n<td><code>-1</code></td>\n<td><code>&#123;:+.2f&#125;</code></td>\n<td><code>&#39;-1.00&#39;</code></td>\n<td>带符号保留小数点后两位</td>\n</tr>\n<tr>\n<td><code>3.1415926</code></td>\n<td><code>&#123;:.0f&#125;</code></td>\n<td><code>&#39;3&#39;</code></td>\n<td>不带小数</td>\n</tr>\n<tr>\n<td><code>123</code></td>\n<td><code>&#123;:0&gt;10d&#125;</code></td>\n<td><code>&#39;0000000123&#39;</code></td>\n<td>左边补<code>0</code>，补够10位</td>\n</tr>\n<tr>\n<td><code>123</code></td>\n<td><code>&#123;:x&lt;10d&#125;</code></td>\n<td><code>&#39;123xxxxxxx&#39;</code></td>\n<td>右边补<code>x</code> ，补够10位</td>\n</tr>\n<tr>\n<td><code>123</code></td>\n<td><code>&#123;:&gt;10d&#125;</code></td>\n<td><code>&#39;       123&#39;</code></td>\n<td>左边补空格，补够10位</td>\n</tr>\n<tr>\n<td><code>123</code></td>\n<td><code>&#123;:&lt;10d&#125;</code></td>\n<td><code>&#39;123       &#39;</code></td>\n<td>右边补空格，补够10位</td>\n</tr>\n<tr>\n<td><code>123456789</code></td>\n<td><code>&#123;:,&#125;</code></td>\n<td><code>&#39;123,456,789&#39;</code></td>\n<td>逗号分隔格式</td>\n</tr>\n<tr>\n<td><code>0.123</code></td>\n<td><code>&#123;:.2%&#125;</code></td>\n<td><code>&#39;12.30%&#39;</code></td>\n<td>百分比格式</td>\n</tr>\n<tr>\n<td><code>123456789</code></td>\n<td><code>&#123;:.2e&#125;</code></td>\n<td><code>&#39;1.23e+08&#39;</code></td>\n<td>科学计数法格式</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>copy from <a href=\"https://github.com/jackfrued/Python-Core-50-Courses/blob/master/\">jackfrued’s repository</a></p>\n</blockquote>\n<h4 id=\"代码优化\"><a href=\"#代码优化\" class=\"headerlink\" title=\"代码优化\"></a>代码优化</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>) :</span><br><span class=\"line\">    <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>) :</span><br><span class=\"line\">        <span class=\"built_in\">print</span> (<span class=\"string\">f&#x27;<span class=\"subst\">&#123;x&#125;</span><span class=\"subst\">&#123;y&#125;</span> &#x27;</span> ,end =<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">        <span class=\"comment\">#a += 1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span> (<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"代码逻辑\"><a href=\"#代码逻辑\" class=\"headerlink\" title=\"代码逻辑\"></a>代码逻辑</h4><ul>\n<li>观察需要打印的内容，刚好是其所在位置的坐标数字</li>\n<li>直接双重循环，打印数字即可。</li>\n</ul>\n"},{"title":"linux下载和安装python","date":"2022-08-18T07:23:09.000Z","_content":"\n# Debian系统 安装Python\n\n> 本文参考自[Python入门：在Debian系统安装Python 3](https://cloud.tencent.com/developer/article/1165255)\n\n## 介绍\n\n> Python是一种面向对象的解释型计算机程序设计语言，由荷兰人Guido van Rossum于1989年发明，第一个公开发行版发行于1991年。 可用于许多不同的编程项目。这个名字的灵感源自英国喜剧组织Monty Python，开发团队希望让Python成为一种有趣的语言，并于1991年首次发布。Python易于设置，编写方式相对简单，并及时反馈错误，是初学者和经验丰富的开发人员的绝佳选择。Python 3是该语言的最新版本。\n\n> 本教程将指导您在本地Linux机器上安装Python 3并通过命令行设置编程环境。本教程将介绍Debian 8的安装过程，原理适用于Debian Linux的任何其他发行版。\n\n## 准备\n\n> 1. Debian 8或其他版本的Debian Linux的计算机（服务器）\n\n### 第一步 - 安装Python 3\n\n> 我们将在命令行上完成安装和设置，这是一种与计算机交互的非图形方式。也就是说，您不是点击按钮，而是输入文本并通过文本从计算机接收反馈。命令行（也称为shell）可以帮助您修改和自动化您每天在计算机上执行的许多任务，是软件开发人员必不可少的工具。您可以学习许多终端命令，可以让您做更强大的事情。\n\n> Debian 8和其他版本的Debian Linux都预装了Python 3和Python 2。为了确保我们的版本是最新的，让我们用apt-get更新和升级系统：\n\n```\nsudo apt-get update\nsudo apt-get -y upgrade\n```\n\n> -y将确认我们同意所有要安装的项目，但根据您的Linux版本不同，您可能需要确认其他提示作为系统更新和升级。\n\n>完成该过程后，我们可以通过输入以下内容来检查系统中安装的Python 3的版本：\n\n```\npython3 -V\n```\n\n> 您将在终端窗口中收到输出，告知您Python版本号。版本号可能会有所不同，像这样：`Python 3.9.0`\n\n> 让我们安装pip管理Python的软件包：\n\n```\nsudo apt-get install -y python3-pip\n```\n\n> pip是一个与Python一起使用的工具，主要用于安装和管理我们可能想要在我们的开发项目中使用的编程包。您可以输入以下命令安装Python包：\n\n```\npip3 install package_name\n```\n\n> package_name可以指代任何Python包或库，例如用于Web开发的Django或用于科学计算的NumPy。因此，如果您想安装NumPy，可以使用pip3 install numpy命令执行此操作。\n\n> 还有一些软件包和开发工具可以安装，以确保我们为编程环境提供强大的设置，命令如下：\n\n```\nsudo apt-get install build-essential libssl-dev libffi-dev python-dev\n```\n\n### 第二步 - 设置虚拟环境\n\n> 设置了Python，并安装了pip和其他工具后，我们就可以为我们的开发项目设置一个虚拟环境。\n\n> 虚拟环境使您可以在计算机上为Python项目创建一个隔离空间，确保每个项目都有自己的一组依赖项，这些依赖项不会破坏任何其他项目。\n\n> 设置编程环境使我们能够更好地控制Python项目以及如何处理不同版本的包。在使用第三方软件包时，这一点尤为重要。\n\n> 您可以根据需要设置尽可能多的Python编程环境。每个环境基本上都是计算机中的一个目录或文件夹，其中包含一些脚本以环境运行。\n\n> 首先，我们需要安装venv模块，它是Python 3库的一部分，以便我们可以为我们创建虚拟环境。我们输入以下命令安装venv：\n\n```\nsudo apt-get install -y python3-venv\n```\n\n> 安装完成后，我们就可以创建环境了。让我们选择我们想要放入Python编程环境的目录，或者我们可以用mkdir创建一个新目录，如：\n\n```\nmkdir environments\ncd environments\n```\n\n> 进入您希望环境保存的目录后，可以通过运行以下命令来创建环境：\n\n```\npython3 -m venv my_env\n```\n\n> 这会设置一个新目录，其中包含一些我们可以用ls命令查看的项目：\n\n```\nls my_env\n```\n\n> `bin  include  lib  lib64  pyvenv.cfg`这些文件一起用于确保您的项目与本地计算机的隔离，以便系统文件和项目文件不会混合。这是版本控制的一个好例子，并确保您的每个项目都可以访问所需的特定软件包。Python Wheels是Python的内置包格式，可以通过减少编译所需的次数来加速软件生产。你会在每个lib目录中找到它。\n\n> 要使用此环境，您需要激活它，您可以通过输入以下调用activate脚本的命令来执行此操作：\n\n```\nsource my_env/bin/activate\n```\n\n> 您的提示现在将以您的环境名称为前缀，在这里是my_env。根据您运行的Debian Linux的版本不同，您的前缀可能看起来有所不同，他们看起来应该是这样子的：\n\n```\n(my_env) sammy@sammy:~/environments$\n```\n\n> 这个前缀让我们知道环境当前是my_env在运行的，这意味着当我们在这里创建程序时，它们将只使用这个特定环境的设置和包。\n\n> 注意：在虚拟环境中，您可以使用python代替python3，pip代替pip3。如果在环境之外使用Python 3，则需要专门使用python3和pip3。\n\n> 执行这些步骤后，您的虚拟环境即可使用。\n\n### 第3步 - 离开虚拟环境\n\n> 要离开环境，只需输入命令`deactivate`，您将返回到原始目录。\n\n## 结论\n\n> 恭喜！此时，您已经学会了如何设置了Python 3编程环境，可以开始编写项目啦！更多Python教程请关注腾讯云+社区。\n\n####参考文献：《How To Install Python 3 and Set Up a Local Programming Environment on Debian 8》","source":"_posts/python-install.md","raw":"---\ntitle: linux下载和安装python\ndate: 2022-08-18 15:23:09\ntags: \n    - python\n    - linux\ncategories: 系统\n---\n\n# Debian系统 安装Python\n\n> 本文参考自[Python入门：在Debian系统安装Python 3](https://cloud.tencent.com/developer/article/1165255)\n\n## 介绍\n\n> Python是一种面向对象的解释型计算机程序设计语言，由荷兰人Guido van Rossum于1989年发明，第一个公开发行版发行于1991年。 可用于许多不同的编程项目。这个名字的灵感源自英国喜剧组织Monty Python，开发团队希望让Python成为一种有趣的语言，并于1991年首次发布。Python易于设置，编写方式相对简单，并及时反馈错误，是初学者和经验丰富的开发人员的绝佳选择。Python 3是该语言的最新版本。\n\n> 本教程将指导您在本地Linux机器上安装Python 3并通过命令行设置编程环境。本教程将介绍Debian 8的安装过程，原理适用于Debian Linux的任何其他发行版。\n\n## 准备\n\n> 1. Debian 8或其他版本的Debian Linux的计算机（服务器）\n\n### 第一步 - 安装Python 3\n\n> 我们将在命令行上完成安装和设置，这是一种与计算机交互的非图形方式。也就是说，您不是点击按钮，而是输入文本并通过文本从计算机接收反馈。命令行（也称为shell）可以帮助您修改和自动化您每天在计算机上执行的许多任务，是软件开发人员必不可少的工具。您可以学习许多终端命令，可以让您做更强大的事情。\n\n> Debian 8和其他版本的Debian Linux都预装了Python 3和Python 2。为了确保我们的版本是最新的，让我们用apt-get更新和升级系统：\n\n```\nsudo apt-get update\nsudo apt-get -y upgrade\n```\n\n> -y将确认我们同意所有要安装的项目，但根据您的Linux版本不同，您可能需要确认其他提示作为系统更新和升级。\n\n>完成该过程后，我们可以通过输入以下内容来检查系统中安装的Python 3的版本：\n\n```\npython3 -V\n```\n\n> 您将在终端窗口中收到输出，告知您Python版本号。版本号可能会有所不同，像这样：`Python 3.9.0`\n\n> 让我们安装pip管理Python的软件包：\n\n```\nsudo apt-get install -y python3-pip\n```\n\n> pip是一个与Python一起使用的工具，主要用于安装和管理我们可能想要在我们的开发项目中使用的编程包。您可以输入以下命令安装Python包：\n\n```\npip3 install package_name\n```\n\n> package_name可以指代任何Python包或库，例如用于Web开发的Django或用于科学计算的NumPy。因此，如果您想安装NumPy，可以使用pip3 install numpy命令执行此操作。\n\n> 还有一些软件包和开发工具可以安装，以确保我们为编程环境提供强大的设置，命令如下：\n\n```\nsudo apt-get install build-essential libssl-dev libffi-dev python-dev\n```\n\n### 第二步 - 设置虚拟环境\n\n> 设置了Python，并安装了pip和其他工具后，我们就可以为我们的开发项目设置一个虚拟环境。\n\n> 虚拟环境使您可以在计算机上为Python项目创建一个隔离空间，确保每个项目都有自己的一组依赖项，这些依赖项不会破坏任何其他项目。\n\n> 设置编程环境使我们能够更好地控制Python项目以及如何处理不同版本的包。在使用第三方软件包时，这一点尤为重要。\n\n> 您可以根据需要设置尽可能多的Python编程环境。每个环境基本上都是计算机中的一个目录或文件夹，其中包含一些脚本以环境运行。\n\n> 首先，我们需要安装venv模块，它是Python 3库的一部分，以便我们可以为我们创建虚拟环境。我们输入以下命令安装venv：\n\n```\nsudo apt-get install -y python3-venv\n```\n\n> 安装完成后，我们就可以创建环境了。让我们选择我们想要放入Python编程环境的目录，或者我们可以用mkdir创建一个新目录，如：\n\n```\nmkdir environments\ncd environments\n```\n\n> 进入您希望环境保存的目录后，可以通过运行以下命令来创建环境：\n\n```\npython3 -m venv my_env\n```\n\n> 这会设置一个新目录，其中包含一些我们可以用ls命令查看的项目：\n\n```\nls my_env\n```\n\n> `bin  include  lib  lib64  pyvenv.cfg`这些文件一起用于确保您的项目与本地计算机的隔离，以便系统文件和项目文件不会混合。这是版本控制的一个好例子，并确保您的每个项目都可以访问所需的特定软件包。Python Wheels是Python的内置包格式，可以通过减少编译所需的次数来加速软件生产。你会在每个lib目录中找到它。\n\n> 要使用此环境，您需要激活它，您可以通过输入以下调用activate脚本的命令来执行此操作：\n\n```\nsource my_env/bin/activate\n```\n\n> 您的提示现在将以您的环境名称为前缀，在这里是my_env。根据您运行的Debian Linux的版本不同，您的前缀可能看起来有所不同，他们看起来应该是这样子的：\n\n```\n(my_env) sammy@sammy:~/environments$\n```\n\n> 这个前缀让我们知道环境当前是my_env在运行的，这意味着当我们在这里创建程序时，它们将只使用这个特定环境的设置和包。\n\n> 注意：在虚拟环境中，您可以使用python代替python3，pip代替pip3。如果在环境之外使用Python 3，则需要专门使用python3和pip3。\n\n> 执行这些步骤后，您的虚拟环境即可使用。\n\n### 第3步 - 离开虚拟环境\n\n> 要离开环境，只需输入命令`deactivate`，您将返回到原始目录。\n\n## 结论\n\n> 恭喜！此时，您已经学会了如何设置了Python 3编程环境，可以开始编写项目啦！更多Python教程请关注腾讯云+社区。\n\n####参考文献：《How To Install Python 3 and Set Up a Local Programming Environment on Debian 8》","slug":"python-install","published":1,"updated":"2023-07-23T14:19:11.823Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkjdd1cr003398aj6ps3f7el","content":"<h1 id=\"Debian系统-安装Python\"><a href=\"#Debian系统-安装Python\" class=\"headerlink\" title=\"Debian系统 安装Python\"></a>Debian系统 安装Python</h1><blockquote>\n<p>本文参考自<a href=\"https://cloud.tencent.com/developer/article/1165255\">Python入门：在Debian系统安装Python 3</a></p>\n</blockquote>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><blockquote>\n<p>Python是一种面向对象的解释型计算机程序设计语言，由荷兰人Guido van Rossum于1989年发明，第一个公开发行版发行于1991年。 可用于许多不同的编程项目。这个名字的灵感源自英国喜剧组织Monty Python，开发团队希望让Python成为一种有趣的语言，并于1991年首次发布。Python易于设置，编写方式相对简单，并及时反馈错误，是初学者和经验丰富的开发人员的绝佳选择。Python 3是该语言的最新版本。</p>\n</blockquote>\n<blockquote>\n<p>本教程将指导您在本地Linux机器上安装Python 3并通过命令行设置编程环境。本教程将介绍Debian 8的安装过程，原理适用于Debian Linux的任何其他发行版。</p>\n</blockquote>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><blockquote>\n<ol>\n<li>Debian 8或其他版本的Debian Linux的计算机（服务器）</li>\n</ol>\n</blockquote>\n<h3 id=\"第一步-安装Python-3\"><a href=\"#第一步-安装Python-3\" class=\"headerlink\" title=\"第一步 - 安装Python 3\"></a>第一步 - 安装Python 3</h3><blockquote>\n<p>我们将在命令行上完成安装和设置，这是一种与计算机交互的非图形方式。也就是说，您不是点击按钮，而是输入文本并通过文本从计算机接收反馈。命令行（也称为shell）可以帮助您修改和自动化您每天在计算机上执行的许多任务，是软件开发人员必不可少的工具。您可以学习许多终端命令，可以让您做更强大的事情。</p>\n</blockquote>\n<blockquote>\n<p>Debian 8和其他版本的Debian Linux都预装了Python 3和Python 2。为了确保我们的版本是最新的，让我们用apt-get更新和升级系统：</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get -y upgrade</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>-y将确认我们同意所有要安装的项目，但根据您的Linux版本不同，您可能需要确认其他提示作为系统更新和升级。</p>\n</blockquote>\n<blockquote>\n<p>完成该过程后，我们可以通过输入以下内容来检查系统中安装的Python 3的版本：</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 -V</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>您将在终端窗口中收到输出，告知您Python版本号。版本号可能会有所不同，像这样：<code>Python 3.9.0</code></p>\n</blockquote>\n<blockquote>\n<p>让我们安装pip管理Python的软件包：</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install -y python3-pip</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>pip是一个与Python一起使用的工具，主要用于安装和管理我们可能想要在我们的开发项目中使用的编程包。您可以输入以下命令安装Python包：</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install package_name</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>package_name可以指代任何Python包或库，例如用于Web开发的Django或用于科学计算的NumPy。因此，如果您想安装NumPy，可以使用pip3 install numpy命令执行此操作。</p>\n</blockquote>\n<blockquote>\n<p>还有一些软件包和开发工具可以安装，以确保我们为编程环境提供强大的设置，命令如下：</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install build-essential libssl-dev libffi-dev python-dev</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第二步-设置虚拟环境\"><a href=\"#第二步-设置虚拟环境\" class=\"headerlink\" title=\"第二步 - 设置虚拟环境\"></a>第二步 - 设置虚拟环境</h3><blockquote>\n<p>设置了Python，并安装了pip和其他工具后，我们就可以为我们的开发项目设置一个虚拟环境。</p>\n</blockquote>\n<blockquote>\n<p>虚拟环境使您可以在计算机上为Python项目创建一个隔离空间，确保每个项目都有自己的一组依赖项，这些依赖项不会破坏任何其他项目。</p>\n</blockquote>\n<blockquote>\n<p>设置编程环境使我们能够更好地控制Python项目以及如何处理不同版本的包。在使用第三方软件包时，这一点尤为重要。</p>\n</blockquote>\n<blockquote>\n<p>您可以根据需要设置尽可能多的Python编程环境。每个环境基本上都是计算机中的一个目录或文件夹，其中包含一些脚本以环境运行。</p>\n</blockquote>\n<blockquote>\n<p>首先，我们需要安装venv模块，它是Python 3库的一部分，以便我们可以为我们创建虚拟环境。我们输入以下命令安装venv：</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install -y python3-venv</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>安装完成后，我们就可以创建环境了。让我们选择我们想要放入Python编程环境的目录，或者我们可以用mkdir创建一个新目录，如：</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir environments</span><br><span class=\"line\">cd environments</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>进入您希望环境保存的目录后，可以通过运行以下命令来创建环境：</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 -m venv my_env</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这会设置一个新目录，其中包含一些我们可以用ls命令查看的项目：</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls my_env</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>bin  include  lib  lib64  pyvenv.cfg</code>这些文件一起用于确保您的项目与本地计算机的隔离，以便系统文件和项目文件不会混合。这是版本控制的一个好例子，并确保您的每个项目都可以访问所需的特定软件包。Python Wheels是Python的内置包格式，可以通过减少编译所需的次数来加速软件生产。你会在每个lib目录中找到它。</p>\n</blockquote>\n<blockquote>\n<p>要使用此环境，您需要激活它，您可以通过输入以下调用activate脚本的命令来执行此操作：</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source my_env/bin/activate</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>您的提示现在将以您的环境名称为前缀，在这里是my_env。根据您运行的Debian Linux的版本不同，您的前缀可能看起来有所不同，他们看起来应该是这样子的：</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(my_env) sammy@sammy:~/environments$</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这个前缀让我们知道环境当前是my_env在运行的，这意味着当我们在这里创建程序时，它们将只使用这个特定环境的设置和包。</p>\n</blockquote>\n<blockquote>\n<p>注意：在虚拟环境中，您可以使用python代替python3，pip代替pip3。如果在环境之外使用Python 3，则需要专门使用python3和pip3。</p>\n</blockquote>\n<blockquote>\n<p>执行这些步骤后，您的虚拟环境即可使用。</p>\n</blockquote>\n<h3 id=\"第3步-离开虚拟环境\"><a href=\"#第3步-离开虚拟环境\" class=\"headerlink\" title=\"第3步 - 离开虚拟环境\"></a>第3步 - 离开虚拟环境</h3><blockquote>\n<p>要离开环境，只需输入命令<code>deactivate</code>，您将返回到原始目录。</p>\n</blockquote>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><blockquote>\n<p>恭喜！此时，您已经学会了如何设置了Python 3编程环境，可以开始编写项目啦！更多Python教程请关注腾讯云+社区。</p>\n</blockquote>\n<p>####参考文献：《How To Install Python 3 and Set Up a Local Programming Environment on Debian 8》</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Debian系统-安装Python\"><a href=\"#Debian系统-安装Python\" class=\"headerlink\" title=\"Debian系统 安装Python\"></a>Debian系统 安装Python</h1><blockquote>\n<p>本文参考自<a href=\"https://cloud.tencent.com/developer/article/1165255\">Python入门：在Debian系统安装Python 3</a></p>\n</blockquote>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><blockquote>\n<p>Python是一种面向对象的解释型计算机程序设计语言，由荷兰人Guido van Rossum于1989年发明，第一个公开发行版发行于1991年。 可用于许多不同的编程项目。这个名字的灵感源自英国喜剧组织Monty Python，开发团队希望让Python成为一种有趣的语言，并于1991年首次发布。Python易于设置，编写方式相对简单，并及时反馈错误，是初学者和经验丰富的开发人员的绝佳选择。Python 3是该语言的最新版本。</p>\n</blockquote>\n<blockquote>\n<p>本教程将指导您在本地Linux机器上安装Python 3并通过命令行设置编程环境。本教程将介绍Debian 8的安装过程，原理适用于Debian Linux的任何其他发行版。</p>\n</blockquote>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><blockquote>\n<ol>\n<li>Debian 8或其他版本的Debian Linux的计算机（服务器）</li>\n</ol>\n</blockquote>\n<h3 id=\"第一步-安装Python-3\"><a href=\"#第一步-安装Python-3\" class=\"headerlink\" title=\"第一步 - 安装Python 3\"></a>第一步 - 安装Python 3</h3><blockquote>\n<p>我们将在命令行上完成安装和设置，这是一种与计算机交互的非图形方式。也就是说，您不是点击按钮，而是输入文本并通过文本从计算机接收反馈。命令行（也称为shell）可以帮助您修改和自动化您每天在计算机上执行的许多任务，是软件开发人员必不可少的工具。您可以学习许多终端命令，可以让您做更强大的事情。</p>\n</blockquote>\n<blockquote>\n<p>Debian 8和其他版本的Debian Linux都预装了Python 3和Python 2。为了确保我们的版本是最新的，让我们用apt-get更新和升级系统：</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get -y upgrade</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>-y将确认我们同意所有要安装的项目，但根据您的Linux版本不同，您可能需要确认其他提示作为系统更新和升级。</p>\n</blockquote>\n<blockquote>\n<p>完成该过程后，我们可以通过输入以下内容来检查系统中安装的Python 3的版本：</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 -V</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>您将在终端窗口中收到输出，告知您Python版本号。版本号可能会有所不同，像这样：<code>Python 3.9.0</code></p>\n</blockquote>\n<blockquote>\n<p>让我们安装pip管理Python的软件包：</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install -y python3-pip</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>pip是一个与Python一起使用的工具，主要用于安装和管理我们可能想要在我们的开发项目中使用的编程包。您可以输入以下命令安装Python包：</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install package_name</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>package_name可以指代任何Python包或库，例如用于Web开发的Django或用于科学计算的NumPy。因此，如果您想安装NumPy，可以使用pip3 install numpy命令执行此操作。</p>\n</blockquote>\n<blockquote>\n<p>还有一些软件包和开发工具可以安装，以确保我们为编程环境提供强大的设置，命令如下：</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install build-essential libssl-dev libffi-dev python-dev</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第二步-设置虚拟环境\"><a href=\"#第二步-设置虚拟环境\" class=\"headerlink\" title=\"第二步 - 设置虚拟环境\"></a>第二步 - 设置虚拟环境</h3><blockquote>\n<p>设置了Python，并安装了pip和其他工具后，我们就可以为我们的开发项目设置一个虚拟环境。</p>\n</blockquote>\n<blockquote>\n<p>虚拟环境使您可以在计算机上为Python项目创建一个隔离空间，确保每个项目都有自己的一组依赖项，这些依赖项不会破坏任何其他项目。</p>\n</blockquote>\n<blockquote>\n<p>设置编程环境使我们能够更好地控制Python项目以及如何处理不同版本的包。在使用第三方软件包时，这一点尤为重要。</p>\n</blockquote>\n<blockquote>\n<p>您可以根据需要设置尽可能多的Python编程环境。每个环境基本上都是计算机中的一个目录或文件夹，其中包含一些脚本以环境运行。</p>\n</blockquote>\n<blockquote>\n<p>首先，我们需要安装venv模块，它是Python 3库的一部分，以便我们可以为我们创建虚拟环境。我们输入以下命令安装venv：</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install -y python3-venv</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>安装完成后，我们就可以创建环境了。让我们选择我们想要放入Python编程环境的目录，或者我们可以用mkdir创建一个新目录，如：</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir environments</span><br><span class=\"line\">cd environments</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>进入您希望环境保存的目录后，可以通过运行以下命令来创建环境：</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 -m venv my_env</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这会设置一个新目录，其中包含一些我们可以用ls命令查看的项目：</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls my_env</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>bin  include  lib  lib64  pyvenv.cfg</code>这些文件一起用于确保您的项目与本地计算机的隔离，以便系统文件和项目文件不会混合。这是版本控制的一个好例子，并确保您的每个项目都可以访问所需的特定软件包。Python Wheels是Python的内置包格式，可以通过减少编译所需的次数来加速软件生产。你会在每个lib目录中找到它。</p>\n</blockquote>\n<blockquote>\n<p>要使用此环境，您需要激活它，您可以通过输入以下调用activate脚本的命令来执行此操作：</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source my_env/bin/activate</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>您的提示现在将以您的环境名称为前缀，在这里是my_env。根据您运行的Debian Linux的版本不同，您的前缀可能看起来有所不同，他们看起来应该是这样子的：</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(my_env) sammy@sammy:~/environments$</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这个前缀让我们知道环境当前是my_env在运行的，这意味着当我们在这里创建程序时，它们将只使用这个特定环境的设置和包。</p>\n</blockquote>\n<blockquote>\n<p>注意：在虚拟环境中，您可以使用python代替python3，pip代替pip3。如果在环境之外使用Python 3，则需要专门使用python3和pip3。</p>\n</blockquote>\n<blockquote>\n<p>执行这些步骤后，您的虚拟环境即可使用。</p>\n</blockquote>\n<h3 id=\"第3步-离开虚拟环境\"><a href=\"#第3步-离开虚拟环境\" class=\"headerlink\" title=\"第3步 - 离开虚拟环境\"></a>第3步 - 离开虚拟环境</h3><blockquote>\n<p>要离开环境，只需输入命令<code>deactivate</code>，您将返回到原始目录。</p>\n</blockquote>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><blockquote>\n<p>恭喜！此时，您已经学会了如何设置了Python 3编程环境，可以开始编写项目啦！更多Python教程请关注腾讯云+社区。</p>\n</blockquote>\n<p>####参考文献：《How To Install Python 3 and Set Up a Local Programming Environment on Debian 8》</p>\n"},{"title":"python-opencv-img","mp3":"http://domain.com/awesome.mp3","cover":"http://domain.com/awesome.jpg","date":"2022-11-25T02:14:43.000Z","_content":"https://blog.csdn.net/sinat_31117133/article/details/88207718\nhttps://blog.csdn.net/qq_35831978/article/details/106988028","source":"_posts/python-opencv-img.md","raw":"---\ntitle: python-opencv-img\nmp3: http://domain.com/awesome.mp3\ncover: http://domain.com/awesome.jpg\ndate: 2022-11-25 10:14:43\ncategories: \ntags:\n---\nhttps://blog.csdn.net/sinat_31117133/article/details/88207718\nhttps://blog.csdn.net/qq_35831978/article/details/106988028","slug":"python-opencv-img","published":1,"updated":"2023-07-23T14:19:11.344Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkjdd1ct003698aj1zfm0fbf","content":"<p><a href=\"https://blog.csdn.net/sinat_31117133/article/details/88207718\">https://blog.csdn.net/sinat_31117133/article/details/88207718</a><br><a href=\"https://blog.csdn.net/qq_35831978/article/details/106988028\">https://blog.csdn.net/qq_35831978/article/details/106988028</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://blog.csdn.net/sinat_31117133/article/details/88207718\">https://blog.csdn.net/sinat_31117133/article/details/88207718</a><br><a href=\"https://blog.csdn.net/qq_35831978/article/details/106988028\">https://blog.csdn.net/qq_35831978/article/details/106988028</a></p>\n"},{"title":"python读取文件内容的三种方法","date":"2022-10-14T09:23:59.000Z","_content":"#这里介绍利用Python读取文本文件内容的三种方法：`read()`、`readline()`和`readlines()`。\n\n假设`sxl.txt`文件内容如下：\n\n```\ni like the movie\ni ate an egg\nread()方法\n```\n\n## `read（）`方法表示一次读取文件全部内容，该方法返回字符串。\n\n```python\nf = open(\"sxl.txt\")\nlines = f.read()\nprint lines\nprint(type(lines))\nf.close()\n```\n输出结果：\n\n```\ni like the movie\ni ate an egg\n<class 'str'>\n```\n\n## `readline（）`方法\n\n该方法每次读出一行内容，所以，读取时占用内存小，比较适合大文件，该方法返回一个字符串对象。\n\n```python\nf = open(\"sxl.txt\")\nline = f.readline()\nwhile line:\n    print (line)\n    print(type(line))\n    line = f.readline()\nf.close()\n```\n\n输出结果：\n\n```\ni like the movie\n<class 'str'>\ni ate an egg\n<class 'str'>\n```\n\n## readlines（）方法\n\nreadlines()方法读取整个文件所有行，保存在一个列表(list)变量中，每次读取一行，但读取大文件会比较占内存。\n\n```python\nf = open(\"sxl.txt\")\nlines = f.readlines()\nfor line in lines:\n    print (line)\n    print(type(line))\nf.close()\n```\n\n输出结果：\n\n```\ni like the movie\n<class 'str'>\ni ate an egg\n<class 'str'>\n```\n\n最后还有一种方式，与第三种方法类似。\n\nf = open(\"sxl.txt\")\nprint (type(f))\nfor line in f:\n    print (line)\n    print(type(line))\nf.close()\n输出结果：\n\n<class '_io.TextIOWrapper'>\ni like the movie\n<class 'str'>\ni ate an egg\n<class 'str'>\n\n# OR\n\n\n0.准备\n假设a.txt的内容如下所示：\n\nHello\nWelcome\nWhat is the fuck...\n1. read([size])方法\nread([size])方法从文件当前位置起读取size个字节，若无参数size，则表示读取至文件结束为止，它范围为字符串对象\n\nf = open(\"a.txt\")\nlines = f.read()\nprint lines\nprint(type(lines))\nf.close()\n输出结果：\n\nHello\nWelcome\nWhat is the fuck...\n<type 'str'> #字符串类型\n2.readline()方法\n从字面意思可以看出，该方法每次读出一行内容，所以，读取时占用内存小，比较适合大文件，该方法返回一个字符串对象。\n\nf = open(\"a.txt\")\nline = f.readline()\nprint(type(line))\nwhile line:\n    print line,\n    line = f.readline()\nf.close()\n输出结果：\n\n<type 'str'>\nHello\nWelcome\nWhat is the fuck...\n3.readlines()方法读取整个文件所有行，保存在一个列表(list)变量中，每行作为一个元素，但读取大文件会比较占内存。\nf = open(\"a.txt\")\nlines = f.readlines()\nprint(type(lines))\nfor line in lines:\n    print line，\nf.close()\n输出结果：\n<type 'list'>\nHello\nWelcome\nWhat is the fuck...\n\n4.linecache模块\n当然，有特殊需求还可以用linecache模块，比如你要输出某个文件的第n行：\n\n# 输出第2行\ntext = linecache.getline(‘a.txt’,2)\nprint text,\n对于大文件效率还可以。\n","source":"_posts/python-read.md","raw":"---\ntitle: python读取文件内容的三种方法\ndate: 2022-10-14 17:23:59\ntags: python\ncategories: 学习\n---\n#这里介绍利用Python读取文本文件内容的三种方法：`read()`、`readline()`和`readlines()`。\n\n假设`sxl.txt`文件内容如下：\n\n```\ni like the movie\ni ate an egg\nread()方法\n```\n\n## `read（）`方法表示一次读取文件全部内容，该方法返回字符串。\n\n```python\nf = open(\"sxl.txt\")\nlines = f.read()\nprint lines\nprint(type(lines))\nf.close()\n```\n输出结果：\n\n```\ni like the movie\ni ate an egg\n<class 'str'>\n```\n\n## `readline（）`方法\n\n该方法每次读出一行内容，所以，读取时占用内存小，比较适合大文件，该方法返回一个字符串对象。\n\n```python\nf = open(\"sxl.txt\")\nline = f.readline()\nwhile line:\n    print (line)\n    print(type(line))\n    line = f.readline()\nf.close()\n```\n\n输出结果：\n\n```\ni like the movie\n<class 'str'>\ni ate an egg\n<class 'str'>\n```\n\n## readlines（）方法\n\nreadlines()方法读取整个文件所有行，保存在一个列表(list)变量中，每次读取一行，但读取大文件会比较占内存。\n\n```python\nf = open(\"sxl.txt\")\nlines = f.readlines()\nfor line in lines:\n    print (line)\n    print(type(line))\nf.close()\n```\n\n输出结果：\n\n```\ni like the movie\n<class 'str'>\ni ate an egg\n<class 'str'>\n```\n\n最后还有一种方式，与第三种方法类似。\n\nf = open(\"sxl.txt\")\nprint (type(f))\nfor line in f:\n    print (line)\n    print(type(line))\nf.close()\n输出结果：\n\n<class '_io.TextIOWrapper'>\ni like the movie\n<class 'str'>\ni ate an egg\n<class 'str'>\n\n# OR\n\n\n0.准备\n假设a.txt的内容如下所示：\n\nHello\nWelcome\nWhat is the fuck...\n1. read([size])方法\nread([size])方法从文件当前位置起读取size个字节，若无参数size，则表示读取至文件结束为止，它范围为字符串对象\n\nf = open(\"a.txt\")\nlines = f.read()\nprint lines\nprint(type(lines))\nf.close()\n输出结果：\n\nHello\nWelcome\nWhat is the fuck...\n<type 'str'> #字符串类型\n2.readline()方法\n从字面意思可以看出，该方法每次读出一行内容，所以，读取时占用内存小，比较适合大文件，该方法返回一个字符串对象。\n\nf = open(\"a.txt\")\nline = f.readline()\nprint(type(line))\nwhile line:\n    print line,\n    line = f.readline()\nf.close()\n输出结果：\n\n<type 'str'>\nHello\nWelcome\nWhat is the fuck...\n3.readlines()方法读取整个文件所有行，保存在一个列表(list)变量中，每行作为一个元素，但读取大文件会比较占内存。\nf = open(\"a.txt\")\nlines = f.readlines()\nprint(type(lines))\nfor line in lines:\n    print line，\nf.close()\n输出结果：\n<type 'list'>\nHello\nWelcome\nWhat is the fuck...\n\n4.linecache模块\n当然，有特殊需求还可以用linecache模块，比如你要输出某个文件的第n行：\n\n# 输出第2行\ntext = linecache.getline(‘a.txt’,2)\nprint text,\n对于大文件效率还可以。\n","slug":"python-read","published":1,"updated":"2023-07-23T14:19:14.298Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkjdd1cv003998aje33v59yi","content":"<p>#这里介绍利用Python读取文本文件内容的三种方法：<code>read()</code>、<code>readline()</code>和<code>readlines()</code>。</p>\n<p>假设<code>sxl.txt</code>文件内容如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i like the movie</span><br><span class=\"line\">i ate an egg</span><br><span class=\"line\">read()方法</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"read（）方法表示一次读取文件全部内容，该方法返回字符串。\"><a href=\"#read（）方法表示一次读取文件全部内容，该方法返回字符串。\" class=\"headerlink\" title=\"read（）方法表示一次读取文件全部内容，该方法返回字符串。\"></a><code>read（）</code>方法表示一次读取文件全部内容，该方法返回字符串。</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;sxl.txt&quot;</span>)</span><br><span class=\"line\">lines = f.read()</span><br><span class=\"line\"><span class=\"built_in\">print</span> lines</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(lines))</span><br><span class=\"line\">f.close()</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i like the movie</span><br><span class=\"line\">i ate an egg</span><br><span class=\"line\">&lt;class &#x27;str&#x27;&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"readline（）方法\"><a href=\"#readline（）方法\" class=\"headerlink\" title=\"readline（）方法\"></a><code>readline（）</code>方法</h2><p>该方法每次读出一行内容，所以，读取时占用内存小，比较适合大文件，该方法返回一个字符串对象。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;sxl.txt&quot;</span>)</span><br><span class=\"line\">line = f.readline()</span><br><span class=\"line\"><span class=\"keyword\">while</span> line:</span><br><span class=\"line\">    <span class=\"built_in\">print</span> (line)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(line))</span><br><span class=\"line\">    line = f.readline()</span><br><span class=\"line\">f.close()</span><br></pre></td></tr></table></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i like the movie</span><br><span class=\"line\">&lt;class &#x27;str&#x27;&gt;</span><br><span class=\"line\">i ate an egg</span><br><span class=\"line\">&lt;class &#x27;str&#x27;&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"readlines（）方法\"><a href=\"#readlines（）方法\" class=\"headerlink\" title=\"readlines（）方法\"></a>readlines（）方法</h2><p>readlines()方法读取整个文件所有行，保存在一个列表(list)变量中，每次读取一行，但读取大文件会比较占内存。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;sxl.txt&quot;</span>)</span><br><span class=\"line\">lines = f.readlines()</span><br><span class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> lines:</span><br><span class=\"line\">    <span class=\"built_in\">print</span> (line)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(line))</span><br><span class=\"line\">f.close()</span><br></pre></td></tr></table></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i like the movie</span><br><span class=\"line\">&lt;class &#x27;str&#x27;&gt;</span><br><span class=\"line\">i ate an egg</span><br><span class=\"line\">&lt;class &#x27;str&#x27;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>最后还有一种方式，与第三种方法类似。</p>\n<p>f &#x3D; open(“sxl.txt”)<br>print (type(f))<br>for line in f:<br>    print (line)<br>    print(type(line))<br>f.close()<br>输出结果：</p>\n<p>&lt;class ‘_io.TextIOWrapper’&gt;<br>i like the movie<br>&lt;class ‘str’&gt;<br>i ate an egg<br>&lt;class ‘str’&gt;</p>\n<h1 id=\"OR\"><a href=\"#OR\" class=\"headerlink\" title=\"OR\"></a>OR</h1><p>0.准备<br>假设a.txt的内容如下所示：</p>\n<p>Hello<br>Welcome<br>What is the fuck…</p>\n<ol>\n<li>read([size])方法<br>read([size])方法从文件当前位置起读取size个字节，若无参数size，则表示读取至文件结束为止，它范围为字符串对象</li>\n</ol>\n<p>f &#x3D; open(“a.txt”)<br>lines &#x3D; f.read()<br>print lines<br>print(type(lines))<br>f.close()<br>输出结果：</p>\n<p>Hello<br>Welcome<br>What is the fuck…<br>&lt;type ‘str’&gt; #字符串类型<br>2.readline()方法<br>从字面意思可以看出，该方法每次读出一行内容，所以，读取时占用内存小，比较适合大文件，该方法返回一个字符串对象。</p>\n<p>f &#x3D; open(“a.txt”)<br>line &#x3D; f.readline()<br>print(type(line))<br>while line:<br>    print line,<br>    line &#x3D; f.readline()<br>f.close()<br>输出结果：</p>\n<p>&lt;type ‘str’&gt;<br>Hello<br>Welcome<br>What is the fuck…<br>3.readlines()方法读取整个文件所有行，保存在一个列表(list)变量中，每行作为一个元素，但读取大文件会比较占内存。<br>f &#x3D; open(“a.txt”)<br>lines &#x3D; f.readlines()<br>print(type(lines))<br>for line in lines:<br>    print line，<br>f.close()<br>输出结果：<br>&lt;type ‘list’&gt;<br>Hello<br>Welcome<br>What is the fuck…</p>\n<p>4.linecache模块<br>当然，有特殊需求还可以用linecache模块，比如你要输出某个文件的第n行：</p>\n<h1 id=\"输出第2行\"><a href=\"#输出第2行\" class=\"headerlink\" title=\"输出第2行\"></a>输出第2行</h1><p>text &#x3D; linecache.getline(‘a.txt’,2)<br>print text,<br>对于大文件效率还可以。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>#这里介绍利用Python读取文本文件内容的三种方法：<code>read()</code>、<code>readline()</code>和<code>readlines()</code>。</p>\n<p>假设<code>sxl.txt</code>文件内容如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i like the movie</span><br><span class=\"line\">i ate an egg</span><br><span class=\"line\">read()方法</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"read（）方法表示一次读取文件全部内容，该方法返回字符串。\"><a href=\"#read（）方法表示一次读取文件全部内容，该方法返回字符串。\" class=\"headerlink\" title=\"read（）方法表示一次读取文件全部内容，该方法返回字符串。\"></a><code>read（）</code>方法表示一次读取文件全部内容，该方法返回字符串。</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;sxl.txt&quot;</span>)</span><br><span class=\"line\">lines = f.read()</span><br><span class=\"line\"><span class=\"built_in\">print</span> lines</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(lines))</span><br><span class=\"line\">f.close()</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i like the movie</span><br><span class=\"line\">i ate an egg</span><br><span class=\"line\">&lt;class &#x27;str&#x27;&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"readline（）方法\"><a href=\"#readline（）方法\" class=\"headerlink\" title=\"readline（）方法\"></a><code>readline（）</code>方法</h2><p>该方法每次读出一行内容，所以，读取时占用内存小，比较适合大文件，该方法返回一个字符串对象。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;sxl.txt&quot;</span>)</span><br><span class=\"line\">line = f.readline()</span><br><span class=\"line\"><span class=\"keyword\">while</span> line:</span><br><span class=\"line\">    <span class=\"built_in\">print</span> (line)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(line))</span><br><span class=\"line\">    line = f.readline()</span><br><span class=\"line\">f.close()</span><br></pre></td></tr></table></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i like the movie</span><br><span class=\"line\">&lt;class &#x27;str&#x27;&gt;</span><br><span class=\"line\">i ate an egg</span><br><span class=\"line\">&lt;class &#x27;str&#x27;&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"readlines（）方法\"><a href=\"#readlines（）方法\" class=\"headerlink\" title=\"readlines（）方法\"></a>readlines（）方法</h2><p>readlines()方法读取整个文件所有行，保存在一个列表(list)变量中，每次读取一行，但读取大文件会比较占内存。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;sxl.txt&quot;</span>)</span><br><span class=\"line\">lines = f.readlines()</span><br><span class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> lines:</span><br><span class=\"line\">    <span class=\"built_in\">print</span> (line)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(line))</span><br><span class=\"line\">f.close()</span><br></pre></td></tr></table></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i like the movie</span><br><span class=\"line\">&lt;class &#x27;str&#x27;&gt;</span><br><span class=\"line\">i ate an egg</span><br><span class=\"line\">&lt;class &#x27;str&#x27;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>最后还有一种方式，与第三种方法类似。</p>\n<p>f &#x3D; open(“sxl.txt”)<br>print (type(f))<br>for line in f:<br>    print (line)<br>    print(type(line))<br>f.close()<br>输出结果：</p>\n<p>&lt;class ‘_io.TextIOWrapper’&gt;<br>i like the movie<br>&lt;class ‘str’&gt;<br>i ate an egg<br>&lt;class ‘str’&gt;</p>\n<h1 id=\"OR\"><a href=\"#OR\" class=\"headerlink\" title=\"OR\"></a>OR</h1><p>0.准备<br>假设a.txt的内容如下所示：</p>\n<p>Hello<br>Welcome<br>What is the fuck…</p>\n<ol>\n<li>read([size])方法<br>read([size])方法从文件当前位置起读取size个字节，若无参数size，则表示读取至文件结束为止，它范围为字符串对象</li>\n</ol>\n<p>f &#x3D; open(“a.txt”)<br>lines &#x3D; f.read()<br>print lines<br>print(type(lines))<br>f.close()<br>输出结果：</p>\n<p>Hello<br>Welcome<br>What is the fuck…<br>&lt;type ‘str’&gt; #字符串类型<br>2.readline()方法<br>从字面意思可以看出，该方法每次读出一行内容，所以，读取时占用内存小，比较适合大文件，该方法返回一个字符串对象。</p>\n<p>f &#x3D; open(“a.txt”)<br>line &#x3D; f.readline()<br>print(type(line))<br>while line:<br>    print line,<br>    line &#x3D; f.readline()<br>f.close()<br>输出结果：</p>\n<p>&lt;type ‘str’&gt;<br>Hello<br>Welcome<br>What is the fuck…<br>3.readlines()方法读取整个文件所有行，保存在一个列表(list)变量中，每行作为一个元素，但读取大文件会比较占内存。<br>f &#x3D; open(“a.txt”)<br>lines &#x3D; f.readlines()<br>print(type(lines))<br>for line in lines:<br>    print line，<br>f.close()<br>输出结果：<br>&lt;type ‘list’&gt;<br>Hello<br>Welcome<br>What is the fuck…</p>\n<p>4.linecache模块<br>当然，有特殊需求还可以用linecache模块，比如你要输出某个文件的第n行：</p>\n<h1 id=\"输出第2行\"><a href=\"#输出第2行\" class=\"headerlink\" title=\"输出第2行\"></a>输出第2行</h1><p>text &#x3D; linecache.getline(‘a.txt’,2)<br>print text,<br>对于大文件效率还可以。</p>\n"},{"title":"python字符串处理","date":"2022-10-14T09:27:24.000Z","_content":"str='python String function'\n\n生成字符串变量str='python String function'\n\n字符串长度获取：len(str)\n例：print '%s length=%d' % (str,len(str))\n\n一、字母处理\n全部大写：str.upper()\n全部小写：str.lower()\n大小写互换：str.swapcase()\n首字母大写，其余小写：str.capitalize()\n首字母大写：str.title()\nprint '%s lower=%s' % (str,str.lower())\nprint '%s upper=%s' % (str,str.upper())\nprint '%s swapcase=%s' % (str,str.swapcase())\nprint '%s capitalize=%s' % (str,str.capitalize())\nprint '%s title=%s' % (str,str.title()) \n二、格式化相关\n获取固定长度，右对齐，左边不够用空格补齐：str.ljust(width)\n获取固定长度，左对齐，右边不够用空格补齐：str.ljust(width)\n获取固定长度，中间对齐，两边不够用空格补齐：str.ljust(width)\n获取固定长度，右对齐，左边不足用0补齐\nprint '%s ljust=%s' % (str,str.ljust(20))\nprint '%s rjust=%s' % (str,str.rjust(20))\nprint '%s center=%s' % (str,str.center(20))\nprint '%s zfill=%s' % (str,str.zfill(20))\n\n三、字符串搜索相关\n搜索指定字符串，没有返回-1：str.find('t')\n指定起始位置搜索：str.find('t',start)\n指定起始及结束位置搜索：str.find('t',start,end)\n从右边开始查找：str.rfind('t')\n搜索到多少个指定字符串：str.count('t')\n上面所有方法都可用index代替，不同的是使用index查找不到会抛异常，而find返回-1\nprint '%s find nono=%d' % (str,str.find('nono'))\nprint '%s find t=%d' % (str,str.find('t'))\nprint '%s find t from %d=%d' % (str,1,str.find('t',1))\nprint '%s find t from %d to %d=%d' % (str,1,2,str.find('t',1,2))\n#print '%s index nono ' % (str,str.index('nono',1,2))\nprint '%s rfind t=%d' % (str,str.rfind('t'))\nprint '%s count t=%d' % (str,str.count('t'))\n\n三、字符串替换相关\n替换old为new：str.replace('old','new')\n替换指定次数的old为new：str.replace('old','new',maxReplaceTimes)\nprint '%s replace t to *=%s' % (str,str.replace('t', '*'))\nprint '%s replace t to *=%s' % (str,str.replace('t', '*',1))\n\n四、字符串去空格及去指定字符\n去两边空格：str.strip()\n去左空格：str.lstrip()\n去右空格：str.rstrip()\n去两边字符串：str.strip('d')，相应的也有lstrip，rstrip\nstr=' python String function '\nprint '%s strip=%s' % (str,str.strip())\nstr='python String function'\nprint '%s strip=%s' % (str,str.strip('d'))\n\n按指定字符分割字符串为数组：str.split(' ')\n\n五、默认按空格分隔\nstr='a b c de'\nprint '%s strip=%s' % (str,str.split())\nstr='a-b-c-de'\nprint '%s strip=%s' % (str,str.split('-'))\n\n六、字符串判断相关\n是否以start开头：str.startswith('start')\n是否以end结尾：str.endswith('end')\n是否全为字母或数字：str.isalnum()\n是否全字母：str.isalpha()\n是否全数字：str.isdigit()\n是否全小写：str.islower()\n是否全大写：str.isupper()\nstr='python String function'\nprint '%s startwith t=%s' % (str,str.startswith('t'))\nprint '%s endwith d=%s' % (str,str.endswith('d'))\nprint '%s isalnum=%s' % (str,str.isalnum())\nstr='pythonStringfunction'\nprint '%s isalnum=%s' % (str,str.isalnum())\nprint '%s isalpha=%s' % (str,str.isalpha())\nprint '%s isupper=%s' % (str,str.isupper())\nprint '%s islower=%s' % (str,str.islower())\nprint '%s isdigit=%s' % (str,str.isdigit())\nstr='3423'\nprint '%s isdigit=%s' % (str,str.isdigit())","source":"_posts/python-str.md","raw":"---\ntitle: python字符串处理\ndate: 2022-10-14 17:27:24\ntags: python\ncategories: 学习\n---\nstr='python String function'\n\n生成字符串变量str='python String function'\n\n字符串长度获取：len(str)\n例：print '%s length=%d' % (str,len(str))\n\n一、字母处理\n全部大写：str.upper()\n全部小写：str.lower()\n大小写互换：str.swapcase()\n首字母大写，其余小写：str.capitalize()\n首字母大写：str.title()\nprint '%s lower=%s' % (str,str.lower())\nprint '%s upper=%s' % (str,str.upper())\nprint '%s swapcase=%s' % (str,str.swapcase())\nprint '%s capitalize=%s' % (str,str.capitalize())\nprint '%s title=%s' % (str,str.title()) \n二、格式化相关\n获取固定长度，右对齐，左边不够用空格补齐：str.ljust(width)\n获取固定长度，左对齐，右边不够用空格补齐：str.ljust(width)\n获取固定长度，中间对齐，两边不够用空格补齐：str.ljust(width)\n获取固定长度，右对齐，左边不足用0补齐\nprint '%s ljust=%s' % (str,str.ljust(20))\nprint '%s rjust=%s' % (str,str.rjust(20))\nprint '%s center=%s' % (str,str.center(20))\nprint '%s zfill=%s' % (str,str.zfill(20))\n\n三、字符串搜索相关\n搜索指定字符串，没有返回-1：str.find('t')\n指定起始位置搜索：str.find('t',start)\n指定起始及结束位置搜索：str.find('t',start,end)\n从右边开始查找：str.rfind('t')\n搜索到多少个指定字符串：str.count('t')\n上面所有方法都可用index代替，不同的是使用index查找不到会抛异常，而find返回-1\nprint '%s find nono=%d' % (str,str.find('nono'))\nprint '%s find t=%d' % (str,str.find('t'))\nprint '%s find t from %d=%d' % (str,1,str.find('t',1))\nprint '%s find t from %d to %d=%d' % (str,1,2,str.find('t',1,2))\n#print '%s index nono ' % (str,str.index('nono',1,2))\nprint '%s rfind t=%d' % (str,str.rfind('t'))\nprint '%s count t=%d' % (str,str.count('t'))\n\n三、字符串替换相关\n替换old为new：str.replace('old','new')\n替换指定次数的old为new：str.replace('old','new',maxReplaceTimes)\nprint '%s replace t to *=%s' % (str,str.replace('t', '*'))\nprint '%s replace t to *=%s' % (str,str.replace('t', '*',1))\n\n四、字符串去空格及去指定字符\n去两边空格：str.strip()\n去左空格：str.lstrip()\n去右空格：str.rstrip()\n去两边字符串：str.strip('d')，相应的也有lstrip，rstrip\nstr=' python String function '\nprint '%s strip=%s' % (str,str.strip())\nstr='python String function'\nprint '%s strip=%s' % (str,str.strip('d'))\n\n按指定字符分割字符串为数组：str.split(' ')\n\n五、默认按空格分隔\nstr='a b c de'\nprint '%s strip=%s' % (str,str.split())\nstr='a-b-c-de'\nprint '%s strip=%s' % (str,str.split('-'))\n\n六、字符串判断相关\n是否以start开头：str.startswith('start')\n是否以end结尾：str.endswith('end')\n是否全为字母或数字：str.isalnum()\n是否全字母：str.isalpha()\n是否全数字：str.isdigit()\n是否全小写：str.islower()\n是否全大写：str.isupper()\nstr='python String function'\nprint '%s startwith t=%s' % (str,str.startswith('t'))\nprint '%s endwith d=%s' % (str,str.endswith('d'))\nprint '%s isalnum=%s' % (str,str.isalnum())\nstr='pythonStringfunction'\nprint '%s isalnum=%s' % (str,str.isalnum())\nprint '%s isalpha=%s' % (str,str.isalpha())\nprint '%s isupper=%s' % (str,str.isupper())\nprint '%s islower=%s' % (str,str.islower())\nprint '%s isdigit=%s' % (str,str.isdigit())\nstr='3423'\nprint '%s isdigit=%s' % (str,str.isdigit())","slug":"python-str","published":1,"updated":"2023-07-23T14:19:12.345Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkjdd1cx003c98aj0vfidp7p","content":"<p>str&#x3D;’python String function’</p>\n<p>生成字符串变量str&#x3D;’python String function’</p>\n<p>字符串长度获取：len(str)<br>例：print ‘%s length&#x3D;%d’ % (str,len(str))</p>\n<p>一、字母处理<br>全部大写：str.upper()<br>全部小写：str.lower()<br>大小写互换：str.swapcase()<br>首字母大写，其余小写：str.capitalize()<br>首字母大写：str.title()<br>print ‘%s lower&#x3D;%s’ % (str,str.lower())<br>print ‘%s upper&#x3D;%s’ % (str,str.upper())<br>print ‘%s swapcase&#x3D;%s’ % (str,str.swapcase())<br>print ‘%s capitalize&#x3D;%s’ % (str,str.capitalize())<br>print ‘%s title&#x3D;%s’ % (str,str.title())<br>二、格式化相关<br>获取固定长度，右对齐，左边不够用空格补齐：str.ljust(width)<br>获取固定长度，左对齐，右边不够用空格补齐：str.ljust(width)<br>获取固定长度，中间对齐，两边不够用空格补齐：str.ljust(width)<br>获取固定长度，右对齐，左边不足用0补齐<br>print ‘%s ljust&#x3D;%s’ % (str,str.ljust(20))<br>print ‘%s rjust&#x3D;%s’ % (str,str.rjust(20))<br>print ‘%s center&#x3D;%s’ % (str,str.center(20))<br>print ‘%s zfill&#x3D;%s’ % (str,str.zfill(20))</p>\n<p>三、字符串搜索相关<br>搜索指定字符串，没有返回-1：str.find(‘t’)<br>指定起始位置搜索：str.find(‘t’,start)<br>指定起始及结束位置搜索：str.find(‘t’,start,end)<br>从右边开始查找：str.rfind(‘t’)<br>搜索到多少个指定字符串：str.count(‘t’)<br>上面所有方法都可用index代替，不同的是使用index查找不到会抛异常，而find返回-1<br>print ‘%s find nono&#x3D;%d’ % (str,str.find(‘nono’))<br>print ‘%s find t&#x3D;%d’ % (str,str.find(‘t’))<br>print ‘%s find t from %d&#x3D;%d’ % (str,1,str.find(‘t’,1))<br>print ‘%s find t from %d to %d&#x3D;%d’ % (str,1,2,str.find(‘t’,1,2))<br>#print ‘%s index nono ‘ % (str,str.index(‘nono’,1,2))<br>print ‘%s rfind t&#x3D;%d’ % (str,str.rfind(‘t’))<br>print ‘%s count t&#x3D;%d’ % (str,str.count(‘t’))</p>\n<p>三、字符串替换相关<br>替换old为new：str.replace(‘old’,’new’)<br>替换指定次数的old为new：str.replace(‘old’,’new’,maxReplaceTimes)<br>print ‘%s replace t to <em>&#x3D;%s’ % (str,str.replace(‘t’, ‘</em>‘))<br>print ‘%s replace t to <em>&#x3D;%s’ % (str,str.replace(‘t’, ‘</em>‘,1))</p>\n<p>四、字符串去空格及去指定字符<br>去两边空格：str.strip()<br>去左空格：str.lstrip()<br>去右空格：str.rstrip()<br>去两边字符串：str.strip(‘d’)，相应的也有lstrip，rstrip<br>str&#x3D;’ python String function ‘<br>print ‘%s strip&#x3D;%s’ % (str,str.strip())<br>str&#x3D;’python String function’<br>print ‘%s strip&#x3D;%s’ % (str,str.strip(‘d’))</p>\n<p>按指定字符分割字符串为数组：str.split(‘ ‘)</p>\n<p>五、默认按空格分隔<br>str&#x3D;’a b c de’<br>print ‘%s strip&#x3D;%s’ % (str,str.split())<br>str&#x3D;’a-b-c-de’<br>print ‘%s strip&#x3D;%s’ % (str,str.split(‘-‘))</p>\n<p>六、字符串判断相关<br>是否以start开头：str.startswith(‘start’)<br>是否以end结尾：str.endswith(‘end’)<br>是否全为字母或数字：str.isalnum()<br>是否全字母：str.isalpha()<br>是否全数字：str.isdigit()<br>是否全小写：str.islower()<br>是否全大写：str.isupper()<br>str&#x3D;’python String function’<br>print ‘%s startwith t&#x3D;%s’ % (str,str.startswith(‘t’))<br>print ‘%s endwith d&#x3D;%s’ % (str,str.endswith(‘d’))<br>print ‘%s isalnum&#x3D;%s’ % (str,str.isalnum())<br>str&#x3D;’pythonStringfunction’<br>print ‘%s isalnum&#x3D;%s’ % (str,str.isalnum())<br>print ‘%s isalpha&#x3D;%s’ % (str,str.isalpha())<br>print ‘%s isupper&#x3D;%s’ % (str,str.isupper())<br>print ‘%s islower&#x3D;%s’ % (str,str.islower())<br>print ‘%s isdigit&#x3D;%s’ % (str,str.isdigit())<br>str&#x3D;’3423’<br>print ‘%s isdigit&#x3D;%s’ % (str,str.isdigit())</p>\n","site":{"data":{}},"excerpt":"","more":"<p>str&#x3D;’python String function’</p>\n<p>生成字符串变量str&#x3D;’python String function’</p>\n<p>字符串长度获取：len(str)<br>例：print ‘%s length&#x3D;%d’ % (str,len(str))</p>\n<p>一、字母处理<br>全部大写：str.upper()<br>全部小写：str.lower()<br>大小写互换：str.swapcase()<br>首字母大写，其余小写：str.capitalize()<br>首字母大写：str.title()<br>print ‘%s lower&#x3D;%s’ % (str,str.lower())<br>print ‘%s upper&#x3D;%s’ % (str,str.upper())<br>print ‘%s swapcase&#x3D;%s’ % (str,str.swapcase())<br>print ‘%s capitalize&#x3D;%s’ % (str,str.capitalize())<br>print ‘%s title&#x3D;%s’ % (str,str.title())<br>二、格式化相关<br>获取固定长度，右对齐，左边不够用空格补齐：str.ljust(width)<br>获取固定长度，左对齐，右边不够用空格补齐：str.ljust(width)<br>获取固定长度，中间对齐，两边不够用空格补齐：str.ljust(width)<br>获取固定长度，右对齐，左边不足用0补齐<br>print ‘%s ljust&#x3D;%s’ % (str,str.ljust(20))<br>print ‘%s rjust&#x3D;%s’ % (str,str.rjust(20))<br>print ‘%s center&#x3D;%s’ % (str,str.center(20))<br>print ‘%s zfill&#x3D;%s’ % (str,str.zfill(20))</p>\n<p>三、字符串搜索相关<br>搜索指定字符串，没有返回-1：str.find(‘t’)<br>指定起始位置搜索：str.find(‘t’,start)<br>指定起始及结束位置搜索：str.find(‘t’,start,end)<br>从右边开始查找：str.rfind(‘t’)<br>搜索到多少个指定字符串：str.count(‘t’)<br>上面所有方法都可用index代替，不同的是使用index查找不到会抛异常，而find返回-1<br>print ‘%s find nono&#x3D;%d’ % (str,str.find(‘nono’))<br>print ‘%s find t&#x3D;%d’ % (str,str.find(‘t’))<br>print ‘%s find t from %d&#x3D;%d’ % (str,1,str.find(‘t’,1))<br>print ‘%s find t from %d to %d&#x3D;%d’ % (str,1,2,str.find(‘t’,1,2))<br>#print ‘%s index nono ‘ % (str,str.index(‘nono’,1,2))<br>print ‘%s rfind t&#x3D;%d’ % (str,str.rfind(‘t’))<br>print ‘%s count t&#x3D;%d’ % (str,str.count(‘t’))</p>\n<p>三、字符串替换相关<br>替换old为new：str.replace(‘old’,’new’)<br>替换指定次数的old为new：str.replace(‘old’,’new’,maxReplaceTimes)<br>print ‘%s replace t to <em>&#x3D;%s’ % (str,str.replace(‘t’, ‘</em>‘))<br>print ‘%s replace t to <em>&#x3D;%s’ % (str,str.replace(‘t’, ‘</em>‘,1))</p>\n<p>四、字符串去空格及去指定字符<br>去两边空格：str.strip()<br>去左空格：str.lstrip()<br>去右空格：str.rstrip()<br>去两边字符串：str.strip(‘d’)，相应的也有lstrip，rstrip<br>str&#x3D;’ python String function ‘<br>print ‘%s strip&#x3D;%s’ % (str,str.strip())<br>str&#x3D;’python String function’<br>print ‘%s strip&#x3D;%s’ % (str,str.strip(‘d’))</p>\n<p>按指定字符分割字符串为数组：str.split(‘ ‘)</p>\n<p>五、默认按空格分隔<br>str&#x3D;’a b c de’<br>print ‘%s strip&#x3D;%s’ % (str,str.split())<br>str&#x3D;’a-b-c-de’<br>print ‘%s strip&#x3D;%s’ % (str,str.split(‘-‘))</p>\n<p>六、字符串判断相关<br>是否以start开头：str.startswith(‘start’)<br>是否以end结尾：str.endswith(‘end’)<br>是否全为字母或数字：str.isalnum()<br>是否全字母：str.isalpha()<br>是否全数字：str.isdigit()<br>是否全小写：str.islower()<br>是否全大写：str.isupper()<br>str&#x3D;’python String function’<br>print ‘%s startwith t&#x3D;%s’ % (str,str.startswith(‘t’))<br>print ‘%s endwith d&#x3D;%s’ % (str,str.endswith(‘d’))<br>print ‘%s isalnum&#x3D;%s’ % (str,str.isalnum())<br>str&#x3D;’pythonStringfunction’<br>print ‘%s isalnum&#x3D;%s’ % (str,str.isalnum())<br>print ‘%s isalpha&#x3D;%s’ % (str,str.isalpha())<br>print ‘%s isupper&#x3D;%s’ % (str,str.isupper())<br>print ‘%s islower&#x3D;%s’ % (str,str.islower())<br>print ‘%s isdigit&#x3D;%s’ % (str,str.isdigit())<br>str&#x3D;’3423’<br>print ‘%s isdigit&#x3D;%s’ % (str,str.isdigit())</p>\n"},{"title":"linux中sh文件书写格式","date":"2022-10-19T04:30:04.000Z","_content":"\n# linux下执行.sh文件的方法\n\n> `.sh`文件就是文本文件，如果要执行，需要使用`chmod a+x xxx.sh`来给可执行权限。 \n  \n是bash脚本么\n\n可以用`touch test.sh`创建`test.sh`文件`vi test.sh`编辑`test.sh`文件\n\n加入内容\n\n```sh\n#！/bin/bash\nmkdir test\n```\n  \n保存退出。\n\n`chmod a+x test.sh`给`test.sh`可执行权限\n\n如`test.sh`文件在`/home/work`文件下\n\n执行\n\n> 方法一 本身目录下运行\n\n进入`cd /home/workwen`文件下\n\n执行`./test.sh`\n\n命令会在当前目录下创建一个`“test”`目录。\n\n> 方法二 绝对路劲运行\n\n执行`/home/work/test.sh`\n\n> 方法三 本身目录下运行\n\n`sh test.sh`\n\n<!-- \nC代码\n\n1.man sh\n\nman sh 来看看sh 的介绍～\n\nlinux.sh语法 \n-->\n\n## 介绍\n\n1. 开头\n\n程序必须以下面的行开始（必须放在文件的第一行）：\n\n```sh\n#!/bin/sh\n```\n\n符号`#!`用来告诉系统它后面的参数是用来执行该文件的程序。在这个例子中我们使用`/bin/sh`来执行程序。\n\n当编写脚本完成时，如果要执行该脚本，还必须使其可执行。\n\n要使编写脚本可执行：\n\n编译`chmod +x filename`这样才能用`./filename`来运行\n\n2. 注释\n\n在进行`shell`编程时，以#开头的句子表示注释，直到这一行的结束。我们真诚地建议您在程序中使用注释。\n\n如果您使用了注释，那么即使相当长的时间内没有使用该脚本，您也能在很短的时间内明白该脚本的作用及工作原理。\n\n3. 变量\n\n在其他编程语言中您必须使用变量。在shell编程中，所有的变量都由字符串组成，并且您不需要对变量进行声明。要赋值给一个变量，您可以这样写：\n\n```sh\n#!/bin/sh\n #对变量赋值：\n a=”hello world”\n# 现在打印变量a的内容：\n echo “A is:”\n echo $a\n```\n\n有时候变量名很容易与其他文字混淆，比如：\n\n```bat\nnum=2\necho “this is the $numnd”\n```\n\n这并不会打印出`this is the 2nd`，而仅仅打印`this is the`，因为`shell`会去搜索变量`numnd`的值，但是这个变量时没有值的。可以使用花括号来告诉`shell`我们要打印的是`num`变量：\n\n```sh\nnum=2\necho “this is the ${num}nd”\n```\n\n这将打印： `this is the 2nd`\n\n4. 环境变量\n\n由`export`关键字处理过的变量叫做环境变量。我们不对环境变量进行讨论，因为通常情况下仅仅在登录脚本中使用环境变量。\n\n5. Shell命令和流程控制\n\n在shell脚本中可以使用三类命令：\n\n1)Unix 命令:\n\n虽然在shell脚本中可以使用任意的unix命令，但是还是由一些相对更常用的命令。这些命令通常是用来进行文件和文字操作的。\n\n常用命令语法及功能\n\necho “some text”: 将文字内容打印在屏幕上\n\nls: 文件列表\n\nwc –l file   wc -w file   wc -c file: 计算文件行数；计算文件中的单词数；计算文件中的字符数\n\ncp sourcefile destfile: 文件拷贝\n\nmv oldname newname : 重命名文件或移动文件\n\nrm file: 删除文件\n\ngrep ‘pattern’ file: 在文件内搜索字符串比如：grep ’searchstring’ file.txt\n\ncut -b colnum file: 指定欲显示的文件内容范围，并将它们输出到标准输出设备比如：输出每行第5个到第9个字符cut -b5-9 file.txt千万不要和cat命令混淆，\n\n这是两个完全不同的命令\n\ncat file.txt: 输出文件内容到标准输出设备（屏幕）上\n\nfile somefile: 得到文件类型\n\nread var: 提示用户输入，并将输入赋值给变量\n\nsort file.txt: 对file.txt文件中的行进行排序\n\nuniq: 删除文本文件中出现的重复行，比如： sort file.txt | uniq\n\nexpr: 进行数学运算Example: add 2 and 3   为   expr 2 “+” 3\n\nfind: 搜索文件比如：根据文件名搜索find . -name filename -print\n\ntee: 将数据输出到标准输出设备(屏幕) 和文件比如：somecommand | tee outfile\n\nbasename file: 返回不包含路径的文件名比如： basename /bin/tux将返回 tux\n\ndirname file: 返回文件所在路径比如：dirname /bin/tux将返回 /bin\n\nhead file: 打印文本文件开头几行\n\ntail file : 打印文本文件末尾几行\n\nsed: Sed是一个基本的查找替换程序。可以从标准输入（比如命令管道）读入文本，并将结果输出到标准输出（屏幕）。该命令采用正则表达式（见参考）进行搜索。不要和shell中的通配符相混淆。比如：将linuxfocus替换为 LinuxFocus ：cat text.file | sed ’s/linuxfocus/LinuxFocus/’ >newtext.file\n\nawk: awk 用来从文本文件中提取字段。缺省地，字段分割符是空格，可以使用-F指定其他分割符。\n\ncat  file.txt | awk -F, ‘{print $1 “,” $3}’这里我们使用，作为字段分割符，同时打印第一个和第三个字段。如果该文件内容如下： Adam Bor, 34, IndiaKerryMiller, 22, USA命令输出结果为：Adam Bor, IndiaKerry Miller, USA\n\n2) 概念: 管道, 重定向和 backtick\n\n这些不是系统命令，但是他们真的很重要。\n\n管道 (|) 将一个命令的输出作为另外一个命令的输入。\n\ngrep “hello” file.txt | wc -l\n\n在file.txt中搜索包含有”hello”的行并计算其行数。\n\n在这里grep命令的输出作为wc命令的输入。当然您可以使用多个命令。\n\n重定向：将命令的结果输出到文件，而不是标准输出（屏幕）。\n\n> 写入文件并覆盖旧文件\n\n>> 追加到文件的尾部，保留旧文件内容。\n\n反短斜线\n\n使用反短斜线可以将一个命令的输出作为另外一个命令的一个命令行参数。\n\n命令：\n\nfind . -mtime  -1  -type  f  -print\n\n用来查找过去24小时（-mtime –2则表示过去48小时）内修改过的文件。如果您想将所有查找到的文件打一个包，则可以使用以下linux 脚本：\n\n```sh\n#!/bin/sh\n# The ticks are backticks (`) not normal quotes (‘):\ntar -zcvf  lastmod.tar.gz `find . -mtime -1 -type f -print`\n```\n\n3) 流程控制\n\n1.if\n\n“if” 表达式 如果条件为真则执行then后面的部分：\n\n```sh\nif ….; then\n….\nelif ….; then\n….\nelse\n….\nfi\n```\n\n大多数情况下，可以使用测试命令来对条件进行测试。比如可以比较字符串、判断文件是否存在及是否可读等等…\n\n通常用” [ ] “来表示条件测试。注意这里的空格很重要。要确保方括号的空格。\n\n[ -f \"somefile\" ] ：判断是否是一个文件\n\n[ -x \"/bin/ls\" ] ：判断/bin/ls是否存在并有可执行权限\n\n[ -n \"$var\" ] ：判断$var变量是否有值\n\n[ \"$a\" = \"$b\" ] ：判断$a和$b是否相等\n\n执行man test可以查看所有测试表达式可以比较和判断的类型。\n\n直接执行以下脚本：\n\n```bat\n#!/bin/sh\nif [ \"$SHELL\" = \"/bin/bash\" ]; then\necho “your login shell is the bash (bourne again shell)”\nelse\necho “your login shell is not bash but $SHELL”\nfi\n```\n\n变量$SHELL包含了登录shell的名称，我们和/bin/bash进行了比较。\n\n快捷操作符\n\n熟悉C语言的朋友可能会很喜欢下面的表达式：\n\n[ -f \"/etc/shadow\" ] && echo “This computer uses shadow passwors”\n\n这里 && 就是一个快捷操作符，如果左边的表达式为真则执行右边的语句。\n\n您也可以认为是逻辑运算中的与操作。上例中表示如果/etc/shadow文件存在则打印” This computer uses shadow passwors”。同样或操作(||)在shell编程中也是可用的。这里有个例子：\n\n```bat\n#!/bin/sh\nmailfolder=/var/spool/mail/james\n[ -r \"$mailfolder\" ]‘ ‘{ echo “Can not read $mailfolder” ; exit 1; }\necho “$mailfolder has mail from:”\ngrep “^From ” $mailfolder\n```\n\n该脚本首先判断mailfolder是否可读。如果可读则打印该文件中的”From” 一行。如果不可读则或操作生效，打印错误信息后脚本退出。这里有个问题，那就是我们必须有两个命令：\n\n◆打印错误信息\n\n◆退出程序\n\n我们使用花括号以匿名函数的形式将两个命令放到一起作为一个命令使用。一般函数将在下文提及。\n\n不用与和或操作符，我们也可以用if表达式作任何事情，但是使用与或操作符会更便利很多。\n\n<!-- \nhttps://blog.csdn.net/ljp812184246/article/details/52585650 \n-->","source":"_posts/sh-wenjian.md","raw":"---\ntitle: linux中sh文件书写格式\ndate: 2022-10-19 12:30:04\ntags: linux\ncategories: 系统\n---\n\n# linux下执行.sh文件的方法\n\n> `.sh`文件就是文本文件，如果要执行，需要使用`chmod a+x xxx.sh`来给可执行权限。 \n  \n是bash脚本么\n\n可以用`touch test.sh`创建`test.sh`文件`vi test.sh`编辑`test.sh`文件\n\n加入内容\n\n```sh\n#！/bin/bash\nmkdir test\n```\n  \n保存退出。\n\n`chmod a+x test.sh`给`test.sh`可执行权限\n\n如`test.sh`文件在`/home/work`文件下\n\n执行\n\n> 方法一 本身目录下运行\n\n进入`cd /home/workwen`文件下\n\n执行`./test.sh`\n\n命令会在当前目录下创建一个`“test”`目录。\n\n> 方法二 绝对路劲运行\n\n执行`/home/work/test.sh`\n\n> 方法三 本身目录下运行\n\n`sh test.sh`\n\n<!-- \nC代码\n\n1.man sh\n\nman sh 来看看sh 的介绍～\n\nlinux.sh语法 \n-->\n\n## 介绍\n\n1. 开头\n\n程序必须以下面的行开始（必须放在文件的第一行）：\n\n```sh\n#!/bin/sh\n```\n\n符号`#!`用来告诉系统它后面的参数是用来执行该文件的程序。在这个例子中我们使用`/bin/sh`来执行程序。\n\n当编写脚本完成时，如果要执行该脚本，还必须使其可执行。\n\n要使编写脚本可执行：\n\n编译`chmod +x filename`这样才能用`./filename`来运行\n\n2. 注释\n\n在进行`shell`编程时，以#开头的句子表示注释，直到这一行的结束。我们真诚地建议您在程序中使用注释。\n\n如果您使用了注释，那么即使相当长的时间内没有使用该脚本，您也能在很短的时间内明白该脚本的作用及工作原理。\n\n3. 变量\n\n在其他编程语言中您必须使用变量。在shell编程中，所有的变量都由字符串组成，并且您不需要对变量进行声明。要赋值给一个变量，您可以这样写：\n\n```sh\n#!/bin/sh\n #对变量赋值：\n a=”hello world”\n# 现在打印变量a的内容：\n echo “A is:”\n echo $a\n```\n\n有时候变量名很容易与其他文字混淆，比如：\n\n```bat\nnum=2\necho “this is the $numnd”\n```\n\n这并不会打印出`this is the 2nd`，而仅仅打印`this is the`，因为`shell`会去搜索变量`numnd`的值，但是这个变量时没有值的。可以使用花括号来告诉`shell`我们要打印的是`num`变量：\n\n```sh\nnum=2\necho “this is the ${num}nd”\n```\n\n这将打印： `this is the 2nd`\n\n4. 环境变量\n\n由`export`关键字处理过的变量叫做环境变量。我们不对环境变量进行讨论，因为通常情况下仅仅在登录脚本中使用环境变量。\n\n5. Shell命令和流程控制\n\n在shell脚本中可以使用三类命令：\n\n1)Unix 命令:\n\n虽然在shell脚本中可以使用任意的unix命令，但是还是由一些相对更常用的命令。这些命令通常是用来进行文件和文字操作的。\n\n常用命令语法及功能\n\necho “some text”: 将文字内容打印在屏幕上\n\nls: 文件列表\n\nwc –l file   wc -w file   wc -c file: 计算文件行数；计算文件中的单词数；计算文件中的字符数\n\ncp sourcefile destfile: 文件拷贝\n\nmv oldname newname : 重命名文件或移动文件\n\nrm file: 删除文件\n\ngrep ‘pattern’ file: 在文件内搜索字符串比如：grep ’searchstring’ file.txt\n\ncut -b colnum file: 指定欲显示的文件内容范围，并将它们输出到标准输出设备比如：输出每行第5个到第9个字符cut -b5-9 file.txt千万不要和cat命令混淆，\n\n这是两个完全不同的命令\n\ncat file.txt: 输出文件内容到标准输出设备（屏幕）上\n\nfile somefile: 得到文件类型\n\nread var: 提示用户输入，并将输入赋值给变量\n\nsort file.txt: 对file.txt文件中的行进行排序\n\nuniq: 删除文本文件中出现的重复行，比如： sort file.txt | uniq\n\nexpr: 进行数学运算Example: add 2 and 3   为   expr 2 “+” 3\n\nfind: 搜索文件比如：根据文件名搜索find . -name filename -print\n\ntee: 将数据输出到标准输出设备(屏幕) 和文件比如：somecommand | tee outfile\n\nbasename file: 返回不包含路径的文件名比如： basename /bin/tux将返回 tux\n\ndirname file: 返回文件所在路径比如：dirname /bin/tux将返回 /bin\n\nhead file: 打印文本文件开头几行\n\ntail file : 打印文本文件末尾几行\n\nsed: Sed是一个基本的查找替换程序。可以从标准输入（比如命令管道）读入文本，并将结果输出到标准输出（屏幕）。该命令采用正则表达式（见参考）进行搜索。不要和shell中的通配符相混淆。比如：将linuxfocus替换为 LinuxFocus ：cat text.file | sed ’s/linuxfocus/LinuxFocus/’ >newtext.file\n\nawk: awk 用来从文本文件中提取字段。缺省地，字段分割符是空格，可以使用-F指定其他分割符。\n\ncat  file.txt | awk -F, ‘{print $1 “,” $3}’这里我们使用，作为字段分割符，同时打印第一个和第三个字段。如果该文件内容如下： Adam Bor, 34, IndiaKerryMiller, 22, USA命令输出结果为：Adam Bor, IndiaKerry Miller, USA\n\n2) 概念: 管道, 重定向和 backtick\n\n这些不是系统命令，但是他们真的很重要。\n\n管道 (|) 将一个命令的输出作为另外一个命令的输入。\n\ngrep “hello” file.txt | wc -l\n\n在file.txt中搜索包含有”hello”的行并计算其行数。\n\n在这里grep命令的输出作为wc命令的输入。当然您可以使用多个命令。\n\n重定向：将命令的结果输出到文件，而不是标准输出（屏幕）。\n\n> 写入文件并覆盖旧文件\n\n>> 追加到文件的尾部，保留旧文件内容。\n\n反短斜线\n\n使用反短斜线可以将一个命令的输出作为另外一个命令的一个命令行参数。\n\n命令：\n\nfind . -mtime  -1  -type  f  -print\n\n用来查找过去24小时（-mtime –2则表示过去48小时）内修改过的文件。如果您想将所有查找到的文件打一个包，则可以使用以下linux 脚本：\n\n```sh\n#!/bin/sh\n# The ticks are backticks (`) not normal quotes (‘):\ntar -zcvf  lastmod.tar.gz `find . -mtime -1 -type f -print`\n```\n\n3) 流程控制\n\n1.if\n\n“if” 表达式 如果条件为真则执行then后面的部分：\n\n```sh\nif ….; then\n….\nelif ….; then\n….\nelse\n….\nfi\n```\n\n大多数情况下，可以使用测试命令来对条件进行测试。比如可以比较字符串、判断文件是否存在及是否可读等等…\n\n通常用” [ ] “来表示条件测试。注意这里的空格很重要。要确保方括号的空格。\n\n[ -f \"somefile\" ] ：判断是否是一个文件\n\n[ -x \"/bin/ls\" ] ：判断/bin/ls是否存在并有可执行权限\n\n[ -n \"$var\" ] ：判断$var变量是否有值\n\n[ \"$a\" = \"$b\" ] ：判断$a和$b是否相等\n\n执行man test可以查看所有测试表达式可以比较和判断的类型。\n\n直接执行以下脚本：\n\n```bat\n#!/bin/sh\nif [ \"$SHELL\" = \"/bin/bash\" ]; then\necho “your login shell is the bash (bourne again shell)”\nelse\necho “your login shell is not bash but $SHELL”\nfi\n```\n\n变量$SHELL包含了登录shell的名称，我们和/bin/bash进行了比较。\n\n快捷操作符\n\n熟悉C语言的朋友可能会很喜欢下面的表达式：\n\n[ -f \"/etc/shadow\" ] && echo “This computer uses shadow passwors”\n\n这里 && 就是一个快捷操作符，如果左边的表达式为真则执行右边的语句。\n\n您也可以认为是逻辑运算中的与操作。上例中表示如果/etc/shadow文件存在则打印” This computer uses shadow passwors”。同样或操作(||)在shell编程中也是可用的。这里有个例子：\n\n```bat\n#!/bin/sh\nmailfolder=/var/spool/mail/james\n[ -r \"$mailfolder\" ]‘ ‘{ echo “Can not read $mailfolder” ; exit 1; }\necho “$mailfolder has mail from:”\ngrep “^From ” $mailfolder\n```\n\n该脚本首先判断mailfolder是否可读。如果可读则打印该文件中的”From” 一行。如果不可读则或操作生效，打印错误信息后脚本退出。这里有个问题，那就是我们必须有两个命令：\n\n◆打印错误信息\n\n◆退出程序\n\n我们使用花括号以匿名函数的形式将两个命令放到一起作为一个命令使用。一般函数将在下文提及。\n\n不用与和或操作符，我们也可以用if表达式作任何事情，但是使用与或操作符会更便利很多。\n\n<!-- \nhttps://blog.csdn.net/ljp812184246/article/details/52585650 \n-->","slug":"sh-wenjian","published":1,"updated":"2023-07-23T14:19:12.003Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkjdd1cy003e98ajctme6yr2","content":"<h1 id=\"linux下执行-sh文件的方法\"><a href=\"#linux下执行-sh文件的方法\" class=\"headerlink\" title=\"linux下执行.sh文件的方法\"></a>linux下执行.sh文件的方法</h1><blockquote>\n<p><code>.sh</code>文件就是文本文件，如果要执行，需要使用<code>chmod a+x xxx.sh</code>来给可执行权限。 </p>\n</blockquote>\n<p>是bash脚本么</p>\n<p>可以用<code>touch test.sh</code>创建<code>test.sh</code>文件<code>vi test.sh</code>编辑<code>test.sh</code>文件</p>\n<p>加入内容</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#！/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n<p>保存退出。</p>\n<p><code>chmod a+x test.sh</code>给<code>test.sh</code>可执行权限</p>\n<p>如<code>test.sh</code>文件在<code>/home/work</code>文件下</p>\n<p>执行</p>\n<blockquote>\n<p>方法一 本身目录下运行</p>\n</blockquote>\n<p>进入<code>cd /home/workwen</code>文件下</p>\n<p>执行<code>./test.sh</code></p>\n<p>命令会在当前目录下创建一个<code>“test”</code>目录。</p>\n<blockquote>\n<p>方法二 绝对路劲运行</p>\n</blockquote>\n<p>执行<code>/home/work/test.sh</code></p>\n<blockquote>\n<p>方法三 本身目录下运行</p>\n</blockquote>\n<p><code>sh test.sh</code></p>\n<!-- \nC代码\n\n1.man sh\n\nman sh 来看看sh 的介绍～\n\nlinux.sh语法 \n-->\n\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><ol>\n<li>开头</li>\n</ol>\n<p>程序必须以下面的行开始（必须放在文件的第一行）：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br></pre></td></tr></table></figure>\n\n<p>符号<code>#!</code>用来告诉系统它后面的参数是用来执行该文件的程序。在这个例子中我们使用<code>/bin/sh</code>来执行程序。</p>\n<p>当编写脚本完成时，如果要执行该脚本，还必须使其可执行。</p>\n<p>要使编写脚本可执行：</p>\n<p>编译<code>chmod +x filename</code>这样才能用<code>./filename</code>来运行</p>\n<ol start=\"2\">\n<li>注释</li>\n</ol>\n<p>在进行<code>shell</code>编程时，以#开头的句子表示注释，直到这一行的结束。我们真诚地建议您在程序中使用注释。</p>\n<p>如果您使用了注释，那么即使相当长的时间内没有使用该脚本，您也能在很短的时间内明白该脚本的作用及工作原理。</p>\n<ol start=\"3\">\n<li>变量</li>\n</ol>\n<p>在其他编程语言中您必须使用变量。在shell编程中，所有的变量都由字符串组成，并且您不需要对变量进行声明。要赋值给一个变量，您可以这样写：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"> <span class=\"comment\">#对变量赋值：</span></span><br><span class=\"line\"> a=”hello world”</span><br><span class=\"line\"><span class=\"comment\"># 现在打印变量a的内容：</span></span><br><span class=\"line\"> <span class=\"built_in\">echo</span> “A is:”</span><br><span class=\"line\"> <span class=\"built_in\">echo</span> <span class=\"variable\">$a</span></span><br></pre></td></tr></table></figure>\n\n<p>有时候变量名很容易与其他文字混淆，比如：</p>\n<figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num=<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> “this is the $numnd”</span><br></pre></td></tr></table></figure>\n\n<p>这并不会打印出<code>this is the 2nd</code>，而仅仅打印<code>this is the</code>，因为<code>shell</code>会去搜索变量<code>numnd</code>的值，但是这个变量时没有值的。可以使用花括号来告诉<code>shell</code>我们要打印的是<code>num</code>变量：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num=2</span><br><span class=\"line\"><span class=\"built_in\">echo</span> “this is the <span class=\"variable\">$&#123;num&#125;</span>nd”</span><br></pre></td></tr></table></figure>\n\n<p>这将打印： <code>this is the 2nd</code></p>\n<ol start=\"4\">\n<li>环境变量</li>\n</ol>\n<p>由<code>export</code>关键字处理过的变量叫做环境变量。我们不对环境变量进行讨论，因为通常情况下仅仅在登录脚本中使用环境变量。</p>\n<ol start=\"5\">\n<li>Shell命令和流程控制</li>\n</ol>\n<p>在shell脚本中可以使用三类命令：</p>\n<p>1)Unix 命令:</p>\n<p>虽然在shell脚本中可以使用任意的unix命令，但是还是由一些相对更常用的命令。这些命令通常是用来进行文件和文字操作的。</p>\n<p>常用命令语法及功能</p>\n<p>echo “some text”: 将文字内容打印在屏幕上</p>\n<p>ls: 文件列表</p>\n<p>wc –l file   wc -w file   wc -c file: 计算文件行数；计算文件中的单词数；计算文件中的字符数</p>\n<p>cp sourcefile destfile: 文件拷贝</p>\n<p>mv oldname newname : 重命名文件或移动文件</p>\n<p>rm file: 删除文件</p>\n<p>grep ‘pattern’ file: 在文件内搜索字符串比如：grep ’searchstring’ file.txt</p>\n<p>cut -b colnum file: 指定欲显示的文件内容范围，并将它们输出到标准输出设备比如：输出每行第5个到第9个字符cut -b5-9 file.txt千万不要和cat命令混淆，</p>\n<p>这是两个完全不同的命令</p>\n<p>cat file.txt: 输出文件内容到标准输出设备（屏幕）上</p>\n<p>file somefile: 得到文件类型</p>\n<p>read var: 提示用户输入，并将输入赋值给变量</p>\n<p>sort file.txt: 对file.txt文件中的行进行排序</p>\n<p>uniq: 删除文本文件中出现的重复行，比如： sort file.txt | uniq</p>\n<p>expr: 进行数学运算Example: add 2 and 3   为   expr 2 “+” 3</p>\n<p>find: 搜索文件比如：根据文件名搜索find . -name filename -print</p>\n<p>tee: 将数据输出到标准输出设备(屏幕) 和文件比如：somecommand | tee outfile</p>\n<p>basename file: 返回不包含路径的文件名比如： basename &#x2F;bin&#x2F;tux将返回 tux</p>\n<p>dirname file: 返回文件所在路径比如：dirname &#x2F;bin&#x2F;tux将返回 &#x2F;bin</p>\n<p>head file: 打印文本文件开头几行</p>\n<p>tail file : 打印文本文件末尾几行</p>\n<p>sed: Sed是一个基本的查找替换程序。可以从标准输入（比如命令管道）读入文本，并将结果输出到标准输出（屏幕）。该命令采用正则表达式（见参考）进行搜索。不要和shell中的通配符相混淆。比如：将linuxfocus替换为 LinuxFocus ：cat text.file | sed ’s&#x2F;linuxfocus&#x2F;LinuxFocus&#x2F;’ &gt;newtext.file</p>\n<p>awk: awk 用来从文本文件中提取字段。缺省地，字段分割符是空格，可以使用-F指定其他分割符。</p>\n<p>cat  file.txt | awk -F, ‘{print $1 “,” $3}’这里我们使用，作为字段分割符，同时打印第一个和第三个字段。如果该文件内容如下： Adam Bor, 34, IndiaKerryMiller, 22, USA命令输出结果为：Adam Bor, IndiaKerry Miller, USA</p>\n<ol start=\"2\">\n<li>概念: 管道, 重定向和 backtick</li>\n</ol>\n<p>这些不是系统命令，但是他们真的很重要。</p>\n<p>管道 (|) 将一个命令的输出作为另外一个命令的输入。</p>\n<p>grep “hello” file.txt | wc -l</p>\n<p>在file.txt中搜索包含有”hello”的行并计算其行数。</p>\n<p>在这里grep命令的输出作为wc命令的输入。当然您可以使用多个命令。</p>\n<p>重定向：将命令的结果输出到文件，而不是标准输出（屏幕）。</p>\n<blockquote>\n<p>写入文件并覆盖旧文件</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>追加到文件的尾部，保留旧文件内容。</p>\n</blockquote>\n</blockquote>\n<p>反短斜线</p>\n<p>使用反短斜线可以将一个命令的输出作为另外一个命令的一个命令行参数。</p>\n<p>命令：</p>\n<p>find . -mtime  -1  -type  f  -print</p>\n<p>用来查找过去24小时（-mtime –2则表示过去48小时）内修改过的文件。如果您想将所有查找到的文件打一个包，则可以使用以下linux 脚本：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"><span class=\"comment\"># The ticks are backticks (`) not normal quotes (‘):</span></span><br><span class=\"line\">tar -zcvf  lastmod.tar.gz `find . -mtime -1 -<span class=\"built_in\">type</span> f -<span class=\"built_in\">print</span>`</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>流程控制</li>\n</ol>\n<p>1.if</p>\n<p>“if” 表达式 如果条件为真则执行then后面的部分：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ….; <span class=\"keyword\">then</span></span><br><span class=\"line\">….</span><br><span class=\"line\"><span class=\"keyword\">elif</span> ….; <span class=\"keyword\">then</span></span><br><span class=\"line\">….</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">….</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n\n<p>大多数情况下，可以使用测试命令来对条件进行测试。比如可以比较字符串、判断文件是否存在及是否可读等等…</p>\n<p>通常用” [ ] “来表示条件测试。注意这里的空格很重要。要确保方括号的空格。</p>\n<p>[ -f “somefile” ] ：判断是否是一个文件</p>\n<p>[ -x “&#x2F;bin&#x2F;ls” ] ：判断&#x2F;bin&#x2F;ls是否存在并有可执行权限</p>\n<p>[ -n “$var” ] ：判断$var变量是否有值</p>\n<p>[ “$a” &#x3D; “$b” ] ：判断$a和$b是否相等</p>\n<p>执行man test可以查看所有测试表达式可以比较和判断的类型。</p>\n<p>直接执行以下脚本：</p>\n<figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ &quot;$SHELL&quot; = &quot;/bin/bash&quot; ]; then</span><br><span class=\"line\"><span class=\"built_in\">echo</span> “your login shell is the bash (bourne again shell)”</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> “your login shell is <span class=\"keyword\">not</span> bash but $SHELL”</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n\n<p>变量$SHELL包含了登录shell的名称，我们和&#x2F;bin&#x2F;bash进行了比较。</p>\n<p>快捷操作符</p>\n<p>熟悉C语言的朋友可能会很喜欢下面的表达式：</p>\n<p>[ -f “&#x2F;etc&#x2F;shadow” ] &amp;&amp; echo “This computer uses shadow passwors”</p>\n<p>这里 &amp;&amp; 就是一个快捷操作符，如果左边的表达式为真则执行右边的语句。</p>\n<p>您也可以认为是逻辑运算中的与操作。上例中表示如果&#x2F;etc&#x2F;shadow文件存在则打印” This computer uses shadow passwors”。同样或操作(||)在shell编程中也是可用的。这里有个例子：</p>\n<figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">mailfolder=/var/spool/mail/james</span><br><span class=\"line\">[ -r &quot;$mailfolder&quot; ]‘ ‘&#123; <span class=\"built_in\">echo</span> “Can <span class=\"keyword\">not</span> read $mailfolder” ; <span class=\"keyword\">exit</span> <span class=\"number\">1</span>; &#125;</span><br><span class=\"line\"><span class=\"built_in\">echo</span> “$mailfolder has mail from:”</span><br><span class=\"line\">grep “^From ” $mailfolder</span><br></pre></td></tr></table></figure>\n\n<p>该脚本首先判断mailfolder是否可读。如果可读则打印该文件中的”From” 一行。如果不可读则或操作生效，打印错误信息后脚本退出。这里有个问题，那就是我们必须有两个命令：</p>\n<p>◆打印错误信息</p>\n<p>◆退出程序</p>\n<p>我们使用花括号以匿名函数的形式将两个命令放到一起作为一个命令使用。一般函数将在下文提及。</p>\n<p>不用与和或操作符，我们也可以用if表达式作任何事情，但是使用与或操作符会更便利很多。</p>\n<!-- \nhttps://blog.csdn.net/ljp812184246/article/details/52585650 \n-->","site":{"data":{}},"excerpt":"","more":"<h1 id=\"linux下执行-sh文件的方法\"><a href=\"#linux下执行-sh文件的方法\" class=\"headerlink\" title=\"linux下执行.sh文件的方法\"></a>linux下执行.sh文件的方法</h1><blockquote>\n<p><code>.sh</code>文件就是文本文件，如果要执行，需要使用<code>chmod a+x xxx.sh</code>来给可执行权限。 </p>\n</blockquote>\n<p>是bash脚本么</p>\n<p>可以用<code>touch test.sh</code>创建<code>test.sh</code>文件<code>vi test.sh</code>编辑<code>test.sh</code>文件</p>\n<p>加入内容</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#！/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n<p>保存退出。</p>\n<p><code>chmod a+x test.sh</code>给<code>test.sh</code>可执行权限</p>\n<p>如<code>test.sh</code>文件在<code>/home/work</code>文件下</p>\n<p>执行</p>\n<blockquote>\n<p>方法一 本身目录下运行</p>\n</blockquote>\n<p>进入<code>cd /home/workwen</code>文件下</p>\n<p>执行<code>./test.sh</code></p>\n<p>命令会在当前目录下创建一个<code>“test”</code>目录。</p>\n<blockquote>\n<p>方法二 绝对路劲运行</p>\n</blockquote>\n<p>执行<code>/home/work/test.sh</code></p>\n<blockquote>\n<p>方法三 本身目录下运行</p>\n</blockquote>\n<p><code>sh test.sh</code></p>\n<!-- \nC代码\n\n1.man sh\n\nman sh 来看看sh 的介绍～\n\nlinux.sh语法 \n-->\n\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><ol>\n<li>开头</li>\n</ol>\n<p>程序必须以下面的行开始（必须放在文件的第一行）：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br></pre></td></tr></table></figure>\n\n<p>符号<code>#!</code>用来告诉系统它后面的参数是用来执行该文件的程序。在这个例子中我们使用<code>/bin/sh</code>来执行程序。</p>\n<p>当编写脚本完成时，如果要执行该脚本，还必须使其可执行。</p>\n<p>要使编写脚本可执行：</p>\n<p>编译<code>chmod +x filename</code>这样才能用<code>./filename</code>来运行</p>\n<ol start=\"2\">\n<li>注释</li>\n</ol>\n<p>在进行<code>shell</code>编程时，以#开头的句子表示注释，直到这一行的结束。我们真诚地建议您在程序中使用注释。</p>\n<p>如果您使用了注释，那么即使相当长的时间内没有使用该脚本，您也能在很短的时间内明白该脚本的作用及工作原理。</p>\n<ol start=\"3\">\n<li>变量</li>\n</ol>\n<p>在其他编程语言中您必须使用变量。在shell编程中，所有的变量都由字符串组成，并且您不需要对变量进行声明。要赋值给一个变量，您可以这样写：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"> <span class=\"comment\">#对变量赋值：</span></span><br><span class=\"line\"> a=”hello world”</span><br><span class=\"line\"><span class=\"comment\"># 现在打印变量a的内容：</span></span><br><span class=\"line\"> <span class=\"built_in\">echo</span> “A is:”</span><br><span class=\"line\"> <span class=\"built_in\">echo</span> <span class=\"variable\">$a</span></span><br></pre></td></tr></table></figure>\n\n<p>有时候变量名很容易与其他文字混淆，比如：</p>\n<figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num=<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> “this is the $numnd”</span><br></pre></td></tr></table></figure>\n\n<p>这并不会打印出<code>this is the 2nd</code>，而仅仅打印<code>this is the</code>，因为<code>shell</code>会去搜索变量<code>numnd</code>的值，但是这个变量时没有值的。可以使用花括号来告诉<code>shell</code>我们要打印的是<code>num</code>变量：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num=2</span><br><span class=\"line\"><span class=\"built_in\">echo</span> “this is the <span class=\"variable\">$&#123;num&#125;</span>nd”</span><br></pre></td></tr></table></figure>\n\n<p>这将打印： <code>this is the 2nd</code></p>\n<ol start=\"4\">\n<li>环境变量</li>\n</ol>\n<p>由<code>export</code>关键字处理过的变量叫做环境变量。我们不对环境变量进行讨论，因为通常情况下仅仅在登录脚本中使用环境变量。</p>\n<ol start=\"5\">\n<li>Shell命令和流程控制</li>\n</ol>\n<p>在shell脚本中可以使用三类命令：</p>\n<p>1)Unix 命令:</p>\n<p>虽然在shell脚本中可以使用任意的unix命令，但是还是由一些相对更常用的命令。这些命令通常是用来进行文件和文字操作的。</p>\n<p>常用命令语法及功能</p>\n<p>echo “some text”: 将文字内容打印在屏幕上</p>\n<p>ls: 文件列表</p>\n<p>wc –l file   wc -w file   wc -c file: 计算文件行数；计算文件中的单词数；计算文件中的字符数</p>\n<p>cp sourcefile destfile: 文件拷贝</p>\n<p>mv oldname newname : 重命名文件或移动文件</p>\n<p>rm file: 删除文件</p>\n<p>grep ‘pattern’ file: 在文件内搜索字符串比如：grep ’searchstring’ file.txt</p>\n<p>cut -b colnum file: 指定欲显示的文件内容范围，并将它们输出到标准输出设备比如：输出每行第5个到第9个字符cut -b5-9 file.txt千万不要和cat命令混淆，</p>\n<p>这是两个完全不同的命令</p>\n<p>cat file.txt: 输出文件内容到标准输出设备（屏幕）上</p>\n<p>file somefile: 得到文件类型</p>\n<p>read var: 提示用户输入，并将输入赋值给变量</p>\n<p>sort file.txt: 对file.txt文件中的行进行排序</p>\n<p>uniq: 删除文本文件中出现的重复行，比如： sort file.txt | uniq</p>\n<p>expr: 进行数学运算Example: add 2 and 3   为   expr 2 “+” 3</p>\n<p>find: 搜索文件比如：根据文件名搜索find . -name filename -print</p>\n<p>tee: 将数据输出到标准输出设备(屏幕) 和文件比如：somecommand | tee outfile</p>\n<p>basename file: 返回不包含路径的文件名比如： basename &#x2F;bin&#x2F;tux将返回 tux</p>\n<p>dirname file: 返回文件所在路径比如：dirname &#x2F;bin&#x2F;tux将返回 &#x2F;bin</p>\n<p>head file: 打印文本文件开头几行</p>\n<p>tail file : 打印文本文件末尾几行</p>\n<p>sed: Sed是一个基本的查找替换程序。可以从标准输入（比如命令管道）读入文本，并将结果输出到标准输出（屏幕）。该命令采用正则表达式（见参考）进行搜索。不要和shell中的通配符相混淆。比如：将linuxfocus替换为 LinuxFocus ：cat text.file | sed ’s&#x2F;linuxfocus&#x2F;LinuxFocus&#x2F;’ &gt;newtext.file</p>\n<p>awk: awk 用来从文本文件中提取字段。缺省地，字段分割符是空格，可以使用-F指定其他分割符。</p>\n<p>cat  file.txt | awk -F, ‘{print $1 “,” $3}’这里我们使用，作为字段分割符，同时打印第一个和第三个字段。如果该文件内容如下： Adam Bor, 34, IndiaKerryMiller, 22, USA命令输出结果为：Adam Bor, IndiaKerry Miller, USA</p>\n<ol start=\"2\">\n<li>概念: 管道, 重定向和 backtick</li>\n</ol>\n<p>这些不是系统命令，但是他们真的很重要。</p>\n<p>管道 (|) 将一个命令的输出作为另外一个命令的输入。</p>\n<p>grep “hello” file.txt | wc -l</p>\n<p>在file.txt中搜索包含有”hello”的行并计算其行数。</p>\n<p>在这里grep命令的输出作为wc命令的输入。当然您可以使用多个命令。</p>\n<p>重定向：将命令的结果输出到文件，而不是标准输出（屏幕）。</p>\n<blockquote>\n<p>写入文件并覆盖旧文件</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>追加到文件的尾部，保留旧文件内容。</p>\n</blockquote>\n</blockquote>\n<p>反短斜线</p>\n<p>使用反短斜线可以将一个命令的输出作为另外一个命令的一个命令行参数。</p>\n<p>命令：</p>\n<p>find . -mtime  -1  -type  f  -print</p>\n<p>用来查找过去24小时（-mtime –2则表示过去48小时）内修改过的文件。如果您想将所有查找到的文件打一个包，则可以使用以下linux 脚本：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"><span class=\"comment\"># The ticks are backticks (`) not normal quotes (‘):</span></span><br><span class=\"line\">tar -zcvf  lastmod.tar.gz `find . -mtime -1 -<span class=\"built_in\">type</span> f -<span class=\"built_in\">print</span>`</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>流程控制</li>\n</ol>\n<p>1.if</p>\n<p>“if” 表达式 如果条件为真则执行then后面的部分：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ….; <span class=\"keyword\">then</span></span><br><span class=\"line\">….</span><br><span class=\"line\"><span class=\"keyword\">elif</span> ….; <span class=\"keyword\">then</span></span><br><span class=\"line\">….</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">….</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n\n<p>大多数情况下，可以使用测试命令来对条件进行测试。比如可以比较字符串、判断文件是否存在及是否可读等等…</p>\n<p>通常用” [ ] “来表示条件测试。注意这里的空格很重要。要确保方括号的空格。</p>\n<p>[ -f “somefile” ] ：判断是否是一个文件</p>\n<p>[ -x “&#x2F;bin&#x2F;ls” ] ：判断&#x2F;bin&#x2F;ls是否存在并有可执行权限</p>\n<p>[ -n “$var” ] ：判断$var变量是否有值</p>\n<p>[ “$a” &#x3D; “$b” ] ：判断$a和$b是否相等</p>\n<p>执行man test可以查看所有测试表达式可以比较和判断的类型。</p>\n<p>直接执行以下脚本：</p>\n<figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ &quot;$SHELL&quot; = &quot;/bin/bash&quot; ]; then</span><br><span class=\"line\"><span class=\"built_in\">echo</span> “your login shell is the bash (bourne again shell)”</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> “your login shell is <span class=\"keyword\">not</span> bash but $SHELL”</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n\n<p>变量$SHELL包含了登录shell的名称，我们和&#x2F;bin&#x2F;bash进行了比较。</p>\n<p>快捷操作符</p>\n<p>熟悉C语言的朋友可能会很喜欢下面的表达式：</p>\n<p>[ -f “&#x2F;etc&#x2F;shadow” ] &amp;&amp; echo “This computer uses shadow passwors”</p>\n<p>这里 &amp;&amp; 就是一个快捷操作符，如果左边的表达式为真则执行右边的语句。</p>\n<p>您也可以认为是逻辑运算中的与操作。上例中表示如果&#x2F;etc&#x2F;shadow文件存在则打印” This computer uses shadow passwors”。同样或操作(||)在shell编程中也是可用的。这里有个例子：</p>\n<figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">mailfolder=/var/spool/mail/james</span><br><span class=\"line\">[ -r &quot;$mailfolder&quot; ]‘ ‘&#123; <span class=\"built_in\">echo</span> “Can <span class=\"keyword\">not</span> read $mailfolder” ; <span class=\"keyword\">exit</span> <span class=\"number\">1</span>; &#125;</span><br><span class=\"line\"><span class=\"built_in\">echo</span> “$mailfolder has mail from:”</span><br><span class=\"line\">grep “^From ” $mailfolder</span><br></pre></td></tr></table></figure>\n\n<p>该脚本首先判断mailfolder是否可读。如果可读则打印该文件中的”From” 一行。如果不可读则或操作生效，打印错误信息后脚本退出。这里有个问题，那就是我们必须有两个命令：</p>\n<p>◆打印错误信息</p>\n<p>◆退出程序</p>\n<p>我们使用花括号以匿名函数的形式将两个命令放到一起作为一个命令使用。一般函数将在下文提及。</p>\n<p>不用与和或操作符，我们也可以用if表达式作任何事情，但是使用与或操作符会更便利很多。</p>\n<!-- \nhttps://blog.csdn.net/ljp812184246/article/details/52585650 \n-->"},{"title":"初识STEAM——第一次全体例会","date":"2022-11-07T05:50:20.000Z","_content":"\n# 社团第一篇推文\n\n## 活动背景\n\n自“百团大绽”后新社员还未对社团有充分的了解，恰逢领航杯开赛在即，社团骨干组织社员开展了本次全体例会。\n\n## 活动时间地点\n\n2022.11.4 行知组团A204\n\n## 活动内容\n\n1. 社团工作介绍\n2. 领航杯 人工智能（人车协同）赛项说明\n3. Micro：bit简单介绍\n\n## 社团主要工作\n\n> 活动所用PPT[下载链接](https://github.com/songxiao1018/blog-img/files/9945096/STEAM.pptx)\n\n我们社主要研究STEAM在教学上的实现方式。在研究的同时我们社会前往周边的学校进行授课。\n\n## 领航杯赛事介绍\n\n> 详情可参阅[这篇文章](https://www.xiaoxiaosky.top/2022/11/01/steam-linhangbei-renchexietong/)\n\n本次领航杯比赛我们社团准备参考官方的比赛模式进行校内预选赛。感兴趣的同学可以加入QQ群（678208182）了解一下。\n","source":"_posts/steam-lihui-1.md","raw":"---\ntitle: 初识STEAM——第一次全体例会\ndate: 2022-11-07 13:50:20\ntags: STEAM社\ncategories: 社团\n---\n\n# 社团第一篇推文\n\n## 活动背景\n\n自“百团大绽”后新社员还未对社团有充分的了解，恰逢领航杯开赛在即，社团骨干组织社员开展了本次全体例会。\n\n## 活动时间地点\n\n2022.11.4 行知组团A204\n\n## 活动内容\n\n1. 社团工作介绍\n2. 领航杯 人工智能（人车协同）赛项说明\n3. Micro：bit简单介绍\n\n## 社团主要工作\n\n> 活动所用PPT[下载链接](https://github.com/songxiao1018/blog-img/files/9945096/STEAM.pptx)\n\n我们社主要研究STEAM在教学上的实现方式。在研究的同时我们社会前往周边的学校进行授课。\n\n## 领航杯赛事介绍\n\n> 详情可参阅[这篇文章](https://www.xiaoxiaosky.top/2022/11/01/steam-linhangbei-renchexietong/)\n\n本次领航杯比赛我们社团准备参考官方的比赛模式进行校内预选赛。感兴趣的同学可以加入QQ群（678208182）了解一下。\n","slug":"steam-lihui-1","published":1,"updated":"2023-07-23T14:19:13.766Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkjdd1d0003g98aj319pgyo2","content":"<h1 id=\"社团第一篇推文\"><a href=\"#社团第一篇推文\" class=\"headerlink\" title=\"社团第一篇推文\"></a>社团第一篇推文</h1><h2 id=\"活动背景\"><a href=\"#活动背景\" class=\"headerlink\" title=\"活动背景\"></a>活动背景</h2><p>自“百团大绽”后新社员还未对社团有充分的了解，恰逢领航杯开赛在即，社团骨干组织社员开展了本次全体例会。</p>\n<h2 id=\"活动时间地点\"><a href=\"#活动时间地点\" class=\"headerlink\" title=\"活动时间地点\"></a>活动时间地点</h2><p>2022.11.4 行知组团A204</p>\n<h2 id=\"活动内容\"><a href=\"#活动内容\" class=\"headerlink\" title=\"活动内容\"></a>活动内容</h2><ol>\n<li>社团工作介绍</li>\n<li>领航杯 人工智能（人车协同）赛项说明</li>\n<li>Micro：bit简单介绍</li>\n</ol>\n<h2 id=\"社团主要工作\"><a href=\"#社团主要工作\" class=\"headerlink\" title=\"社团主要工作\"></a>社团主要工作</h2><blockquote>\n<p>活动所用PPT<a href=\"https://github.com/songxiao1018/blog-img/files/9945096/STEAM.pptx\">下载链接</a></p>\n</blockquote>\n<p>我们社主要研究STEAM在教学上的实现方式。在研究的同时我们社会前往周边的学校进行授课。</p>\n<h2 id=\"领航杯赛事介绍\"><a href=\"#领航杯赛事介绍\" class=\"headerlink\" title=\"领航杯赛事介绍\"></a>领航杯赛事介绍</h2><blockquote>\n<p>详情可参阅<a href=\"https://www.xiaoxiaosky.top/2022/11/01/steam-linhangbei-renchexietong/\">这篇文章</a></p>\n</blockquote>\n<p>本次领航杯比赛我们社团准备参考官方的比赛模式进行校内预选赛。感兴趣的同学可以加入QQ群（678208182）了解一下。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"社团第一篇推文\"><a href=\"#社团第一篇推文\" class=\"headerlink\" title=\"社团第一篇推文\"></a>社团第一篇推文</h1><h2 id=\"活动背景\"><a href=\"#活动背景\" class=\"headerlink\" title=\"活动背景\"></a>活动背景</h2><p>自“百团大绽”后新社员还未对社团有充分的了解，恰逢领航杯开赛在即，社团骨干组织社员开展了本次全体例会。</p>\n<h2 id=\"活动时间地点\"><a href=\"#活动时间地点\" class=\"headerlink\" title=\"活动时间地点\"></a>活动时间地点</h2><p>2022.11.4 行知组团A204</p>\n<h2 id=\"活动内容\"><a href=\"#活动内容\" class=\"headerlink\" title=\"活动内容\"></a>活动内容</h2><ol>\n<li>社团工作介绍</li>\n<li>领航杯 人工智能（人车协同）赛项说明</li>\n<li>Micro：bit简单介绍</li>\n</ol>\n<h2 id=\"社团主要工作\"><a href=\"#社团主要工作\" class=\"headerlink\" title=\"社团主要工作\"></a>社团主要工作</h2><blockquote>\n<p>活动所用PPT<a href=\"https://github.com/songxiao1018/blog-img/files/9945096/STEAM.pptx\">下载链接</a></p>\n</blockquote>\n<p>我们社主要研究STEAM在教学上的实现方式。在研究的同时我们社会前往周边的学校进行授课。</p>\n<h2 id=\"领航杯赛事介绍\"><a href=\"#领航杯赛事介绍\" class=\"headerlink\" title=\"领航杯赛事介绍\"></a>领航杯赛事介绍</h2><blockquote>\n<p>详情可参阅<a href=\"https://www.xiaoxiaosky.top/2022/11/01/steam-linhangbei-renchexietong/\">这篇文章</a></p>\n</blockquote>\n<p>本次领航杯比赛我们社团准备参考官方的比赛模式进行校内预选赛。感兴趣的同学可以加入QQ群（678208182）了解一下。</p>\n"},{"title":"领航杯-人工智能竞技类（人车协同）竞赛规则解读","date":"2022-11-01T15:55:13.000Z","_content":"\n# 一、赛项说明\n\n本赛项旨在通过模拟智慧工厂、移动机器人与类人形机器人协作等场景，引导参赛选手调试机器人完成任务，考察参赛选手对机器视觉、智能导航、语音交互、运动控制、传感器应用、无线通信等人工智能技术的运用。\n\n# 二、活动流程\n\n- 比赛规则介绍\n\n- 比赛前项目指导\n\n-- 软件指导\n-- 硬件指导\n\n- 正式比赛\n\n- 比赛总结\n\n- 赛后反馈\n\n# 三、活动具体安排\n\n## 参赛器材\n\n1. yanshee人形机器人\n2. 积木机器人\n\n## 比赛场地介绍\n\n本此比赛场地搭建在室内地面，地图材质为刀刮布，环境光线以实际为准，场地尺寸为：（未定）。具体见下图：\n![比赛地图]()\n\n## 比赛道具介绍\n\n比赛任务由类人形机器人与智能小车共同完成，参赛队伍需要有两台设备在场地上同时进行协作任务。\n\n> 人形机器人移动过程中仅限采用双足行走方式。比赛运行期间禁止外接电源。开始比赛前类人形机器人的脚部区域不得超过启动区范围。为保证竞赛的公平性，类人形机器人不得借助其他传感器辅助完成任务。\n> 智能小车底盘投影面尺寸不能超过 300mm*300mm，高度不能超过 500mm（含机械臂的最大伸展尺寸），可自由安装机械装置，传感器使用的种类和个数不限，传感器安装的位置与测量精度不限。人形机器人与智能小车之间可采用蓝牙、WiFi 等通讯方式。\n\n具体物料清单：\n\n``` list\n 障碍物\n 视觉标签\n 高台\n 彩色立方体（红、绿、蓝三色）\n 平衡板\n 配重块\n 置物箱\n 任务卡\n```\n\n## 任务说明\n\n### 任务一（30分）小车带路\n\n该任务模拟机器人小车领路，人形机器人在智能小车的带领下穿越障碍区。\n\n> 类人形机器人和智能小车一同从启动区出发，人形机器人跟随智能小车前进，穿越障碍区。\n\n#### 技术要点\n\n1. 智能车寻线，避障 --- 传感器与运动控制\n\n2. 人车通讯 --- 智能车和机器人端口通讯\n\n3. 图像识别 --- 颜色识别\n\n4. 人形机器人跟随算法 --- 人和车距离协调\n\n#### 参考方案\n\n1. 巡线模块识别速与条件改变的阈值\n\n2. 机器人识别图像的区域和捕捉方块的位置\n\n3. 人形机器人采用内置库或动作回读\n\n### 任务二（30分）\n\n该任务模拟小车完成作业后通知机器人继续前进。\n\n> 智能小车进入平衡板区域后，调节自身位置以保持跷跷板平衡，并能在外力干扰下迅速重新调整平衡，完成平衡挑战后驶出平衡板区域，人形机器人通过该区域。\n\n#### 技术要点\n\n1. 水平控制 --- 智能车利用陀螺仪控制小车平衡\n\n2. 人车通讯 --- 智能车和机器人端口通讯\n\n3. 智能车寻线 --- 传感器与运动控制\n\n#### 参考方案\n\n1. 巡线模块识别速与条件改变的阈值\n\n1. 巡线函数记录经过的路口数量\n\n1. 机器人识别图像的区域和捕捉方块的位置\n\n1. 陀螺仪采用MPU6050模块，采用陀螺仪与加速传感器数据的融合算法\n\n### 任务三（30分）\n\n参赛选手通过语音指令与类人形机器人进行交互，类人形机器人利用物品块或视觉标签导航到合适位置，完成物品块视觉特征（颜色、形状）的识别，并进行对应的语音播报，找到正确的目标物品之后，类人形机器人与智能小车协作，将物品搬运到置物箱中，最终智能小车驶入终点区，\n\n#### 技术要点\n\n1. 运动控制 --- 智能车运动控制\n\n2. 语音控制 --- 人形机器人语音控制\n\n3. 动作控制 --- 人形机器人动作控制\n\n4. 图像识别 --- 人形机器人图像识别\n\n5. 人车通讯 --- 智能车和机器人端口通讯\n\n#### 参考方案\n\n1. 语音模块调用\n\n2. 使用动作回读模块\n\n3. 采用绘制图像坐标定位目标物体\n\n4. 通过改变图像阈值辅助识别物体\n\n### 完成任务（10分）\n\n全自主运行额外有 10 分加分。\n\n## 其他规则\n\n比赛进行 2 轮，每轮比赛时长 5 分钟，在比赛开始之前有60 分钟的程序设备调试时间。调试结束后统一封存设备，设封存之后正式比赛之前抽本轮比赛的任务卡。比赛最终成绩取 2 轮比赛最高分。每个组按最终成绩排名，最终得分高的排名靠前。如果出现得分相同的情况，用时最少的排名在前。\n\n每支参赛队应在赛前准备好技术报告，技术报告分为工程笔记和视频部分。具体要求见详细规则说明。\n\n比赛开始后，每个任务均由机器人全自主完成，不得有人为介入，一旦有人为介入，当轮比赛随后任务动作不得分。机器人在完成每个任务的过程中禁止参赛选手以任何形式的远程遥控或赛题内容以外的信息输入，一经发现，比赛按零分处理。\n\n紫色虚线框为任务中转区域，机器人在完成任务二与任务三前可从紫色虚线框内的任意位置启动。如参赛队伍在演示开始后，任务二与任务三不做启动位置的调整，那么任务二与任务三可额外的 10 分操作分\n\n![QQ群](https://user-images.githubusercontent.com/92096395/199944484-6073d499-0960-4f4c-b8d6-8e11dc64d98f.jpg)\n","source":"_posts/steam-linhangbei-renchexietong.md","raw":"---\ntitle: 领航杯-人工智能竞技类（人车协同）竞赛规则解读\ndate: 2022-11-01 23:55:13\ntags: \n  - 领航杯\n  - STEAM社\ncategories: 学习\n---\n\n# 一、赛项说明\n\n本赛项旨在通过模拟智慧工厂、移动机器人与类人形机器人协作等场景，引导参赛选手调试机器人完成任务，考察参赛选手对机器视觉、智能导航、语音交互、运动控制、传感器应用、无线通信等人工智能技术的运用。\n\n# 二、活动流程\n\n- 比赛规则介绍\n\n- 比赛前项目指导\n\n-- 软件指导\n-- 硬件指导\n\n- 正式比赛\n\n- 比赛总结\n\n- 赛后反馈\n\n# 三、活动具体安排\n\n## 参赛器材\n\n1. yanshee人形机器人\n2. 积木机器人\n\n## 比赛场地介绍\n\n本此比赛场地搭建在室内地面，地图材质为刀刮布，环境光线以实际为准，场地尺寸为：（未定）。具体见下图：\n![比赛地图]()\n\n## 比赛道具介绍\n\n比赛任务由类人形机器人与智能小车共同完成，参赛队伍需要有两台设备在场地上同时进行协作任务。\n\n> 人形机器人移动过程中仅限采用双足行走方式。比赛运行期间禁止外接电源。开始比赛前类人形机器人的脚部区域不得超过启动区范围。为保证竞赛的公平性，类人形机器人不得借助其他传感器辅助完成任务。\n> 智能小车底盘投影面尺寸不能超过 300mm*300mm，高度不能超过 500mm（含机械臂的最大伸展尺寸），可自由安装机械装置，传感器使用的种类和个数不限，传感器安装的位置与测量精度不限。人形机器人与智能小车之间可采用蓝牙、WiFi 等通讯方式。\n\n具体物料清单：\n\n``` list\n 障碍物\n 视觉标签\n 高台\n 彩色立方体（红、绿、蓝三色）\n 平衡板\n 配重块\n 置物箱\n 任务卡\n```\n\n## 任务说明\n\n### 任务一（30分）小车带路\n\n该任务模拟机器人小车领路，人形机器人在智能小车的带领下穿越障碍区。\n\n> 类人形机器人和智能小车一同从启动区出发，人形机器人跟随智能小车前进，穿越障碍区。\n\n#### 技术要点\n\n1. 智能车寻线，避障 --- 传感器与运动控制\n\n2. 人车通讯 --- 智能车和机器人端口通讯\n\n3. 图像识别 --- 颜色识别\n\n4. 人形机器人跟随算法 --- 人和车距离协调\n\n#### 参考方案\n\n1. 巡线模块识别速与条件改变的阈值\n\n2. 机器人识别图像的区域和捕捉方块的位置\n\n3. 人形机器人采用内置库或动作回读\n\n### 任务二（30分）\n\n该任务模拟小车完成作业后通知机器人继续前进。\n\n> 智能小车进入平衡板区域后，调节自身位置以保持跷跷板平衡，并能在外力干扰下迅速重新调整平衡，完成平衡挑战后驶出平衡板区域，人形机器人通过该区域。\n\n#### 技术要点\n\n1. 水平控制 --- 智能车利用陀螺仪控制小车平衡\n\n2. 人车通讯 --- 智能车和机器人端口通讯\n\n3. 智能车寻线 --- 传感器与运动控制\n\n#### 参考方案\n\n1. 巡线模块识别速与条件改变的阈值\n\n1. 巡线函数记录经过的路口数量\n\n1. 机器人识别图像的区域和捕捉方块的位置\n\n1. 陀螺仪采用MPU6050模块，采用陀螺仪与加速传感器数据的融合算法\n\n### 任务三（30分）\n\n参赛选手通过语音指令与类人形机器人进行交互，类人形机器人利用物品块或视觉标签导航到合适位置，完成物品块视觉特征（颜色、形状）的识别，并进行对应的语音播报，找到正确的目标物品之后，类人形机器人与智能小车协作，将物品搬运到置物箱中，最终智能小车驶入终点区，\n\n#### 技术要点\n\n1. 运动控制 --- 智能车运动控制\n\n2. 语音控制 --- 人形机器人语音控制\n\n3. 动作控制 --- 人形机器人动作控制\n\n4. 图像识别 --- 人形机器人图像识别\n\n5. 人车通讯 --- 智能车和机器人端口通讯\n\n#### 参考方案\n\n1. 语音模块调用\n\n2. 使用动作回读模块\n\n3. 采用绘制图像坐标定位目标物体\n\n4. 通过改变图像阈值辅助识别物体\n\n### 完成任务（10分）\n\n全自主运行额外有 10 分加分。\n\n## 其他规则\n\n比赛进行 2 轮，每轮比赛时长 5 分钟，在比赛开始之前有60 分钟的程序设备调试时间。调试结束后统一封存设备，设封存之后正式比赛之前抽本轮比赛的任务卡。比赛最终成绩取 2 轮比赛最高分。每个组按最终成绩排名，最终得分高的排名靠前。如果出现得分相同的情况，用时最少的排名在前。\n\n每支参赛队应在赛前准备好技术报告，技术报告分为工程笔记和视频部分。具体要求见详细规则说明。\n\n比赛开始后，每个任务均由机器人全自主完成，不得有人为介入，一旦有人为介入，当轮比赛随后任务动作不得分。机器人在完成每个任务的过程中禁止参赛选手以任何形式的远程遥控或赛题内容以外的信息输入，一经发现，比赛按零分处理。\n\n紫色虚线框为任务中转区域，机器人在完成任务二与任务三前可从紫色虚线框内的任意位置启动。如参赛队伍在演示开始后，任务二与任务三不做启动位置的调整，那么任务二与任务三可额外的 10 分操作分\n\n![QQ群](https://user-images.githubusercontent.com/92096395/199944484-6073d499-0960-4f4c-b8d6-8e11dc64d98f.jpg)\n","slug":"steam-linhangbei-renchexietong","published":1,"updated":"2023-07-23T14:19:13.442Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkjdd1d1003j98aj3e9xhd4a","content":"<h1 id=\"一、赛项说明\"><a href=\"#一、赛项说明\" class=\"headerlink\" title=\"一、赛项说明\"></a>一、赛项说明</h1><p>本赛项旨在通过模拟智慧工厂、移动机器人与类人形机器人协作等场景，引导参赛选手调试机器人完成任务，考察参赛选手对机器视觉、智能导航、语音交互、运动控制、传感器应用、无线通信等人工智能技术的运用。</p>\n<h1 id=\"二、活动流程\"><a href=\"#二、活动流程\" class=\"headerlink\" title=\"二、活动流程\"></a>二、活动流程</h1><ul>\n<li><p>比赛规则介绍</p>\n</li>\n<li><p>比赛前项目指导</p>\n</li>\n</ul>\n<p>– 软件指导<br>– 硬件指导</p>\n<ul>\n<li><p>正式比赛</p>\n</li>\n<li><p>比赛总结</p>\n</li>\n<li><p>赛后反馈</p>\n</li>\n</ul>\n<h1 id=\"三、活动具体安排\"><a href=\"#三、活动具体安排\" class=\"headerlink\" title=\"三、活动具体安排\"></a>三、活动具体安排</h1><h2 id=\"参赛器材\"><a href=\"#参赛器材\" class=\"headerlink\" title=\"参赛器材\"></a>参赛器材</h2><ol>\n<li>yanshee人形机器人</li>\n<li>积木机器人</li>\n</ol>\n<h2 id=\"比赛场地介绍\"><a href=\"#比赛场地介绍\" class=\"headerlink\" title=\"比赛场地介绍\"></a>比赛场地介绍</h2><p>本此比赛场地搭建在室内地面，地图材质为刀刮布，环境光线以实际为准，场地尺寸为：（未定）。具体见下图：<br><img src=\"/\" alt=\"比赛地图\"></p>\n<h2 id=\"比赛道具介绍\"><a href=\"#比赛道具介绍\" class=\"headerlink\" title=\"比赛道具介绍\"></a>比赛道具介绍</h2><p>比赛任务由类人形机器人与智能小车共同完成，参赛队伍需要有两台设备在场地上同时进行协作任务。</p>\n<blockquote>\n<p>人形机器人移动过程中仅限采用双足行走方式。比赛运行期间禁止外接电源。开始比赛前类人形机器人的脚部区域不得超过启动区范围。为保证竞赛的公平性，类人形机器人不得借助其他传感器辅助完成任务。<br>智能小车底盘投影面尺寸不能超过 300mm*300mm，高度不能超过 500mm（含机械臂的最大伸展尺寸），可自由安装机械装置，传感器使用的种类和个数不限，传感器安装的位置与测量精度不限。人形机器人与智能小车之间可采用蓝牙、WiFi 等通讯方式。</p>\n</blockquote>\n<p>具体物料清单：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">障碍物</span><br><span class=\"line\">视觉标签</span><br><span class=\"line\">高台</span><br><span class=\"line\">彩色立方体（红、绿、蓝三色）</span><br><span class=\"line\">平衡板</span><br><span class=\"line\">配重块</span><br><span class=\"line\">置物箱</span><br><span class=\"line\">任务卡</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"任务说明\"><a href=\"#任务说明\" class=\"headerlink\" title=\"任务说明\"></a>任务说明</h2><h3 id=\"任务一（30分）小车带路\"><a href=\"#任务一（30分）小车带路\" class=\"headerlink\" title=\"任务一（30分）小车带路\"></a>任务一（30分）小车带路</h3><p>该任务模拟机器人小车领路，人形机器人在智能小车的带领下穿越障碍区。</p>\n<blockquote>\n<p>类人形机器人和智能小车一同从启动区出发，人形机器人跟随智能小车前进，穿越障碍区。</p>\n</blockquote>\n<h4 id=\"技术要点\"><a href=\"#技术要点\" class=\"headerlink\" title=\"技术要点\"></a>技术要点</h4><ol>\n<li><p>智能车寻线，避障 — 传感器与运动控制</p>\n</li>\n<li><p>人车通讯 — 智能车和机器人端口通讯</p>\n</li>\n<li><p>图像识别 — 颜色识别</p>\n</li>\n<li><p>人形机器人跟随算法 — 人和车距离协调</p>\n</li>\n</ol>\n<h4 id=\"参考方案\"><a href=\"#参考方案\" class=\"headerlink\" title=\"参考方案\"></a>参考方案</h4><ol>\n<li><p>巡线模块识别速与条件改变的阈值</p>\n</li>\n<li><p>机器人识别图像的区域和捕捉方块的位置</p>\n</li>\n<li><p>人形机器人采用内置库或动作回读</p>\n</li>\n</ol>\n<h3 id=\"任务二（30分）\"><a href=\"#任务二（30分）\" class=\"headerlink\" title=\"任务二（30分）\"></a>任务二（30分）</h3><p>该任务模拟小车完成作业后通知机器人继续前进。</p>\n<blockquote>\n<p>智能小车进入平衡板区域后，调节自身位置以保持跷跷板平衡，并能在外力干扰下迅速重新调整平衡，完成平衡挑战后驶出平衡板区域，人形机器人通过该区域。</p>\n</blockquote>\n<h4 id=\"技术要点-1\"><a href=\"#技术要点-1\" class=\"headerlink\" title=\"技术要点\"></a>技术要点</h4><ol>\n<li><p>水平控制 — 智能车利用陀螺仪控制小车平衡</p>\n</li>\n<li><p>人车通讯 — 智能车和机器人端口通讯</p>\n</li>\n<li><p>智能车寻线 — 传感器与运动控制</p>\n</li>\n</ol>\n<h4 id=\"参考方案-1\"><a href=\"#参考方案-1\" class=\"headerlink\" title=\"参考方案\"></a>参考方案</h4><ol>\n<li><p>巡线模块识别速与条件改变的阈值</p>\n</li>\n<li><p>巡线函数记录经过的路口数量</p>\n</li>\n<li><p>机器人识别图像的区域和捕捉方块的位置</p>\n</li>\n<li><p>陀螺仪采用MPU6050模块，采用陀螺仪与加速传感器数据的融合算法</p>\n</li>\n</ol>\n<h3 id=\"任务三（30分）\"><a href=\"#任务三（30分）\" class=\"headerlink\" title=\"任务三（30分）\"></a>任务三（30分）</h3><p>参赛选手通过语音指令与类人形机器人进行交互，类人形机器人利用物品块或视觉标签导航到合适位置，完成物品块视觉特征（颜色、形状）的识别，并进行对应的语音播报，找到正确的目标物品之后，类人形机器人与智能小车协作，将物品搬运到置物箱中，最终智能小车驶入终点区，</p>\n<h4 id=\"技术要点-2\"><a href=\"#技术要点-2\" class=\"headerlink\" title=\"技术要点\"></a>技术要点</h4><ol>\n<li><p>运动控制 — 智能车运动控制</p>\n</li>\n<li><p>语音控制 — 人形机器人语音控制</p>\n</li>\n<li><p>动作控制 — 人形机器人动作控制</p>\n</li>\n<li><p>图像识别 — 人形机器人图像识别</p>\n</li>\n<li><p>人车通讯 — 智能车和机器人端口通讯</p>\n</li>\n</ol>\n<h4 id=\"参考方案-2\"><a href=\"#参考方案-2\" class=\"headerlink\" title=\"参考方案\"></a>参考方案</h4><ol>\n<li><p>语音模块调用</p>\n</li>\n<li><p>使用动作回读模块</p>\n</li>\n<li><p>采用绘制图像坐标定位目标物体</p>\n</li>\n<li><p>通过改变图像阈值辅助识别物体</p>\n</li>\n</ol>\n<h3 id=\"完成任务（10分）\"><a href=\"#完成任务（10分）\" class=\"headerlink\" title=\"完成任务（10分）\"></a>完成任务（10分）</h3><p>全自主运行额外有 10 分加分。</p>\n<h2 id=\"其他规则\"><a href=\"#其他规则\" class=\"headerlink\" title=\"其他规则\"></a>其他规则</h2><p>比赛进行 2 轮，每轮比赛时长 5 分钟，在比赛开始之前有60 分钟的程序设备调试时间。调试结束后统一封存设备，设封存之后正式比赛之前抽本轮比赛的任务卡。比赛最终成绩取 2 轮比赛最高分。每个组按最终成绩排名，最终得分高的排名靠前。如果出现得分相同的情况，用时最少的排名在前。</p>\n<p>每支参赛队应在赛前准备好技术报告，技术报告分为工程笔记和视频部分。具体要求见详细规则说明。</p>\n<p>比赛开始后，每个任务均由机器人全自主完成，不得有人为介入，一旦有人为介入，当轮比赛随后任务动作不得分。机器人在完成每个任务的过程中禁止参赛选手以任何形式的远程遥控或赛题内容以外的信息输入，一经发现，比赛按零分处理。</p>\n<p>紫色虚线框为任务中转区域，机器人在完成任务二与任务三前可从紫色虚线框内的任意位置启动。如参赛队伍在演示开始后，任务二与任务三不做启动位置的调整，那么任务二与任务三可额外的 10 分操作分</p>\n<p><img src=\"https://user-images.githubusercontent.com/92096395/199944484-6073d499-0960-4f4c-b8d6-8e11dc64d98f.jpg\" alt=\"QQ群\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一、赛项说明\"><a href=\"#一、赛项说明\" class=\"headerlink\" title=\"一、赛项说明\"></a>一、赛项说明</h1><p>本赛项旨在通过模拟智慧工厂、移动机器人与类人形机器人协作等场景，引导参赛选手调试机器人完成任务，考察参赛选手对机器视觉、智能导航、语音交互、运动控制、传感器应用、无线通信等人工智能技术的运用。</p>\n<h1 id=\"二、活动流程\"><a href=\"#二、活动流程\" class=\"headerlink\" title=\"二、活动流程\"></a>二、活动流程</h1><ul>\n<li><p>比赛规则介绍</p>\n</li>\n<li><p>比赛前项目指导</p>\n</li>\n</ul>\n<p>– 软件指导<br>– 硬件指导</p>\n<ul>\n<li><p>正式比赛</p>\n</li>\n<li><p>比赛总结</p>\n</li>\n<li><p>赛后反馈</p>\n</li>\n</ul>\n<h1 id=\"三、活动具体安排\"><a href=\"#三、活动具体安排\" class=\"headerlink\" title=\"三、活动具体安排\"></a>三、活动具体安排</h1><h2 id=\"参赛器材\"><a href=\"#参赛器材\" class=\"headerlink\" title=\"参赛器材\"></a>参赛器材</h2><ol>\n<li>yanshee人形机器人</li>\n<li>积木机器人</li>\n</ol>\n<h2 id=\"比赛场地介绍\"><a href=\"#比赛场地介绍\" class=\"headerlink\" title=\"比赛场地介绍\"></a>比赛场地介绍</h2><p>本此比赛场地搭建在室内地面，地图材质为刀刮布，环境光线以实际为准，场地尺寸为：（未定）。具体见下图：<br><img src=\"/\" alt=\"比赛地图\"></p>\n<h2 id=\"比赛道具介绍\"><a href=\"#比赛道具介绍\" class=\"headerlink\" title=\"比赛道具介绍\"></a>比赛道具介绍</h2><p>比赛任务由类人形机器人与智能小车共同完成，参赛队伍需要有两台设备在场地上同时进行协作任务。</p>\n<blockquote>\n<p>人形机器人移动过程中仅限采用双足行走方式。比赛运行期间禁止外接电源。开始比赛前类人形机器人的脚部区域不得超过启动区范围。为保证竞赛的公平性，类人形机器人不得借助其他传感器辅助完成任务。<br>智能小车底盘投影面尺寸不能超过 300mm*300mm，高度不能超过 500mm（含机械臂的最大伸展尺寸），可自由安装机械装置，传感器使用的种类和个数不限，传感器安装的位置与测量精度不限。人形机器人与智能小车之间可采用蓝牙、WiFi 等通讯方式。</p>\n</blockquote>\n<p>具体物料清单：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">障碍物</span><br><span class=\"line\">视觉标签</span><br><span class=\"line\">高台</span><br><span class=\"line\">彩色立方体（红、绿、蓝三色）</span><br><span class=\"line\">平衡板</span><br><span class=\"line\">配重块</span><br><span class=\"line\">置物箱</span><br><span class=\"line\">任务卡</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"任务说明\"><a href=\"#任务说明\" class=\"headerlink\" title=\"任务说明\"></a>任务说明</h2><h3 id=\"任务一（30分）小车带路\"><a href=\"#任务一（30分）小车带路\" class=\"headerlink\" title=\"任务一（30分）小车带路\"></a>任务一（30分）小车带路</h3><p>该任务模拟机器人小车领路，人形机器人在智能小车的带领下穿越障碍区。</p>\n<blockquote>\n<p>类人形机器人和智能小车一同从启动区出发，人形机器人跟随智能小车前进，穿越障碍区。</p>\n</blockquote>\n<h4 id=\"技术要点\"><a href=\"#技术要点\" class=\"headerlink\" title=\"技术要点\"></a>技术要点</h4><ol>\n<li><p>智能车寻线，避障 — 传感器与运动控制</p>\n</li>\n<li><p>人车通讯 — 智能车和机器人端口通讯</p>\n</li>\n<li><p>图像识别 — 颜色识别</p>\n</li>\n<li><p>人形机器人跟随算法 — 人和车距离协调</p>\n</li>\n</ol>\n<h4 id=\"参考方案\"><a href=\"#参考方案\" class=\"headerlink\" title=\"参考方案\"></a>参考方案</h4><ol>\n<li><p>巡线模块识别速与条件改变的阈值</p>\n</li>\n<li><p>机器人识别图像的区域和捕捉方块的位置</p>\n</li>\n<li><p>人形机器人采用内置库或动作回读</p>\n</li>\n</ol>\n<h3 id=\"任务二（30分）\"><a href=\"#任务二（30分）\" class=\"headerlink\" title=\"任务二（30分）\"></a>任务二（30分）</h3><p>该任务模拟小车完成作业后通知机器人继续前进。</p>\n<blockquote>\n<p>智能小车进入平衡板区域后，调节自身位置以保持跷跷板平衡，并能在外力干扰下迅速重新调整平衡，完成平衡挑战后驶出平衡板区域，人形机器人通过该区域。</p>\n</blockquote>\n<h4 id=\"技术要点-1\"><a href=\"#技术要点-1\" class=\"headerlink\" title=\"技术要点\"></a>技术要点</h4><ol>\n<li><p>水平控制 — 智能车利用陀螺仪控制小车平衡</p>\n</li>\n<li><p>人车通讯 — 智能车和机器人端口通讯</p>\n</li>\n<li><p>智能车寻线 — 传感器与运动控制</p>\n</li>\n</ol>\n<h4 id=\"参考方案-1\"><a href=\"#参考方案-1\" class=\"headerlink\" title=\"参考方案\"></a>参考方案</h4><ol>\n<li><p>巡线模块识别速与条件改变的阈值</p>\n</li>\n<li><p>巡线函数记录经过的路口数量</p>\n</li>\n<li><p>机器人识别图像的区域和捕捉方块的位置</p>\n</li>\n<li><p>陀螺仪采用MPU6050模块，采用陀螺仪与加速传感器数据的融合算法</p>\n</li>\n</ol>\n<h3 id=\"任务三（30分）\"><a href=\"#任务三（30分）\" class=\"headerlink\" title=\"任务三（30分）\"></a>任务三（30分）</h3><p>参赛选手通过语音指令与类人形机器人进行交互，类人形机器人利用物品块或视觉标签导航到合适位置，完成物品块视觉特征（颜色、形状）的识别，并进行对应的语音播报，找到正确的目标物品之后，类人形机器人与智能小车协作，将物品搬运到置物箱中，最终智能小车驶入终点区，</p>\n<h4 id=\"技术要点-2\"><a href=\"#技术要点-2\" class=\"headerlink\" title=\"技术要点\"></a>技术要点</h4><ol>\n<li><p>运动控制 — 智能车运动控制</p>\n</li>\n<li><p>语音控制 — 人形机器人语音控制</p>\n</li>\n<li><p>动作控制 — 人形机器人动作控制</p>\n</li>\n<li><p>图像识别 — 人形机器人图像识别</p>\n</li>\n<li><p>人车通讯 — 智能车和机器人端口通讯</p>\n</li>\n</ol>\n<h4 id=\"参考方案-2\"><a href=\"#参考方案-2\" class=\"headerlink\" title=\"参考方案\"></a>参考方案</h4><ol>\n<li><p>语音模块调用</p>\n</li>\n<li><p>使用动作回读模块</p>\n</li>\n<li><p>采用绘制图像坐标定位目标物体</p>\n</li>\n<li><p>通过改变图像阈值辅助识别物体</p>\n</li>\n</ol>\n<h3 id=\"完成任务（10分）\"><a href=\"#完成任务（10分）\" class=\"headerlink\" title=\"完成任务（10分）\"></a>完成任务（10分）</h3><p>全自主运行额外有 10 分加分。</p>\n<h2 id=\"其他规则\"><a href=\"#其他规则\" class=\"headerlink\" title=\"其他规则\"></a>其他规则</h2><p>比赛进行 2 轮，每轮比赛时长 5 分钟，在比赛开始之前有60 分钟的程序设备调试时间。调试结束后统一封存设备，设封存之后正式比赛之前抽本轮比赛的任务卡。比赛最终成绩取 2 轮比赛最高分。每个组按最终成绩排名，最终得分高的排名靠前。如果出现得分相同的情况，用时最少的排名在前。</p>\n<p>每支参赛队应在赛前准备好技术报告，技术报告分为工程笔记和视频部分。具体要求见详细规则说明。</p>\n<p>比赛开始后，每个任务均由机器人全自主完成，不得有人为介入，一旦有人为介入，当轮比赛随后任务动作不得分。机器人在完成每个任务的过程中禁止参赛选手以任何形式的远程遥控或赛题内容以外的信息输入，一经发现，比赛按零分处理。</p>\n<p>紫色虚线框为任务中转区域，机器人在完成任务二与任务三前可从紫色虚线框内的任意位置启动。如参赛队伍在演示开始后，任务二与任务三不做启动位置的调整，那么任务二与任务三可额外的 10 分操作分</p>\n<p><img src=\"https://user-images.githubusercontent.com/92096395/199944484-6073d499-0960-4f4c-b8d6-8e11dc64d98f.jpg\" alt=\"QQ群\"></p>\n"},{"title":"steam社基本介绍","date":"2022-11-01T10:29:03.000Z","_content":"\n# 南京晓庄学院——STEAM社团\n\n## STEAM——现代教育理念\n\nSTEAM课程，是指由<font size=3.5 color=\"greeen\">科学（Science）、技术（Technology）、工程（Engineering）、艺术（Art）、数学（Mathematics）等学科</font>共同构成的跨学科课程。它强调知识跨界、场景多元、问题生成、批判建构、创新驱动，既体现出课程综合化、实践化、活动化的诸多特征，又反映了课程回归生活、回归社会、回归自然的本质诉求。STEAM教育理念最早是由美国政府提出，鼓励孩子在科学、技术、工程和数学领域的发展和提高，培养孩子的综合素养，从而提升其全球竞争力。从2015年9月教育部《关于“十三五”期间全面深入推进教育信息化工作的指导意见〈征求意见稿〉》首次明确提出STEAM教育到2014年以来，浙江、山东、山西、陕西、天津、河南、四川、江苏、重庆等将STEAM教育科目列入教学、考试体系，把“软任务”升级“硬指标”，成为必修课，同步辅助应试教育的K12+教育新赛道诞生。\n\n## 社团简介\n\n<font size=3.5 color=\"greeen\">STEAM社团是南京晓庄学院信息工程学院2021创立的的全新社团。指导老师为信息工程、人工智能学院优秀指导老师王小正老师。</font>STEAM代表科学(Science)，技术(Technology)，工程(Engineering)，艺术(Arts)和数学(Math)。STEAM教育不同于传统教育，不再是简单的将传统教学内容搬到新平台上，进行教授和传递，而是以人工智能、机器人为基础，融合新平台、新工具，着重于培养和提升学生的兴趣以及综合能力。我们社团会定期与周边小学、初中合作给中小学生开展趣味STEAM教育活动，运用人工智能、机器人等以中小学生熟悉的生活场景为基础，结合生动视频和动手实践活动，引导学生发现科技的奥秘、趣味学习，培养中小学生对科学知识的兴趣，锻炼中小学生<font size=3.5 color=greeen>动手、表达、创造、团队合作</font>等多方面的能力。社团也会定期开展<font size=3.5 color=greeen>专业讲座、实践活动、专业小课、知识竞赛、趣味游戏活动等</font>。\n\n## 社团活动\n\n### <font size=3.5 color=brown>社团见面会</font>\n\n结实STEAM,认识STEAM!<font size=3.5 color=green>优秀社团指导老师王小正老师</font>带领小萌新们了解STEAM\n\n![1](https://github.com/songxiao1018/blog-img/blob/main/2022-2023-1/hdzp38.jpg?raw=true)\n\n### <font size=3.5 color=brown>社团挑战赛</font>\n\n为丰富社团成员的校园生活，提升其专业知识，社团举办了“争分夺秒6.0”“党史知识竞赛活动”等趣味挑战赛\n\n![2](https://github.com/songxiao1018/blog-img/blob/main/2022-2023-1/hdzp12.jpg?raw=true)\n\n![3](https://github.com/songxiao1018/blog-img/blob/main/2022-2023-1/hdzp11.jpg?raw=true)\n\n### <font size=3.5 color=brown>机器人创客教育</font>\n  \n社团会定期<font size=3.5 color=\"green\">与周边小学、初中合作给中小学生们开展趣味STEAM教育活动</font>,运用人工智能、机器人等以中小学熟悉的生活场景为基础,结合生动视频和动手实践活动，引导学生发现科技的奥秘。在趣味学习中培养中小学生动手、表达、创造、团队合作等多方面的能力。\n\n![13](https://github.com/songxiao1018/blog-img/blob/main/2022-2023-1/qt2.jpg?raw=true)\n\n![4](https://github.com/songxiao1018/blog-img/blob/main/2022-2023-1/hdzp26.jpg?raw=true)\n\n![5](https://github.com/songxiao1018/blog-img/blob/main/2022-2023-1/hdzp58.jpg?raw=true)\n\n## STEAM教学内容\n  \n### <font size=3.5 color=blue>积木化图形编程</font>\n\n面向中小学生及编程初学者，运用microbit认识并学习积木化图形编程\n\n![21](https://foruda.gitee.com/images/1667285560186755642/11d078c4_10348382.png)\n\n![6](https://github.com/songxiao1018/blog-img/blob/main/2022-2023-1/hdzp13.jpg?raw=true)\n\n### <font size=3.5 color=blue>积木机器人搭建</font>\n\n锻炼孩子动手能力，在学习编程的同时体验创意搭建\n\n![7](https://user-images.githubusercontent.com/92096395/199183824-ac4d18f9-7a85-4d94-867e-b8a6a19ced51.jpg)\n\n![8](https://github.com/songxiao1018/blog-img/blob/main/2022-2023-1/hdzp9.jpg?raw=true)\n\n### <font size=3.5 color=blue>趣味竞赛</font>\n\n实操性学习，在体验各种趣味小游戏的同时感受编程的力量！\n\n![9](https://github.com/songxiao1018/blog-img/blob/main/2022-2023-1/qt2.jpg?raw=true)\n\n### <font size=3.5 color=blue>STEAM兴趣培养</font>\n\n科普人工智能，通过悟空机器人和yanshee机器人带领初学者感受并结识STEAM教育\n\n![7](https://github.com/songxiao1018/blog-img/blob/main/2022-2023-1/hdzp7.jpg?raw=true)\n\n![10](https://github.com/songxiao1018/blog-img/blob/main/2022-2023-1/hdzp4.jpg?raw=true)\n\n![12](https://user-images.githubusercontent.com/92096395/199240944-9b30fab1-a093-48ee-a792-c9f6fd51321c.JPG)\n\n### <font size=3.5 color=blue>程序语言学习</font>\n\n面向中学生及具备一定编程基础的学习者，学习专业程序语言\n\n![14](https://github.com/songxiao1018/blog-img/blob/main/2022-2023-1/qt3.jpg?raw=true)\n\n![15](https://github.com/songxiao1018/blog-img/blob/main/2022-2023-1/qt4.jpg?raw=true)\n","source":"_posts/steam-tuiwen-1.md","raw":"---\ntitle: steam社基本介绍\ndate: 2022-11-01 18:29:03\ntags: STEAM社\ncategories: 社团\n---\n\n# 南京晓庄学院——STEAM社团\n\n## STEAM——现代教育理念\n\nSTEAM课程，是指由<font size=3.5 color=\"greeen\">科学（Science）、技术（Technology）、工程（Engineering）、艺术（Art）、数学（Mathematics）等学科</font>共同构成的跨学科课程。它强调知识跨界、场景多元、问题生成、批判建构、创新驱动，既体现出课程综合化、实践化、活动化的诸多特征，又反映了课程回归生活、回归社会、回归自然的本质诉求。STEAM教育理念最早是由美国政府提出，鼓励孩子在科学、技术、工程和数学领域的发展和提高，培养孩子的综合素养，从而提升其全球竞争力。从2015年9月教育部《关于“十三五”期间全面深入推进教育信息化工作的指导意见〈征求意见稿〉》首次明确提出STEAM教育到2014年以来，浙江、山东、山西、陕西、天津、河南、四川、江苏、重庆等将STEAM教育科目列入教学、考试体系，把“软任务”升级“硬指标”，成为必修课，同步辅助应试教育的K12+教育新赛道诞生。\n\n## 社团简介\n\n<font size=3.5 color=\"greeen\">STEAM社团是南京晓庄学院信息工程学院2021创立的的全新社团。指导老师为信息工程、人工智能学院优秀指导老师王小正老师。</font>STEAM代表科学(Science)，技术(Technology)，工程(Engineering)，艺术(Arts)和数学(Math)。STEAM教育不同于传统教育，不再是简单的将传统教学内容搬到新平台上，进行教授和传递，而是以人工智能、机器人为基础，融合新平台、新工具，着重于培养和提升学生的兴趣以及综合能力。我们社团会定期与周边小学、初中合作给中小学生开展趣味STEAM教育活动，运用人工智能、机器人等以中小学生熟悉的生活场景为基础，结合生动视频和动手实践活动，引导学生发现科技的奥秘、趣味学习，培养中小学生对科学知识的兴趣，锻炼中小学生<font size=3.5 color=greeen>动手、表达、创造、团队合作</font>等多方面的能力。社团也会定期开展<font size=3.5 color=greeen>专业讲座、实践活动、专业小课、知识竞赛、趣味游戏活动等</font>。\n\n## 社团活动\n\n### <font size=3.5 color=brown>社团见面会</font>\n\n结实STEAM,认识STEAM!<font size=3.5 color=green>优秀社团指导老师王小正老师</font>带领小萌新们了解STEAM\n\n![1](https://github.com/songxiao1018/blog-img/blob/main/2022-2023-1/hdzp38.jpg?raw=true)\n\n### <font size=3.5 color=brown>社团挑战赛</font>\n\n为丰富社团成员的校园生活，提升其专业知识，社团举办了“争分夺秒6.0”“党史知识竞赛活动”等趣味挑战赛\n\n![2](https://github.com/songxiao1018/blog-img/blob/main/2022-2023-1/hdzp12.jpg?raw=true)\n\n![3](https://github.com/songxiao1018/blog-img/blob/main/2022-2023-1/hdzp11.jpg?raw=true)\n\n### <font size=3.5 color=brown>机器人创客教育</font>\n  \n社团会定期<font size=3.5 color=\"green\">与周边小学、初中合作给中小学生们开展趣味STEAM教育活动</font>,运用人工智能、机器人等以中小学熟悉的生活场景为基础,结合生动视频和动手实践活动，引导学生发现科技的奥秘。在趣味学习中培养中小学生动手、表达、创造、团队合作等多方面的能力。\n\n![13](https://github.com/songxiao1018/blog-img/blob/main/2022-2023-1/qt2.jpg?raw=true)\n\n![4](https://github.com/songxiao1018/blog-img/blob/main/2022-2023-1/hdzp26.jpg?raw=true)\n\n![5](https://github.com/songxiao1018/blog-img/blob/main/2022-2023-1/hdzp58.jpg?raw=true)\n\n## STEAM教学内容\n  \n### <font size=3.5 color=blue>积木化图形编程</font>\n\n面向中小学生及编程初学者，运用microbit认识并学习积木化图形编程\n\n![21](https://foruda.gitee.com/images/1667285560186755642/11d078c4_10348382.png)\n\n![6](https://github.com/songxiao1018/blog-img/blob/main/2022-2023-1/hdzp13.jpg?raw=true)\n\n### <font size=3.5 color=blue>积木机器人搭建</font>\n\n锻炼孩子动手能力，在学习编程的同时体验创意搭建\n\n![7](https://user-images.githubusercontent.com/92096395/199183824-ac4d18f9-7a85-4d94-867e-b8a6a19ced51.jpg)\n\n![8](https://github.com/songxiao1018/blog-img/blob/main/2022-2023-1/hdzp9.jpg?raw=true)\n\n### <font size=3.5 color=blue>趣味竞赛</font>\n\n实操性学习，在体验各种趣味小游戏的同时感受编程的力量！\n\n![9](https://github.com/songxiao1018/blog-img/blob/main/2022-2023-1/qt2.jpg?raw=true)\n\n### <font size=3.5 color=blue>STEAM兴趣培养</font>\n\n科普人工智能，通过悟空机器人和yanshee机器人带领初学者感受并结识STEAM教育\n\n![7](https://github.com/songxiao1018/blog-img/blob/main/2022-2023-1/hdzp7.jpg?raw=true)\n\n![10](https://github.com/songxiao1018/blog-img/blob/main/2022-2023-1/hdzp4.jpg?raw=true)\n\n![12](https://user-images.githubusercontent.com/92096395/199240944-9b30fab1-a093-48ee-a792-c9f6fd51321c.JPG)\n\n### <font size=3.5 color=blue>程序语言学习</font>\n\n面向中学生及具备一定编程基础的学习者，学习专业程序语言\n\n![14](https://github.com/songxiao1018/blog-img/blob/main/2022-2023-1/qt3.jpg?raw=true)\n\n![15](https://github.com/songxiao1018/blog-img/blob/main/2022-2023-1/qt4.jpg?raw=true)\n","slug":"steam-tuiwen-1","published":1,"updated":"2023-07-23T14:19:10.964Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkjdd1d2003n98aj6e725jyx","content":"<h1 id=\"南京晓庄学院——STEAM社团\"><a href=\"#南京晓庄学院——STEAM社团\" class=\"headerlink\" title=\"南京晓庄学院——STEAM社团\"></a>南京晓庄学院——STEAM社团</h1><h2 id=\"STEAM——现代教育理念\"><a href=\"#STEAM——现代教育理念\" class=\"headerlink\" title=\"STEAM——现代教育理念\"></a>STEAM——现代教育理念</h2><p>STEAM课程，是指由<font size=3.5 color=\"greeen\">科学（Science）、技术（Technology）、工程（Engineering）、艺术（Art）、数学（Mathematics）等学科</font>共同构成的跨学科课程。它强调知识跨界、场景多元、问题生成、批判建构、创新驱动，既体现出课程综合化、实践化、活动化的诸多特征，又反映了课程回归生活、回归社会、回归自然的本质诉求。STEAM教育理念最早是由美国政府提出，鼓励孩子在科学、技术、工程和数学领域的发展和提高，培养孩子的综合素养，从而提升其全球竞争力。从2015年9月教育部《关于“十三五”期间全面深入推进教育信息化工作的指导意见〈征求意见稿〉》首次明确提出STEAM教育到2014年以来，浙江、山东、山西、陕西、天津、河南、四川、江苏、重庆等将STEAM教育科目列入教学、考试体系，把“软任务”升级“硬指标”，成为必修课，同步辅助应试教育的K12+教育新赛道诞生。</p>\n<h2 id=\"社团简介\"><a href=\"#社团简介\" class=\"headerlink\" title=\"社团简介\"></a>社团简介</h2><p><font size=3.5 color=\"greeen\">STEAM社团是南京晓庄学院信息工程学院2021创立的的全新社团。指导老师为信息工程、人工智能学院优秀指导老师王小正老师。</font>STEAM代表科学(Science)，技术(Technology)，工程(Engineering)，艺术(Arts)和数学(Math)。STEAM教育不同于传统教育，不再是简单的将传统教学内容搬到新平台上，进行教授和传递，而是以人工智能、机器人为基础，融合新平台、新工具，着重于培养和提升学生的兴趣以及综合能力。我们社团会定期与周边小学、初中合作给中小学生开展趣味STEAM教育活动，运用人工智能、机器人等以中小学生熟悉的生活场景为基础，结合生动视频和动手实践活动，引导学生发现科技的奥秘、趣味学习，培养中小学生对科学知识的兴趣，锻炼中小学生<font size=3.5 color=greeen>动手、表达、创造、团队合作</font>等多方面的能力。社团也会定期开展<font size=3.5 color=greeen>专业讲座、实践活动、专业小课、知识竞赛、趣味游戏活动等</font>。</p>\n<h2 id=\"社团活动\"><a href=\"#社团活动\" class=\"headerlink\" title=\"社团活动\"></a>社团活动</h2><h3 id=\"社团见面会\"><a href=\"#社团见面会\" class=\"headerlink\" title=\"社团见面会\"></a><font size=3.5 color=brown>社团见面会</font></h3><p>结实STEAM,认识STEAM!<font size=3.5 color=green>优秀社团指导老师王小正老师</font>带领小萌新们了解STEAM</p>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/2022-2023-1/hdzp38.jpg?raw=true\" alt=\"1\"></p>\n<h3 id=\"社团挑战赛\"><a href=\"#社团挑战赛\" class=\"headerlink\" title=\"社团挑战赛\"></a><font size=3.5 color=brown>社团挑战赛</font></h3><p>为丰富社团成员的校园生活，提升其专业知识，社团举办了“争分夺秒6.0”“党史知识竞赛活动”等趣味挑战赛</p>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/2022-2023-1/hdzp12.jpg?raw=true\" alt=\"2\"></p>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/2022-2023-1/hdzp11.jpg?raw=true\" alt=\"3\"></p>\n<h3 id=\"机器人创客教育\"><a href=\"#机器人创客教育\" class=\"headerlink\" title=\"机器人创客教育\"></a><font size=3.5 color=brown>机器人创客教育</font></h3><p>社团会定期<font size=3.5 color=\"green\">与周边小学、初中合作给中小学生们开展趣味STEAM教育活动</font>,运用人工智能、机器人等以中小学熟悉的生活场景为基础,结合生动视频和动手实践活动，引导学生发现科技的奥秘。在趣味学习中培养中小学生动手、表达、创造、团队合作等多方面的能力。</p>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/2022-2023-1/qt2.jpg?raw=true\" alt=\"13\"></p>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/2022-2023-1/hdzp26.jpg?raw=true\" alt=\"4\"></p>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/2022-2023-1/hdzp58.jpg?raw=true\" alt=\"5\"></p>\n<h2 id=\"STEAM教学内容\"><a href=\"#STEAM教学内容\" class=\"headerlink\" title=\"STEAM教学内容\"></a>STEAM教学内容</h2><h3 id=\"积木化图形编程\"><a href=\"#积木化图形编程\" class=\"headerlink\" title=\"积木化图形编程\"></a><font size=3.5 color=blue>积木化图形编程</font></h3><p>面向中小学生及编程初学者，运用microbit认识并学习积木化图形编程</p>\n<p><img src=\"https://foruda.gitee.com/images/1667285560186755642/11d078c4_10348382.png\" alt=\"21\"></p>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/2022-2023-1/hdzp13.jpg?raw=true\" alt=\"6\"></p>\n<h3 id=\"积木机器人搭建\"><a href=\"#积木机器人搭建\" class=\"headerlink\" title=\"积木机器人搭建\"></a><font size=3.5 color=blue>积木机器人搭建</font></h3><p>锻炼孩子动手能力，在学习编程的同时体验创意搭建</p>\n<p><img src=\"https://user-images.githubusercontent.com/92096395/199183824-ac4d18f9-7a85-4d94-867e-b8a6a19ced51.jpg\" alt=\"7\"></p>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/2022-2023-1/hdzp9.jpg?raw=true\" alt=\"8\"></p>\n<h3 id=\"趣味竞赛\"><a href=\"#趣味竞赛\" class=\"headerlink\" title=\"趣味竞赛\"></a><font size=3.5 color=blue>趣味竞赛</font></h3><p>实操性学习，在体验各种趣味小游戏的同时感受编程的力量！</p>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/2022-2023-1/qt2.jpg?raw=true\" alt=\"9\"></p>\n<h3 id=\"STEAM兴趣培养\"><a href=\"#STEAM兴趣培养\" class=\"headerlink\" title=\"STEAM兴趣培养\"></a><font size=3.5 color=blue>STEAM兴趣培养</font></h3><p>科普人工智能，通过悟空机器人和yanshee机器人带领初学者感受并结识STEAM教育</p>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/2022-2023-1/hdzp7.jpg?raw=true\" alt=\"7\"></p>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/2022-2023-1/hdzp4.jpg?raw=true\" alt=\"10\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/92096395/199240944-9b30fab1-a093-48ee-a792-c9f6fd51321c.JPG\" alt=\"12\"></p>\n<h3 id=\"程序语言学习\"><a href=\"#程序语言学习\" class=\"headerlink\" title=\"程序语言学习\"></a><font size=3.5 color=blue>程序语言学习</font></h3><p>面向中学生及具备一定编程基础的学习者，学习专业程序语言</p>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/2022-2023-1/qt3.jpg?raw=true\" alt=\"14\"></p>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/2022-2023-1/qt4.jpg?raw=true\" alt=\"15\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"南京晓庄学院——STEAM社团\"><a href=\"#南京晓庄学院——STEAM社团\" class=\"headerlink\" title=\"南京晓庄学院——STEAM社团\"></a>南京晓庄学院——STEAM社团</h1><h2 id=\"STEAM——现代教育理念\"><a href=\"#STEAM——现代教育理念\" class=\"headerlink\" title=\"STEAM——现代教育理念\"></a>STEAM——现代教育理念</h2><p>STEAM课程，是指由<font size=3.5 color=\"greeen\">科学（Science）、技术（Technology）、工程（Engineering）、艺术（Art）、数学（Mathematics）等学科</font>共同构成的跨学科课程。它强调知识跨界、场景多元、问题生成、批判建构、创新驱动，既体现出课程综合化、实践化、活动化的诸多特征，又反映了课程回归生活、回归社会、回归自然的本质诉求。STEAM教育理念最早是由美国政府提出，鼓励孩子在科学、技术、工程和数学领域的发展和提高，培养孩子的综合素养，从而提升其全球竞争力。从2015年9月教育部《关于“十三五”期间全面深入推进教育信息化工作的指导意见〈征求意见稿〉》首次明确提出STEAM教育到2014年以来，浙江、山东、山西、陕西、天津、河南、四川、江苏、重庆等将STEAM教育科目列入教学、考试体系，把“软任务”升级“硬指标”，成为必修课，同步辅助应试教育的K12+教育新赛道诞生。</p>\n<h2 id=\"社团简介\"><a href=\"#社团简介\" class=\"headerlink\" title=\"社团简介\"></a>社团简介</h2><p><font size=3.5 color=\"greeen\">STEAM社团是南京晓庄学院信息工程学院2021创立的的全新社团。指导老师为信息工程、人工智能学院优秀指导老师王小正老师。</font>STEAM代表科学(Science)，技术(Technology)，工程(Engineering)，艺术(Arts)和数学(Math)。STEAM教育不同于传统教育，不再是简单的将传统教学内容搬到新平台上，进行教授和传递，而是以人工智能、机器人为基础，融合新平台、新工具，着重于培养和提升学生的兴趣以及综合能力。我们社团会定期与周边小学、初中合作给中小学生开展趣味STEAM教育活动，运用人工智能、机器人等以中小学生熟悉的生活场景为基础，结合生动视频和动手实践活动，引导学生发现科技的奥秘、趣味学习，培养中小学生对科学知识的兴趣，锻炼中小学生<font size=3.5 color=greeen>动手、表达、创造、团队合作</font>等多方面的能力。社团也会定期开展<font size=3.5 color=greeen>专业讲座、实践活动、专业小课、知识竞赛、趣味游戏活动等</font>。</p>\n<h2 id=\"社团活动\"><a href=\"#社团活动\" class=\"headerlink\" title=\"社团活动\"></a>社团活动</h2><h3 id=\"社团见面会\"><a href=\"#社团见面会\" class=\"headerlink\" title=\"社团见面会\"></a><font size=3.5 color=brown>社团见面会</font></h3><p>结实STEAM,认识STEAM!<font size=3.5 color=green>优秀社团指导老师王小正老师</font>带领小萌新们了解STEAM</p>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/2022-2023-1/hdzp38.jpg?raw=true\" alt=\"1\"></p>\n<h3 id=\"社团挑战赛\"><a href=\"#社团挑战赛\" class=\"headerlink\" title=\"社团挑战赛\"></a><font size=3.5 color=brown>社团挑战赛</font></h3><p>为丰富社团成员的校园生活，提升其专业知识，社团举办了“争分夺秒6.0”“党史知识竞赛活动”等趣味挑战赛</p>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/2022-2023-1/hdzp12.jpg?raw=true\" alt=\"2\"></p>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/2022-2023-1/hdzp11.jpg?raw=true\" alt=\"3\"></p>\n<h3 id=\"机器人创客教育\"><a href=\"#机器人创客教育\" class=\"headerlink\" title=\"机器人创客教育\"></a><font size=3.5 color=brown>机器人创客教育</font></h3><p>社团会定期<font size=3.5 color=\"green\">与周边小学、初中合作给中小学生们开展趣味STEAM教育活动</font>,运用人工智能、机器人等以中小学熟悉的生活场景为基础,结合生动视频和动手实践活动，引导学生发现科技的奥秘。在趣味学习中培养中小学生动手、表达、创造、团队合作等多方面的能力。</p>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/2022-2023-1/qt2.jpg?raw=true\" alt=\"13\"></p>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/2022-2023-1/hdzp26.jpg?raw=true\" alt=\"4\"></p>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/2022-2023-1/hdzp58.jpg?raw=true\" alt=\"5\"></p>\n<h2 id=\"STEAM教学内容\"><a href=\"#STEAM教学内容\" class=\"headerlink\" title=\"STEAM教学内容\"></a>STEAM教学内容</h2><h3 id=\"积木化图形编程\"><a href=\"#积木化图形编程\" class=\"headerlink\" title=\"积木化图形编程\"></a><font size=3.5 color=blue>积木化图形编程</font></h3><p>面向中小学生及编程初学者，运用microbit认识并学习积木化图形编程</p>\n<p><img src=\"https://foruda.gitee.com/images/1667285560186755642/11d078c4_10348382.png\" alt=\"21\"></p>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/2022-2023-1/hdzp13.jpg?raw=true\" alt=\"6\"></p>\n<h3 id=\"积木机器人搭建\"><a href=\"#积木机器人搭建\" class=\"headerlink\" title=\"积木机器人搭建\"></a><font size=3.5 color=blue>积木机器人搭建</font></h3><p>锻炼孩子动手能力，在学习编程的同时体验创意搭建</p>\n<p><img src=\"https://user-images.githubusercontent.com/92096395/199183824-ac4d18f9-7a85-4d94-867e-b8a6a19ced51.jpg\" alt=\"7\"></p>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/2022-2023-1/hdzp9.jpg?raw=true\" alt=\"8\"></p>\n<h3 id=\"趣味竞赛\"><a href=\"#趣味竞赛\" class=\"headerlink\" title=\"趣味竞赛\"></a><font size=3.5 color=blue>趣味竞赛</font></h3><p>实操性学习，在体验各种趣味小游戏的同时感受编程的力量！</p>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/2022-2023-1/qt2.jpg?raw=true\" alt=\"9\"></p>\n<h3 id=\"STEAM兴趣培养\"><a href=\"#STEAM兴趣培养\" class=\"headerlink\" title=\"STEAM兴趣培养\"></a><font size=3.5 color=blue>STEAM兴趣培养</font></h3><p>科普人工智能，通过悟空机器人和yanshee机器人带领初学者感受并结识STEAM教育</p>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/2022-2023-1/hdzp7.jpg?raw=true\" alt=\"7\"></p>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/2022-2023-1/hdzp4.jpg?raw=true\" alt=\"10\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/92096395/199240944-9b30fab1-a093-48ee-a792-c9f6fd51321c.JPG\" alt=\"12\"></p>\n<h3 id=\"程序语言学习\"><a href=\"#程序语言学习\" class=\"headerlink\" title=\"程序语言学习\"></a><font size=3.5 color=blue>程序语言学习</font></h3><p>面向中学生及具备一定编程基础的学习者，学习专业程序语言</p>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/2022-2023-1/qt3.jpg?raw=true\" alt=\"14\"></p>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/2022-2023-1/qt4.jpg?raw=true\" alt=\"15\"></p>\n"},{"title":"校园VPN的使用教程","date":"2022-11-07T10:22:37.000Z","_content":"\n为方便大家正常使用VPN访问校内资源及图书馆资源，现在为大家介绍一下有关VPN的使用方法及使用注意事项。\n\n## 下载\n\n1. 学校下载链接（速度较快，版本更新慢）\n学校信息化建设与管理办公室网站里的[VPN服务器地址调整及客户端升级公告https://www.njxzc.edu.cn/8d/41/c89a36161/page.htm](https://www.njxzc.edu.cn/8d/41/c89a36161/page.htm)。\n\n2. 其他下载通道（速度较慢，版本更新快）\n[山石网科](https://www.hillstonenet.com.cn/)官网的[下载通道](https://www.hillstonenet.com.cn/product-and-service/border-security/ngfw/#VPN)进入之后选择对应的操作系统即可。\n![下载界面](https://github.com/songxiao1018/blog-img/blob/main/VPN/000.png?raw=true)\n\n## 安装\n\n### Windows\n\n> 1.下载后解压，双击得到.exe文件。用户账户控制点击“是”。\n\n![下载文件](https://user-images.githubusercontent.com/92096395/200289517-b5066c04-e7bb-4c3c-97d0-23f4a2e22b07.png)\n\n> 2.进入安装界面后，软件会自动安装。\n\n![安装](https://user-images.githubusercontent.com/92096395/200289524-a5135818-e187-4103-8d06-adc2f6b4b4e9.png)\n\n> 3.Windows安全中心点击“安装”并把复选框勾上。\n\n![安全提示](https://user-images.githubusercontent.com/92096395/200289526-900a8b9b-4301-4432-ba91-e44be517e225.png)\n\n> 4.安装结束后，桌面会出现快捷方式。\n\n![结束状态](https://user-images.githubusercontent.com/92096395/200289527-68adb6ca-816b-428f-99e3-fbddfaf6ecd1.png)\n\n> 5.双击进入后，用户账户控制点击“是”。\n\n![安全提示](https://user-images.githubusercontent.com/92096395/200289530-ab0c3513-1b07-46c1-a687-1731210e721c.png)\n\n### MacOS\n\n> 1.下载后在桌面会看到软件的图标\n\n![图标](https://github.com/songxiao1018/blog-img/blob/main/VPN/21.png?raw=true)\n\n> 2.双击打开此图标，会显示如下界面\n\n![打开磁盘包](https://github.com/songxiao1018/blog-img/blob/main/VPN/22.png?raw=true)\n\n此时双击软件图标会提示`无法识别开发者`\n\n![安全提示](https://github.com/songxiao1018/blog-img/blob/main/VPN/23.png?raw=true)\n\n> 3.这时进入`系统偏好设置`打开`安全性与隐私`\n\n![系统偏好设置界面](https://github.com/songxiao1018/blog-img/blob/main/VPN/24.png?raw=true)\n\n这时你会看到如下一条提示信息：\n\n![安全提示](https://github.com/songxiao1018/blog-img/blob/main/VPN/25.png?raw=true)\n\n选择`仍要打开`，这时系统继续提示安全信息，我们选择相信，点击`打开`\n\n![安全提示](https://github.com/songxiao1018/blog-img/blob/main/VPN/26.png?raw=true)\n\n输入密码（默认是锁屏密码，不同设备可能会是APPLE ID密码），从而进入安装界面。\n\n![输入密码](https://github.com/songxiao1018/blog-img/blob/main/VPN/27.png?raw=true)\n\n> 4.安装完成后进入如下界面即为成功\n\n![应用界面](https://github.com/songxiao1018/blog-img/blob/main/VPN/28.png?raw=true)\n\n<!-- ### Android\n\n### IOS -->\n\n## 配置\n\n### Windows\n\n> 1.在登录界面输入对应的服务器地址、端口、用户名、密码。\n\n电信：服务器地址：221.226.191.50，端口：4433；\n\n联通：服务器地址：221.226.191.50，端口：4433；\n\n移动：服务器地址：36.152.118.46，端口：4433；\n\n离退休教师及其他临时申请用户服务器地址：58.213.152.82，端口：4434。\n\n![输入样例](https://user-images.githubusercontent.com/92096395/200289537-96e73bbc-acb8-41fe-b0d2-987f51b7f607.png)\n\n> 2.登录结束后，点击“允许访问”。\n\n![防火墙提示](https://user-images.githubusercontent.com/92096395/200289549-56242a33-8787-4305-af93-050a4141ca3e.png)\n\n> 3.右击导航栏的图标进入管理界面，可以检查目前登录状态。\n\n![登录状态](https://user-images.githubusercontent.com/92096395/200289507-02a66922-9717-4d18-9385-31ebbef2b49f.png)\n\n### MacOS\n\n> 1.点击`新建`\n\n![软件界面](https://github.com/songxiao1018/blog-img/blob/main/VPN/28.png?raw=true)\n\n> 1.在登录界面输入对应的服务器地址、端口、用户名、密码。\n\n![输入界面](https://github.com/songxiao1018/blog-img/blob/main/VPN/29.png?raw=true)\n\n电信：服务器地址：221.226.191.50，端口：4433；\n\n联通：服务器地址：221.226.191.50，端口：4433；\n\n移动：服务器地址：36.152.118.46，端口：4433；\n\n离退休教师及其他临时申请用户服务器地址：58.213.152.82，端口：4434。\n\n> 2.登录结束后，进入如下界面即为成功\n\n![登录页](https://github.com/songxiao1018/blog-img/blob/main/VPN/31.png?raw=true)\n\n点击对应的配置，然后点击`连接`即可\n\n显示连接成功即完成校园VPN的配置。\n\n![配置成功页](https://github.com/songxiao1018/blog-img/blob/main/VPN/32.png?raw=true)\n\n---\n\n到这里基本安装就结束啦！现在大家就可以随时随地访问学校内网资源啦！","source":"_posts/vpn-school.md","raw":"---\ntitle: 校园VPN的使用教程\ndate: 2022-11-07 18:22:37\ntags: \n   - VPN\n   - 网络\ncategories: \n   - 学习\n---\n\n为方便大家正常使用VPN访问校内资源及图书馆资源，现在为大家介绍一下有关VPN的使用方法及使用注意事项。\n\n## 下载\n\n1. 学校下载链接（速度较快，版本更新慢）\n学校信息化建设与管理办公室网站里的[VPN服务器地址调整及客户端升级公告https://www.njxzc.edu.cn/8d/41/c89a36161/page.htm](https://www.njxzc.edu.cn/8d/41/c89a36161/page.htm)。\n\n2. 其他下载通道（速度较慢，版本更新快）\n[山石网科](https://www.hillstonenet.com.cn/)官网的[下载通道](https://www.hillstonenet.com.cn/product-and-service/border-security/ngfw/#VPN)进入之后选择对应的操作系统即可。\n![下载界面](https://github.com/songxiao1018/blog-img/blob/main/VPN/000.png?raw=true)\n\n## 安装\n\n### Windows\n\n> 1.下载后解压，双击得到.exe文件。用户账户控制点击“是”。\n\n![下载文件](https://user-images.githubusercontent.com/92096395/200289517-b5066c04-e7bb-4c3c-97d0-23f4a2e22b07.png)\n\n> 2.进入安装界面后，软件会自动安装。\n\n![安装](https://user-images.githubusercontent.com/92096395/200289524-a5135818-e187-4103-8d06-adc2f6b4b4e9.png)\n\n> 3.Windows安全中心点击“安装”并把复选框勾上。\n\n![安全提示](https://user-images.githubusercontent.com/92096395/200289526-900a8b9b-4301-4432-ba91-e44be517e225.png)\n\n> 4.安装结束后，桌面会出现快捷方式。\n\n![结束状态](https://user-images.githubusercontent.com/92096395/200289527-68adb6ca-816b-428f-99e3-fbddfaf6ecd1.png)\n\n> 5.双击进入后，用户账户控制点击“是”。\n\n![安全提示](https://user-images.githubusercontent.com/92096395/200289530-ab0c3513-1b07-46c1-a687-1731210e721c.png)\n\n### MacOS\n\n> 1.下载后在桌面会看到软件的图标\n\n![图标](https://github.com/songxiao1018/blog-img/blob/main/VPN/21.png?raw=true)\n\n> 2.双击打开此图标，会显示如下界面\n\n![打开磁盘包](https://github.com/songxiao1018/blog-img/blob/main/VPN/22.png?raw=true)\n\n此时双击软件图标会提示`无法识别开发者`\n\n![安全提示](https://github.com/songxiao1018/blog-img/blob/main/VPN/23.png?raw=true)\n\n> 3.这时进入`系统偏好设置`打开`安全性与隐私`\n\n![系统偏好设置界面](https://github.com/songxiao1018/blog-img/blob/main/VPN/24.png?raw=true)\n\n这时你会看到如下一条提示信息：\n\n![安全提示](https://github.com/songxiao1018/blog-img/blob/main/VPN/25.png?raw=true)\n\n选择`仍要打开`，这时系统继续提示安全信息，我们选择相信，点击`打开`\n\n![安全提示](https://github.com/songxiao1018/blog-img/blob/main/VPN/26.png?raw=true)\n\n输入密码（默认是锁屏密码，不同设备可能会是APPLE ID密码），从而进入安装界面。\n\n![输入密码](https://github.com/songxiao1018/blog-img/blob/main/VPN/27.png?raw=true)\n\n> 4.安装完成后进入如下界面即为成功\n\n![应用界面](https://github.com/songxiao1018/blog-img/blob/main/VPN/28.png?raw=true)\n\n<!-- ### Android\n\n### IOS -->\n\n## 配置\n\n### Windows\n\n> 1.在登录界面输入对应的服务器地址、端口、用户名、密码。\n\n电信：服务器地址：221.226.191.50，端口：4433；\n\n联通：服务器地址：221.226.191.50，端口：4433；\n\n移动：服务器地址：36.152.118.46，端口：4433；\n\n离退休教师及其他临时申请用户服务器地址：58.213.152.82，端口：4434。\n\n![输入样例](https://user-images.githubusercontent.com/92096395/200289537-96e73bbc-acb8-41fe-b0d2-987f51b7f607.png)\n\n> 2.登录结束后，点击“允许访问”。\n\n![防火墙提示](https://user-images.githubusercontent.com/92096395/200289549-56242a33-8787-4305-af93-050a4141ca3e.png)\n\n> 3.右击导航栏的图标进入管理界面，可以检查目前登录状态。\n\n![登录状态](https://user-images.githubusercontent.com/92096395/200289507-02a66922-9717-4d18-9385-31ebbef2b49f.png)\n\n### MacOS\n\n> 1.点击`新建`\n\n![软件界面](https://github.com/songxiao1018/blog-img/blob/main/VPN/28.png?raw=true)\n\n> 1.在登录界面输入对应的服务器地址、端口、用户名、密码。\n\n![输入界面](https://github.com/songxiao1018/blog-img/blob/main/VPN/29.png?raw=true)\n\n电信：服务器地址：221.226.191.50，端口：4433；\n\n联通：服务器地址：221.226.191.50，端口：4433；\n\n移动：服务器地址：36.152.118.46，端口：4433；\n\n离退休教师及其他临时申请用户服务器地址：58.213.152.82，端口：4434。\n\n> 2.登录结束后，进入如下界面即为成功\n\n![登录页](https://github.com/songxiao1018/blog-img/blob/main/VPN/31.png?raw=true)\n\n点击对应的配置，然后点击`连接`即可\n\n显示连接成功即完成校园VPN的配置。\n\n![配置成功页](https://github.com/songxiao1018/blog-img/blob/main/VPN/32.png?raw=true)\n\n---\n\n到这里基本安装就结束啦！现在大家就可以随时随地访问学校内网资源啦！","slug":"vpn-school","published":1,"updated":"2023-07-23T14:19:13.811Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkjdd1d4003q98aj5zol4xg8","content":"<p>为方便大家正常使用VPN访问校内资源及图书馆资源，现在为大家介绍一下有关VPN的使用方法及使用注意事项。</p>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><ol>\n<li><p>学校下载链接（速度较快，版本更新慢）<br>学校信息化建设与管理办公室网站里的<a href=\"https://www.njxzc.edu.cn/8d/41/c89a36161/page.htm\">VPN服务器地址调整及客户端升级公告https://www.njxzc.edu.cn/8d/41/c89a36161/page.htm</a>。</p>\n</li>\n<li><p>其他下载通道（速度较慢，版本更新快）<br><a href=\"https://www.hillstonenet.com.cn/\">山石网科</a>官网的<a href=\"https://www.hillstonenet.com.cn/product-and-service/border-security/ngfw/#VPN\">下载通道</a>进入之后选择对应的操作系统即可。<br><img src=\"https://github.com/songxiao1018/blog-img/blob/main/VPN/000.png?raw=true\" alt=\"下载界面\"></p>\n</li>\n</ol>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h3><blockquote>\n<p>1.下载后解压，双击得到.exe文件。用户账户控制点击“是”。</p>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/92096395/200289517-b5066c04-e7bb-4c3c-97d0-23f4a2e22b07.png\" alt=\"下载文件\"></p>\n<blockquote>\n<p>2.进入安装界面后，软件会自动安装。</p>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/92096395/200289524-a5135818-e187-4103-8d06-adc2f6b4b4e9.png\" alt=\"安装\"></p>\n<blockquote>\n<p>3.Windows安全中心点击“安装”并把复选框勾上。</p>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/92096395/200289526-900a8b9b-4301-4432-ba91-e44be517e225.png\" alt=\"安全提示\"></p>\n<blockquote>\n<p>4.安装结束后，桌面会出现快捷方式。</p>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/92096395/200289527-68adb6ca-816b-428f-99e3-fbddfaf6ecd1.png\" alt=\"结束状态\"></p>\n<blockquote>\n<p>5.双击进入后，用户账户控制点击“是”。</p>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/92096395/200289530-ab0c3513-1b07-46c1-a687-1731210e721c.png\" alt=\"安全提示\"></p>\n<h3 id=\"MacOS\"><a href=\"#MacOS\" class=\"headerlink\" title=\"MacOS\"></a>MacOS</h3><blockquote>\n<p>1.下载后在桌面会看到软件的图标</p>\n</blockquote>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/VPN/21.png?raw=true\" alt=\"图标\"></p>\n<blockquote>\n<p>2.双击打开此图标，会显示如下界面</p>\n</blockquote>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/VPN/22.png?raw=true\" alt=\"打开磁盘包\"></p>\n<p>此时双击软件图标会提示<code>无法识别开发者</code></p>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/VPN/23.png?raw=true\" alt=\"安全提示\"></p>\n<blockquote>\n<p>3.这时进入<code>系统偏好设置</code>打开<code>安全性与隐私</code></p>\n</blockquote>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/VPN/24.png?raw=true\" alt=\"系统偏好设置界面\"></p>\n<p>这时你会看到如下一条提示信息：</p>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/VPN/25.png?raw=true\" alt=\"安全提示\"></p>\n<p>选择<code>仍要打开</code>，这时系统继续提示安全信息，我们选择相信，点击<code>打开</code></p>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/VPN/26.png?raw=true\" alt=\"安全提示\"></p>\n<p>输入密码（默认是锁屏密码，不同设备可能会是APPLE ID密码），从而进入安装界面。</p>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/VPN/27.png?raw=true\" alt=\"输入密码\"></p>\n<blockquote>\n<p>4.安装完成后进入如下界面即为成功</p>\n</blockquote>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/VPN/28.png?raw=true\" alt=\"应用界面\"></p>\n<!-- ### Android\n\n### IOS -->\n\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><h3 id=\"Windows-1\"><a href=\"#Windows-1\" class=\"headerlink\" title=\"Windows\"></a>Windows</h3><blockquote>\n<p>1.在登录界面输入对应的服务器地址、端口、用户名、密码。</p>\n</blockquote>\n<p>电信：服务器地址：221.226.191.50，端口：4433；</p>\n<p>联通：服务器地址：221.226.191.50，端口：4433；</p>\n<p>移动：服务器地址：36.152.118.46，端口：4433；</p>\n<p>离退休教师及其他临时申请用户服务器地址：58.213.152.82，端口：4434。</p>\n<p><img src=\"https://user-images.githubusercontent.com/92096395/200289537-96e73bbc-acb8-41fe-b0d2-987f51b7f607.png\" alt=\"输入样例\"></p>\n<blockquote>\n<p>2.登录结束后，点击“允许访问”。</p>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/92096395/200289549-56242a33-8787-4305-af93-050a4141ca3e.png\" alt=\"防火墙提示\"></p>\n<blockquote>\n<p>3.右击导航栏的图标进入管理界面，可以检查目前登录状态。</p>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/92096395/200289507-02a66922-9717-4d18-9385-31ebbef2b49f.png\" alt=\"登录状态\"></p>\n<h3 id=\"MacOS-1\"><a href=\"#MacOS-1\" class=\"headerlink\" title=\"MacOS\"></a>MacOS</h3><blockquote>\n<p>1.点击<code>新建</code></p>\n</blockquote>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/VPN/28.png?raw=true\" alt=\"软件界面\"></p>\n<blockquote>\n<p>1.在登录界面输入对应的服务器地址、端口、用户名、密码。</p>\n</blockquote>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/VPN/29.png?raw=true\" alt=\"输入界面\"></p>\n<p>电信：服务器地址：221.226.191.50，端口：4433；</p>\n<p>联通：服务器地址：221.226.191.50，端口：4433；</p>\n<p>移动：服务器地址：36.152.118.46，端口：4433；</p>\n<p>离退休教师及其他临时申请用户服务器地址：58.213.152.82，端口：4434。</p>\n<blockquote>\n<p>2.登录结束后，进入如下界面即为成功</p>\n</blockquote>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/VPN/31.png?raw=true\" alt=\"登录页\"></p>\n<p>点击对应的配置，然后点击<code>连接</code>即可</p>\n<p>显示连接成功即完成校园VPN的配置。</p>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/VPN/32.png?raw=true\" alt=\"配置成功页\"></p>\n<hr>\n<p>到这里基本安装就结束啦！现在大家就可以随时随地访问学校内网资源啦！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>为方便大家正常使用VPN访问校内资源及图书馆资源，现在为大家介绍一下有关VPN的使用方法及使用注意事项。</p>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><ol>\n<li><p>学校下载链接（速度较快，版本更新慢）<br>学校信息化建设与管理办公室网站里的<a href=\"https://www.njxzc.edu.cn/8d/41/c89a36161/page.htm\">VPN服务器地址调整及客户端升级公告https://www.njxzc.edu.cn/8d/41/c89a36161/page.htm</a>。</p>\n</li>\n<li><p>其他下载通道（速度较慢，版本更新快）<br><a href=\"https://www.hillstonenet.com.cn/\">山石网科</a>官网的<a href=\"https://www.hillstonenet.com.cn/product-and-service/border-security/ngfw/#VPN\">下载通道</a>进入之后选择对应的操作系统即可。<br><img src=\"https://github.com/songxiao1018/blog-img/blob/main/VPN/000.png?raw=true\" alt=\"下载界面\"></p>\n</li>\n</ol>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h3><blockquote>\n<p>1.下载后解压，双击得到.exe文件。用户账户控制点击“是”。</p>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/92096395/200289517-b5066c04-e7bb-4c3c-97d0-23f4a2e22b07.png\" alt=\"下载文件\"></p>\n<blockquote>\n<p>2.进入安装界面后，软件会自动安装。</p>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/92096395/200289524-a5135818-e187-4103-8d06-adc2f6b4b4e9.png\" alt=\"安装\"></p>\n<blockquote>\n<p>3.Windows安全中心点击“安装”并把复选框勾上。</p>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/92096395/200289526-900a8b9b-4301-4432-ba91-e44be517e225.png\" alt=\"安全提示\"></p>\n<blockquote>\n<p>4.安装结束后，桌面会出现快捷方式。</p>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/92096395/200289527-68adb6ca-816b-428f-99e3-fbddfaf6ecd1.png\" alt=\"结束状态\"></p>\n<blockquote>\n<p>5.双击进入后，用户账户控制点击“是”。</p>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/92096395/200289530-ab0c3513-1b07-46c1-a687-1731210e721c.png\" alt=\"安全提示\"></p>\n<h3 id=\"MacOS\"><a href=\"#MacOS\" class=\"headerlink\" title=\"MacOS\"></a>MacOS</h3><blockquote>\n<p>1.下载后在桌面会看到软件的图标</p>\n</blockquote>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/VPN/21.png?raw=true\" alt=\"图标\"></p>\n<blockquote>\n<p>2.双击打开此图标，会显示如下界面</p>\n</blockquote>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/VPN/22.png?raw=true\" alt=\"打开磁盘包\"></p>\n<p>此时双击软件图标会提示<code>无法识别开发者</code></p>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/VPN/23.png?raw=true\" alt=\"安全提示\"></p>\n<blockquote>\n<p>3.这时进入<code>系统偏好设置</code>打开<code>安全性与隐私</code></p>\n</blockquote>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/VPN/24.png?raw=true\" alt=\"系统偏好设置界面\"></p>\n<p>这时你会看到如下一条提示信息：</p>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/VPN/25.png?raw=true\" alt=\"安全提示\"></p>\n<p>选择<code>仍要打开</code>，这时系统继续提示安全信息，我们选择相信，点击<code>打开</code></p>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/VPN/26.png?raw=true\" alt=\"安全提示\"></p>\n<p>输入密码（默认是锁屏密码，不同设备可能会是APPLE ID密码），从而进入安装界面。</p>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/VPN/27.png?raw=true\" alt=\"输入密码\"></p>\n<blockquote>\n<p>4.安装完成后进入如下界面即为成功</p>\n</blockquote>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/VPN/28.png?raw=true\" alt=\"应用界面\"></p>\n<!-- ### Android\n\n### IOS -->\n\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><h3 id=\"Windows-1\"><a href=\"#Windows-1\" class=\"headerlink\" title=\"Windows\"></a>Windows</h3><blockquote>\n<p>1.在登录界面输入对应的服务器地址、端口、用户名、密码。</p>\n</blockquote>\n<p>电信：服务器地址：221.226.191.50，端口：4433；</p>\n<p>联通：服务器地址：221.226.191.50，端口：4433；</p>\n<p>移动：服务器地址：36.152.118.46，端口：4433；</p>\n<p>离退休教师及其他临时申请用户服务器地址：58.213.152.82，端口：4434。</p>\n<p><img src=\"https://user-images.githubusercontent.com/92096395/200289537-96e73bbc-acb8-41fe-b0d2-987f51b7f607.png\" alt=\"输入样例\"></p>\n<blockquote>\n<p>2.登录结束后，点击“允许访问”。</p>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/92096395/200289549-56242a33-8787-4305-af93-050a4141ca3e.png\" alt=\"防火墙提示\"></p>\n<blockquote>\n<p>3.右击导航栏的图标进入管理界面，可以检查目前登录状态。</p>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/92096395/200289507-02a66922-9717-4d18-9385-31ebbef2b49f.png\" alt=\"登录状态\"></p>\n<h3 id=\"MacOS-1\"><a href=\"#MacOS-1\" class=\"headerlink\" title=\"MacOS\"></a>MacOS</h3><blockquote>\n<p>1.点击<code>新建</code></p>\n</blockquote>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/VPN/28.png?raw=true\" alt=\"软件界面\"></p>\n<blockquote>\n<p>1.在登录界面输入对应的服务器地址、端口、用户名、密码。</p>\n</blockquote>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/VPN/29.png?raw=true\" alt=\"输入界面\"></p>\n<p>电信：服务器地址：221.226.191.50，端口：4433；</p>\n<p>联通：服务器地址：221.226.191.50，端口：4433；</p>\n<p>移动：服务器地址：36.152.118.46，端口：4433；</p>\n<p>离退休教师及其他临时申请用户服务器地址：58.213.152.82，端口：4434。</p>\n<blockquote>\n<p>2.登录结束后，进入如下界面即为成功</p>\n</blockquote>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/VPN/31.png?raw=true\" alt=\"登录页\"></p>\n<p>点击对应的配置，然后点击<code>连接</code>即可</p>\n<p>显示连接成功即完成校园VPN的配置。</p>\n<p><img src=\"https://github.com/songxiao1018/blog-img/blob/main/VPN/32.png?raw=true\" alt=\"配置成功页\"></p>\n<hr>\n<p>到这里基本安装就结束啦！现在大家就可以随时随地访问学校内网资源啦！</p>\n"},{"title":"linux中配置vnc登录","date":"2022-10-18T11:12:12.000Z","_content":"debian vnc 配置\n\n介绍 (Introduction)\nVirtual Network Computing, or VNC, is a connection system that allows you to use your keyboard and mouse to interact with a graphical desktop environment on a remote server. It makes managing files, software, and settings on a remote server easier for users who are not yet comfortable with the command line.\n\n虚拟网络计算 (VNC)是一种连接系统，使您可以使用键盘和鼠标与远程服务器上的图形桌面环境进行交互。 对于尚不熟悉命令行的用户，它使在远程服务器上管理文件，软件和设置更加容易。\n\nIn this guide, you’ll set up a VNC server on a Debian 10 server and connect to it securely through an SSH tunnel. You’ll use TightVNC, a fast and lightweight remote control package. This choice will ensure that our VNC connection will be smooth and stable even on slower internet connections.\n\n在本指南中，您将在Debian 10服务器上设置VNC服务器，并通过SSH隧道安全地连接到该服务器。 您将使用TightVNC ，这是一种快速，轻便的远程控制程序包。 此选择将确保即使在较慢的Internet连接上，我们的VNC连接也将保持平稳。\n\n先决条件 (Prerequisites)\nTo complete this tutorial, you’ll need:\n\n要完成本教程，您需要：\n\nOne Debian 10 server set up by following the Debian 10 initial server setup guide, including a non-root user with sudo access and a firewall.\n\n按照Debian 10初始服务器设置指南设置一台Debian 10服务器，包括具有sudo访问权限和防火墙的非root用户。\n\nOn Windows, you can use TightVNC, RealVNC, or UltraVNC.\n\n在Windows上，可以使用TightVNC ， RealVNC或UltraVNC 。\n\nOn macOS, you can use the built-in Screen Sharing program, or can use a cross-platform app like RealVNC.\n\n在macOS上，您可以使用内置的屏幕共享程序，也可以使用RealVNC之类的跨平台应用程序。\n\nOn Linux, you can choose from many options, including vinagre, krdc, RealVNC, or TightVNC.\n\n在Linux上，可以从许多选项中进行选择，包括vinagre ， krdc ， RealVNC或TightVNC 。\n\n步骤1 —安装桌面环境和VNC服务器 (Step 1 — Installing the Desktop Environment and VNC Server)\nBy default, a Debian 10 server does not come with a graphical desktop environment or a VNC server installed, so we’ll begin by installing those. Specifically, we will install packages for the latest Xfce desktop environment and the TightVNC package available in the official Debian repository.\n\n默认情况下，Debian 10服务器未安装图形桌面环境或VNC服务器，因此我们将从安装它们开始。 具体来说，我们将为最新的Xfce桌面环境安装软件包，并在Debian官方存储库中提供TightVNC软件包。\n\nOn your server, update your list of packages:\n\n在您的服务器上，更新软件包列表：\n\nsudo apt update\nsudo apt更新\nNow install the Xfce desktop environment on your server:\n\n现在，在您的服务器上安装Xfce桌面环境：\n\nsudo apt install xfce4 xfce4-goodies\nsudo apt安装xfce4 xfce4-goodies\nDuring the installation, you’ll be prompted to select your keyboard layout from a list of possible options. Choose the one that’s appropriate for your language and press Enter. The installation will continue.\n\n在安装过程中，系统会提示您从可能的选项列表中选择键盘布局。 选择适合您的语言的一种，然后按Enter 。 安装将继续。\n\nOnce the installation completes, install the TightVNC server:\n\n安装完成后，安装TightVNC服务器：\n\nsudo apt install tightvncserver\nsudo apt安装tightvncserver\nTo complete the VNC server’s initial configuration after installation, use the vncserver command to set up a secure password and create the initial configuration files:\n\n要在安装后完成VNC服务器的初始配置，请使用vncserver命令设置安全密码并创建初始配置文件：\n\nvncserver\nvncserver\nYou’ll be prompted to enter and verify a password to access your machine remotely:\n\n系统将提示您输入并验证密码以远程访问您的计算机：\n\n \n   \n    Output\n   You will require a password to access your desktops.\n \nPassword:\nVerify:\nThe password must be between six and eight characters long. Passwords more than 8 characters will be truncated automatically.\n\n密码长度必须介于六到八个字符之间。 超过8个字符的密码将被自动截断。\n\nOnce you verify the password, you’ll have the option to create a a view-only password. Users who log in with the view-only password will not be able to control the VNC instance with their mouse or keyboard. This is a helpful option if you want to demonstrate something to other people using your VNC server, but this isn’t required.\n\n验证密码后，您可以选择创建仅查看密码。 使用仅查看密码登录的用户将无法使用其鼠标或键盘来控制VNC实例。 如果您想向使用VNC服务器的其他人演示某些内容，这是一个有用的选项，但这不是必需的。\n\nThe process then creates the necessary default configuration files and connection information for the server:\n\n然后，该过程为服务器创建必要的默认配置文件和连接信息：\n\n \n   \n    Output\n   Would you like to enter a view-only password (y/n)? n\nxauth:  file /home/sammy/.Xauthority does not exist\n \nNew 'X' desktop is your_hostname:1\n \nCreating default startup script /home/sammy/.vnc/xstartup\nStarting applications specified in /home/sammy/.vnc/xstartup\nLog file is /home/sammy/.vnc/your_hostname:1.log\nNow let’s configure the VNC server.\n\n现在，让我们配置VNC服务器。\n\n步骤2 —配置VNC服务器 (Step 2 — Configuring the VNC Server)\nThe VNC server needs to know which commands to execute when it starts up. Specifically, VNC needs to know which graphical desktop it should connect to.\n\nVNC服务器启动时需要知道要执行哪些命令。 具体来说，VNC需要知道它应该连接到哪个图形桌面。\n\nThese commands are located in a configuration file called xstartup in the .vnc folder under your home directory. The startup script was created when you ran the vncserver command in the previous step, but we’ll create our own to launch the Xfce desktop.\n\n这些命令位于主目录下.vnc文件夹中名为xstartup的配置文件中。 在上一步中运行vncserver命令时创建了启动脚本，但是我们将创建自己的脚本来启动Xfce桌面。\n\nWhen VNC is first set up, it launches a default server instance on port 5901. This port is called a display port, and is referred to by VNC as :1. VNC can launch multiple instances on other display ports, like :2, :3, and so on.\n\n首次设置VNC时，它将在端口5901上启动默认服务器实例。 此端口称为显示端口 ，VNC将该端口称为:1 。 VNC可以在其他显示端口上启动多个实例，例如:2 ， :3等。\n\nBecause we are going to be changing how the VNC server is configured, first stop the VNC server instance that is running on port 5901 with the following command:\n\n因为我们将要更改VNC服务器的配置方式，所以首先使用以下命令停止在端口5901上运行的VNC服务器实例：\n\nvncserver -kill :1\nvncserver -kill：1\nThe output should look like this, although you’ll see a different PID:\n\n输出将看起来像这样，尽管您将看到一个不同的PID：\n\n \n   \n    Output\n   Killing Xtightvnc process ID 17648\nBefore you modify the xstartup file, back up the original:\n\n在修改xstartup文件之前，请备份原始文件：\n\nmv ~/.vnc/xstartup ~/.vnc/xstartup.bak\nmv〜/ .vnc / xstartup〜/ .vnc / xstartup.bak\nNow create a new xstartup file and open it in your text editor:\n\n现在创建一个新的xstartup文件，并在文本编辑器中将其打开：\n\nnano ~/.vnc/xstartup\n纳米〜/ .vnc / xstartup\nCommands in this file are executed automatically whenever you start or restart the VNC server. We need VNC to start our desktop environment if it’s not already started. Add these commands to the file:\n\n每当启动或重新启动VNC服务器时，该文件中的命令就会自动执行。 如果尚未启动桌面环境，我们需要VNC来启动它。 将以下命令添加到文件中：\n\n~/.vnc/xstartup\n〜/ .vnc / xstartup\n#!/bin/bash\nxrdb $HOME/.Xresources\nstartxfce4 &\nThe first command in the file, xrdb $HOME/.Xresources, tells VNC’s GUI framework to read the user’s .Xresources file. .Xresources is where a user can make changes to certain settings for the graphical desktop, like terminal colors, cursor themes, and font rendering. The second command tells the server to launch Xfce, which is where you will find all of the graphical software that you need to comfortably manage your server.\n\n文件中的第一个命令xrdb $HOME/.Xresources告诉VNC的GUI框架读取用户的.Xresources文件。 用户可以在.Xresources中更改图形桌面的某些设置，例如终端颜色，光标主题和字体渲染。 第二个命令告诉服务器启动Xfce，在这里您将找到轻松管理服务器所需的所有图形软件。\n\nTo ensure that the VNC server will be able to use this new startup file properly, we’ll need to make it executable.\n\n为了确保VNC服务器能够正确使用此新启动文件，我们需要使其成为可执行文件。\n\nsudo chmod +x ~/.vnc/xstartup\n须藤chmod + x〜/ .vnc / xstartup\nNow, restart the VNC server.\n\n现在，重新启动VNC服务器。\n\nvncserver\nvncserver\nYou’ll see output similar to this:\n\n您将看到类似于以下的输出：\n\n \n   \n    Output\n   New 'X' desktop is your_hostname:1\n \nStarting applications specified in /home/sammy/.vnc/xstartup\nLog file is /home/sammy/.vnc/your_hostname:1.log\nWith the configuration in place, let’s connect to the server from our local machine.\n\n完成配置后，让我们从本地计算机连接到服务器。\n\n步骤3 —安全地连接VNC桌面 (Step 3 — Connecting the VNC Desktop Securely)\nVNC itself doesn’t use secure protocols when connecting. We’ll use an SSH tunnel to connect securely to our server, and then tell our VNC client to use that tunnel rather than making a direct connection.\n\n连接时，VNC本身不使用安全协议。 我们将使用SSH隧道安全地连接到我们的服务器，然后告诉我们的VNC客户端使用该隧道，而不是直接建立连接。\n\nCreate an SSH connection on your local computer that securely forwards to the localhost connection for VNC. You can do this via the terminal on Linux or macOS with the following command:\n\n在本地计算机上创建一个SSH连接，该连接安全地转发到VNC的localhost连接。 您可以使用以下命令通过Linux或macOS上的终端执行此操作：\n\nssh -L 5901:127.0.0.1:5901 -C -N -l sammy your_server_ip\n\nssh -L 5901 ：127.0.0.1： 5901 -C -N -l sammy your_server_ip\n\nThe -L switch specifies the port bindings. In this case we’re binding port 5901 of the remote connection to port 5901 on your local machine. The -C switch enables compression, while the -N switch tells ssh that we don’t want to execute a remote command. The -l switch specifies the remote login name.\n\n-L开关指定端口绑定。 在这种情况下，我们绑定端口5901的远程连接端口5901在本地机器上。 -C开关启用压缩，而-N开关告诉ssh我们不想执行远程命令。 -l开关指定远程登录名。\n\nRemember to replace sammy and your_server_ip with your non-root username and the IP address of your server.\n\n请记住用非root用户名和服务器的IP地址替换sammy和your_server_ip 。\n\nIf you are using a graphical SSH client, like PuTTY, use your_server_ip as the connection IP, and set localhost:5901 as a new forwarded port in the program’s SSH tunnel settings.\n\n如果使用的是图形SSH客户端(如PuTTY)，请使用your_server_ip作为连接IP，并在程序的SSH隧道设置中将localhost:5901设置为新的转发端口。\n\nOnce the tunnel is running, use a VNC client to connect to localhost:5901. You’ll be prompted to authenticate using the password you set in Step 1.\n\n隧道运行后，使用VNC客户端连接到localhost:5901 。 系统将提示您使用在步骤1中设置的密码进行身份验证。\n\nOnce you are connected, you’ll see the default Xfce desktop.\n\n建立连接后，您将看到默认的Xfce桌面。\n\nSelect Use default config to configure your desktop quickly.\n\n选择“ 使用默认配置”以快速配置您的桌面。\n\nYou can access files in your home directory with the file manager or from the command line, as seen here:\n\n您可以使用文件管理器或从命令行访问主目录中的文件，如下所示：\n\nOn your local machine, press CTRL+C in your terminal to stop the SSH tunnel and return to your prompt. This will disconnect your VNC session as well.\n\n在本地计算机上，在终端中按CTRL+C停止SSH隧道并返回到提示符。 这也将断开您的VNC会话。\n\nNext let’s set up the VNC server as a service.\n\n接下来，我们将VNC服务器设置为服务。\n\n步骤4 —将VNC作为系统服务运行 (Step 4 — Running VNC as a System Service)\nNext, we’ll set up the VNC server as a systemd service so we can start, stop, and restart it as needed, like any other service. This will also ensure that VNC starts up when your server reboots.\n\n接下来，我们将VNC服务器设置为系统服务，以便可以像其他任何服务一样根据需要启动，停止和重新启动它。 这还将确保在服务器重新引导时VNC启动。\n\nFirst, create a new unit file called /etc/systemd/system/vncserver@.service using your favorite text editor:\n\n首先，使用您喜欢的文本编辑器创建一个名为/etc/systemd/system/vncserver@.service的新单元文件：\n\nsudo nano /etc/systemd/system/vncserver@.service\n须藤纳米/etc/systemd/system/vncserver@.service\nThe @ symbol at the end of the name will let us pass in an argument we can use in the service configuration. We’ll use this to specify the VNC display port we want to use when we manage the service.\n\n名称末尾的@符号将使我们传递可在服务配置中使用的参数。 我们将使用它来指定我们在管理服务时要使用的VNC显示端口。\n\nAdd the following lines to the file. Be sure to change the value of User, Group, WorkingDirectory, and the username in the value of PIDFILE to match your username:\n\n将以下行添加到文件中。 确保在PIDFILE的值中更改User ， Group ， WorkingDirectory和用户名的值以匹配您的用户名：\n\n/etc/systemd/system/vncserver@.service\n/etc/systemd/system/vncserver@.service\n[Unit]\nDescription=Start TightVNC server at startup\nAfter=syslog.target network.target\n \n[Service]\nType=forking\nUser=sammy\nGroup=sammy\nWorkingDirectory=/home/sammy\n \nPIDFile=/home/sammy/.vnc/%H:%i.pid\nExecStartPre=-/usr/bin/vncserver -kill :%i > /dev/null 2>&1\nExecStart=/usr/bin/vncserver -depth 24 -geometry 1280x800 :%i\nExecStop=/usr/bin/vncserver -kill :%i\n \n[Install]\nWantedBy=multi-user.target\n\nThe ExecStartPre command stops VNC if it’s already running. The ExecStart command starts VNC and sets the color depth to 24-bit color with a resolution of 1280x800. You can modify these startup options as well to meet your needs.\n\n如果ExecStartPre命令已经在运行，它将停止它。 ExecStart命令启动VNC并将颜色深度设置为24位颜色，分辨率为1280x800。 您也可以修改这些启动选项，以满足您的需求。\n\nSave and close the file.\n\n保存并关闭文件。\n\nNext, make the system aware of the new unit file.\n\n接下来，使系统知道新的单位文件。\n\nsudo systemctl daemon-reload\nsudo systemctl守护进程重新加载\nEnable the unit file.\n\n启用单位文件。\n\nsudo systemctl enable vncserver@1.service\nsudo systemctl启用vncserver@1.service\nThe 1 following the @ sign signifies which display number the service should appear over, in this case the default :1 as was discussed in Step 2..\n\n@符号后的1表示服务应显示在哪个显示号上，在这种情况下，默认值:1如步骤2所述。\n\nStop the current instance of the VNC server if it’s still running.\n\n如果VNC服务器的当前实例仍在运行，请停止它。\n\nvncserver -kill :1\nvncserver -kill：1\nThen start it as you would start any other systemd service.\n\n然后像启动其他任何systemd服务一样启动它。\n\nsudo systemctl start vncserver@1\nsudo systemctl启动vncserver @ 1\nYou can verify that it started with this command:\n\n您可以验证它是否使用以下命令启动：\n\nsudo systemctl status vncserver@1\nsudo systemctl状态vncserver @ 1\nIf it started correctly, the output should look like this:\n\n如果正确启动，则输出应如下所示：\n\n \n   \n    Output\n   ● vncserver@1.service - Start TightVNC server at startup\n   Loaded: loaded (/etc/systemd/system/vncserver@.service; enabled; vendor preset: enabled)\n   Active: active (running) since Thu 2019-10-10 17:56:17 UTC; 5s ago\n  Process: 935 ExecStartPre=/usr/bin/vncserver -kill :1 > /dev/null 2>&1 (code=exited, status=2)\n  Process: 940 ExecStart=/usr/bin/vncserver -depth 24 -geometry 1280x800 :1 (code=exited, status=0/SUCCESS)\n Main PID: 948 (Xtightvnc)\n. . .\nYour VNC server will now be available when you reboot the machine.\n\n重新启动计算机后，您的VNC服务器现在将可用。\n\nStart your SSH tunnel again:\n\n再次启动SSH隧道：\n\nssh -L 5901:127.0.0.1:5901 -C -N -l sammy your_server_ip\n\nssh -L 5901 ：127.0.0.1： 5901 -C -N -l sammy your_server_ip\n\nThen make a new connection using your VNC client software to localhost:5901 to connect to your machine.\n\n然后使用您的VNC客户端软件与localhost:5901建立新连接，以连接到您的计算机。\n\n结论 (Conclusion)\nYou now have a secured VNC server up and running on your Debian 10 server. Now you’ll be able to manage your files, software, and settings with an easy-to-use and familiar graphical interface, and you’ll be able to run graphical software like web browsers remotely.\n\n现在，您已在Debian 10服务器上启动并运行了安全的VNC服务器。 现在，您将可以使用易于使用且熟悉的图形界面来管理文件，软件和设置，并且可以远程运行Web浏览器等图形软件。\n\n翻译自: https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-vnc-on-debian-10\n\ndebian vnc 配置","source":"_posts/vnc-peizhi.md","raw":"---\ntitle: linux中配置vnc登录\ndate: 2022-10-18 19:12:12\ntags: \n    - VNC\n    - GUI\ncategories: \n    - 系统\n---\ndebian vnc 配置\n\n介绍 (Introduction)\nVirtual Network Computing, or VNC, is a connection system that allows you to use your keyboard and mouse to interact with a graphical desktop environment on a remote server. It makes managing files, software, and settings on a remote server easier for users who are not yet comfortable with the command line.\n\n虚拟网络计算 (VNC)是一种连接系统，使您可以使用键盘和鼠标与远程服务器上的图形桌面环境进行交互。 对于尚不熟悉命令行的用户，它使在远程服务器上管理文件，软件和设置更加容易。\n\nIn this guide, you’ll set up a VNC server on a Debian 10 server and connect to it securely through an SSH tunnel. You’ll use TightVNC, a fast and lightweight remote control package. This choice will ensure that our VNC connection will be smooth and stable even on slower internet connections.\n\n在本指南中，您将在Debian 10服务器上设置VNC服务器，并通过SSH隧道安全地连接到该服务器。 您将使用TightVNC ，这是一种快速，轻便的远程控制程序包。 此选择将确保即使在较慢的Internet连接上，我们的VNC连接也将保持平稳。\n\n先决条件 (Prerequisites)\nTo complete this tutorial, you’ll need:\n\n要完成本教程，您需要：\n\nOne Debian 10 server set up by following the Debian 10 initial server setup guide, including a non-root user with sudo access and a firewall.\n\n按照Debian 10初始服务器设置指南设置一台Debian 10服务器，包括具有sudo访问权限和防火墙的非root用户。\n\nOn Windows, you can use TightVNC, RealVNC, or UltraVNC.\n\n在Windows上，可以使用TightVNC ， RealVNC或UltraVNC 。\n\nOn macOS, you can use the built-in Screen Sharing program, or can use a cross-platform app like RealVNC.\n\n在macOS上，您可以使用内置的屏幕共享程序，也可以使用RealVNC之类的跨平台应用程序。\n\nOn Linux, you can choose from many options, including vinagre, krdc, RealVNC, or TightVNC.\n\n在Linux上，可以从许多选项中进行选择，包括vinagre ， krdc ， RealVNC或TightVNC 。\n\n步骤1 —安装桌面环境和VNC服务器 (Step 1 — Installing the Desktop Environment and VNC Server)\nBy default, a Debian 10 server does not come with a graphical desktop environment or a VNC server installed, so we’ll begin by installing those. Specifically, we will install packages for the latest Xfce desktop environment and the TightVNC package available in the official Debian repository.\n\n默认情况下，Debian 10服务器未安装图形桌面环境或VNC服务器，因此我们将从安装它们开始。 具体来说，我们将为最新的Xfce桌面环境安装软件包，并在Debian官方存储库中提供TightVNC软件包。\n\nOn your server, update your list of packages:\n\n在您的服务器上，更新软件包列表：\n\nsudo apt update\nsudo apt更新\nNow install the Xfce desktop environment on your server:\n\n现在，在您的服务器上安装Xfce桌面环境：\n\nsudo apt install xfce4 xfce4-goodies\nsudo apt安装xfce4 xfce4-goodies\nDuring the installation, you’ll be prompted to select your keyboard layout from a list of possible options. Choose the one that’s appropriate for your language and press Enter. The installation will continue.\n\n在安装过程中，系统会提示您从可能的选项列表中选择键盘布局。 选择适合您的语言的一种，然后按Enter 。 安装将继续。\n\nOnce the installation completes, install the TightVNC server:\n\n安装完成后，安装TightVNC服务器：\n\nsudo apt install tightvncserver\nsudo apt安装tightvncserver\nTo complete the VNC server’s initial configuration after installation, use the vncserver command to set up a secure password and create the initial configuration files:\n\n要在安装后完成VNC服务器的初始配置，请使用vncserver命令设置安全密码并创建初始配置文件：\n\nvncserver\nvncserver\nYou’ll be prompted to enter and verify a password to access your machine remotely:\n\n系统将提示您输入并验证密码以远程访问您的计算机：\n\n \n   \n    Output\n   You will require a password to access your desktops.\n \nPassword:\nVerify:\nThe password must be between six and eight characters long. Passwords more than 8 characters will be truncated automatically.\n\n密码长度必须介于六到八个字符之间。 超过8个字符的密码将被自动截断。\n\nOnce you verify the password, you’ll have the option to create a a view-only password. Users who log in with the view-only password will not be able to control the VNC instance with their mouse or keyboard. This is a helpful option if you want to demonstrate something to other people using your VNC server, but this isn’t required.\n\n验证密码后，您可以选择创建仅查看密码。 使用仅查看密码登录的用户将无法使用其鼠标或键盘来控制VNC实例。 如果您想向使用VNC服务器的其他人演示某些内容，这是一个有用的选项，但这不是必需的。\n\nThe process then creates the necessary default configuration files and connection information for the server:\n\n然后，该过程为服务器创建必要的默认配置文件和连接信息：\n\n \n   \n    Output\n   Would you like to enter a view-only password (y/n)? n\nxauth:  file /home/sammy/.Xauthority does not exist\n \nNew 'X' desktop is your_hostname:1\n \nCreating default startup script /home/sammy/.vnc/xstartup\nStarting applications specified in /home/sammy/.vnc/xstartup\nLog file is /home/sammy/.vnc/your_hostname:1.log\nNow let’s configure the VNC server.\n\n现在，让我们配置VNC服务器。\n\n步骤2 —配置VNC服务器 (Step 2 — Configuring the VNC Server)\nThe VNC server needs to know which commands to execute when it starts up. Specifically, VNC needs to know which graphical desktop it should connect to.\n\nVNC服务器启动时需要知道要执行哪些命令。 具体来说，VNC需要知道它应该连接到哪个图形桌面。\n\nThese commands are located in a configuration file called xstartup in the .vnc folder under your home directory. The startup script was created when you ran the vncserver command in the previous step, but we’ll create our own to launch the Xfce desktop.\n\n这些命令位于主目录下.vnc文件夹中名为xstartup的配置文件中。 在上一步中运行vncserver命令时创建了启动脚本，但是我们将创建自己的脚本来启动Xfce桌面。\n\nWhen VNC is first set up, it launches a default server instance on port 5901. This port is called a display port, and is referred to by VNC as :1. VNC can launch multiple instances on other display ports, like :2, :3, and so on.\n\n首次设置VNC时，它将在端口5901上启动默认服务器实例。 此端口称为显示端口 ，VNC将该端口称为:1 。 VNC可以在其他显示端口上启动多个实例，例如:2 ， :3等。\n\nBecause we are going to be changing how the VNC server is configured, first stop the VNC server instance that is running on port 5901 with the following command:\n\n因为我们将要更改VNC服务器的配置方式，所以首先使用以下命令停止在端口5901上运行的VNC服务器实例：\n\nvncserver -kill :1\nvncserver -kill：1\nThe output should look like this, although you’ll see a different PID:\n\n输出将看起来像这样，尽管您将看到一个不同的PID：\n\n \n   \n    Output\n   Killing Xtightvnc process ID 17648\nBefore you modify the xstartup file, back up the original:\n\n在修改xstartup文件之前，请备份原始文件：\n\nmv ~/.vnc/xstartup ~/.vnc/xstartup.bak\nmv〜/ .vnc / xstartup〜/ .vnc / xstartup.bak\nNow create a new xstartup file and open it in your text editor:\n\n现在创建一个新的xstartup文件，并在文本编辑器中将其打开：\n\nnano ~/.vnc/xstartup\n纳米〜/ .vnc / xstartup\nCommands in this file are executed automatically whenever you start or restart the VNC server. We need VNC to start our desktop environment if it’s not already started. Add these commands to the file:\n\n每当启动或重新启动VNC服务器时，该文件中的命令就会自动执行。 如果尚未启动桌面环境，我们需要VNC来启动它。 将以下命令添加到文件中：\n\n~/.vnc/xstartup\n〜/ .vnc / xstartup\n#!/bin/bash\nxrdb $HOME/.Xresources\nstartxfce4 &\nThe first command in the file, xrdb $HOME/.Xresources, tells VNC’s GUI framework to read the user’s .Xresources file. .Xresources is where a user can make changes to certain settings for the graphical desktop, like terminal colors, cursor themes, and font rendering. The second command tells the server to launch Xfce, which is where you will find all of the graphical software that you need to comfortably manage your server.\n\n文件中的第一个命令xrdb $HOME/.Xresources告诉VNC的GUI框架读取用户的.Xresources文件。 用户可以在.Xresources中更改图形桌面的某些设置，例如终端颜色，光标主题和字体渲染。 第二个命令告诉服务器启动Xfce，在这里您将找到轻松管理服务器所需的所有图形软件。\n\nTo ensure that the VNC server will be able to use this new startup file properly, we’ll need to make it executable.\n\n为了确保VNC服务器能够正确使用此新启动文件，我们需要使其成为可执行文件。\n\nsudo chmod +x ~/.vnc/xstartup\n须藤chmod + x〜/ .vnc / xstartup\nNow, restart the VNC server.\n\n现在，重新启动VNC服务器。\n\nvncserver\nvncserver\nYou’ll see output similar to this:\n\n您将看到类似于以下的输出：\n\n \n   \n    Output\n   New 'X' desktop is your_hostname:1\n \nStarting applications specified in /home/sammy/.vnc/xstartup\nLog file is /home/sammy/.vnc/your_hostname:1.log\nWith the configuration in place, let’s connect to the server from our local machine.\n\n完成配置后，让我们从本地计算机连接到服务器。\n\n步骤3 —安全地连接VNC桌面 (Step 3 — Connecting the VNC Desktop Securely)\nVNC itself doesn’t use secure protocols when connecting. We’ll use an SSH tunnel to connect securely to our server, and then tell our VNC client to use that tunnel rather than making a direct connection.\n\n连接时，VNC本身不使用安全协议。 我们将使用SSH隧道安全地连接到我们的服务器，然后告诉我们的VNC客户端使用该隧道，而不是直接建立连接。\n\nCreate an SSH connection on your local computer that securely forwards to the localhost connection for VNC. You can do this via the terminal on Linux or macOS with the following command:\n\n在本地计算机上创建一个SSH连接，该连接安全地转发到VNC的localhost连接。 您可以使用以下命令通过Linux或macOS上的终端执行此操作：\n\nssh -L 5901:127.0.0.1:5901 -C -N -l sammy your_server_ip\n\nssh -L 5901 ：127.0.0.1： 5901 -C -N -l sammy your_server_ip\n\nThe -L switch specifies the port bindings. In this case we’re binding port 5901 of the remote connection to port 5901 on your local machine. The -C switch enables compression, while the -N switch tells ssh that we don’t want to execute a remote command. The -l switch specifies the remote login name.\n\n-L开关指定端口绑定。 在这种情况下，我们绑定端口5901的远程连接端口5901在本地机器上。 -C开关启用压缩，而-N开关告诉ssh我们不想执行远程命令。 -l开关指定远程登录名。\n\nRemember to replace sammy and your_server_ip with your non-root username and the IP address of your server.\n\n请记住用非root用户名和服务器的IP地址替换sammy和your_server_ip 。\n\nIf you are using a graphical SSH client, like PuTTY, use your_server_ip as the connection IP, and set localhost:5901 as a new forwarded port in the program’s SSH tunnel settings.\n\n如果使用的是图形SSH客户端(如PuTTY)，请使用your_server_ip作为连接IP，并在程序的SSH隧道设置中将localhost:5901设置为新的转发端口。\n\nOnce the tunnel is running, use a VNC client to connect to localhost:5901. You’ll be prompted to authenticate using the password you set in Step 1.\n\n隧道运行后，使用VNC客户端连接到localhost:5901 。 系统将提示您使用在步骤1中设置的密码进行身份验证。\n\nOnce you are connected, you’ll see the default Xfce desktop.\n\n建立连接后，您将看到默认的Xfce桌面。\n\nSelect Use default config to configure your desktop quickly.\n\n选择“ 使用默认配置”以快速配置您的桌面。\n\nYou can access files in your home directory with the file manager or from the command line, as seen here:\n\n您可以使用文件管理器或从命令行访问主目录中的文件，如下所示：\n\nOn your local machine, press CTRL+C in your terminal to stop the SSH tunnel and return to your prompt. This will disconnect your VNC session as well.\n\n在本地计算机上，在终端中按CTRL+C停止SSH隧道并返回到提示符。 这也将断开您的VNC会话。\n\nNext let’s set up the VNC server as a service.\n\n接下来，我们将VNC服务器设置为服务。\n\n步骤4 —将VNC作为系统服务运行 (Step 4 — Running VNC as a System Service)\nNext, we’ll set up the VNC server as a systemd service so we can start, stop, and restart it as needed, like any other service. This will also ensure that VNC starts up when your server reboots.\n\n接下来，我们将VNC服务器设置为系统服务，以便可以像其他任何服务一样根据需要启动，停止和重新启动它。 这还将确保在服务器重新引导时VNC启动。\n\nFirst, create a new unit file called /etc/systemd/system/vncserver@.service using your favorite text editor:\n\n首先，使用您喜欢的文本编辑器创建一个名为/etc/systemd/system/vncserver@.service的新单元文件：\n\nsudo nano /etc/systemd/system/vncserver@.service\n须藤纳米/etc/systemd/system/vncserver@.service\nThe @ symbol at the end of the name will let us pass in an argument we can use in the service configuration. We’ll use this to specify the VNC display port we want to use when we manage the service.\n\n名称末尾的@符号将使我们传递可在服务配置中使用的参数。 我们将使用它来指定我们在管理服务时要使用的VNC显示端口。\n\nAdd the following lines to the file. Be sure to change the value of User, Group, WorkingDirectory, and the username in the value of PIDFILE to match your username:\n\n将以下行添加到文件中。 确保在PIDFILE的值中更改User ， Group ， WorkingDirectory和用户名的值以匹配您的用户名：\n\n/etc/systemd/system/vncserver@.service\n/etc/systemd/system/vncserver@.service\n[Unit]\nDescription=Start TightVNC server at startup\nAfter=syslog.target network.target\n \n[Service]\nType=forking\nUser=sammy\nGroup=sammy\nWorkingDirectory=/home/sammy\n \nPIDFile=/home/sammy/.vnc/%H:%i.pid\nExecStartPre=-/usr/bin/vncserver -kill :%i > /dev/null 2>&1\nExecStart=/usr/bin/vncserver -depth 24 -geometry 1280x800 :%i\nExecStop=/usr/bin/vncserver -kill :%i\n \n[Install]\nWantedBy=multi-user.target\n\nThe ExecStartPre command stops VNC if it’s already running. The ExecStart command starts VNC and sets the color depth to 24-bit color with a resolution of 1280x800. You can modify these startup options as well to meet your needs.\n\n如果ExecStartPre命令已经在运行，它将停止它。 ExecStart命令启动VNC并将颜色深度设置为24位颜色，分辨率为1280x800。 您也可以修改这些启动选项，以满足您的需求。\n\nSave and close the file.\n\n保存并关闭文件。\n\nNext, make the system aware of the new unit file.\n\n接下来，使系统知道新的单位文件。\n\nsudo systemctl daemon-reload\nsudo systemctl守护进程重新加载\nEnable the unit file.\n\n启用单位文件。\n\nsudo systemctl enable vncserver@1.service\nsudo systemctl启用vncserver@1.service\nThe 1 following the @ sign signifies which display number the service should appear over, in this case the default :1 as was discussed in Step 2..\n\n@符号后的1表示服务应显示在哪个显示号上，在这种情况下，默认值:1如步骤2所述。\n\nStop the current instance of the VNC server if it’s still running.\n\n如果VNC服务器的当前实例仍在运行，请停止它。\n\nvncserver -kill :1\nvncserver -kill：1\nThen start it as you would start any other systemd service.\n\n然后像启动其他任何systemd服务一样启动它。\n\nsudo systemctl start vncserver@1\nsudo systemctl启动vncserver @ 1\nYou can verify that it started with this command:\n\n您可以验证它是否使用以下命令启动：\n\nsudo systemctl status vncserver@1\nsudo systemctl状态vncserver @ 1\nIf it started correctly, the output should look like this:\n\n如果正确启动，则输出应如下所示：\n\n \n   \n    Output\n   ● vncserver@1.service - Start TightVNC server at startup\n   Loaded: loaded (/etc/systemd/system/vncserver@.service; enabled; vendor preset: enabled)\n   Active: active (running) since Thu 2019-10-10 17:56:17 UTC; 5s ago\n  Process: 935 ExecStartPre=/usr/bin/vncserver -kill :1 > /dev/null 2>&1 (code=exited, status=2)\n  Process: 940 ExecStart=/usr/bin/vncserver -depth 24 -geometry 1280x800 :1 (code=exited, status=0/SUCCESS)\n Main PID: 948 (Xtightvnc)\n. . .\nYour VNC server will now be available when you reboot the machine.\n\n重新启动计算机后，您的VNC服务器现在将可用。\n\nStart your SSH tunnel again:\n\n再次启动SSH隧道：\n\nssh -L 5901:127.0.0.1:5901 -C -N -l sammy your_server_ip\n\nssh -L 5901 ：127.0.0.1： 5901 -C -N -l sammy your_server_ip\n\nThen make a new connection using your VNC client software to localhost:5901 to connect to your machine.\n\n然后使用您的VNC客户端软件与localhost:5901建立新连接，以连接到您的计算机。\n\n结论 (Conclusion)\nYou now have a secured VNC server up and running on your Debian 10 server. Now you’ll be able to manage your files, software, and settings with an easy-to-use and familiar graphical interface, and you’ll be able to run graphical software like web browsers remotely.\n\n现在，您已在Debian 10服务器上启动并运行了安全的VNC服务器。 现在，您将可以使用易于使用且熟悉的图形界面来管理文件，软件和设置，并且可以远程运行Web浏览器等图形软件。\n\n翻译自: https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-vnc-on-debian-10\n\ndebian vnc 配置","slug":"vnc-peizhi","published":1,"updated":"2023-07-23T14:19:11.624Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkjdd1d6003u98aj2qy4273t","content":"<p>debian vnc 配置</p>\n<p>介绍 (Introduction)<br>Virtual Network Computing, or VNC, is a connection system that allows you to use your keyboard and mouse to interact with a graphical desktop environment on a remote server. It makes managing files, software, and settings on a remote server easier for users who are not yet comfortable with the command line.</p>\n<p>虚拟网络计算 (VNC)是一种连接系统，使您可以使用键盘和鼠标与远程服务器上的图形桌面环境进行交互。 对于尚不熟悉命令行的用户，它使在远程服务器上管理文件，软件和设置更加容易。</p>\n<p>In this guide, you’ll set up a VNC server on a Debian 10 server and connect to it securely through an SSH tunnel. You’ll use TightVNC, a fast and lightweight remote control package. This choice will ensure that our VNC connection will be smooth and stable even on slower internet connections.</p>\n<p>在本指南中，您将在Debian 10服务器上设置VNC服务器，并通过SSH隧道安全地连接到该服务器。 您将使用TightVNC ，这是一种快速，轻便的远程控制程序包。 此选择将确保即使在较慢的Internet连接上，我们的VNC连接也将保持平稳。</p>\n<p>先决条件 (Prerequisites)<br>To complete this tutorial, you’ll need:</p>\n<p>要完成本教程，您需要：</p>\n<p>One Debian 10 server set up by following the Debian 10 initial server setup guide, including a non-root user with sudo access and a firewall.</p>\n<p>按照Debian 10初始服务器设置指南设置一台Debian 10服务器，包括具有sudo访问权限和防火墙的非root用户。</p>\n<p>On Windows, you can use TightVNC, RealVNC, or UltraVNC.</p>\n<p>在Windows上，可以使用TightVNC ， RealVNC或UltraVNC 。</p>\n<p>On macOS, you can use the built-in Screen Sharing program, or can use a cross-platform app like RealVNC.</p>\n<p>在macOS上，您可以使用内置的屏幕共享程序，也可以使用RealVNC之类的跨平台应用程序。</p>\n<p>On Linux, you can choose from many options, including vinagre, krdc, RealVNC, or TightVNC.</p>\n<p>在Linux上，可以从许多选项中进行选择，包括vinagre ， krdc ， RealVNC或TightVNC 。</p>\n<p>步骤1 —安装桌面环境和VNC服务器 (Step 1 — Installing the Desktop Environment and VNC Server)<br>By default, a Debian 10 server does not come with a graphical desktop environment or a VNC server installed, so we’ll begin by installing those. Specifically, we will install packages for the latest Xfce desktop environment and the TightVNC package available in the official Debian repository.</p>\n<p>默认情况下，Debian 10服务器未安装图形桌面环境或VNC服务器，因此我们将从安装它们开始。 具体来说，我们将为最新的Xfce桌面环境安装软件包，并在Debian官方存储库中提供TightVNC软件包。</p>\n<p>On your server, update your list of packages:</p>\n<p>在您的服务器上，更新软件包列表：</p>\n<p>sudo apt update<br>sudo apt更新<br>Now install the Xfce desktop environment on your server:</p>\n<p>现在，在您的服务器上安装Xfce桌面环境：</p>\n<p>sudo apt install xfce4 xfce4-goodies<br>sudo apt安装xfce4 xfce4-goodies<br>During the installation, you’ll be prompted to select your keyboard layout from a list of possible options. Choose the one that’s appropriate for your language and press Enter. The installation will continue.</p>\n<p>在安装过程中，系统会提示您从可能的选项列表中选择键盘布局。 选择适合您的语言的一种，然后按Enter 。 安装将继续。</p>\n<p>Once the installation completes, install the TightVNC server:</p>\n<p>安装完成后，安装TightVNC服务器：</p>\n<p>sudo apt install tightvncserver<br>sudo apt安装tightvncserver<br>To complete the VNC server’s initial configuration after installation, use the vncserver command to set up a secure password and create the initial configuration files:</p>\n<p>要在安装后完成VNC服务器的初始配置，请使用vncserver命令设置安全密码并创建初始配置文件：</p>\n<p>vncserver<br>vncserver<br>You’ll be prompted to enter and verify a password to access your machine remotely:</p>\n<p>系统将提示您输入并验证密码以远程访问您的计算机：</p>\n<pre><code>Output\n</code></pre>\n<p>   You will require a password to access your desktops.</p>\n<p>Password:<br>Verify:<br>The password must be between six and eight characters long. Passwords more than 8 characters will be truncated automatically.</p>\n<p>密码长度必须介于六到八个字符之间。 超过8个字符的密码将被自动截断。</p>\n<p>Once you verify the password, you’ll have the option to create a a view-only password. Users who log in with the view-only password will not be able to control the VNC instance with their mouse or keyboard. This is a helpful option if you want to demonstrate something to other people using your VNC server, but this isn’t required.</p>\n<p>验证密码后，您可以选择创建仅查看密码。 使用仅查看密码登录的用户将无法使用其鼠标或键盘来控制VNC实例。 如果您想向使用VNC服务器的其他人演示某些内容，这是一个有用的选项，但这不是必需的。</p>\n<p>The process then creates the necessary default configuration files and connection information for the server:</p>\n<p>然后，该过程为服务器创建必要的默认配置文件和连接信息：</p>\n<pre><code>Output\n</code></pre>\n<p>   Would you like to enter a view-only password (y&#x2F;n)? n<br>xauth:  file &#x2F;home&#x2F;sammy&#x2F;.Xauthority does not exist</p>\n<p>New ‘X’ desktop is your_hostname:1</p>\n<p>Creating default startup script &#x2F;home&#x2F;sammy&#x2F;.vnc&#x2F;xstartup<br>Starting applications specified in &#x2F;home&#x2F;sammy&#x2F;.vnc&#x2F;xstartup<br>Log file is &#x2F;home&#x2F;sammy&#x2F;.vnc&#x2F;your_hostname:1.log<br>Now let’s configure the VNC server.</p>\n<p>现在，让我们配置VNC服务器。</p>\n<p>步骤2 —配置VNC服务器 (Step 2 — Configuring the VNC Server)<br>The VNC server needs to know which commands to execute when it starts up. Specifically, VNC needs to know which graphical desktop it should connect to.</p>\n<p>VNC服务器启动时需要知道要执行哪些命令。 具体来说，VNC需要知道它应该连接到哪个图形桌面。</p>\n<p>These commands are located in a configuration file called xstartup in the .vnc folder under your home directory. The startup script was created when you ran the vncserver command in the previous step, but we’ll create our own to launch the Xfce desktop.</p>\n<p>这些命令位于主目录下.vnc文件夹中名为xstartup的配置文件中。 在上一步中运行vncserver命令时创建了启动脚本，但是我们将创建自己的脚本来启动Xfce桌面。</p>\n<p>When VNC is first set up, it launches a default server instance on port 5901. This port is called a display port, and is referred to by VNC as :1. VNC can launch multiple instances on other display ports, like :2, :3, and so on.</p>\n<p>首次设置VNC时，它将在端口5901上启动默认服务器实例。 此端口称为显示端口 ，VNC将该端口称为:1 。 VNC可以在其他显示端口上启动多个实例，例如:2 ， :3等。</p>\n<p>Because we are going to be changing how the VNC server is configured, first stop the VNC server instance that is running on port 5901 with the following command:</p>\n<p>因为我们将要更改VNC服务器的配置方式，所以首先使用以下命令停止在端口5901上运行的VNC服务器实例：</p>\n<p>vncserver -kill :1<br>vncserver -kill：1<br>The output should look like this, although you’ll see a different PID:</p>\n<p>输出将看起来像这样，尽管您将看到一个不同的PID：</p>\n<pre><code>Output\n</code></pre>\n<p>   Killing Xtightvnc process ID 17648<br>Before you modify the xstartup file, back up the original:</p>\n<p>在修改xstartup文件之前，请备份原始文件：</p>\n<p>mv ~&#x2F;.vnc&#x2F;xstartup ~&#x2F;.vnc&#x2F;xstartup.bak<br>mv〜&#x2F; .vnc &#x2F; xstartup〜&#x2F; .vnc &#x2F; xstartup.bak<br>Now create a new xstartup file and open it in your text editor:</p>\n<p>现在创建一个新的xstartup文件，并在文本编辑器中将其打开：</p>\n<p>nano ~&#x2F;.vnc&#x2F;xstartup<br>纳米〜&#x2F; .vnc &#x2F; xstartup<br>Commands in this file are executed automatically whenever you start or restart the VNC server. We need VNC to start our desktop environment if it’s not already started. Add these commands to the file:</p>\n<p>每当启动或重新启动VNC服务器时，该文件中的命令就会自动执行。 如果尚未启动桌面环境，我们需要VNC来启动它。 将以下命令添加到文件中：</p>\n<p>~&#x2F;.vnc&#x2F;xstartup<br>〜&#x2F; .vnc &#x2F; xstartup<br>#!&#x2F;bin&#x2F;bash<br>xrdb $HOME&#x2F;.Xresources<br>startxfce4 &amp;<br>The first command in the file, xrdb $HOME&#x2F;.Xresources, tells VNC’s GUI framework to read the user’s .Xresources file. .Xresources is where a user can make changes to certain settings for the graphical desktop, like terminal colors, cursor themes, and font rendering. The second command tells the server to launch Xfce, which is where you will find all of the graphical software that you need to comfortably manage your server.</p>\n<p>文件中的第一个命令xrdb $HOME&#x2F;.Xresources告诉VNC的GUI框架读取用户的.Xresources文件。 用户可以在.Xresources中更改图形桌面的某些设置，例如终端颜色，光标主题和字体渲染。 第二个命令告诉服务器启动Xfce，在这里您将找到轻松管理服务器所需的所有图形软件。</p>\n<p>To ensure that the VNC server will be able to use this new startup file properly, we’ll need to make it executable.</p>\n<p>为了确保VNC服务器能够正确使用此新启动文件，我们需要使其成为可执行文件。</p>\n<p>sudo chmod +x ~&#x2F;.vnc&#x2F;xstartup<br>须藤chmod + x〜&#x2F; .vnc &#x2F; xstartup<br>Now, restart the VNC server.</p>\n<p>现在，重新启动VNC服务器。</p>\n<p>vncserver<br>vncserver<br>You’ll see output similar to this:</p>\n<p>您将看到类似于以下的输出：</p>\n<pre><code>Output\n</code></pre>\n<p>   New ‘X’ desktop is your_hostname:1</p>\n<p>Starting applications specified in &#x2F;home&#x2F;sammy&#x2F;.vnc&#x2F;xstartup<br>Log file is &#x2F;home&#x2F;sammy&#x2F;.vnc&#x2F;your_hostname:1.log<br>With the configuration in place, let’s connect to the server from our local machine.</p>\n<p>完成配置后，让我们从本地计算机连接到服务器。</p>\n<p>步骤3 —安全地连接VNC桌面 (Step 3 — Connecting the VNC Desktop Securely)<br>VNC itself doesn’t use secure protocols when connecting. We’ll use an SSH tunnel to connect securely to our server, and then tell our VNC client to use that tunnel rather than making a direct connection.</p>\n<p>连接时，VNC本身不使用安全协议。 我们将使用SSH隧道安全地连接到我们的服务器，然后告诉我们的VNC客户端使用该隧道，而不是直接建立连接。</p>\n<p>Create an SSH connection on your local computer that securely forwards to the localhost connection for VNC. You can do this via the terminal on Linux or macOS with the following command:</p>\n<p>在本地计算机上创建一个SSH连接，该连接安全地转发到VNC的localhost连接。 您可以使用以下命令通过Linux或macOS上的终端执行此操作：</p>\n<p>ssh -L 5901:127.0.0.1:5901 -C -N -l sammy your_server_ip</p>\n<p>ssh -L 5901 ：127.0.0.1： 5901 -C -N -l sammy your_server_ip</p>\n<p>The -L switch specifies the port bindings. In this case we’re binding port 5901 of the remote connection to port 5901 on your local machine. The -C switch enables compression, while the -N switch tells ssh that we don’t want to execute a remote command. The -l switch specifies the remote login name.</p>\n<p>-L开关指定端口绑定。 在这种情况下，我们绑定端口5901的远程连接端口5901在本地机器上。 -C开关启用压缩，而-N开关告诉ssh我们不想执行远程命令。 -l开关指定远程登录名。</p>\n<p>Remember to replace sammy and your_server_ip with your non-root username and the IP address of your server.</p>\n<p>请记住用非root用户名和服务器的IP地址替换sammy和your_server_ip 。</p>\n<p>If you are using a graphical SSH client, like PuTTY, use your_server_ip as the connection IP, and set localhost:5901 as a new forwarded port in the program’s SSH tunnel settings.</p>\n<p>如果使用的是图形SSH客户端(如PuTTY)，请使用your_server_ip作为连接IP，并在程序的SSH隧道设置中将localhost:5901设置为新的转发端口。</p>\n<p>Once the tunnel is running, use a VNC client to connect to localhost:5901. You’ll be prompted to authenticate using the password you set in Step 1.</p>\n<p>隧道运行后，使用VNC客户端连接到localhost:5901 。 系统将提示您使用在步骤1中设置的密码进行身份验证。</p>\n<p>Once you are connected, you’ll see the default Xfce desktop.</p>\n<p>建立连接后，您将看到默认的Xfce桌面。</p>\n<p>Select Use default config to configure your desktop quickly.</p>\n<p>选择“ 使用默认配置”以快速配置您的桌面。</p>\n<p>You can access files in your home directory with the file manager or from the command line, as seen here:</p>\n<p>您可以使用文件管理器或从命令行访问主目录中的文件，如下所示：</p>\n<p>On your local machine, press CTRL+C in your terminal to stop the SSH tunnel and return to your prompt. This will disconnect your VNC session as well.</p>\n<p>在本地计算机上，在终端中按CTRL+C停止SSH隧道并返回到提示符。 这也将断开您的VNC会话。</p>\n<p>Next let’s set up the VNC server as a service.</p>\n<p>接下来，我们将VNC服务器设置为服务。</p>\n<p>步骤4 —将VNC作为系统服务运行 (Step 4 — Running VNC as a System Service)<br>Next, we’ll set up the VNC server as a systemd service so we can start, stop, and restart it as needed, like any other service. This will also ensure that VNC starts up when your server reboots.</p>\n<p>接下来，我们将VNC服务器设置为系统服务，以便可以像其他任何服务一样根据需要启动，停止和重新启动它。 这还将确保在服务器重新引导时VNC启动。</p>\n<p>First, create a new unit file called &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;vncserver@.service using your favorite text editor:</p>\n<p>首先，使用您喜欢的文本编辑器创建一个名为&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;vncserver@.service的新单元文件：</p>\n<p>sudo nano &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;vncserver@.service<br>须藤纳米&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;vncserver@.service<br>The @ symbol at the end of the name will let us pass in an argument we can use in the service configuration. We’ll use this to specify the VNC display port we want to use when we manage the service.</p>\n<p>名称末尾的@符号将使我们传递可在服务配置中使用的参数。 我们将使用它来指定我们在管理服务时要使用的VNC显示端口。</p>\n<p>Add the following lines to the file. Be sure to change the value of User, Group, WorkingDirectory, and the username in the value of PIDFILE to match your username:</p>\n<p>将以下行添加到文件中。 确保在PIDFILE的值中更改User ， Group ， WorkingDirectory和用户名的值以匹配您的用户名：</p>\n<p>&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;vncserver@.service<br>&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;vncserver@.service<br>[Unit]<br>Description&#x3D;Start TightVNC server at startup<br>After&#x3D;syslog.target network.target</p>\n<p>[Service]<br>Type&#x3D;forking<br>User&#x3D;sammy<br>Group&#x3D;sammy<br>WorkingDirectory&#x3D;&#x2F;home&#x2F;sammy</p>\n<p>PIDFile&#x3D;&#x2F;home&#x2F;sammy&#x2F;.vnc&#x2F;%H:%i.pid<br>ExecStartPre&#x3D;-&#x2F;usr&#x2F;bin&#x2F;vncserver -kill :%i &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1<br>ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;vncserver -depth 24 -geometry 1280x800 :%i<br>ExecStop&#x3D;&#x2F;usr&#x2F;bin&#x2F;vncserver -kill :%i</p>\n<p>[Install]<br>WantedBy&#x3D;multi-user.target</p>\n<p>The ExecStartPre command stops VNC if it’s already running. The ExecStart command starts VNC and sets the color depth to 24-bit color with a resolution of 1280x800. You can modify these startup options as well to meet your needs.</p>\n<p>如果ExecStartPre命令已经在运行，它将停止它。 ExecStart命令启动VNC并将颜色深度设置为24位颜色，分辨率为1280x800。 您也可以修改这些启动选项，以满足您的需求。</p>\n<p>Save and close the file.</p>\n<p>保存并关闭文件。</p>\n<p>Next, make the system aware of the new unit file.</p>\n<p>接下来，使系统知道新的单位文件。</p>\n<p>sudo systemctl daemon-reload<br>sudo systemctl守护进程重新加载<br>Enable the unit file.</p>\n<p>启用单位文件。</p>\n<p>sudo systemctl enable <a href=\"mailto:&#118;&#110;&#x63;&#x73;&#x65;&#x72;&#x76;&#x65;&#114;&#x40;&#x31;&#x2e;&#x73;&#x65;&#114;&#118;&#105;&#99;&#101;\">&#118;&#110;&#x63;&#x73;&#x65;&#x72;&#x76;&#x65;&#114;&#x40;&#x31;&#x2e;&#x73;&#x65;&#114;&#118;&#105;&#99;&#101;</a><br>sudo systemctl启用<a href=\"mailto:&#x76;&#110;&#99;&#115;&#x65;&#114;&#x76;&#101;&#x72;&#64;&#x31;&#x2e;&#x73;&#x65;&#114;&#118;&#105;&#x63;&#x65;\">&#x76;&#110;&#99;&#115;&#x65;&#114;&#x76;&#101;&#x72;&#64;&#x31;&#x2e;&#x73;&#x65;&#114;&#118;&#105;&#x63;&#x65;</a><br>The 1 following the @ sign signifies which display number the service should appear over, in this case the default :1 as was discussed in Step 2..</p>\n<p>@符号后的1表示服务应显示在哪个显示号上，在这种情况下，默认值:1如步骤2所述。</p>\n<p>Stop the current instance of the VNC server if it’s still running.</p>\n<p>如果VNC服务器的当前实例仍在运行，请停止它。</p>\n<p>vncserver -kill :1<br>vncserver -kill：1<br>Then start it as you would start any other systemd service.</p>\n<p>然后像启动其他任何systemd服务一样启动它。</p>\n<p>sudo systemctl start vncserver@1<br>sudo systemctl启动vncserver @ 1<br>You can verify that it started with this command:</p>\n<p>您可以验证它是否使用以下命令启动：</p>\n<p>sudo systemctl status vncserver@1<br>sudo systemctl状态vncserver @ 1<br>If it started correctly, the output should look like this:</p>\n<p>如果正确启动，则输出应如下所示：</p>\n<pre><code>Output\n</code></pre>\n<p>   ● <a href=\"mailto:&#x76;&#110;&#x63;&#x73;&#x65;&#114;&#118;&#101;&#114;&#64;&#x31;&#x2e;&#115;&#101;&#x72;&#118;&#105;&#99;&#x65;\">&#x76;&#110;&#x63;&#x73;&#x65;&#114;&#118;&#101;&#114;&#64;&#x31;&#x2e;&#115;&#101;&#x72;&#118;&#105;&#99;&#x65;</a> - Start TightVNC server at startup<br>   Loaded: loaded (&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;vncserver@.service; enabled; vendor preset: enabled)<br>   Active: active (running) since Thu 2019-10-10 17:56:17 UTC; 5s ago<br>  Process: 935 ExecStartPre&#x3D;&#x2F;usr&#x2F;bin&#x2F;vncserver -kill :1 &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1 (code&#x3D;exited, status&#x3D;2)<br>  Process: 940 ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;vncserver -depth 24 -geometry 1280x800 :1 (code&#x3D;exited, status&#x3D;0&#x2F;SUCCESS)<br> Main PID: 948 (Xtightvnc)<br>. . .<br>Your VNC server will now be available when you reboot the machine.</p>\n<p>重新启动计算机后，您的VNC服务器现在将可用。</p>\n<p>Start your SSH tunnel again:</p>\n<p>再次启动SSH隧道：</p>\n<p>ssh -L 5901:127.0.0.1:5901 -C -N -l sammy your_server_ip</p>\n<p>ssh -L 5901 ：127.0.0.1： 5901 -C -N -l sammy your_server_ip</p>\n<p>Then make a new connection using your VNC client software to localhost:5901 to connect to your machine.</p>\n<p>然后使用您的VNC客户端软件与localhost:5901建立新连接，以连接到您的计算机。</p>\n<p>结论 (Conclusion)<br>You now have a secured VNC server up and running on your Debian 10 server. Now you’ll be able to manage your files, software, and settings with an easy-to-use and familiar graphical interface, and you’ll be able to run graphical software like web browsers remotely.</p>\n<p>现在，您已在Debian 10服务器上启动并运行了安全的VNC服务器。 现在，您将可以使用易于使用且熟悉的图形界面来管理文件，软件和设置，并且可以远程运行Web浏览器等图形软件。</p>\n<p>翻译自: <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-vnc-on-debian-10\">https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-vnc-on-debian-10</a></p>\n<p>debian vnc 配置</p>\n","site":{"data":{}},"excerpt":"","more":"<p>debian vnc 配置</p>\n<p>介绍 (Introduction)<br>Virtual Network Computing, or VNC, is a connection system that allows you to use your keyboard and mouse to interact with a graphical desktop environment on a remote server. It makes managing files, software, and settings on a remote server easier for users who are not yet comfortable with the command line.</p>\n<p>虚拟网络计算 (VNC)是一种连接系统，使您可以使用键盘和鼠标与远程服务器上的图形桌面环境进行交互。 对于尚不熟悉命令行的用户，它使在远程服务器上管理文件，软件和设置更加容易。</p>\n<p>In this guide, you’ll set up a VNC server on a Debian 10 server and connect to it securely through an SSH tunnel. You’ll use TightVNC, a fast and lightweight remote control package. This choice will ensure that our VNC connection will be smooth and stable even on slower internet connections.</p>\n<p>在本指南中，您将在Debian 10服务器上设置VNC服务器，并通过SSH隧道安全地连接到该服务器。 您将使用TightVNC ，这是一种快速，轻便的远程控制程序包。 此选择将确保即使在较慢的Internet连接上，我们的VNC连接也将保持平稳。</p>\n<p>先决条件 (Prerequisites)<br>To complete this tutorial, you’ll need:</p>\n<p>要完成本教程，您需要：</p>\n<p>One Debian 10 server set up by following the Debian 10 initial server setup guide, including a non-root user with sudo access and a firewall.</p>\n<p>按照Debian 10初始服务器设置指南设置一台Debian 10服务器，包括具有sudo访问权限和防火墙的非root用户。</p>\n<p>On Windows, you can use TightVNC, RealVNC, or UltraVNC.</p>\n<p>在Windows上，可以使用TightVNC ， RealVNC或UltraVNC 。</p>\n<p>On macOS, you can use the built-in Screen Sharing program, or can use a cross-platform app like RealVNC.</p>\n<p>在macOS上，您可以使用内置的屏幕共享程序，也可以使用RealVNC之类的跨平台应用程序。</p>\n<p>On Linux, you can choose from many options, including vinagre, krdc, RealVNC, or TightVNC.</p>\n<p>在Linux上，可以从许多选项中进行选择，包括vinagre ， krdc ， RealVNC或TightVNC 。</p>\n<p>步骤1 —安装桌面环境和VNC服务器 (Step 1 — Installing the Desktop Environment and VNC Server)<br>By default, a Debian 10 server does not come with a graphical desktop environment or a VNC server installed, so we’ll begin by installing those. Specifically, we will install packages for the latest Xfce desktop environment and the TightVNC package available in the official Debian repository.</p>\n<p>默认情况下，Debian 10服务器未安装图形桌面环境或VNC服务器，因此我们将从安装它们开始。 具体来说，我们将为最新的Xfce桌面环境安装软件包，并在Debian官方存储库中提供TightVNC软件包。</p>\n<p>On your server, update your list of packages:</p>\n<p>在您的服务器上，更新软件包列表：</p>\n<p>sudo apt update<br>sudo apt更新<br>Now install the Xfce desktop environment on your server:</p>\n<p>现在，在您的服务器上安装Xfce桌面环境：</p>\n<p>sudo apt install xfce4 xfce4-goodies<br>sudo apt安装xfce4 xfce4-goodies<br>During the installation, you’ll be prompted to select your keyboard layout from a list of possible options. Choose the one that’s appropriate for your language and press Enter. The installation will continue.</p>\n<p>在安装过程中，系统会提示您从可能的选项列表中选择键盘布局。 选择适合您的语言的一种，然后按Enter 。 安装将继续。</p>\n<p>Once the installation completes, install the TightVNC server:</p>\n<p>安装完成后，安装TightVNC服务器：</p>\n<p>sudo apt install tightvncserver<br>sudo apt安装tightvncserver<br>To complete the VNC server’s initial configuration after installation, use the vncserver command to set up a secure password and create the initial configuration files:</p>\n<p>要在安装后完成VNC服务器的初始配置，请使用vncserver命令设置安全密码并创建初始配置文件：</p>\n<p>vncserver<br>vncserver<br>You’ll be prompted to enter and verify a password to access your machine remotely:</p>\n<p>系统将提示您输入并验证密码以远程访问您的计算机：</p>\n<pre><code>Output\n</code></pre>\n<p>   You will require a password to access your desktops.</p>\n<p>Password:<br>Verify:<br>The password must be between six and eight characters long. Passwords more than 8 characters will be truncated automatically.</p>\n<p>密码长度必须介于六到八个字符之间。 超过8个字符的密码将被自动截断。</p>\n<p>Once you verify the password, you’ll have the option to create a a view-only password. Users who log in with the view-only password will not be able to control the VNC instance with their mouse or keyboard. This is a helpful option if you want to demonstrate something to other people using your VNC server, but this isn’t required.</p>\n<p>验证密码后，您可以选择创建仅查看密码。 使用仅查看密码登录的用户将无法使用其鼠标或键盘来控制VNC实例。 如果您想向使用VNC服务器的其他人演示某些内容，这是一个有用的选项，但这不是必需的。</p>\n<p>The process then creates the necessary default configuration files and connection information for the server:</p>\n<p>然后，该过程为服务器创建必要的默认配置文件和连接信息：</p>\n<pre><code>Output\n</code></pre>\n<p>   Would you like to enter a view-only password (y&#x2F;n)? n<br>xauth:  file &#x2F;home&#x2F;sammy&#x2F;.Xauthority does not exist</p>\n<p>New ‘X’ desktop is your_hostname:1</p>\n<p>Creating default startup script &#x2F;home&#x2F;sammy&#x2F;.vnc&#x2F;xstartup<br>Starting applications specified in &#x2F;home&#x2F;sammy&#x2F;.vnc&#x2F;xstartup<br>Log file is &#x2F;home&#x2F;sammy&#x2F;.vnc&#x2F;your_hostname:1.log<br>Now let’s configure the VNC server.</p>\n<p>现在，让我们配置VNC服务器。</p>\n<p>步骤2 —配置VNC服务器 (Step 2 — Configuring the VNC Server)<br>The VNC server needs to know which commands to execute when it starts up. Specifically, VNC needs to know which graphical desktop it should connect to.</p>\n<p>VNC服务器启动时需要知道要执行哪些命令。 具体来说，VNC需要知道它应该连接到哪个图形桌面。</p>\n<p>These commands are located in a configuration file called xstartup in the .vnc folder under your home directory. The startup script was created when you ran the vncserver command in the previous step, but we’ll create our own to launch the Xfce desktop.</p>\n<p>这些命令位于主目录下.vnc文件夹中名为xstartup的配置文件中。 在上一步中运行vncserver命令时创建了启动脚本，但是我们将创建自己的脚本来启动Xfce桌面。</p>\n<p>When VNC is first set up, it launches a default server instance on port 5901. This port is called a display port, and is referred to by VNC as :1. VNC can launch multiple instances on other display ports, like :2, :3, and so on.</p>\n<p>首次设置VNC时，它将在端口5901上启动默认服务器实例。 此端口称为显示端口 ，VNC将该端口称为:1 。 VNC可以在其他显示端口上启动多个实例，例如:2 ， :3等。</p>\n<p>Because we are going to be changing how the VNC server is configured, first stop the VNC server instance that is running on port 5901 with the following command:</p>\n<p>因为我们将要更改VNC服务器的配置方式，所以首先使用以下命令停止在端口5901上运行的VNC服务器实例：</p>\n<p>vncserver -kill :1<br>vncserver -kill：1<br>The output should look like this, although you’ll see a different PID:</p>\n<p>输出将看起来像这样，尽管您将看到一个不同的PID：</p>\n<pre><code>Output\n</code></pre>\n<p>   Killing Xtightvnc process ID 17648<br>Before you modify the xstartup file, back up the original:</p>\n<p>在修改xstartup文件之前，请备份原始文件：</p>\n<p>mv ~&#x2F;.vnc&#x2F;xstartup ~&#x2F;.vnc&#x2F;xstartup.bak<br>mv〜&#x2F; .vnc &#x2F; xstartup〜&#x2F; .vnc &#x2F; xstartup.bak<br>Now create a new xstartup file and open it in your text editor:</p>\n<p>现在创建一个新的xstartup文件，并在文本编辑器中将其打开：</p>\n<p>nano ~&#x2F;.vnc&#x2F;xstartup<br>纳米〜&#x2F; .vnc &#x2F; xstartup<br>Commands in this file are executed automatically whenever you start or restart the VNC server. We need VNC to start our desktop environment if it’s not already started. Add these commands to the file:</p>\n<p>每当启动或重新启动VNC服务器时，该文件中的命令就会自动执行。 如果尚未启动桌面环境，我们需要VNC来启动它。 将以下命令添加到文件中：</p>\n<p>~&#x2F;.vnc&#x2F;xstartup<br>〜&#x2F; .vnc &#x2F; xstartup<br>#!&#x2F;bin&#x2F;bash<br>xrdb $HOME&#x2F;.Xresources<br>startxfce4 &amp;<br>The first command in the file, xrdb $HOME&#x2F;.Xresources, tells VNC’s GUI framework to read the user’s .Xresources file. .Xresources is where a user can make changes to certain settings for the graphical desktop, like terminal colors, cursor themes, and font rendering. The second command tells the server to launch Xfce, which is where you will find all of the graphical software that you need to comfortably manage your server.</p>\n<p>文件中的第一个命令xrdb $HOME&#x2F;.Xresources告诉VNC的GUI框架读取用户的.Xresources文件。 用户可以在.Xresources中更改图形桌面的某些设置，例如终端颜色，光标主题和字体渲染。 第二个命令告诉服务器启动Xfce，在这里您将找到轻松管理服务器所需的所有图形软件。</p>\n<p>To ensure that the VNC server will be able to use this new startup file properly, we’ll need to make it executable.</p>\n<p>为了确保VNC服务器能够正确使用此新启动文件，我们需要使其成为可执行文件。</p>\n<p>sudo chmod +x ~&#x2F;.vnc&#x2F;xstartup<br>须藤chmod + x〜&#x2F; .vnc &#x2F; xstartup<br>Now, restart the VNC server.</p>\n<p>现在，重新启动VNC服务器。</p>\n<p>vncserver<br>vncserver<br>You’ll see output similar to this:</p>\n<p>您将看到类似于以下的输出：</p>\n<pre><code>Output\n</code></pre>\n<p>   New ‘X’ desktop is your_hostname:1</p>\n<p>Starting applications specified in &#x2F;home&#x2F;sammy&#x2F;.vnc&#x2F;xstartup<br>Log file is &#x2F;home&#x2F;sammy&#x2F;.vnc&#x2F;your_hostname:1.log<br>With the configuration in place, let’s connect to the server from our local machine.</p>\n<p>完成配置后，让我们从本地计算机连接到服务器。</p>\n<p>步骤3 —安全地连接VNC桌面 (Step 3 — Connecting the VNC Desktop Securely)<br>VNC itself doesn’t use secure protocols when connecting. We’ll use an SSH tunnel to connect securely to our server, and then tell our VNC client to use that tunnel rather than making a direct connection.</p>\n<p>连接时，VNC本身不使用安全协议。 我们将使用SSH隧道安全地连接到我们的服务器，然后告诉我们的VNC客户端使用该隧道，而不是直接建立连接。</p>\n<p>Create an SSH connection on your local computer that securely forwards to the localhost connection for VNC. You can do this via the terminal on Linux or macOS with the following command:</p>\n<p>在本地计算机上创建一个SSH连接，该连接安全地转发到VNC的localhost连接。 您可以使用以下命令通过Linux或macOS上的终端执行此操作：</p>\n<p>ssh -L 5901:127.0.0.1:5901 -C -N -l sammy your_server_ip</p>\n<p>ssh -L 5901 ：127.0.0.1： 5901 -C -N -l sammy your_server_ip</p>\n<p>The -L switch specifies the port bindings. In this case we’re binding port 5901 of the remote connection to port 5901 on your local machine. The -C switch enables compression, while the -N switch tells ssh that we don’t want to execute a remote command. The -l switch specifies the remote login name.</p>\n<p>-L开关指定端口绑定。 在这种情况下，我们绑定端口5901的远程连接端口5901在本地机器上。 -C开关启用压缩，而-N开关告诉ssh我们不想执行远程命令。 -l开关指定远程登录名。</p>\n<p>Remember to replace sammy and your_server_ip with your non-root username and the IP address of your server.</p>\n<p>请记住用非root用户名和服务器的IP地址替换sammy和your_server_ip 。</p>\n<p>If you are using a graphical SSH client, like PuTTY, use your_server_ip as the connection IP, and set localhost:5901 as a new forwarded port in the program’s SSH tunnel settings.</p>\n<p>如果使用的是图形SSH客户端(如PuTTY)，请使用your_server_ip作为连接IP，并在程序的SSH隧道设置中将localhost:5901设置为新的转发端口。</p>\n<p>Once the tunnel is running, use a VNC client to connect to localhost:5901. You’ll be prompted to authenticate using the password you set in Step 1.</p>\n<p>隧道运行后，使用VNC客户端连接到localhost:5901 。 系统将提示您使用在步骤1中设置的密码进行身份验证。</p>\n<p>Once you are connected, you’ll see the default Xfce desktop.</p>\n<p>建立连接后，您将看到默认的Xfce桌面。</p>\n<p>Select Use default config to configure your desktop quickly.</p>\n<p>选择“ 使用默认配置”以快速配置您的桌面。</p>\n<p>You can access files in your home directory with the file manager or from the command line, as seen here:</p>\n<p>您可以使用文件管理器或从命令行访问主目录中的文件，如下所示：</p>\n<p>On your local machine, press CTRL+C in your terminal to stop the SSH tunnel and return to your prompt. This will disconnect your VNC session as well.</p>\n<p>在本地计算机上，在终端中按CTRL+C停止SSH隧道并返回到提示符。 这也将断开您的VNC会话。</p>\n<p>Next let’s set up the VNC server as a service.</p>\n<p>接下来，我们将VNC服务器设置为服务。</p>\n<p>步骤4 —将VNC作为系统服务运行 (Step 4 — Running VNC as a System Service)<br>Next, we’ll set up the VNC server as a systemd service so we can start, stop, and restart it as needed, like any other service. This will also ensure that VNC starts up when your server reboots.</p>\n<p>接下来，我们将VNC服务器设置为系统服务，以便可以像其他任何服务一样根据需要启动，停止和重新启动它。 这还将确保在服务器重新引导时VNC启动。</p>\n<p>First, create a new unit file called &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;vncserver@.service using your favorite text editor:</p>\n<p>首先，使用您喜欢的文本编辑器创建一个名为&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;vncserver@.service的新单元文件：</p>\n<p>sudo nano &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;vncserver@.service<br>须藤纳米&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;vncserver@.service<br>The @ symbol at the end of the name will let us pass in an argument we can use in the service configuration. We’ll use this to specify the VNC display port we want to use when we manage the service.</p>\n<p>名称末尾的@符号将使我们传递可在服务配置中使用的参数。 我们将使用它来指定我们在管理服务时要使用的VNC显示端口。</p>\n<p>Add the following lines to the file. Be sure to change the value of User, Group, WorkingDirectory, and the username in the value of PIDFILE to match your username:</p>\n<p>将以下行添加到文件中。 确保在PIDFILE的值中更改User ， Group ， WorkingDirectory和用户名的值以匹配您的用户名：</p>\n<p>&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;vncserver@.service<br>&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;vncserver@.service<br>[Unit]<br>Description&#x3D;Start TightVNC server at startup<br>After&#x3D;syslog.target network.target</p>\n<p>[Service]<br>Type&#x3D;forking<br>User&#x3D;sammy<br>Group&#x3D;sammy<br>WorkingDirectory&#x3D;&#x2F;home&#x2F;sammy</p>\n<p>PIDFile&#x3D;&#x2F;home&#x2F;sammy&#x2F;.vnc&#x2F;%H:%i.pid<br>ExecStartPre&#x3D;-&#x2F;usr&#x2F;bin&#x2F;vncserver -kill :%i &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1<br>ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;vncserver -depth 24 -geometry 1280x800 :%i<br>ExecStop&#x3D;&#x2F;usr&#x2F;bin&#x2F;vncserver -kill :%i</p>\n<p>[Install]<br>WantedBy&#x3D;multi-user.target</p>\n<p>The ExecStartPre command stops VNC if it’s already running. The ExecStart command starts VNC and sets the color depth to 24-bit color with a resolution of 1280x800. You can modify these startup options as well to meet your needs.</p>\n<p>如果ExecStartPre命令已经在运行，它将停止它。 ExecStart命令启动VNC并将颜色深度设置为24位颜色，分辨率为1280x800。 您也可以修改这些启动选项，以满足您的需求。</p>\n<p>Save and close the file.</p>\n<p>保存并关闭文件。</p>\n<p>Next, make the system aware of the new unit file.</p>\n<p>接下来，使系统知道新的单位文件。</p>\n<p>sudo systemctl daemon-reload<br>sudo systemctl守护进程重新加载<br>Enable the unit file.</p>\n<p>启用单位文件。</p>\n<p>sudo systemctl enable <a href=\"mailto:&#118;&#110;&#x63;&#x73;&#x65;&#x72;&#x76;&#x65;&#114;&#x40;&#x31;&#x2e;&#x73;&#x65;&#114;&#118;&#105;&#99;&#101;\">&#118;&#110;&#x63;&#x73;&#x65;&#x72;&#x76;&#x65;&#114;&#x40;&#x31;&#x2e;&#x73;&#x65;&#114;&#118;&#105;&#99;&#101;</a><br>sudo systemctl启用<a href=\"mailto:&#x76;&#110;&#99;&#115;&#x65;&#114;&#x76;&#101;&#x72;&#64;&#x31;&#x2e;&#x73;&#x65;&#114;&#118;&#105;&#x63;&#x65;\">&#x76;&#110;&#99;&#115;&#x65;&#114;&#x76;&#101;&#x72;&#64;&#x31;&#x2e;&#x73;&#x65;&#114;&#118;&#105;&#x63;&#x65;</a><br>The 1 following the @ sign signifies which display number the service should appear over, in this case the default :1 as was discussed in Step 2..</p>\n<p>@符号后的1表示服务应显示在哪个显示号上，在这种情况下，默认值:1如步骤2所述。</p>\n<p>Stop the current instance of the VNC server if it’s still running.</p>\n<p>如果VNC服务器的当前实例仍在运行，请停止它。</p>\n<p>vncserver -kill :1<br>vncserver -kill：1<br>Then start it as you would start any other systemd service.</p>\n<p>然后像启动其他任何systemd服务一样启动它。</p>\n<p>sudo systemctl start vncserver@1<br>sudo systemctl启动vncserver @ 1<br>You can verify that it started with this command:</p>\n<p>您可以验证它是否使用以下命令启动：</p>\n<p>sudo systemctl status vncserver@1<br>sudo systemctl状态vncserver @ 1<br>If it started correctly, the output should look like this:</p>\n<p>如果正确启动，则输出应如下所示：</p>\n<pre><code>Output\n</code></pre>\n<p>   ● <a href=\"mailto:&#x76;&#110;&#x63;&#x73;&#x65;&#114;&#118;&#101;&#114;&#64;&#x31;&#x2e;&#115;&#101;&#x72;&#118;&#105;&#99;&#x65;\">&#x76;&#110;&#x63;&#x73;&#x65;&#114;&#118;&#101;&#114;&#64;&#x31;&#x2e;&#115;&#101;&#x72;&#118;&#105;&#99;&#x65;</a> - Start TightVNC server at startup<br>   Loaded: loaded (&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;vncserver@.service; enabled; vendor preset: enabled)<br>   Active: active (running) since Thu 2019-10-10 17:56:17 UTC; 5s ago<br>  Process: 935 ExecStartPre&#x3D;&#x2F;usr&#x2F;bin&#x2F;vncserver -kill :1 &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1 (code&#x3D;exited, status&#x3D;2)<br>  Process: 940 ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;vncserver -depth 24 -geometry 1280x800 :1 (code&#x3D;exited, status&#x3D;0&#x2F;SUCCESS)<br> Main PID: 948 (Xtightvnc)<br>. . .<br>Your VNC server will now be available when you reboot the machine.</p>\n<p>重新启动计算机后，您的VNC服务器现在将可用。</p>\n<p>Start your SSH tunnel again:</p>\n<p>再次启动SSH隧道：</p>\n<p>ssh -L 5901:127.0.0.1:5901 -C -N -l sammy your_server_ip</p>\n<p>ssh -L 5901 ：127.0.0.1： 5901 -C -N -l sammy your_server_ip</p>\n<p>Then make a new connection using your VNC client software to localhost:5901 to connect to your machine.</p>\n<p>然后使用您的VNC客户端软件与localhost:5901建立新连接，以连接到您的计算机。</p>\n<p>结论 (Conclusion)<br>You now have a secured VNC server up and running on your Debian 10 server. Now you’ll be able to manage your files, software, and settings with an easy-to-use and familiar graphical interface, and you’ll be able to run graphical software like web browsers remotely.</p>\n<p>现在，您已在Debian 10服务器上启动并运行了安全的VNC服务器。 现在，您将可以使用易于使用且熟悉的图形界面来管理文件，软件和设置，并且可以远程运行Web浏览器等图形软件。</p>\n<p>翻译自: <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-vnc-on-debian-10\">https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-vnc-on-debian-10</a></p>\n<p>debian vnc 配置</p>\n"},{"title":"windows系统修改键位","date":"2022-11-05T16:10:42.000Z","_content":"不知道大家生活中有没有遇到这些情况：键盘上某个比较重要的键损坏或失灵而要重新更换键盘，或者在一些游戏、办公软件重的一些默认按键不合理，又或者希望自己DIY出一套属于自己的键位布局。那么我想这篇文章对你会很有帮助。\n\n前几个月因心血来潮想尝试一些其他键位布局（例如Dvorak、Norman、Colemak等），需要修改键盘键位。其实，修改键位的方法也有很多，比较常见的是安装第三方辅助软件修改键位映射和功能。但对于我个人来说，出于简洁安全、自由可控的原因，不太喜欢在自己计算机上安装一些不必要的软件，这个功能完全可以在Windows上通过修改底层的注册表实现。\n\n先说一下这篇文章的大致内容：\n\n实现原理\n自制管理工具（Python3）\n\n\n实现原理\n\n\n\n在Windows注册表中有个\"Scancode Map\"(即扫描码映射)的键，我们可以通过修改这个键的值来实现键位映射的更改。\n\n\n\n\"Scancode Map\"的值的格式是\"hex:00,00,00,00,00,00,00,00,xx,00,00,00,[yy,yy,yy,yy,...,yy,yy,yy,yy,]00,00,00,00\"\n\n前8个16进制的值（即前8组00）表示版本号和头部字节，后4个16进制的值（即最后的4组00）表示结束标志，中间xx表示映射数目，最小值为01（考虑到结束标志的4组00）,中括号内为可写项，也是我们修改键位比较关键的部分，每四个代表一组映射。\n\n在我们键盘上每一个按键都有其十六进制扫描码，例如A的扫描码为\"1e\",其十六进制扫描码修正形式（为了表示方便就这么说吧）就是\"001e\",B的扫描码为\"0030\",右ctrl键的扫描码为\"e01d\",右alt键的扫描码则表示为\"e038\"，空值的扫描码为\"0000\"（可实现无效按键或者说是屏蔽按键）。具体其他按键扫描码在源码中贴有。\n\n既然我们知道键盘上每一个键都具有其对应的扫描码，那么我们假设需要A和B键互换，应该怎么做呢？这个时候就需要我们向中括号中添加我们需要的值，\"30,00,1e,00,\"就可以实现将B键的功能映射到物理键盘A上（通俗点说就是敲击键盘上的A键会打出B字符，同时要注意值的顺序）。你以为这样就完了吗？不然。\"30,00,1e,00,\"只能将B键功能映射在物理键盘A键位上，而物理键位B键并未被映射成A！这很危险，相当于键盘上没有一个按键能实现A的功能，所以我们还得添加一项\"1e,00,30,00,\"。最后我们的\"Scancode Map\"的完整值就为\"hex:00,00,00,00,00,00,00,00,03,00,00,00,30,00,1e,00,1e,00,30,00,00,00,00,00\"。就这一串值就可完全调换A，B键的功能。\n\n再来一个，我们要实现右Alt键能实现右Ctrl键的功能，并且屏蔽掉右Ctrl键，那么其\"Scancode Map\"值就为\"hex:00,00,00,00,00,00,00,00,03,00,00,00,1d,e0,38,e0,00,00,1d,e0,00,00,00,00\"。\n\n\n\n那么问题来了，既然我知道这个键位和所谓的键盘扫描码之间的对应关系和Scancode值之后，具体怎么实现呢？\n\n\n\n别急，我们一步步来，先打开Windows注册表编辑器（在cmd或powershell命令行下键入regedit回车即可打开），然后在\"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Keyboard Layout\"这个项下新建一个名为\"ScanCode Map\"键（右键新建二进制值），然后再右键名称列下的这个\"ScanCode Map\"修改，这时就可以依次键入编辑那一串hex值了，最后确定就完成了注册表的修改了！\n\n\n\n图示如下，先新建这个ScanCode Map的键（右键Keyboard Layout或空白处，然后选择新建二进制值）\n\n\n\n\n\n\n然后修改值（我的这个hex值功能是实现左Ctrl和CapsLock互换，毕竟Emacs党）\n\n\n\n\n但是，修改完了后并不能立即生效，因为是通过注册表修改底层键位映射所以需要重启计算机，重启资源管理器也是没有用的。\n\n\n\n那么，要还原按键怎么办？也很简单，有两种方法，一是从注册表中删除你创建的ScanCode Map这个键，或者用\"hex:00,00,00,00,00,00,00,00,01,00,00,00,00,00,00,00\"覆盖掉原来的值就行了。\n\n\n\n当然，如果修改的键位比较多的话，通过查各个键位映射值，修改注册表写hex值，就麻烦很多了（很佩服曾经的自己硬是这样写了一些键位布局）。这时我们需要一个工具来管理，可以用第三方软件。但是既然原理我们已经知道了，也并不难远未达到工程级的量级，那完全可以自己实现这个管理工具。我们可以用Java，C++，Python等来写，这不重要，自己喜欢什么就用什么吧。下面是我用Python写的一个布局管理工具。\n\n\n\n\n\n\n\n\n\n自制管理工具\n\n\n\n这个工具名为layout_manage.py，功能是实现将我们要修改的键位关系转换为hex，并导出bat或reg文件（bat是Windows批处理文件，reg是Windows注册表脚本文件，在这里的功能是将hex值写入前面注册表中\"ScanCode Map\"这个键中）到layout_bat或layout_reg文件夹中。其本身不带有修改注册表功能（python自身的权限问题），只是生成的文件具有此功能。\n\n即我们想修改以下键位：将qwer和asdf调换位置，小键盘123和789调换位置，屏蔽右shift键。这时我们只需要新建一个文本文件（例如一个名为test.txt的文件），将以下内容写入：\n\n\n\n\n这个文件内容是按键值对组成的，\"Q: A\"的意思是将物理按键Q映射为A字符，即按Q键敲出A，更容易让人理解，冒号前为物理按键，冒号后为按键功能。说一下这个格式规则：\n\n忽略大小写\n忽略换行符、冒号、分号前后的空白字符（位于两单词间的空格不忽略，如Left Ctrl中间只能有一个空格）\n小键盘上的字符前需要加n，例如小键盘上的'0'和'.'应分别写为\"n0\"和'n.'\n一些功能键需正确写入，如：Tab、Esc、CapsLock、Backspace、Delete、Enter、Left Ctrl、Left Windows等\n然后我们将这个文件作为参数，传递给layout_manage.py并执行。有两种方法，第一种是直接拖动这个txt文件到layout_manage.py图标上，这样layout_manage.py也能顺利执行。第二种方法是在cmd或powershell中执行命令\"python layout_manage.py test.txt\",注意路径问题。\n\n此外如果没有其他参数传递给该脚本文件时（即双击直接执行），将会生成一个recover文件，即还原初始键位的文件，也很方便。\n\n\n\n附上源码，注释应该很清楚了：\n\n#!/usr/bin/env python3\n#-*- coding:utf-8 -*-\n\nimport sys\nimport os\n\nsave_format = \"reg\"    #这个值可以修改，有两个选项(bat和reg)，可选择生成bat批处理文件或者reg注册表脚本文件,功能一样\n\nclass CountError(Exception):    #文本文件格式错误异常\n    pass\n\nclass FileFormatError(Exception):    #save_format值异常\n    pass\n\n\nif save_format not in [\"bat\",\"reg\"]:\n    raise FileFormatError(\"The variable 'save_format'`s value must be 'bat' or 'reg'.\")\n\n\nif __name__ == \"__main__\":\n    \n    if not os.path.isdir(\"layout_\"+save_format):\n        os.mkdir(\"layout_\"+save_format)\n\n    if len(sys.argv) == 1:\n        if save_format == \"bat\":\n            with open(\"layout_bat/recover.bat\",'w', encoding=\"utf-8\") as f:\n                f.write('@echo off\\nreg delete \"hklm\\\\system\\\\currentcontrolset\\\\control\\\\keyboard layout\" /v \"ScanCode Map\" /f\\necho \"键位已恢复，重启系统后生效\"\\npause')\n            input(\"恢复文件recover.bat已生成至layout_bat文件夹下，以管理员身份右键执行该文件后重启系统生效。\\n按回车键退出程序...\")\n\n        else:\n            with open(\"layout_reg/recover.reg\",'w', encoding=\"utf-8\") as f:\n                f.write('Windows Registry Editor Version 5.00\\n[HKEY_LOCAL_MACHINE\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\Keyboard Layout]\\n\"ScanCode Map\"=hex:00,00,00,00,00,00,00,00,01,00,00,00,00,00,00,00')\n            input(\"恢复文件recover.reg已生成至layout_reg文件夹下，双击执行该文件后重启系统生效。\\n按回车键退出程序...\")\n\n    elif len(sys.argv) == 2:\n        scan_code_dict = {\n            \"00 00\":\"None\",\n            \"01 00\":\"Esc\",    #即Esc键的扫描码是\"0001\"\n            \"02 00\":\"1\",\n            \"03 00\":\"2\",\n            \"04 00\":\"3\",\n            \"05 00\":\"4\",\n            \"06 00\":\"5\",\n            \"07 00\":\"6\",\n            \"08 00\":\"7\",\n            \"09 00\":\"8\",\n            \"0a 00\":\"9\",\n            \"0b 00\":\"0\",\n            \"0c 00\":\"-\",\n            \"0d 00\":\"=\",\n            \"0e 00\":\"Backspace\",\n            \"0f 00\":\"Tab\",\n            \"10 00\":\"Q\",\n            \"11 00\":\"W\",\n            \"12 00\":\"E\",\n            \"13 00\":\"R\",\n            \"14 00\":\"T\",\n            \"15 00\":\"Y\",\n            \"16 00\":\"U\",\n            \"17 00\":\"I\",\n            \"18 00\":\"O\",\n            \"19 00\":\"P\",\n            \"1a 00\":\"[\",\n            \"1b 00\":\"]\",\n            \"1c 00\":\"Enter\",\n            \"1d 00\":\"Left Ctrl\",\n            \"1e 00\":\"A\",\n            \"1f 00\":\"S\",\n            \"20 00\":\"D\",\n            \"21 00\":\"F\",\n            \"22 00\":\"G\",\n            \"23 00\":\"H\",\n            \"24 00\":\"J\",\n            \"25 00\":\"K\",\n            \"26 00\":\"L\",\n            \"27 00\":\"Semicolon\",    #由评论区指出，键盘上的“;”应该用其他值代替，否则会与配置文本文件中的“;”混淆\n            \"28 00\":\"'\",\n            \"29 00\":\"`\",\n            \"2a 00\":\"Left Shift\",\n            \"2b 00\":\"\\\\\",\n            \"2c 00\":\"Z\",\n            \"2d 00\":\"X\",\n            \"2e 00\":\"C\",\n            \"2f 00\":\"V\",\n            \"30 00\":\"B\",\n            \"31 00\":\"N\",\n            \"32 00\":\"M\",\n            \"33 00\":\",\",\n            \"34 00\":\".\",\n            \"35 00\":\"/\",\n            \"36 00\":\"Right Shift\",\n            \"37 00\":\"n*\",\n            \"38 00\":\"Left Alt\",\n            \"39 00\":\"Space\",\n            \"3a 00\":\"Caps Lock\",\n            \"3b 00\":\"F1\",\n            \"3c 00\":\"F2\",\n            \"3d 00\":\"F3\",\n            \"3e 00\":\"F4\",\n            \"3f 00\":\"F5\",\n            \"40 00\":\"F6\",\n            \"41 00\":\"F7\",\n            \"42 00\":\"F8\",\n            \"43 00\":\"F9\",\n            \"44 00\":\"F10\",\n            \"45 00\":\"Num Lock\",\n            \"46 00\":\"Scroll Lock\",\n            \"47 00\":\"n7\",\n            \"48 00\":\"n8\",\n            \"49 00\":\"n9\",\n            \"4a 00\":\"n-\",\n            \"4b 00\":\"n4\",\n            \"4c 00\":\"n5\",\n            \"4d 00\":\"n6\",\n            \"4e 00\":\"n+\",\n            \"4f 00\":\"n1\",\n            \"50 00\":\"n2\",\n            \"51 00\":\"n3\",\n            \"52 00\":\"n0\",\n            \"53 00\":\"n.\",\n            \"57 00\":\"F11\",\n            \"58 00\":\"F12\",\n\n            \n            \"1c e0\":\"nEnter\",\n            \"1d e0\":\"Right Ctrl\",\n            \"37 e0\":\"PrtSc\",\n            \"38 e0\":\"Right Alt\",\n            \"47 e0\":\"Home\",\n            \"48 e0\":\"Up\",\n            \"49 e0\":\"Page Up\",\n            \"4b e0\":\"Left\",\n            \"4d e0\":\"Right\",\n            \"4f e0\":\"End\",\n            \"50 e0\":\"Down\",\n            \"51 e0\":\"Page Down\",\n            \"52 e0\":\"Insert\",\n            \"53 e0\":\"Delete\",\n            \"5b e0\":\"Left Windows\",\n            \"5c e0\":\"Right Windows\",\n            }\n\n        fun_key_dict = dict((m.upper(),n) for n,m in scan_code_dict.items())    #键值互换,键值全大写\n        content = '00 00 00 00 00 00 00 00'\n        \n        #用于暂时保存映射前后的键位，判断这次键位修改是否有风险\n        before_map_set = set()\n        after_map_set = set()\n\n        with open(sys.argv[1], encoding=\"utf-8\") as f:\n            p = f.read().strip().split(';')\n            p.remove('')\n            content += ' {:0>2x} 00 00 00'.format(len(p)+1)\n            try:\n                for i in p:\n                    if len(i.strip().split(':')) == 2:\n                        before_map_set.add(i.split(':')[0].strip().upper())\n                        after_map_set.add(i.split(':')[1].strip().upper())\n                        content += ' '+fun_key_dict[i.split(':')[1].strip().upper()]+' '+fun_key_dict[i.split(':')[0].strip().upper()]\n                    else:\n                        raise CountError\n                content += ' 00 00 00 00'\n            except KeyError:\n                print(\"文件中键名称有误\")\n                \n            except CountError:\n                print(\"文件中未按格式书写\")\n            else:\n                if before_map_set != after_map_set:\n                    run = input(\"此次键位替换存在风险，{}键功能将在键盘上无对应按键，是否继续？(输入y继续，否则退出程序)\".format(str(before_map_set-after_map_set)[1:-1]))\n                    if run != 'y':\n                        sys.exit()\n\n                if save_format == \"bat\":\n                    with open(\"layout_bat/\"+'.'.join(sys.argv[1].split('\\\\')[-1].split('.')[:-1])+'.bat','w', encoding=\"utf-8\") as g:\n                        g.write('@echo off\\nreg add \"hklm\\\\system\\\\currentcontrolset\\\\control\\\\keyboard layout\" /v \"ScanCode Map\" /t REG_BINARY /d \"{}\" /f\\necho \"键位已完成修改，重启系统后生效\"\\npause'.format(''.join(content.split())))\n                    input(\"...\\n{}文件已生成至layout_bat目录下，右键以管理员身份执行该文件后重启系统生效。\\n按回车键退出程序...\".format('.'.join(sys.argv[1].split('\\\\')[-1].split('.')[:-1])+'.'+save_format))\n\n                else:\n                    with open(\"layout_reg/\"+'.'.join(sys.argv[1].split('\\\\')[-1].split('.')[:-1])+'.reg','w', encoding=\"utf-8\") as g:\n                        g.write('Windows Registry Editor Version 5.00\\n[HKEY_LOCAL_MACHINE\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\Keyboard Layout]\\n\"ScanCode Map\"=hex:{}'.format(','.join(content.split())))\n\n                    input(\"...\\n{}文件已生成至layout_reg目录下，双击执行该文件后重启系统生效。\\n按回车键退出程序...\".format('.'.join(sys.argv[1].split('\\\\')[-1].split('.')[:-1])+'.'+save_format))\n    else:\n        input(\"传入参数错误，按回车键退出程序...\")\n\n\n另外通过此脚本生成的bat或reg文件可以将其保存好，在其他Windows系统电脑上可以直接执行并修改为你想要的键位，这样可以一次生成，多处适用！切勿用来恶作剧哦。\n\n关于键位布局：我用了一个多月的Dvorak和两个多月的Norman，刚开始练习使用新键位的一周非常痛苦和新鲜，适应之后在英文文章输入的确要快点，但不是很明显。如果是敲code的话，就没什么可比性了。考虑到种种因素（尤其是在用其他人设备时），所以最后还是回归了QWERTY键位。\n\n编辑于 2020-11-13 16:14\n\n\n\nhttps://zhuanlan.zhihu.com/p/29581818\n","source":"_posts/windows-keyboard.md","raw":"---\ntitle: windows系统修改键位\ndate: 2022-11-06 00:10:42\ntags: \n   - windows\n   - python\ncategories: \n   - 系统\n---\n不知道大家生活中有没有遇到这些情况：键盘上某个比较重要的键损坏或失灵而要重新更换键盘，或者在一些游戏、办公软件重的一些默认按键不合理，又或者希望自己DIY出一套属于自己的键位布局。那么我想这篇文章对你会很有帮助。\n\n前几个月因心血来潮想尝试一些其他键位布局（例如Dvorak、Norman、Colemak等），需要修改键盘键位。其实，修改键位的方法也有很多，比较常见的是安装第三方辅助软件修改键位映射和功能。但对于我个人来说，出于简洁安全、自由可控的原因，不太喜欢在自己计算机上安装一些不必要的软件，这个功能完全可以在Windows上通过修改底层的注册表实现。\n\n先说一下这篇文章的大致内容：\n\n实现原理\n自制管理工具（Python3）\n\n\n实现原理\n\n\n\n在Windows注册表中有个\"Scancode Map\"(即扫描码映射)的键，我们可以通过修改这个键的值来实现键位映射的更改。\n\n\n\n\"Scancode Map\"的值的格式是\"hex:00,00,00,00,00,00,00,00,xx,00,00,00,[yy,yy,yy,yy,...,yy,yy,yy,yy,]00,00,00,00\"\n\n前8个16进制的值（即前8组00）表示版本号和头部字节，后4个16进制的值（即最后的4组00）表示结束标志，中间xx表示映射数目，最小值为01（考虑到结束标志的4组00）,中括号内为可写项，也是我们修改键位比较关键的部分，每四个代表一组映射。\n\n在我们键盘上每一个按键都有其十六进制扫描码，例如A的扫描码为\"1e\",其十六进制扫描码修正形式（为了表示方便就这么说吧）就是\"001e\",B的扫描码为\"0030\",右ctrl键的扫描码为\"e01d\",右alt键的扫描码则表示为\"e038\"，空值的扫描码为\"0000\"（可实现无效按键或者说是屏蔽按键）。具体其他按键扫描码在源码中贴有。\n\n既然我们知道键盘上每一个键都具有其对应的扫描码，那么我们假设需要A和B键互换，应该怎么做呢？这个时候就需要我们向中括号中添加我们需要的值，\"30,00,1e,00,\"就可以实现将B键的功能映射到物理键盘A上（通俗点说就是敲击键盘上的A键会打出B字符，同时要注意值的顺序）。你以为这样就完了吗？不然。\"30,00,1e,00,\"只能将B键功能映射在物理键盘A键位上，而物理键位B键并未被映射成A！这很危险，相当于键盘上没有一个按键能实现A的功能，所以我们还得添加一项\"1e,00,30,00,\"。最后我们的\"Scancode Map\"的完整值就为\"hex:00,00,00,00,00,00,00,00,03,00,00,00,30,00,1e,00,1e,00,30,00,00,00,00,00\"。就这一串值就可完全调换A，B键的功能。\n\n再来一个，我们要实现右Alt键能实现右Ctrl键的功能，并且屏蔽掉右Ctrl键，那么其\"Scancode Map\"值就为\"hex:00,00,00,00,00,00,00,00,03,00,00,00,1d,e0,38,e0,00,00,1d,e0,00,00,00,00\"。\n\n\n\n那么问题来了，既然我知道这个键位和所谓的键盘扫描码之间的对应关系和Scancode值之后，具体怎么实现呢？\n\n\n\n别急，我们一步步来，先打开Windows注册表编辑器（在cmd或powershell命令行下键入regedit回车即可打开），然后在\"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Keyboard Layout\"这个项下新建一个名为\"ScanCode Map\"键（右键新建二进制值），然后再右键名称列下的这个\"ScanCode Map\"修改，这时就可以依次键入编辑那一串hex值了，最后确定就完成了注册表的修改了！\n\n\n\n图示如下，先新建这个ScanCode Map的键（右键Keyboard Layout或空白处，然后选择新建二进制值）\n\n\n\n\n\n\n然后修改值（我的这个hex值功能是实现左Ctrl和CapsLock互换，毕竟Emacs党）\n\n\n\n\n但是，修改完了后并不能立即生效，因为是通过注册表修改底层键位映射所以需要重启计算机，重启资源管理器也是没有用的。\n\n\n\n那么，要还原按键怎么办？也很简单，有两种方法，一是从注册表中删除你创建的ScanCode Map这个键，或者用\"hex:00,00,00,00,00,00,00,00,01,00,00,00,00,00,00,00\"覆盖掉原来的值就行了。\n\n\n\n当然，如果修改的键位比较多的话，通过查各个键位映射值，修改注册表写hex值，就麻烦很多了（很佩服曾经的自己硬是这样写了一些键位布局）。这时我们需要一个工具来管理，可以用第三方软件。但是既然原理我们已经知道了，也并不难远未达到工程级的量级，那完全可以自己实现这个管理工具。我们可以用Java，C++，Python等来写，这不重要，自己喜欢什么就用什么吧。下面是我用Python写的一个布局管理工具。\n\n\n\n\n\n\n\n\n\n自制管理工具\n\n\n\n这个工具名为layout_manage.py，功能是实现将我们要修改的键位关系转换为hex，并导出bat或reg文件（bat是Windows批处理文件，reg是Windows注册表脚本文件，在这里的功能是将hex值写入前面注册表中\"ScanCode Map\"这个键中）到layout_bat或layout_reg文件夹中。其本身不带有修改注册表功能（python自身的权限问题），只是生成的文件具有此功能。\n\n即我们想修改以下键位：将qwer和asdf调换位置，小键盘123和789调换位置，屏蔽右shift键。这时我们只需要新建一个文本文件（例如一个名为test.txt的文件），将以下内容写入：\n\n\n\n\n这个文件内容是按键值对组成的，\"Q: A\"的意思是将物理按键Q映射为A字符，即按Q键敲出A，更容易让人理解，冒号前为物理按键，冒号后为按键功能。说一下这个格式规则：\n\n忽略大小写\n忽略换行符、冒号、分号前后的空白字符（位于两单词间的空格不忽略，如Left Ctrl中间只能有一个空格）\n小键盘上的字符前需要加n，例如小键盘上的'0'和'.'应分别写为\"n0\"和'n.'\n一些功能键需正确写入，如：Tab、Esc、CapsLock、Backspace、Delete、Enter、Left Ctrl、Left Windows等\n然后我们将这个文件作为参数，传递给layout_manage.py并执行。有两种方法，第一种是直接拖动这个txt文件到layout_manage.py图标上，这样layout_manage.py也能顺利执行。第二种方法是在cmd或powershell中执行命令\"python layout_manage.py test.txt\",注意路径问题。\n\n此外如果没有其他参数传递给该脚本文件时（即双击直接执行），将会生成一个recover文件，即还原初始键位的文件，也很方便。\n\n\n\n附上源码，注释应该很清楚了：\n\n#!/usr/bin/env python3\n#-*- coding:utf-8 -*-\n\nimport sys\nimport os\n\nsave_format = \"reg\"    #这个值可以修改，有两个选项(bat和reg)，可选择生成bat批处理文件或者reg注册表脚本文件,功能一样\n\nclass CountError(Exception):    #文本文件格式错误异常\n    pass\n\nclass FileFormatError(Exception):    #save_format值异常\n    pass\n\n\nif save_format not in [\"bat\",\"reg\"]:\n    raise FileFormatError(\"The variable 'save_format'`s value must be 'bat' or 'reg'.\")\n\n\nif __name__ == \"__main__\":\n    \n    if not os.path.isdir(\"layout_\"+save_format):\n        os.mkdir(\"layout_\"+save_format)\n\n    if len(sys.argv) == 1:\n        if save_format == \"bat\":\n            with open(\"layout_bat/recover.bat\",'w', encoding=\"utf-8\") as f:\n                f.write('@echo off\\nreg delete \"hklm\\\\system\\\\currentcontrolset\\\\control\\\\keyboard layout\" /v \"ScanCode Map\" /f\\necho \"键位已恢复，重启系统后生效\"\\npause')\n            input(\"恢复文件recover.bat已生成至layout_bat文件夹下，以管理员身份右键执行该文件后重启系统生效。\\n按回车键退出程序...\")\n\n        else:\n            with open(\"layout_reg/recover.reg\",'w', encoding=\"utf-8\") as f:\n                f.write('Windows Registry Editor Version 5.00\\n[HKEY_LOCAL_MACHINE\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\Keyboard Layout]\\n\"ScanCode Map\"=hex:00,00,00,00,00,00,00,00,01,00,00,00,00,00,00,00')\n            input(\"恢复文件recover.reg已生成至layout_reg文件夹下，双击执行该文件后重启系统生效。\\n按回车键退出程序...\")\n\n    elif len(sys.argv) == 2:\n        scan_code_dict = {\n            \"00 00\":\"None\",\n            \"01 00\":\"Esc\",    #即Esc键的扫描码是\"0001\"\n            \"02 00\":\"1\",\n            \"03 00\":\"2\",\n            \"04 00\":\"3\",\n            \"05 00\":\"4\",\n            \"06 00\":\"5\",\n            \"07 00\":\"6\",\n            \"08 00\":\"7\",\n            \"09 00\":\"8\",\n            \"0a 00\":\"9\",\n            \"0b 00\":\"0\",\n            \"0c 00\":\"-\",\n            \"0d 00\":\"=\",\n            \"0e 00\":\"Backspace\",\n            \"0f 00\":\"Tab\",\n            \"10 00\":\"Q\",\n            \"11 00\":\"W\",\n            \"12 00\":\"E\",\n            \"13 00\":\"R\",\n            \"14 00\":\"T\",\n            \"15 00\":\"Y\",\n            \"16 00\":\"U\",\n            \"17 00\":\"I\",\n            \"18 00\":\"O\",\n            \"19 00\":\"P\",\n            \"1a 00\":\"[\",\n            \"1b 00\":\"]\",\n            \"1c 00\":\"Enter\",\n            \"1d 00\":\"Left Ctrl\",\n            \"1e 00\":\"A\",\n            \"1f 00\":\"S\",\n            \"20 00\":\"D\",\n            \"21 00\":\"F\",\n            \"22 00\":\"G\",\n            \"23 00\":\"H\",\n            \"24 00\":\"J\",\n            \"25 00\":\"K\",\n            \"26 00\":\"L\",\n            \"27 00\":\"Semicolon\",    #由评论区指出，键盘上的“;”应该用其他值代替，否则会与配置文本文件中的“;”混淆\n            \"28 00\":\"'\",\n            \"29 00\":\"`\",\n            \"2a 00\":\"Left Shift\",\n            \"2b 00\":\"\\\\\",\n            \"2c 00\":\"Z\",\n            \"2d 00\":\"X\",\n            \"2e 00\":\"C\",\n            \"2f 00\":\"V\",\n            \"30 00\":\"B\",\n            \"31 00\":\"N\",\n            \"32 00\":\"M\",\n            \"33 00\":\",\",\n            \"34 00\":\".\",\n            \"35 00\":\"/\",\n            \"36 00\":\"Right Shift\",\n            \"37 00\":\"n*\",\n            \"38 00\":\"Left Alt\",\n            \"39 00\":\"Space\",\n            \"3a 00\":\"Caps Lock\",\n            \"3b 00\":\"F1\",\n            \"3c 00\":\"F2\",\n            \"3d 00\":\"F3\",\n            \"3e 00\":\"F4\",\n            \"3f 00\":\"F5\",\n            \"40 00\":\"F6\",\n            \"41 00\":\"F7\",\n            \"42 00\":\"F8\",\n            \"43 00\":\"F9\",\n            \"44 00\":\"F10\",\n            \"45 00\":\"Num Lock\",\n            \"46 00\":\"Scroll Lock\",\n            \"47 00\":\"n7\",\n            \"48 00\":\"n8\",\n            \"49 00\":\"n9\",\n            \"4a 00\":\"n-\",\n            \"4b 00\":\"n4\",\n            \"4c 00\":\"n5\",\n            \"4d 00\":\"n6\",\n            \"4e 00\":\"n+\",\n            \"4f 00\":\"n1\",\n            \"50 00\":\"n2\",\n            \"51 00\":\"n3\",\n            \"52 00\":\"n0\",\n            \"53 00\":\"n.\",\n            \"57 00\":\"F11\",\n            \"58 00\":\"F12\",\n\n            \n            \"1c e0\":\"nEnter\",\n            \"1d e0\":\"Right Ctrl\",\n            \"37 e0\":\"PrtSc\",\n            \"38 e0\":\"Right Alt\",\n            \"47 e0\":\"Home\",\n            \"48 e0\":\"Up\",\n            \"49 e0\":\"Page Up\",\n            \"4b e0\":\"Left\",\n            \"4d e0\":\"Right\",\n            \"4f e0\":\"End\",\n            \"50 e0\":\"Down\",\n            \"51 e0\":\"Page Down\",\n            \"52 e0\":\"Insert\",\n            \"53 e0\":\"Delete\",\n            \"5b e0\":\"Left Windows\",\n            \"5c e0\":\"Right Windows\",\n            }\n\n        fun_key_dict = dict((m.upper(),n) for n,m in scan_code_dict.items())    #键值互换,键值全大写\n        content = '00 00 00 00 00 00 00 00'\n        \n        #用于暂时保存映射前后的键位，判断这次键位修改是否有风险\n        before_map_set = set()\n        after_map_set = set()\n\n        with open(sys.argv[1], encoding=\"utf-8\") as f:\n            p = f.read().strip().split(';')\n            p.remove('')\n            content += ' {:0>2x} 00 00 00'.format(len(p)+1)\n            try:\n                for i in p:\n                    if len(i.strip().split(':')) == 2:\n                        before_map_set.add(i.split(':')[0].strip().upper())\n                        after_map_set.add(i.split(':')[1].strip().upper())\n                        content += ' '+fun_key_dict[i.split(':')[1].strip().upper()]+' '+fun_key_dict[i.split(':')[0].strip().upper()]\n                    else:\n                        raise CountError\n                content += ' 00 00 00 00'\n            except KeyError:\n                print(\"文件中键名称有误\")\n                \n            except CountError:\n                print(\"文件中未按格式书写\")\n            else:\n                if before_map_set != after_map_set:\n                    run = input(\"此次键位替换存在风险，{}键功能将在键盘上无对应按键，是否继续？(输入y继续，否则退出程序)\".format(str(before_map_set-after_map_set)[1:-1]))\n                    if run != 'y':\n                        sys.exit()\n\n                if save_format == \"bat\":\n                    with open(\"layout_bat/\"+'.'.join(sys.argv[1].split('\\\\')[-1].split('.')[:-1])+'.bat','w', encoding=\"utf-8\") as g:\n                        g.write('@echo off\\nreg add \"hklm\\\\system\\\\currentcontrolset\\\\control\\\\keyboard layout\" /v \"ScanCode Map\" /t REG_BINARY /d \"{}\" /f\\necho \"键位已完成修改，重启系统后生效\"\\npause'.format(''.join(content.split())))\n                    input(\"...\\n{}文件已生成至layout_bat目录下，右键以管理员身份执行该文件后重启系统生效。\\n按回车键退出程序...\".format('.'.join(sys.argv[1].split('\\\\')[-1].split('.')[:-1])+'.'+save_format))\n\n                else:\n                    with open(\"layout_reg/\"+'.'.join(sys.argv[1].split('\\\\')[-1].split('.')[:-1])+'.reg','w', encoding=\"utf-8\") as g:\n                        g.write('Windows Registry Editor Version 5.00\\n[HKEY_LOCAL_MACHINE\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\Keyboard Layout]\\n\"ScanCode Map\"=hex:{}'.format(','.join(content.split())))\n\n                    input(\"...\\n{}文件已生成至layout_reg目录下，双击执行该文件后重启系统生效。\\n按回车键退出程序...\".format('.'.join(sys.argv[1].split('\\\\')[-1].split('.')[:-1])+'.'+save_format))\n    else:\n        input(\"传入参数错误，按回车键退出程序...\")\n\n\n另外通过此脚本生成的bat或reg文件可以将其保存好，在其他Windows系统电脑上可以直接执行并修改为你想要的键位，这样可以一次生成，多处适用！切勿用来恶作剧哦。\n\n关于键位布局：我用了一个多月的Dvorak和两个多月的Norman，刚开始练习使用新键位的一周非常痛苦和新鲜，适应之后在英文文章输入的确要快点，但不是很明显。如果是敲code的话，就没什么可比性了。考虑到种种因素（尤其是在用其他人设备时），所以最后还是回归了QWERTY键位。\n\n编辑于 2020-11-13 16:14\n\n\n\nhttps://zhuanlan.zhihu.com/p/29581818\n","slug":"windows-keyboard","published":1,"updated":"2023-07-23T14:19:14.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkjdd1d9003x98aje27o58le","content":"<p>不知道大家生活中有没有遇到这些情况：键盘上某个比较重要的键损坏或失灵而要重新更换键盘，或者在一些游戏、办公软件重的一些默认按键不合理，又或者希望自己DIY出一套属于自己的键位布局。那么我想这篇文章对你会很有帮助。</p>\n<p>前几个月因心血来潮想尝试一些其他键位布局（例如Dvorak、Norman、Colemak等），需要修改键盘键位。其实，修改键位的方法也有很多，比较常见的是安装第三方辅助软件修改键位映射和功能。但对于我个人来说，出于简洁安全、自由可控的原因，不太喜欢在自己计算机上安装一些不必要的软件，这个功能完全可以在Windows上通过修改底层的注册表实现。</p>\n<p>先说一下这篇文章的大致内容：</p>\n<p>实现原理<br>自制管理工具（Python3）</p>\n<p>实现原理</p>\n<p>在Windows注册表中有个”Scancode Map”(即扫描码映射)的键，我们可以通过修改这个键的值来实现键位映射的更改。</p>\n<p>“Scancode Map”的值的格式是”hex:00,00,00,00,00,00,00,00,xx,00,00,00,[yy,yy,yy,yy,…,yy,yy,yy,yy,]00,00,00,00”</p>\n<p>前8个16进制的值（即前8组00）表示版本号和头部字节，后4个16进制的值（即最后的4组00）表示结束标志，中间xx表示映射数目，最小值为01（考虑到结束标志的4组00）,中括号内为可写项，也是我们修改键位比较关键的部分，每四个代表一组映射。</p>\n<p>在我们键盘上每一个按键都有其十六进制扫描码，例如A的扫描码为”1e”,其十六进制扫描码修正形式（为了表示方便就这么说吧）就是”001e”,B的扫描码为”0030”,右ctrl键的扫描码为”e01d”,右alt键的扫描码则表示为”e038”，空值的扫描码为”0000”（可实现无效按键或者说是屏蔽按键）。具体其他按键扫描码在源码中贴有。</p>\n<p>既然我们知道键盘上每一个键都具有其对应的扫描码，那么我们假设需要A和B键互换，应该怎么做呢？这个时候就需要我们向中括号中添加我们需要的值，”30,00,1e,00,”就可以实现将B键的功能映射到物理键盘A上（通俗点说就是敲击键盘上的A键会打出B字符，同时要注意值的顺序）。你以为这样就完了吗？不然。”30,00,1e,00,”只能将B键功能映射在物理键盘A键位上，而物理键位B键并未被映射成A！这很危险，相当于键盘上没有一个按键能实现A的功能，所以我们还得添加一项”1e,00,30,00,”。最后我们的”Scancode Map”的完整值就为”hex:00,00,00,00,00,00,00,00,03,00,00,00,30,00,1e,00,1e,00,30,00,00,00,00,00”。就这一串值就可完全调换A，B键的功能。</p>\n<p>再来一个，我们要实现右Alt键能实现右Ctrl键的功能，并且屏蔽掉右Ctrl键，那么其”Scancode Map”值就为”hex:00,00,00,00,00,00,00,00,03,00,00,00,1d,e0,38,e0,00,00,1d,e0,00,00,00,00”。</p>\n<p>那么问题来了，既然我知道这个键位和所谓的键盘扫描码之间的对应关系和Scancode值之后，具体怎么实现呢？</p>\n<p>别急，我们一步步来，先打开Windows注册表编辑器（在cmd或powershell命令行下键入regedit回车即可打开），然后在”HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Keyboard Layout”这个项下新建一个名为”ScanCode Map”键（右键新建二进制值），然后再右键名称列下的这个”ScanCode Map”修改，这时就可以依次键入编辑那一串hex值了，最后确定就完成了注册表的修改了！</p>\n<p>图示如下，先新建这个ScanCode Map的键（右键Keyboard Layout或空白处，然后选择新建二进制值）</p>\n<p>然后修改值（我的这个hex值功能是实现左Ctrl和CapsLock互换，毕竟Emacs党）</p>\n<p>但是，修改完了后并不能立即生效，因为是通过注册表修改底层键位映射所以需要重启计算机，重启资源管理器也是没有用的。</p>\n<p>那么，要还原按键怎么办？也很简单，有两种方法，一是从注册表中删除你创建的ScanCode Map这个键，或者用”hex:00,00,00,00,00,00,00,00,01,00,00,00,00,00,00,00”覆盖掉原来的值就行了。</p>\n<p>当然，如果修改的键位比较多的话，通过查各个键位映射值，修改注册表写hex值，就麻烦很多了（很佩服曾经的自己硬是这样写了一些键位布局）。这时我们需要一个工具来管理，可以用第三方软件。但是既然原理我们已经知道了，也并不难远未达到工程级的量级，那完全可以自己实现这个管理工具。我们可以用Java，C++，Python等来写，这不重要，自己喜欢什么就用什么吧。下面是我用Python写的一个布局管理工具。</p>\n<p>自制管理工具</p>\n<p>这个工具名为layout_manage.py，功能是实现将我们要修改的键位关系转换为hex，并导出bat或reg文件（bat是Windows批处理文件，reg是Windows注册表脚本文件，在这里的功能是将hex值写入前面注册表中”ScanCode Map”这个键中）到layout_bat或layout_reg文件夹中。其本身不带有修改注册表功能（python自身的权限问题），只是生成的文件具有此功能。</p>\n<p>即我们想修改以下键位：将qwer和asdf调换位置，小键盘123和789调换位置，屏蔽右shift键。这时我们只需要新建一个文本文件（例如一个名为test.txt的文件），将以下内容写入：</p>\n<p>这个文件内容是按键值对组成的，”Q: A”的意思是将物理按键Q映射为A字符，即按Q键敲出A，更容易让人理解，冒号前为物理按键，冒号后为按键功能。说一下这个格式规则：</p>\n<p>忽略大小写<br>忽略换行符、冒号、分号前后的空白字符（位于两单词间的空格不忽略，如Left Ctrl中间只能有一个空格）<br>小键盘上的字符前需要加n，例如小键盘上的’0’和’.’应分别写为”n0”和’n.’<br>一些功能键需正确写入，如：Tab、Esc、CapsLock、Backspace、Delete、Enter、Left Ctrl、Left Windows等<br>然后我们将这个文件作为参数，传递给layout_manage.py并执行。有两种方法，第一种是直接拖动这个txt文件到layout_manage.py图标上，这样layout_manage.py也能顺利执行。第二种方法是在cmd或powershell中执行命令”python layout_manage.py test.txt”,注意路径问题。</p>\n<p>此外如果没有其他参数传递给该脚本文件时（即双击直接执行），将会生成一个recover文件，即还原初始键位的文件，也很方便。</p>\n<p>附上源码，注释应该很清楚了：</p>\n<p>#!&#x2F;usr&#x2F;bin&#x2F;env python3<br>#-<em>- coding:utf-8 -</em>-</p>\n<p>import sys<br>import os</p>\n<p>save_format &#x3D; “reg”    #这个值可以修改，有两个选项(bat和reg)，可选择生成bat批处理文件或者reg注册表脚本文件,功能一样</p>\n<p>class CountError(Exception):    #文本文件格式错误异常<br>    pass</p>\n<p>class FileFormatError(Exception):    #save_format值异常<br>    pass</p>\n<p>if save_format not in [“bat”,”reg”]:<br>    raise FileFormatError(“The variable ‘save_format’&#96;s value must be ‘bat’ or ‘reg’.”)</p>\n<p>if <strong>name</strong> &#x3D;&#x3D; “<strong>main</strong>“:</p>\n<pre><code>if not os.path.isdir(&quot;layout_&quot;+save_format):\n    os.mkdir(&quot;layout_&quot;+save_format)\n\nif len(sys.argv) == 1:\n    if save_format == &quot;bat&quot;:\n        with open(&quot;layout_bat/recover.bat&quot;,&#39;w&#39;, encoding=&quot;utf-8&quot;) as f:\n            f.write(&#39;@echo off\\nreg delete &quot;hklm\\\\system\\\\currentcontrolset\\\\control\\\\keyboard layout&quot; /v &quot;ScanCode Map&quot; /f\\necho &quot;键位已恢复，重启系统后生效&quot;\\npause&#39;)\n        input(&quot;恢复文件recover.bat已生成至layout_bat文件夹下，以管理员身份右键执行该文件后重启系统生效。\\n按回车键退出程序...&quot;)\n\n    else:\n        with open(&quot;layout_reg/recover.reg&quot;,&#39;w&#39;, encoding=&quot;utf-8&quot;) as f:\n            f.write(&#39;Windows Registry Editor Version 5.00\\n[HKEY_LOCAL_MACHINE\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\Keyboard Layout]\\n&quot;ScanCode Map&quot;=hex:00,00,00,00,00,00,00,00,01,00,00,00,00,00,00,00&#39;)\n        input(&quot;恢复文件recover.reg已生成至layout_reg文件夹下，双击执行该文件后重启系统生效。\\n按回车键退出程序...&quot;)\n\nelif len(sys.argv) == 2:\n    scan_code_dict = &#123;\n        &quot;00 00&quot;:&quot;None&quot;,\n        &quot;01 00&quot;:&quot;Esc&quot;,    #即Esc键的扫描码是&quot;0001&quot;\n        &quot;02 00&quot;:&quot;1&quot;,\n        &quot;03 00&quot;:&quot;2&quot;,\n        &quot;04 00&quot;:&quot;3&quot;,\n        &quot;05 00&quot;:&quot;4&quot;,\n        &quot;06 00&quot;:&quot;5&quot;,\n        &quot;07 00&quot;:&quot;6&quot;,\n        &quot;08 00&quot;:&quot;7&quot;,\n        &quot;09 00&quot;:&quot;8&quot;,\n        &quot;0a 00&quot;:&quot;9&quot;,\n        &quot;0b 00&quot;:&quot;0&quot;,\n        &quot;0c 00&quot;:&quot;-&quot;,\n        &quot;0d 00&quot;:&quot;=&quot;,\n        &quot;0e 00&quot;:&quot;Backspace&quot;,\n        &quot;0f 00&quot;:&quot;Tab&quot;,\n        &quot;10 00&quot;:&quot;Q&quot;,\n        &quot;11 00&quot;:&quot;W&quot;,\n        &quot;12 00&quot;:&quot;E&quot;,\n        &quot;13 00&quot;:&quot;R&quot;,\n        &quot;14 00&quot;:&quot;T&quot;,\n        &quot;15 00&quot;:&quot;Y&quot;,\n        &quot;16 00&quot;:&quot;U&quot;,\n        &quot;17 00&quot;:&quot;I&quot;,\n        &quot;18 00&quot;:&quot;O&quot;,\n        &quot;19 00&quot;:&quot;P&quot;,\n        &quot;1a 00&quot;:&quot;[&quot;,\n        &quot;1b 00&quot;:&quot;]&quot;,\n        &quot;1c 00&quot;:&quot;Enter&quot;,\n        &quot;1d 00&quot;:&quot;Left Ctrl&quot;,\n        &quot;1e 00&quot;:&quot;A&quot;,\n        &quot;1f 00&quot;:&quot;S&quot;,\n        &quot;20 00&quot;:&quot;D&quot;,\n        &quot;21 00&quot;:&quot;F&quot;,\n        &quot;22 00&quot;:&quot;G&quot;,\n        &quot;23 00&quot;:&quot;H&quot;,\n        &quot;24 00&quot;:&quot;J&quot;,\n        &quot;25 00&quot;:&quot;K&quot;,\n        &quot;26 00&quot;:&quot;L&quot;,\n        &quot;27 00&quot;:&quot;Semicolon&quot;,    #由评论区指出，键盘上的“;”应该用其他值代替，否则会与配置文本文件中的“;”混淆\n        &quot;28 00&quot;:&quot;&#39;&quot;,\n        &quot;29 00&quot;:&quot;`&quot;,\n        &quot;2a 00&quot;:&quot;Left Shift&quot;,\n        &quot;2b 00&quot;:&quot;\\\\&quot;,\n        &quot;2c 00&quot;:&quot;Z&quot;,\n        &quot;2d 00&quot;:&quot;X&quot;,\n        &quot;2e 00&quot;:&quot;C&quot;,\n        &quot;2f 00&quot;:&quot;V&quot;,\n        &quot;30 00&quot;:&quot;B&quot;,\n        &quot;31 00&quot;:&quot;N&quot;,\n        &quot;32 00&quot;:&quot;M&quot;,\n        &quot;33 00&quot;:&quot;,&quot;,\n        &quot;34 00&quot;:&quot;.&quot;,\n        &quot;35 00&quot;:&quot;/&quot;,\n        &quot;36 00&quot;:&quot;Right Shift&quot;,\n        &quot;37 00&quot;:&quot;n*&quot;,\n        &quot;38 00&quot;:&quot;Left Alt&quot;,\n        &quot;39 00&quot;:&quot;Space&quot;,\n        &quot;3a 00&quot;:&quot;Caps Lock&quot;,\n        &quot;3b 00&quot;:&quot;F1&quot;,\n        &quot;3c 00&quot;:&quot;F2&quot;,\n        &quot;3d 00&quot;:&quot;F3&quot;,\n        &quot;3e 00&quot;:&quot;F4&quot;,\n        &quot;3f 00&quot;:&quot;F5&quot;,\n        &quot;40 00&quot;:&quot;F6&quot;,\n        &quot;41 00&quot;:&quot;F7&quot;,\n        &quot;42 00&quot;:&quot;F8&quot;,\n        &quot;43 00&quot;:&quot;F9&quot;,\n        &quot;44 00&quot;:&quot;F10&quot;,\n        &quot;45 00&quot;:&quot;Num Lock&quot;,\n        &quot;46 00&quot;:&quot;Scroll Lock&quot;,\n        &quot;47 00&quot;:&quot;n7&quot;,\n        &quot;48 00&quot;:&quot;n8&quot;,\n        &quot;49 00&quot;:&quot;n9&quot;,\n        &quot;4a 00&quot;:&quot;n-&quot;,\n        &quot;4b 00&quot;:&quot;n4&quot;,\n        &quot;4c 00&quot;:&quot;n5&quot;,\n        &quot;4d 00&quot;:&quot;n6&quot;,\n        &quot;4e 00&quot;:&quot;n+&quot;,\n        &quot;4f 00&quot;:&quot;n1&quot;,\n        &quot;50 00&quot;:&quot;n2&quot;,\n        &quot;51 00&quot;:&quot;n3&quot;,\n        &quot;52 00&quot;:&quot;n0&quot;,\n        &quot;53 00&quot;:&quot;n.&quot;,\n        &quot;57 00&quot;:&quot;F11&quot;,\n        &quot;58 00&quot;:&quot;F12&quot;,\n\n        \n        &quot;1c e0&quot;:&quot;nEnter&quot;,\n        &quot;1d e0&quot;:&quot;Right Ctrl&quot;,\n        &quot;37 e0&quot;:&quot;PrtSc&quot;,\n        &quot;38 e0&quot;:&quot;Right Alt&quot;,\n        &quot;47 e0&quot;:&quot;Home&quot;,\n        &quot;48 e0&quot;:&quot;Up&quot;,\n        &quot;49 e0&quot;:&quot;Page Up&quot;,\n        &quot;4b e0&quot;:&quot;Left&quot;,\n        &quot;4d e0&quot;:&quot;Right&quot;,\n        &quot;4f e0&quot;:&quot;End&quot;,\n        &quot;50 e0&quot;:&quot;Down&quot;,\n        &quot;51 e0&quot;:&quot;Page Down&quot;,\n        &quot;52 e0&quot;:&quot;Insert&quot;,\n        &quot;53 e0&quot;:&quot;Delete&quot;,\n        &quot;5b e0&quot;:&quot;Left Windows&quot;,\n        &quot;5c e0&quot;:&quot;Right Windows&quot;,\n        &#125;\n\n    fun_key_dict = dict((m.upper(),n) for n,m in scan_code_dict.items())    #键值互换,键值全大写\n    content = &#39;00 00 00 00 00 00 00 00&#39;\n    \n    #用于暂时保存映射前后的键位，判断这次键位修改是否有风险\n    before_map_set = set()\n    after_map_set = set()\n\n    with open(sys.argv[1], encoding=&quot;utf-8&quot;) as f:\n        p = f.read().strip().split(&#39;;&#39;)\n        p.remove(&#39;&#39;)\n        content += &#39; &#123;:0&gt;2x&#125; 00 00 00&#39;.format(len(p)+1)\n        try:\n            for i in p:\n                if len(i.strip().split(&#39;:&#39;)) == 2:\n                    before_map_set.add(i.split(&#39;:&#39;)[0].strip().upper())\n                    after_map_set.add(i.split(&#39;:&#39;)[1].strip().upper())\n                    content += &#39; &#39;+fun_key_dict[i.split(&#39;:&#39;)[1].strip().upper()]+&#39; &#39;+fun_key_dict[i.split(&#39;:&#39;)[0].strip().upper()]\n                else:\n                    raise CountError\n            content += &#39; 00 00 00 00&#39;\n        except KeyError:\n            print(&quot;文件中键名称有误&quot;)\n            \n        except CountError:\n            print(&quot;文件中未按格式书写&quot;)\n        else:\n            if before_map_set != after_map_set:\n                run = input(&quot;此次键位替换存在风险，&#123;&#125;键功能将在键盘上无对应按键，是否继续？(输入y继续，否则退出程序)&quot;.format(str(before_map_set-after_map_set)[1:-1]))\n                if run != &#39;y&#39;:\n                    sys.exit()\n\n            if save_format == &quot;bat&quot;:\n                with open(&quot;layout_bat/&quot;+&#39;.&#39;.join(sys.argv[1].split(&#39;\\\\&#39;)[-1].split(&#39;.&#39;)[:-1])+&#39;.bat&#39;,&#39;w&#39;, encoding=&quot;utf-8&quot;) as g:\n                    g.write(&#39;@echo off\\nreg add &quot;hklm\\\\system\\\\currentcontrolset\\\\control\\\\keyboard layout&quot; /v &quot;ScanCode Map&quot; /t REG_BINARY /d &quot;&#123;&#125;&quot; /f\\necho &quot;键位已完成修改，重启系统后生效&quot;\\npause&#39;.format(&#39;&#39;.join(content.split())))\n                input(&quot;...\\n&#123;&#125;文件已生成至layout_bat目录下，右键以管理员身份执行该文件后重启系统生效。\\n按回车键退出程序...&quot;.format(&#39;.&#39;.join(sys.argv[1].split(&#39;\\\\&#39;)[-1].split(&#39;.&#39;)[:-1])+&#39;.&#39;+save_format))\n\n            else:\n                with open(&quot;layout_reg/&quot;+&#39;.&#39;.join(sys.argv[1].split(&#39;\\\\&#39;)[-1].split(&#39;.&#39;)[:-1])+&#39;.reg&#39;,&#39;w&#39;, encoding=&quot;utf-8&quot;) as g:\n                    g.write(&#39;Windows Registry Editor Version 5.00\\n[HKEY_LOCAL_MACHINE\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\Keyboard Layout]\\n&quot;ScanCode Map&quot;=hex:&#123;&#125;&#39;.format(&#39;,&#39;.join(content.split())))\n\n                input(&quot;...\\n&#123;&#125;文件已生成至layout_reg目录下，双击执行该文件后重启系统生效。\\n按回车键退出程序...&quot;.format(&#39;.&#39;.join(sys.argv[1].split(&#39;\\\\&#39;)[-1].split(&#39;.&#39;)[:-1])+&#39;.&#39;+save_format))\nelse:\n    input(&quot;传入参数错误，按回车键退出程序...&quot;)\n</code></pre>\n<p>另外通过此脚本生成的bat或reg文件可以将其保存好，在其他Windows系统电脑上可以直接执行并修改为你想要的键位，这样可以一次生成，多处适用！切勿用来恶作剧哦。</p>\n<p>关于键位布局：我用了一个多月的Dvorak和两个多月的Norman，刚开始练习使用新键位的一周非常痛苦和新鲜，适应之后在英文文章输入的确要快点，但不是很明显。如果是敲code的话，就没什么可比性了。考虑到种种因素（尤其是在用其他人设备时），所以最后还是回归了QWERTY键位。</p>\n<p>编辑于 2020-11-13 16:14</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/29581818\">https://zhuanlan.zhihu.com/p/29581818</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>不知道大家生活中有没有遇到这些情况：键盘上某个比较重要的键损坏或失灵而要重新更换键盘，或者在一些游戏、办公软件重的一些默认按键不合理，又或者希望自己DIY出一套属于自己的键位布局。那么我想这篇文章对你会很有帮助。</p>\n<p>前几个月因心血来潮想尝试一些其他键位布局（例如Dvorak、Norman、Colemak等），需要修改键盘键位。其实，修改键位的方法也有很多，比较常见的是安装第三方辅助软件修改键位映射和功能。但对于我个人来说，出于简洁安全、自由可控的原因，不太喜欢在自己计算机上安装一些不必要的软件，这个功能完全可以在Windows上通过修改底层的注册表实现。</p>\n<p>先说一下这篇文章的大致内容：</p>\n<p>实现原理<br>自制管理工具（Python3）</p>\n<p>实现原理</p>\n<p>在Windows注册表中有个”Scancode Map”(即扫描码映射)的键，我们可以通过修改这个键的值来实现键位映射的更改。</p>\n<p>“Scancode Map”的值的格式是”hex:00,00,00,00,00,00,00,00,xx,00,00,00,[yy,yy,yy,yy,…,yy,yy,yy,yy,]00,00,00,00”</p>\n<p>前8个16进制的值（即前8组00）表示版本号和头部字节，后4个16进制的值（即最后的4组00）表示结束标志，中间xx表示映射数目，最小值为01（考虑到结束标志的4组00）,中括号内为可写项，也是我们修改键位比较关键的部分，每四个代表一组映射。</p>\n<p>在我们键盘上每一个按键都有其十六进制扫描码，例如A的扫描码为”1e”,其十六进制扫描码修正形式（为了表示方便就这么说吧）就是”001e”,B的扫描码为”0030”,右ctrl键的扫描码为”e01d”,右alt键的扫描码则表示为”e038”，空值的扫描码为”0000”（可实现无效按键或者说是屏蔽按键）。具体其他按键扫描码在源码中贴有。</p>\n<p>既然我们知道键盘上每一个键都具有其对应的扫描码，那么我们假设需要A和B键互换，应该怎么做呢？这个时候就需要我们向中括号中添加我们需要的值，”30,00,1e,00,”就可以实现将B键的功能映射到物理键盘A上（通俗点说就是敲击键盘上的A键会打出B字符，同时要注意值的顺序）。你以为这样就完了吗？不然。”30,00,1e,00,”只能将B键功能映射在物理键盘A键位上，而物理键位B键并未被映射成A！这很危险，相当于键盘上没有一个按键能实现A的功能，所以我们还得添加一项”1e,00,30,00,”。最后我们的”Scancode Map”的完整值就为”hex:00,00,00,00,00,00,00,00,03,00,00,00,30,00,1e,00,1e,00,30,00,00,00,00,00”。就这一串值就可完全调换A，B键的功能。</p>\n<p>再来一个，我们要实现右Alt键能实现右Ctrl键的功能，并且屏蔽掉右Ctrl键，那么其”Scancode Map”值就为”hex:00,00,00,00,00,00,00,00,03,00,00,00,1d,e0,38,e0,00,00,1d,e0,00,00,00,00”。</p>\n<p>那么问题来了，既然我知道这个键位和所谓的键盘扫描码之间的对应关系和Scancode值之后，具体怎么实现呢？</p>\n<p>别急，我们一步步来，先打开Windows注册表编辑器（在cmd或powershell命令行下键入regedit回车即可打开），然后在”HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Keyboard Layout”这个项下新建一个名为”ScanCode Map”键（右键新建二进制值），然后再右键名称列下的这个”ScanCode Map”修改，这时就可以依次键入编辑那一串hex值了，最后确定就完成了注册表的修改了！</p>\n<p>图示如下，先新建这个ScanCode Map的键（右键Keyboard Layout或空白处，然后选择新建二进制值）</p>\n<p>然后修改值（我的这个hex值功能是实现左Ctrl和CapsLock互换，毕竟Emacs党）</p>\n<p>但是，修改完了后并不能立即生效，因为是通过注册表修改底层键位映射所以需要重启计算机，重启资源管理器也是没有用的。</p>\n<p>那么，要还原按键怎么办？也很简单，有两种方法，一是从注册表中删除你创建的ScanCode Map这个键，或者用”hex:00,00,00,00,00,00,00,00,01,00,00,00,00,00,00,00”覆盖掉原来的值就行了。</p>\n<p>当然，如果修改的键位比较多的话，通过查各个键位映射值，修改注册表写hex值，就麻烦很多了（很佩服曾经的自己硬是这样写了一些键位布局）。这时我们需要一个工具来管理，可以用第三方软件。但是既然原理我们已经知道了，也并不难远未达到工程级的量级，那完全可以自己实现这个管理工具。我们可以用Java，C++，Python等来写，这不重要，自己喜欢什么就用什么吧。下面是我用Python写的一个布局管理工具。</p>\n<p>自制管理工具</p>\n<p>这个工具名为layout_manage.py，功能是实现将我们要修改的键位关系转换为hex，并导出bat或reg文件（bat是Windows批处理文件，reg是Windows注册表脚本文件，在这里的功能是将hex值写入前面注册表中”ScanCode Map”这个键中）到layout_bat或layout_reg文件夹中。其本身不带有修改注册表功能（python自身的权限问题），只是生成的文件具有此功能。</p>\n<p>即我们想修改以下键位：将qwer和asdf调换位置，小键盘123和789调换位置，屏蔽右shift键。这时我们只需要新建一个文本文件（例如一个名为test.txt的文件），将以下内容写入：</p>\n<p>这个文件内容是按键值对组成的，”Q: A”的意思是将物理按键Q映射为A字符，即按Q键敲出A，更容易让人理解，冒号前为物理按键，冒号后为按键功能。说一下这个格式规则：</p>\n<p>忽略大小写<br>忽略换行符、冒号、分号前后的空白字符（位于两单词间的空格不忽略，如Left Ctrl中间只能有一个空格）<br>小键盘上的字符前需要加n，例如小键盘上的’0’和’.’应分别写为”n0”和’n.’<br>一些功能键需正确写入，如：Tab、Esc、CapsLock、Backspace、Delete、Enter、Left Ctrl、Left Windows等<br>然后我们将这个文件作为参数，传递给layout_manage.py并执行。有两种方法，第一种是直接拖动这个txt文件到layout_manage.py图标上，这样layout_manage.py也能顺利执行。第二种方法是在cmd或powershell中执行命令”python layout_manage.py test.txt”,注意路径问题。</p>\n<p>此外如果没有其他参数传递给该脚本文件时（即双击直接执行），将会生成一个recover文件，即还原初始键位的文件，也很方便。</p>\n<p>附上源码，注释应该很清楚了：</p>\n<p>#!&#x2F;usr&#x2F;bin&#x2F;env python3<br>#-<em>- coding:utf-8 -</em>-</p>\n<p>import sys<br>import os</p>\n<p>save_format &#x3D; “reg”    #这个值可以修改，有两个选项(bat和reg)，可选择生成bat批处理文件或者reg注册表脚本文件,功能一样</p>\n<p>class CountError(Exception):    #文本文件格式错误异常<br>    pass</p>\n<p>class FileFormatError(Exception):    #save_format值异常<br>    pass</p>\n<p>if save_format not in [“bat”,”reg”]:<br>    raise FileFormatError(“The variable ‘save_format’&#96;s value must be ‘bat’ or ‘reg’.”)</p>\n<p>if <strong>name</strong> &#x3D;&#x3D; “<strong>main</strong>“:</p>\n<pre><code>if not os.path.isdir(&quot;layout_&quot;+save_format):\n    os.mkdir(&quot;layout_&quot;+save_format)\n\nif len(sys.argv) == 1:\n    if save_format == &quot;bat&quot;:\n        with open(&quot;layout_bat/recover.bat&quot;,&#39;w&#39;, encoding=&quot;utf-8&quot;) as f:\n            f.write(&#39;@echo off\\nreg delete &quot;hklm\\\\system\\\\currentcontrolset\\\\control\\\\keyboard layout&quot; /v &quot;ScanCode Map&quot; /f\\necho &quot;键位已恢复，重启系统后生效&quot;\\npause&#39;)\n        input(&quot;恢复文件recover.bat已生成至layout_bat文件夹下，以管理员身份右键执行该文件后重启系统生效。\\n按回车键退出程序...&quot;)\n\n    else:\n        with open(&quot;layout_reg/recover.reg&quot;,&#39;w&#39;, encoding=&quot;utf-8&quot;) as f:\n            f.write(&#39;Windows Registry Editor Version 5.00\\n[HKEY_LOCAL_MACHINE\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\Keyboard Layout]\\n&quot;ScanCode Map&quot;=hex:00,00,00,00,00,00,00,00,01,00,00,00,00,00,00,00&#39;)\n        input(&quot;恢复文件recover.reg已生成至layout_reg文件夹下，双击执行该文件后重启系统生效。\\n按回车键退出程序...&quot;)\n\nelif len(sys.argv) == 2:\n    scan_code_dict = &#123;\n        &quot;00 00&quot;:&quot;None&quot;,\n        &quot;01 00&quot;:&quot;Esc&quot;,    #即Esc键的扫描码是&quot;0001&quot;\n        &quot;02 00&quot;:&quot;1&quot;,\n        &quot;03 00&quot;:&quot;2&quot;,\n        &quot;04 00&quot;:&quot;3&quot;,\n        &quot;05 00&quot;:&quot;4&quot;,\n        &quot;06 00&quot;:&quot;5&quot;,\n        &quot;07 00&quot;:&quot;6&quot;,\n        &quot;08 00&quot;:&quot;7&quot;,\n        &quot;09 00&quot;:&quot;8&quot;,\n        &quot;0a 00&quot;:&quot;9&quot;,\n        &quot;0b 00&quot;:&quot;0&quot;,\n        &quot;0c 00&quot;:&quot;-&quot;,\n        &quot;0d 00&quot;:&quot;=&quot;,\n        &quot;0e 00&quot;:&quot;Backspace&quot;,\n        &quot;0f 00&quot;:&quot;Tab&quot;,\n        &quot;10 00&quot;:&quot;Q&quot;,\n        &quot;11 00&quot;:&quot;W&quot;,\n        &quot;12 00&quot;:&quot;E&quot;,\n        &quot;13 00&quot;:&quot;R&quot;,\n        &quot;14 00&quot;:&quot;T&quot;,\n        &quot;15 00&quot;:&quot;Y&quot;,\n        &quot;16 00&quot;:&quot;U&quot;,\n        &quot;17 00&quot;:&quot;I&quot;,\n        &quot;18 00&quot;:&quot;O&quot;,\n        &quot;19 00&quot;:&quot;P&quot;,\n        &quot;1a 00&quot;:&quot;[&quot;,\n        &quot;1b 00&quot;:&quot;]&quot;,\n        &quot;1c 00&quot;:&quot;Enter&quot;,\n        &quot;1d 00&quot;:&quot;Left Ctrl&quot;,\n        &quot;1e 00&quot;:&quot;A&quot;,\n        &quot;1f 00&quot;:&quot;S&quot;,\n        &quot;20 00&quot;:&quot;D&quot;,\n        &quot;21 00&quot;:&quot;F&quot;,\n        &quot;22 00&quot;:&quot;G&quot;,\n        &quot;23 00&quot;:&quot;H&quot;,\n        &quot;24 00&quot;:&quot;J&quot;,\n        &quot;25 00&quot;:&quot;K&quot;,\n        &quot;26 00&quot;:&quot;L&quot;,\n        &quot;27 00&quot;:&quot;Semicolon&quot;,    #由评论区指出，键盘上的“;”应该用其他值代替，否则会与配置文本文件中的“;”混淆\n        &quot;28 00&quot;:&quot;&#39;&quot;,\n        &quot;29 00&quot;:&quot;`&quot;,\n        &quot;2a 00&quot;:&quot;Left Shift&quot;,\n        &quot;2b 00&quot;:&quot;\\\\&quot;,\n        &quot;2c 00&quot;:&quot;Z&quot;,\n        &quot;2d 00&quot;:&quot;X&quot;,\n        &quot;2e 00&quot;:&quot;C&quot;,\n        &quot;2f 00&quot;:&quot;V&quot;,\n        &quot;30 00&quot;:&quot;B&quot;,\n        &quot;31 00&quot;:&quot;N&quot;,\n        &quot;32 00&quot;:&quot;M&quot;,\n        &quot;33 00&quot;:&quot;,&quot;,\n        &quot;34 00&quot;:&quot;.&quot;,\n        &quot;35 00&quot;:&quot;/&quot;,\n        &quot;36 00&quot;:&quot;Right Shift&quot;,\n        &quot;37 00&quot;:&quot;n*&quot;,\n        &quot;38 00&quot;:&quot;Left Alt&quot;,\n        &quot;39 00&quot;:&quot;Space&quot;,\n        &quot;3a 00&quot;:&quot;Caps Lock&quot;,\n        &quot;3b 00&quot;:&quot;F1&quot;,\n        &quot;3c 00&quot;:&quot;F2&quot;,\n        &quot;3d 00&quot;:&quot;F3&quot;,\n        &quot;3e 00&quot;:&quot;F4&quot;,\n        &quot;3f 00&quot;:&quot;F5&quot;,\n        &quot;40 00&quot;:&quot;F6&quot;,\n        &quot;41 00&quot;:&quot;F7&quot;,\n        &quot;42 00&quot;:&quot;F8&quot;,\n        &quot;43 00&quot;:&quot;F9&quot;,\n        &quot;44 00&quot;:&quot;F10&quot;,\n        &quot;45 00&quot;:&quot;Num Lock&quot;,\n        &quot;46 00&quot;:&quot;Scroll Lock&quot;,\n        &quot;47 00&quot;:&quot;n7&quot;,\n        &quot;48 00&quot;:&quot;n8&quot;,\n        &quot;49 00&quot;:&quot;n9&quot;,\n        &quot;4a 00&quot;:&quot;n-&quot;,\n        &quot;4b 00&quot;:&quot;n4&quot;,\n        &quot;4c 00&quot;:&quot;n5&quot;,\n        &quot;4d 00&quot;:&quot;n6&quot;,\n        &quot;4e 00&quot;:&quot;n+&quot;,\n        &quot;4f 00&quot;:&quot;n1&quot;,\n        &quot;50 00&quot;:&quot;n2&quot;,\n        &quot;51 00&quot;:&quot;n3&quot;,\n        &quot;52 00&quot;:&quot;n0&quot;,\n        &quot;53 00&quot;:&quot;n.&quot;,\n        &quot;57 00&quot;:&quot;F11&quot;,\n        &quot;58 00&quot;:&quot;F12&quot;,\n\n        \n        &quot;1c e0&quot;:&quot;nEnter&quot;,\n        &quot;1d e0&quot;:&quot;Right Ctrl&quot;,\n        &quot;37 e0&quot;:&quot;PrtSc&quot;,\n        &quot;38 e0&quot;:&quot;Right Alt&quot;,\n        &quot;47 e0&quot;:&quot;Home&quot;,\n        &quot;48 e0&quot;:&quot;Up&quot;,\n        &quot;49 e0&quot;:&quot;Page Up&quot;,\n        &quot;4b e0&quot;:&quot;Left&quot;,\n        &quot;4d e0&quot;:&quot;Right&quot;,\n        &quot;4f e0&quot;:&quot;End&quot;,\n        &quot;50 e0&quot;:&quot;Down&quot;,\n        &quot;51 e0&quot;:&quot;Page Down&quot;,\n        &quot;52 e0&quot;:&quot;Insert&quot;,\n        &quot;53 e0&quot;:&quot;Delete&quot;,\n        &quot;5b e0&quot;:&quot;Left Windows&quot;,\n        &quot;5c e0&quot;:&quot;Right Windows&quot;,\n        &#125;\n\n    fun_key_dict = dict((m.upper(),n) for n,m in scan_code_dict.items())    #键值互换,键值全大写\n    content = &#39;00 00 00 00 00 00 00 00&#39;\n    \n    #用于暂时保存映射前后的键位，判断这次键位修改是否有风险\n    before_map_set = set()\n    after_map_set = set()\n\n    with open(sys.argv[1], encoding=&quot;utf-8&quot;) as f:\n        p = f.read().strip().split(&#39;;&#39;)\n        p.remove(&#39;&#39;)\n        content += &#39; &#123;:0&gt;2x&#125; 00 00 00&#39;.format(len(p)+1)\n        try:\n            for i in p:\n                if len(i.strip().split(&#39;:&#39;)) == 2:\n                    before_map_set.add(i.split(&#39;:&#39;)[0].strip().upper())\n                    after_map_set.add(i.split(&#39;:&#39;)[1].strip().upper())\n                    content += &#39; &#39;+fun_key_dict[i.split(&#39;:&#39;)[1].strip().upper()]+&#39; &#39;+fun_key_dict[i.split(&#39;:&#39;)[0].strip().upper()]\n                else:\n                    raise CountError\n            content += &#39; 00 00 00 00&#39;\n        except KeyError:\n            print(&quot;文件中键名称有误&quot;)\n            \n        except CountError:\n            print(&quot;文件中未按格式书写&quot;)\n        else:\n            if before_map_set != after_map_set:\n                run = input(&quot;此次键位替换存在风险，&#123;&#125;键功能将在键盘上无对应按键，是否继续？(输入y继续，否则退出程序)&quot;.format(str(before_map_set-after_map_set)[1:-1]))\n                if run != &#39;y&#39;:\n                    sys.exit()\n\n            if save_format == &quot;bat&quot;:\n                with open(&quot;layout_bat/&quot;+&#39;.&#39;.join(sys.argv[1].split(&#39;\\\\&#39;)[-1].split(&#39;.&#39;)[:-1])+&#39;.bat&#39;,&#39;w&#39;, encoding=&quot;utf-8&quot;) as g:\n                    g.write(&#39;@echo off\\nreg add &quot;hklm\\\\system\\\\currentcontrolset\\\\control\\\\keyboard layout&quot; /v &quot;ScanCode Map&quot; /t REG_BINARY /d &quot;&#123;&#125;&quot; /f\\necho &quot;键位已完成修改，重启系统后生效&quot;\\npause&#39;.format(&#39;&#39;.join(content.split())))\n                input(&quot;...\\n&#123;&#125;文件已生成至layout_bat目录下，右键以管理员身份执行该文件后重启系统生效。\\n按回车键退出程序...&quot;.format(&#39;.&#39;.join(sys.argv[1].split(&#39;\\\\&#39;)[-1].split(&#39;.&#39;)[:-1])+&#39;.&#39;+save_format))\n\n            else:\n                with open(&quot;layout_reg/&quot;+&#39;.&#39;.join(sys.argv[1].split(&#39;\\\\&#39;)[-1].split(&#39;.&#39;)[:-1])+&#39;.reg&#39;,&#39;w&#39;, encoding=&quot;utf-8&quot;) as g:\n                    g.write(&#39;Windows Registry Editor Version 5.00\\n[HKEY_LOCAL_MACHINE\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\Keyboard Layout]\\n&quot;ScanCode Map&quot;=hex:&#123;&#125;&#39;.format(&#39;,&#39;.join(content.split())))\n\n                input(&quot;...\\n&#123;&#125;文件已生成至layout_reg目录下，双击执行该文件后重启系统生效。\\n按回车键退出程序...&quot;.format(&#39;.&#39;.join(sys.argv[1].split(&#39;\\\\&#39;)[-1].split(&#39;.&#39;)[:-1])+&#39;.&#39;+save_format))\nelse:\n    input(&quot;传入参数错误，按回车键退出程序...&quot;)\n</code></pre>\n<p>另外通过此脚本生成的bat或reg文件可以将其保存好，在其他Windows系统电脑上可以直接执行并修改为你想要的键位，这样可以一次生成，多处适用！切勿用来恶作剧哦。</p>\n<p>关于键位布局：我用了一个多月的Dvorak和两个多月的Norman，刚开始练习使用新键位的一周非常痛苦和新鲜，适应之后在英文文章输入的确要快点，但不是很明显。如果是敲code的话，就没什么可比性了。考虑到种种因素（尤其是在用其他人设备时），所以最后还是回归了QWERTY键位。</p>\n<p>编辑于 2020-11-13 16:14</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/29581818\">https://zhuanlan.zhihu.com/p/29581818</a></p>\n"},{"title":"中学教育基础","date":"2023-03-02T05:32:12.000Z","_content":"\n\n","source":"_posts/zhongxuejiaoyujichu.md","raw":"---\ntitle: 中学教育基础\ndate: 2023-03-02 13:32:12\ncategories: 学习\ntags: 学习\n---\n\n\n","slug":"zhongxuejiaoyujichu","published":1,"updated":"2023-07-23T14:19:11.972Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkjdd1db004198aj7f4ve3z1","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"中学生认知与学习","date":"2023-02-28T10:07:09.000Z","_content":"# 中学生认知与学习\n\n## 第一课知识点\n\n### 心理学研究对象\n> 心理现象\n\n### 心理现象的结构\n\n> “思维”是认识过程的核心\n\n> “注意”不是一个独立的心里过程（不独立）\n\n> 气质 + 性格 = 人格\n\n| 心理过程 | 心理现象 | 说明     |   | 个性心理     | 特征         | 说明 |\n| :------- | :------- | :------- |:--| :----------- | :----------- | :--- |\n| 认识过程 | 感觉     | 个别属性 |   | 个性倾向性   | 动机         |      |\n|          | 知觉     | 整体属性 |   |              | 需要         |      |\n|          | 记忆     | 经历过   |   |              | 兴趣         |      |\n|          | 思维     | 本质     |   |              | 信念和世界观 |      |\n|          | 想想     | 新形象   |   | 个性心理特征 | 能力         | *    |\n| 情感过程 | 情感     | 态度体验 |   |              | 气质         | *    |\n| 意志过程 | 意志     | 目的     |   |              | 性格         | *    |\n\n## 心理学派\n\n1. 教育心理学之父 桑代克\n1. 科学心理学之父 冯特\n1. 发展心理学之父 普莱尔\n1. 华生 环境决定论 经典条件作用论\n1. 斯金纳 操作性条件作用论 强化论\n1. 班杜拉 社会学习理论 观察学习\n1. 格式塔学派 注重整体\n1. 科勒 顿悟说\n1. 精神分析 弗洛伊德  心理性欲\n1. 埃里克森（集大成者）心理社会\n1. 布鲁纳  认知发现 （课程改革）\n1. 奥苏伯尔 认知接受\n1. 加涅    认知理论（最早）\n1. 马斯洛  需要参差理论\n1. 罗杰斯  自由学习理论  有意义学习\n\n心理发展 \n\n> 个体随年龄增长而发生的心理结构和功能的积极变化，这种发展的总方向是成熟。\n\n心理结构\n\n> 心理学家一致假设人的心理是一个结构或者说结构化方向变化\n\n> 结构：各个组成部分相互联系、相互制约，故而成为一个整体。（心理现象的结构）\n\n> 功能：\n\n赫威斯特 十大心理成熟任务\n\n成熟论\n > 对格赛尔的尊重：\n >> 两个因素：成熟和学习。成熟更重要。\n > 心理发展由成熟预先决定\n\n > 实验：双子爬楼梯实验\n\n > 遵从成熟，不可拔苗助长\n\n皮亚杰关于儿童心理发展的本质\n\n发展的逻辑：\n> 不是起源于先天成熟，也不是后天的经验，而是起源于主体的动作。\n> 动作的本质是主体对客体的适应。\n> 适应的本质在于取得机体与环境的平衡\n> 适应是通过两种形式：同化于顺应\n> 适应的结果是平衡\n\n发展的机制\n\n同化——书\n> 同化是指主体将其所遇到的外部信息`直接纳入`到已现有的智力结构中去的过程。\n\n顺应——书\n> 顺应是指主体通过`调整`自己的智力结构，以使其与外界信息相适应的过程。\n\n平衡\n> 平衡是个体保持智力结构处于一种稳定的状态的内在倾向性。低水平的平衡-无法同化顺应不平衡-修正认知系统平衡\n\n\n\n\n\n","source":"_posts/zhongxueshenrenzhi.md","raw":"---\ntitle: 中学生认知与学习\ndate: 2023-02-28 18:07:09\ncategories: 学习\ntags: 学习\n---\n# 中学生认知与学习\n\n## 第一课知识点\n\n### 心理学研究对象\n> 心理现象\n\n### 心理现象的结构\n\n> “思维”是认识过程的核心\n\n> “注意”不是一个独立的心里过程（不独立）\n\n> 气质 + 性格 = 人格\n\n| 心理过程 | 心理现象 | 说明     |   | 个性心理     | 特征         | 说明 |\n| :------- | :------- | :------- |:--| :----------- | :----------- | :--- |\n| 认识过程 | 感觉     | 个别属性 |   | 个性倾向性   | 动机         |      |\n|          | 知觉     | 整体属性 |   |              | 需要         |      |\n|          | 记忆     | 经历过   |   |              | 兴趣         |      |\n|          | 思维     | 本质     |   |              | 信念和世界观 |      |\n|          | 想想     | 新形象   |   | 个性心理特征 | 能力         | *    |\n| 情感过程 | 情感     | 态度体验 |   |              | 气质         | *    |\n| 意志过程 | 意志     | 目的     |   |              | 性格         | *    |\n\n## 心理学派\n\n1. 教育心理学之父 桑代克\n1. 科学心理学之父 冯特\n1. 发展心理学之父 普莱尔\n1. 华生 环境决定论 经典条件作用论\n1. 斯金纳 操作性条件作用论 强化论\n1. 班杜拉 社会学习理论 观察学习\n1. 格式塔学派 注重整体\n1. 科勒 顿悟说\n1. 精神分析 弗洛伊德  心理性欲\n1. 埃里克森（集大成者）心理社会\n1. 布鲁纳  认知发现 （课程改革）\n1. 奥苏伯尔 认知接受\n1. 加涅    认知理论（最早）\n1. 马斯洛  需要参差理论\n1. 罗杰斯  自由学习理论  有意义学习\n\n心理发展 \n\n> 个体随年龄增长而发生的心理结构和功能的积极变化，这种发展的总方向是成熟。\n\n心理结构\n\n> 心理学家一致假设人的心理是一个结构或者说结构化方向变化\n\n> 结构：各个组成部分相互联系、相互制约，故而成为一个整体。（心理现象的结构）\n\n> 功能：\n\n赫威斯特 十大心理成熟任务\n\n成熟论\n > 对格赛尔的尊重：\n >> 两个因素：成熟和学习。成熟更重要。\n > 心理发展由成熟预先决定\n\n > 实验：双子爬楼梯实验\n\n > 遵从成熟，不可拔苗助长\n\n皮亚杰关于儿童心理发展的本质\n\n发展的逻辑：\n> 不是起源于先天成熟，也不是后天的经验，而是起源于主体的动作。\n> 动作的本质是主体对客体的适应。\n> 适应的本质在于取得机体与环境的平衡\n> 适应是通过两种形式：同化于顺应\n> 适应的结果是平衡\n\n发展的机制\n\n同化——书\n> 同化是指主体将其所遇到的外部信息`直接纳入`到已现有的智力结构中去的过程。\n\n顺应——书\n> 顺应是指主体通过`调整`自己的智力结构，以使其与外界信息相适应的过程。\n\n平衡\n> 平衡是个体保持智力结构处于一种稳定的状态的内在倾向性。低水平的平衡-无法同化顺应不平衡-修正认知系统平衡\n\n\n\n\n\n","slug":"zhongxueshenrenzhi","published":1,"updated":"2023-07-23T14:19:13.885Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkjdd1dd004398aj0ouic1et","content":"<h1 id=\"中学生认知与学习\"><a href=\"#中学生认知与学习\" class=\"headerlink\" title=\"中学生认知与学习\"></a>中学生认知与学习</h1><h2 id=\"第一课知识点\"><a href=\"#第一课知识点\" class=\"headerlink\" title=\"第一课知识点\"></a>第一课知识点</h2><h3 id=\"心理学研究对象\"><a href=\"#心理学研究对象\" class=\"headerlink\" title=\"心理学研究对象\"></a>心理学研究对象</h3><blockquote>\n<p>心理现象</p>\n</blockquote>\n<h3 id=\"心理现象的结构\"><a href=\"#心理现象的结构\" class=\"headerlink\" title=\"心理现象的结构\"></a>心理现象的结构</h3><blockquote>\n<p>“思维”是认识过程的核心</p>\n</blockquote>\n<blockquote>\n<p>“注意”不是一个独立的心里过程（不独立）</p>\n</blockquote>\n<blockquote>\n<p>气质 + 性格 &#x3D; 人格</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"left\">心理过程</th>\n<th align=\"left\">心理现象</th>\n<th align=\"left\">说明</th>\n<th align=\"left\"></th>\n<th align=\"left\">个性心理</th>\n<th align=\"left\">特征</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">认识过程</td>\n<td align=\"left\">感觉</td>\n<td align=\"left\">个别属性</td>\n<td align=\"left\"></td>\n<td align=\"left\">个性倾向性</td>\n<td align=\"left\">动机</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">知觉</td>\n<td align=\"left\">整体属性</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\">需要</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">记忆</td>\n<td align=\"left\">经历过</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\">兴趣</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">思维</td>\n<td align=\"left\">本质</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\">信念和世界观</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">想想</td>\n<td align=\"left\">新形象</td>\n<td align=\"left\"></td>\n<td align=\"left\">个性心理特征</td>\n<td align=\"left\">能力</td>\n<td align=\"left\">*</td>\n</tr>\n<tr>\n<td align=\"left\">情感过程</td>\n<td align=\"left\">情感</td>\n<td align=\"left\">态度体验</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\">气质</td>\n<td align=\"left\">*</td>\n</tr>\n<tr>\n<td align=\"left\">意志过程</td>\n<td align=\"left\">意志</td>\n<td align=\"left\">目的</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\">性格</td>\n<td align=\"left\">*</td>\n</tr>\n</tbody></table>\n<h2 id=\"心理学派\"><a href=\"#心理学派\" class=\"headerlink\" title=\"心理学派\"></a>心理学派</h2><ol>\n<li>教育心理学之父 桑代克</li>\n<li>科学心理学之父 冯特</li>\n<li>发展心理学之父 普莱尔</li>\n<li>华生 环境决定论 经典条件作用论</li>\n<li>斯金纳 操作性条件作用论 强化论</li>\n<li>班杜拉 社会学习理论 观察学习</li>\n<li>格式塔学派 注重整体</li>\n<li>科勒 顿悟说</li>\n<li>精神分析 弗洛伊德  心理性欲</li>\n<li>埃里克森（集大成者）心理社会</li>\n<li>布鲁纳  认知发现 （课程改革）</li>\n<li>奥苏伯尔 认知接受</li>\n<li>加涅    认知理论（最早）</li>\n<li>马斯洛  需要参差理论</li>\n<li>罗杰斯  自由学习理论  有意义学习</li>\n</ol>\n<p>心理发展 </p>\n<blockquote>\n<p>个体随年龄增长而发生的心理结构和功能的积极变化，这种发展的总方向是成熟。</p>\n</blockquote>\n<p>心理结构</p>\n<blockquote>\n<p>心理学家一致假设人的心理是一个结构或者说结构化方向变化</p>\n</blockquote>\n<blockquote>\n<p>结构：各个组成部分相互联系、相互制约，故而成为一个整体。（心理现象的结构）</p>\n</blockquote>\n<blockquote>\n<p>功能：</p>\n</blockquote>\n<p>赫威斯特 十大心理成熟任务</p>\n<p>成熟论</p>\n<blockquote>\n<p>对格赛尔的尊重：</p>\n<blockquote>\n<p>两个因素：成熟和学习。成熟更重要。<br>心理发展由成熟预先决定</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>实验：双子爬楼梯实验</p>\n</blockquote>\n<blockquote>\n<p>遵从成熟，不可拔苗助长</p>\n</blockquote>\n<p>皮亚杰关于儿童心理发展的本质</p>\n<p>发展的逻辑：</p>\n<blockquote>\n<p>不是起源于先天成熟，也不是后天的经验，而是起源于主体的动作。<br>动作的本质是主体对客体的适应。<br>适应的本质在于取得机体与环境的平衡<br>适应是通过两种形式：同化于顺应<br>适应的结果是平衡</p>\n</blockquote>\n<p>发展的机制</p>\n<p>同化——书</p>\n<blockquote>\n<p>同化是指主体将其所遇到的外部信息<code>直接纳入</code>到已现有的智力结构中去的过程。</p>\n</blockquote>\n<p>顺应——书</p>\n<blockquote>\n<p>顺应是指主体通过<code>调整</code>自己的智力结构，以使其与外界信息相适应的过程。</p>\n</blockquote>\n<p>平衡</p>\n<blockquote>\n<p>平衡是个体保持智力结构处于一种稳定的状态的内在倾向性。低水平的平衡-无法同化顺应不平衡-修正认知系统平衡</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"中学生认知与学习\"><a href=\"#中学生认知与学习\" class=\"headerlink\" title=\"中学生认知与学习\"></a>中学生认知与学习</h1><h2 id=\"第一课知识点\"><a href=\"#第一课知识点\" class=\"headerlink\" title=\"第一课知识点\"></a>第一课知识点</h2><h3 id=\"心理学研究对象\"><a href=\"#心理学研究对象\" class=\"headerlink\" title=\"心理学研究对象\"></a>心理学研究对象</h3><blockquote>\n<p>心理现象</p>\n</blockquote>\n<h3 id=\"心理现象的结构\"><a href=\"#心理现象的结构\" class=\"headerlink\" title=\"心理现象的结构\"></a>心理现象的结构</h3><blockquote>\n<p>“思维”是认识过程的核心</p>\n</blockquote>\n<blockquote>\n<p>“注意”不是一个独立的心里过程（不独立）</p>\n</blockquote>\n<blockquote>\n<p>气质 + 性格 &#x3D; 人格</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"left\">心理过程</th>\n<th align=\"left\">心理现象</th>\n<th align=\"left\">说明</th>\n<th align=\"left\"></th>\n<th align=\"left\">个性心理</th>\n<th align=\"left\">特征</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">认识过程</td>\n<td align=\"left\">感觉</td>\n<td align=\"left\">个别属性</td>\n<td align=\"left\"></td>\n<td align=\"left\">个性倾向性</td>\n<td align=\"left\">动机</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">知觉</td>\n<td align=\"left\">整体属性</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\">需要</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">记忆</td>\n<td align=\"left\">经历过</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\">兴趣</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">思维</td>\n<td align=\"left\">本质</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\">信念和世界观</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">想想</td>\n<td align=\"left\">新形象</td>\n<td align=\"left\"></td>\n<td align=\"left\">个性心理特征</td>\n<td align=\"left\">能力</td>\n<td align=\"left\">*</td>\n</tr>\n<tr>\n<td align=\"left\">情感过程</td>\n<td align=\"left\">情感</td>\n<td align=\"left\">态度体验</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\">气质</td>\n<td align=\"left\">*</td>\n</tr>\n<tr>\n<td align=\"left\">意志过程</td>\n<td align=\"left\">意志</td>\n<td align=\"left\">目的</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\">性格</td>\n<td align=\"left\">*</td>\n</tr>\n</tbody></table>\n<h2 id=\"心理学派\"><a href=\"#心理学派\" class=\"headerlink\" title=\"心理学派\"></a>心理学派</h2><ol>\n<li>教育心理学之父 桑代克</li>\n<li>科学心理学之父 冯特</li>\n<li>发展心理学之父 普莱尔</li>\n<li>华生 环境决定论 经典条件作用论</li>\n<li>斯金纳 操作性条件作用论 强化论</li>\n<li>班杜拉 社会学习理论 观察学习</li>\n<li>格式塔学派 注重整体</li>\n<li>科勒 顿悟说</li>\n<li>精神分析 弗洛伊德  心理性欲</li>\n<li>埃里克森（集大成者）心理社会</li>\n<li>布鲁纳  认知发现 （课程改革）</li>\n<li>奥苏伯尔 认知接受</li>\n<li>加涅    认知理论（最早）</li>\n<li>马斯洛  需要参差理论</li>\n<li>罗杰斯  自由学习理论  有意义学习</li>\n</ol>\n<p>心理发展 </p>\n<blockquote>\n<p>个体随年龄增长而发生的心理结构和功能的积极变化，这种发展的总方向是成熟。</p>\n</blockquote>\n<p>心理结构</p>\n<blockquote>\n<p>心理学家一致假设人的心理是一个结构或者说结构化方向变化</p>\n</blockquote>\n<blockquote>\n<p>结构：各个组成部分相互联系、相互制约，故而成为一个整体。（心理现象的结构）</p>\n</blockquote>\n<blockquote>\n<p>功能：</p>\n</blockquote>\n<p>赫威斯特 十大心理成熟任务</p>\n<p>成熟论</p>\n<blockquote>\n<p>对格赛尔的尊重：</p>\n<blockquote>\n<p>两个因素：成熟和学习。成熟更重要。<br>心理发展由成熟预先决定</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>实验：双子爬楼梯实验</p>\n</blockquote>\n<blockquote>\n<p>遵从成熟，不可拔苗助长</p>\n</blockquote>\n<p>皮亚杰关于儿童心理发展的本质</p>\n<p>发展的逻辑：</p>\n<blockquote>\n<p>不是起源于先天成熟，也不是后天的经验，而是起源于主体的动作。<br>动作的本质是主体对客体的适应。<br>适应的本质在于取得机体与环境的平衡<br>适应是通过两种形式：同化于顺应<br>适应的结果是平衡</p>\n</blockquote>\n<p>发展的机制</p>\n<p>同化——书</p>\n<blockquote>\n<p>同化是指主体将其所遇到的外部信息<code>直接纳入</code>到已现有的智力结构中去的过程。</p>\n</blockquote>\n<p>顺应——书</p>\n<blockquote>\n<p>顺应是指主体通过<code>调整</code>自己的智力结构，以使其与外界信息相适应的过程。</p>\n</blockquote>\n<p>平衡</p>\n<blockquote>\n<p>平衡是个体保持智力结构处于一种稳定的状态的内在倾向性。低水平的平衡-无法同化顺应不平衡-修正认知系统平衡</p>\n</blockquote>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clkjdd1am000498ajdpq69rec","category_id":"clkjdd1ar000698ajao6pgs9i","_id":"clkjdd1b4000h98aj5fxbenyw"},{"post_id":"clkjdd1at000998aj0dv1412d","category_id":"clkjdd1ay000c98ajciuhfrlw","_id":"clkjdd1b8000n98ajcuq57go2"},{"post_id":"clkjdd1b3000g98aj01b45ud0","category_id":"clkjdd1ay000c98ajciuhfrlw","_id":"clkjdd1bc000r98aj98kygx1l"},{"post_id":"clkjdd1b0000f98aj72j5bpa5","category_id":"clkjdd1b5000i98aj71e3gc5p","_id":"clkjdd1bf000u98aj9gyn95xi"},{"post_id":"clkjdd1bd000s98aj9iiwhmc2","category_id":"clkjdd1ay000c98ajciuhfrlw","_id":"clkjdd1bi000z98ajf7cgarw7"},{"post_id":"clkjdd1b5000k98aje7hl98bo","category_id":"clkjdd1b5000i98aj71e3gc5p","_id":"clkjdd1bl001498aja2dy47mu"},{"post_id":"clkjdd1be000t98ajeqle2yfg","category_id":"clkjdd1ay000c98ajciuhfrlw","_id":"clkjdd1bm001798aj41oc6kxb"},{"post_id":"clkjdd1bl001698ajdex1162b","category_id":"clkjdd1bj001298ajd7kl9tyq","_id":"clkjdd1br001e98ajaew3eq2e"},{"post_id":"clkjdd1bg000w98ajcbjz9f3d","category_id":"clkjdd1bj001298ajd7kl9tyq","_id":"clkjdd1bs001i98aj9dri8k0p"},{"post_id":"clkjdd1bp001b98ajghnt1w4j","category_id":"clkjdd1b5000i98aj71e3gc5p","_id":"clkjdd1bu001m98aj9or68iiz"},{"post_id":"clkjdd1bh000y98ajf0a84t2f","category_id":"clkjdd1bj001298ajd7kl9tyq","_id":"clkjdd1bx001q98ajh2wga4jt"},{"post_id":"clkjdd1bs001h98ajeygc787q","category_id":"clkjdd1b5000i98aj71e3gc5p","_id":"clkjdd1c2001s98aj1w0p5oyh"},{"post_id":"clkjdd1bn001998aj4nm1e1ap","category_id":"clkjdd1br001f98aj14ase5jz","_id":"clkjdd1c4001w98aj08861hbc"},{"post_id":"clkjdd1bt001l98aje67edn7v","category_id":"clkjdd1bj001298ajd7kl9tyq","_id":"clkjdd1c5001y98aj8szu67sc"},{"post_id":"clkjdd1bw001p98aj0qr8bq8x","category_id":"clkjdd1bj001298ajd7kl9tyq","_id":"clkjdd1c6002198ajejxkgbe5"},{"post_id":"clkjdd1bq001d98ajdpurdg5g","category_id":"clkjdd1br001f98aj14ase5jz","_id":"clkjdd1c8002498ajbijz7s65"},{"post_id":"clkjdd1c4001x98aj7w16blgx","category_id":"clkjdd1ay000c98ajciuhfrlw","_id":"clkjdd1ca002898ajgmlq2dl1"},{"post_id":"clkjdd1c7002398aj2v6rhte2","category_id":"clkjdd1ay000c98ajciuhfrlw","_id":"clkjdd1ce002d98aj24bqd7p7"},{"post_id":"clkjdd1c9002798aj3ep57bog","category_id":"clkjdd1ay000c98ajciuhfrlw","_id":"clkjdd1cf002g98aja2k89xdc"},{"post_id":"clkjdd1ca002a98aj0rhvffij","category_id":"clkjdd1c8002698aj5s08f3qj","_id":"clkjdd1ch002j98ajcx1r7iwm"},{"post_id":"clkjdd1c5002098ajbq1gfs4b","category_id":"clkjdd1c8002698aj5s08f3qj","_id":"clkjdd1ci002m98aj44sn12oy"},{"post_id":"clkjdd1cd002c98aj80veb0yu","category_id":"clkjdd1bj001298ajd7kl9tyq","_id":"clkjdd1cj002p98aj8bi90zok"},{"post_id":"clkjdd1cg002i98ajcx8j1o5l","category_id":"clkjdd1bj001298ajd7kl9tyq","_id":"clkjdd1ck002r98aj5nko74u5"},{"post_id":"clkjdd1ch002l98aj1ubr59i1","category_id":"clkjdd1bj001298ajd7kl9tyq","_id":"clkjdd1cn002u98aj6pa1a3ls"},{"post_id":"clkjdd1cj002o98aj3iiggtqc","category_id":"clkjdd1ay000c98ajciuhfrlw","_id":"clkjdd1co002w98aj527t5yq2"},{"post_id":"clkjdd1ck002q98aj16pgge9w","category_id":"clkjdd1ay000c98ajciuhfrlw","_id":"clkjdd1cp002y98ajhjikbk4a"},{"post_id":"clkjdd1cp002x98aj0slf30kp","category_id":"clkjdd1ay000c98ajciuhfrlw","_id":"clkjdd1cu003798ajayla1gsi"},{"post_id":"clkjdd1cq003198aj26y3erdd","category_id":"clkjdd1ay000c98ajciuhfrlw","_id":"clkjdd1cv003a98aj07xz5cjz"},{"post_id":"clkjdd1cr003398aj6ps3f7el","category_id":"clkjdd1bj001298ajd7kl9tyq","_id":"clkjdd1cx003d98aj8i8g77yd"},{"post_id":"clkjdd1cv003998aje33v59yi","category_id":"clkjdd1ay000c98ajciuhfrlw","_id":"clkjdd1d0003h98ajegsbcoyf"},{"post_id":"clkjdd1cx003c98aj0vfidp7p","category_id":"clkjdd1ay000c98ajciuhfrlw","_id":"clkjdd1d2003k98ajfga98ala"},{"post_id":"clkjdd1cy003e98ajctme6yr2","category_id":"clkjdd1bj001298ajd7kl9tyq","_id":"clkjdd1d4003o98ajayt8b4wu"},{"post_id":"clkjdd1d0003g98aj319pgyo2","category_id":"clkjdd1ar000698ajao6pgs9i","_id":"clkjdd1d5003r98ajcexu5v5m"},{"post_id":"clkjdd1d1003j98aj3e9xhd4a","category_id":"clkjdd1ay000c98ajciuhfrlw","_id":"clkjdd1d7003v98aj8scn1fbo"},{"post_id":"clkjdd1d2003n98aj6e725jyx","category_id":"clkjdd1ar000698ajao6pgs9i","_id":"clkjdd1da003y98aj81jq2g7x"},{"post_id":"clkjdd1d4003q98aj5zol4xg8","category_id":"clkjdd1ay000c98ajciuhfrlw","_id":"clkjdd1dc004298aj97zzauy5"},{"post_id":"clkjdd1d6003u98aj2qy4273t","category_id":"clkjdd1bj001298ajd7kl9tyq","_id":"clkjdd1de004498aj4otk4vqb"},{"post_id":"clkjdd1d9003x98aje27o58le","category_id":"clkjdd1bj001298ajd7kl9tyq","_id":"clkjdd1de004698aj48yj9bi9"},{"post_id":"clkjdd1db004198aj7f4ve3z1","category_id":"clkjdd1ay000c98ajciuhfrlw","_id":"clkjdd1df004898ajfba7atj6"},{"post_id":"clkjdd1dd004398aj0ouic1et","category_id":"clkjdd1ay000c98ajciuhfrlw","_id":"clkjdd1df004a98ajdfyifymh"}],"PostTag":[{"post_id":"clkjdd19y000098aj0sm073ww","tag_id":"clkjdd1ag000298aj39ddg7ko","_id":"clkjdd1at000898aj11on33py"},{"post_id":"clkjdd1am000498ajdpq69rec","tag_id":"clkjdd1as000798ajfl9a5sgg","_id":"clkjdd1b0000e98aj8yap424n"},{"post_id":"clkjdd1at000998aj0dv1412d","tag_id":"clkjdd1az000d98ajbqjgb5rg","_id":"clkjdd1b6000l98ajgf3g9edf"},{"post_id":"clkjdd1b0000f98aj72j5bpa5","tag_id":"clkjdd1b5000j98aj1hqo4tvq","_id":"clkjdd1bh000x98aj3lbq2fxc"},{"post_id":"clkjdd1b0000f98aj72j5bpa5","tag_id":"clkjdd1ba000q98aj2s14g2lu","_id":"clkjdd1bi001098aj1nszbl5u"},{"post_id":"clkjdd1b3000g98aj01b45ud0","tag_id":"clkjdd1bg000v98aj31uvbhx2","_id":"clkjdd1bl001598aj90ad4o4q"},{"post_id":"clkjdd1b5000k98aje7hl98bo","tag_id":"clkjdd1b5000j98aj1hqo4tvq","_id":"clkjdd1br001g98ajc7rca3kj"},{"post_id":"clkjdd1b5000k98aje7hl98bo","tag_id":"clkjdd1ba000q98aj2s14g2lu","_id":"clkjdd1bt001j98aja35z14jk"},{"post_id":"clkjdd1bd000s98aj9iiwhmc2","tag_id":"clkjdd1bp001c98aje3146yfn","_id":"clkjdd1bw001o98ajffibdgyd"},{"post_id":"clkjdd1be000t98ajeqle2yfg","tag_id":"clkjdd1bt001k98aj7uyd6do3","_id":"clkjdd1c3001u98aj2f0ych3k"},{"post_id":"clkjdd1bg000w98ajcbjz9f3d","tag_id":"clkjdd1c2001t98ajhjo7fbcs","_id":"clkjdd1c6002298aj8nopexzv"},{"post_id":"clkjdd1bh000y98ajf0a84t2f","tag_id":"clkjdd1c2001t98ajhjo7fbcs","_id":"clkjdd1ca002998aj2gyu1xas"},{"post_id":"clkjdd1bl001698ajdex1162b","tag_id":"clkjdd1c2001t98ajhjo7fbcs","_id":"clkjdd1ce002e98aj9pjxg1cx"},{"post_id":"clkjdd1bn001998aj4nm1e1ap","tag_id":"clkjdd1cb002b98aj4kub3wym","_id":"clkjdd1ch002k98aj6zdx4ajx"},{"post_id":"clkjdd1bp001b98ajghnt1w4j","tag_id":"clkjdd1c2001t98ajhjo7fbcs","_id":"clkjdd1cq003098ajgpugcbb4"},{"post_id":"clkjdd1bp001b98ajghnt1w4j","tag_id":"clkjdd1ci002n98aj8jay11om","_id":"clkjdd1cr003298aje73h5luw"},{"post_id":"clkjdd1bp001b98ajghnt1w4j","tag_id":"clkjdd1cm002s98ajf6532vyx","_id":"clkjdd1ct003598aje2x8b4tl"},{"post_id":"clkjdd1bq001d98ajdpurdg5g","tag_id":"clkjdd1cb002b98aj4kub3wym","_id":"clkjdd1cu003898aj6z00ft18"},{"post_id":"clkjdd1cy003e98ajctme6yr2","tag_id":"clkjdd1c2001t98ajhjo7fbcs","_id":"clkjdd1d1003i98aj3t1yawh2"},{"post_id":"clkjdd1bs001h98ajeygc787q","tag_id":"clkjdd1c2001t98ajhjo7fbcs","_id":"clkjdd1d2003m98aj6ntu3xa4"},{"post_id":"clkjdd1bs001h98ajeygc787q","tag_id":"clkjdd1ci002n98aj8jay11om","_id":"clkjdd1d4003p98ajbanh98i8"},{"post_id":"clkjdd1bs001h98ajeygc787q","tag_id":"clkjdd1cm002s98ajf6532vyx","_id":"clkjdd1d6003t98aj22es52bs"},{"post_id":"clkjdd1bt001l98aje67edn7v","tag_id":"clkjdd1c2001t98ajhjo7fbcs","_id":"clkjdd1d9003w98aj02w3ecwn"},{"post_id":"clkjdd1bw001p98aj0qr8bq8x","tag_id":"clkjdd1c2001t98ajhjo7fbcs","_id":"clkjdd1db004098aja1b2gy3b"},{"post_id":"clkjdd1c4001x98aj7w16blgx","tag_id":"clkjdd1da003z98ajc8gr4v2k","_id":"clkjdd1df004798aj9r0odnfr"},{"post_id":"clkjdd1c5002098ajbq1gfs4b","tag_id":"clkjdd1de004598ajgkb84oz0","_id":"clkjdd1df004b98aj43ue08es"},{"post_id":"clkjdd1c7002398aj2v6rhte2","tag_id":"clkjdd1da003z98ajc8gr4v2k","_id":"clkjdd1dg004d98aj543xa4go"},{"post_id":"clkjdd1c9002798aj3ep57bog","tag_id":"clkjdd1da003z98ajc8gr4v2k","_id":"clkjdd1dg004f98ajhybe40cx"},{"post_id":"clkjdd1ca002a98aj0rhvffij","tag_id":"clkjdd1c2001t98ajhjo7fbcs","_id":"clkjdd1di004i98aj9mcx8tsy"},{"post_id":"clkjdd1ca002a98aj0rhvffij","tag_id":"clkjdd1dg004e98aj945ef99a","_id":"clkjdd1di004j98aj382y90iw"},{"post_id":"clkjdd1ca002a98aj0rhvffij","tag_id":"clkjdd1de004598ajgkb84oz0","_id":"clkjdd1di004l98aj8maf4fj6"},{"post_id":"clkjdd1cd002c98aj80veb0yu","tag_id":"clkjdd1dh004h98aj98c6335k","_id":"clkjdd1di004m98ajd7i1fw64"},{"post_id":"clkjdd1cg002i98ajcx8j1o5l","tag_id":"clkjdd1di004k98aj95pfhkt2","_id":"clkjdd1dj004o98ajce3o62w7"},{"post_id":"clkjdd1ch002l98aj1ubr59i1","tag_id":"clkjdd1di004n98aj3dcu1eug","_id":"clkjdd1dk004s98ajddei4nio"},{"post_id":"clkjdd1ch002l98aj1ubr59i1","tag_id":"clkjdd1dj004p98aj1q28c5ox","_id":"clkjdd1dk004t98aj0768baji"},{"post_id":"clkjdd1ch002l98aj1ubr59i1","tag_id":"clkjdd1dj004q98aja8qub6pv","_id":"clkjdd1dk004v98ajbt7a05sf"},{"post_id":"clkjdd1cj002o98aj3iiggtqc","tag_id":"clkjdd1da003z98ajc8gr4v2k","_id":"clkjdd1dl004w98aj9zk4f5j8"},{"post_id":"clkjdd1ck002q98aj16pgge9w","tag_id":"clkjdd1dk004u98ajf2nehf9m","_id":"clkjdd1dl004y98aj21t39pzb"},{"post_id":"clkjdd1cp002x98aj0slf30kp","tag_id":"clkjdd1dl004x98aj936dhmie","_id":"clkjdd1dm005098aj7oafb9w9"},{"post_id":"clkjdd1cq003198aj26y3erdd","tag_id":"clkjdd1dl004x98aj936dhmie","_id":"clkjdd1dm005298aj8b3e49l1"},{"post_id":"clkjdd1cr003398aj6ps3f7el","tag_id":"clkjdd1dl004x98aj936dhmie","_id":"clkjdd1dn005498ajhm6pbi2c"},{"post_id":"clkjdd1cr003398aj6ps3f7el","tag_id":"clkjdd1c2001t98ajhjo7fbcs","_id":"clkjdd1dn005598ajgckfccc0"},{"post_id":"clkjdd1cv003998aje33v59yi","tag_id":"clkjdd1dl004x98aj936dhmie","_id":"clkjdd1dn005798aj13j68fxj"},{"post_id":"clkjdd1cx003c98aj0vfidp7p","tag_id":"clkjdd1dl004x98aj936dhmie","_id":"clkjdd1do005998ajh0bu7xgk"},{"post_id":"clkjdd1d0003g98aj319pgyo2","tag_id":"clkjdd1do005898aj3ueq3bq6","_id":"clkjdd1do005b98aj9f54c33o"},{"post_id":"clkjdd1d1003j98aj3e9xhd4a","tag_id":"clkjdd1do005a98aj0wxh8wq7","_id":"clkjdd1dq005e98aj61wf7a9f"},{"post_id":"clkjdd1d1003j98aj3e9xhd4a","tag_id":"clkjdd1do005898aj3ueq3bq6","_id":"clkjdd1dq005f98aj6l389d4h"},{"post_id":"clkjdd1d2003n98aj6e725jyx","tag_id":"clkjdd1do005898aj3ueq3bq6","_id":"clkjdd1dr005h98aj3elo411m"},{"post_id":"clkjdd1d4003q98aj5zol4xg8","tag_id":"clkjdd1dq005g98aj59nudz9e","_id":"clkjdd1ds005k98aj2cuka5e2"},{"post_id":"clkjdd1d4003q98aj5zol4xg8","tag_id":"clkjdd1dr005i98aj55asf82i","_id":"clkjdd1ds005l98ajhktu1jml"},{"post_id":"clkjdd1d6003u98aj2qy4273t","tag_id":"clkjdd1dr005j98aj8c865zd3","_id":"clkjdd1dt005o98aj0u8bgsm8"},{"post_id":"clkjdd1d6003u98aj2qy4273t","tag_id":"clkjdd1ds005m98ajehn03m7x","_id":"clkjdd1dt005p98aj31ysadwi"},{"post_id":"clkjdd1d9003x98aje27o58le","tag_id":"clkjdd1dg004e98aj945ef99a","_id":"clkjdd1du005s98aj1facdk6o"},{"post_id":"clkjdd1d9003x98aje27o58le","tag_id":"clkjdd1dl004x98aj936dhmie","_id":"clkjdd1du005t98ajfkpoebf1"},{"post_id":"clkjdd1db004198aj7f4ve3z1","tag_id":"clkjdd1du005r98aj6fbscvsz","_id":"clkjdd1dx005v98ajb6zif52p"},{"post_id":"clkjdd1dd004398aj0ouic1et","tag_id":"clkjdd1du005r98aj6fbscvsz","_id":"clkjdd1dx005w98ajd4o16g4s"}],"Tag":[{"name":"colour","_id":"clkjdd1ag000298aj39ddg7ko"},{"name":"STEAM","_id":"clkjdd1as000798ajfl9a5sgg"},{"name":"java","_id":"clkjdd1az000d98ajbqjgb5rg"},{"name":"arduino","_id":"clkjdd1b5000j98aj1hqo4tvq"},{"name":"CAD","_id":"clkjdd1ba000q98aj2s14g2lu"},{"name":"Blander","_id":"clkjdd1bg000v98aj31uvbhx2"},{"name":"hexo","_id":"clkjdd1bp001c98aje3146yfn"},{"name":"learn","_id":"clkjdd1bt001k98aj7uyd6do3"},{"name":"linux","_id":"clkjdd1c2001t98ajhjo7fbcs"},{"name":"标签","_id":"clkjdd1cb002b98aj4kub3wym"},{"name":"树莓派","_id":"clkjdd1ci002n98aj8jay11om"},{"name":"SSD1309","_id":"clkjdd1cm002s98ajf6532vyx"},{"name":"micro:bit","_id":"clkjdd1da003z98ajc8gr4v2k"},{"name":"mc","_id":"clkjdd1de004598ajgkb84oz0"},{"name":"windows","_id":"clkjdd1dg004e98aj945ef99a"},{"name":"nextcloud","_id":"clkjdd1dh004h98aj98c6335k"},{"name":"nginx","_id":"clkjdd1di004k98aj95pfhkt2"},{"name":"Node.js","_id":"clkjdd1di004n98aj3dcu1eug"},{"name":"Python","_id":"clkjdd1dj004p98aj1q28c5ox"},{"name":"Git","_id":"clkjdd1dj004q98aja8qub6pv"},{"name":"Novelai","_id":"clkjdd1dk004u98ajf2nehf9m"},{"name":"python","_id":"clkjdd1dl004x98aj936dhmie"},{"name":"STEAM社","_id":"clkjdd1do005898aj3ueq3bq6"},{"name":"领航杯","_id":"clkjdd1do005a98aj0wxh8wq7"},{"name":"VPN","_id":"clkjdd1dq005g98aj59nudz9e"},{"name":"网络","_id":"clkjdd1dr005i98aj55asf82i"},{"name":"VNC","_id":"clkjdd1dr005j98aj8c865zd3"},{"name":"GUI","_id":"clkjdd1ds005m98ajehn03m7x"},{"name":"学习","_id":"clkjdd1du005r98aj6fbscvsz"}]}}